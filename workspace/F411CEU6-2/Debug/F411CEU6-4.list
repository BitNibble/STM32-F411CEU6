
F411CEU6-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef98  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800f138  0800f138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1cc  0800f1cc  00011054  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1cc  0800f1cc  000101cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1d4  0800f1d4  00011054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1d4  0800f1d4  000101d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f1d8  0800f1d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800f1dc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ddc  20000054  0800f230  00011054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e30  0800f230  00011e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037c00  00000000  00000000  00011084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000418d  00000000  00000000  00048c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002438  00000000  00000000  0004ce18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b43  00000000  00000000  0004f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a427  00000000  00000000  00050d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f52d  00000000  00000000  0006b1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099128  00000000  00000000  0008a6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012380f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e70  00000000  00000000  00123854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0012d6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f120 	.word	0x0800f120

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	0800f120 	.word	0x0800f120

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <tim1_cc1_callback>:
/**
void tim1_u_callback(void){
	count1++;
}
**/
void tim1_cc1_callback(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	//count2++;
	//count8=tim1()->cnt->par.w0;
	gpioc()->instance->bsrr.par.resetpin_13 = 1;
 8000b70:	f00a f9c0 	bl	800aef4 <gpioc>
 8000b74:	4603      	mov	r3, r0
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	6993      	ldr	r3, [r2, #24]
 8000b7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b7e:	6193      	str	r3, [r2, #24]
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <tim1_cc2_callback>:
/**/
/**/
void tim1_cc2_callback(void){
 8000b84:	b598      	push	{r3, r4, r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	//count3++;
	tim1()->instance->ccr1.par.w0 += (cdir * 295);
 8000b88:	f00c fcfe 	bl	800d588 <tim1>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	8e93      	ldrh	r3, [r2, #52]	@ 0x34
 8000b92:	b299      	uxth	r1, r3
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <tim1_cc2_callback+0x88>)
 8000b96:	f993 3000 	ldrsb.w	r3, [r3]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	0100      	lsls	r0, r0, #4
 8000ba0:	1ac0      	subs	r0, r0, r3
 8000ba2:	0080      	lsls	r0, r0, #2
 8000ba4:	1ac3      	subs	r3, r0, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	0084      	lsls	r4, r0, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	4623      	mov	r3, r4
 8000bae:	4403      	add	r3, r0
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	440b      	add	r3, r1
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	8693      	strh	r3, [r2, #52]	@ 0x34
	if(tim1()->instance->ccr1.par.w0 > (tim1()->instance->ccr2.par.w0 - 100)){ cdir = -1; }
 8000bb8:	f00c fce6 	bl	800d588 <tim1>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	f1a3 0463 	sub.w	r4, r3, #99	@ 0x63
 8000bc8:	f00c fcde 	bl	800d588 <tim1>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	429c      	cmp	r4, r3
 8000bd6:	dc02      	bgt.n	8000bde <tim1_cc2_callback+0x5a>
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <tim1_cc2_callback+0x88>)
 8000bda:	22ff      	movs	r2, #255	@ 0xff
 8000bdc:	701a      	strb	r2, [r3, #0]
	if(tim1()->instance->ccr1.par.w0 < (1000 + 100)){ cdir = 1; }
 8000bde:	f00c fcd3 	bl	800d588 <tim1>
 8000be2:	4603      	mov	r3, r0
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	f240 424b 	movw	r2, #1099	@ 0x44b
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d802      	bhi.n	8000bf8 <tim1_cc2_callback+0x74>
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <tim1_cc2_callback+0x88>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
	//count8=tim1()->cnt->par.w0;
	gpioc()->instance->bsrr.par.setpin_13 = 1;
 8000bf8:	f00a f97c 	bl	800aef4 <gpioc>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	6993      	ldr	r3, [r2, #24]
 8000c02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c06:	6193      	str	r3, [r2, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	bd98      	pop	{r3, r4, r7, pc}
 8000c0c:	20000070 	.word	0x20000070

08000c10 <main>:
/**/

int main(void)
{
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	b0b5      	sub	sp, #212	@ 0xd4
 8000c14:	af04      	add	r7, sp, #16
  STM32FXXX_enable();
 8000c16:	f00a fa53 	bl	800b0c0 <STM32FXXX_enable>
  //rtc()->inic(1); // 1 - LSE 0 - LSI

  gpiob()->clock(on); // lcd0
 8000c1a:	f00a f94d 	bl	800aeb8 <gpiob>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2001      	movs	r0, #1
 8000c24:	4798      	blx	r3
  gpioc()->clock(on); // gpio13
 8000c26:	f00a f965 	bl	800aef4 <gpioc>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2001      	movs	r0, #1
 8000c30:	4798      	blx	r3
  gpioa()->clock(on); // timer 1 pwm af channel 1
 8000c32:	f00a f923 	bl	800ae7c <gpioa>
 8000c36:	4603      	mov	r3, r0
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	4798      	blx	r3


  i2c.Instance = (I2C_TypeDef*) i2c1_instance();
 8000c3e:	f00a f9bd 	bl	800afbc <i2c1_instance>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4aaf      	ldr	r2, [pc, #700]	@ (8000f04 <main+0x2f4>)
 8000c46:	6013      	str	r3, [r2, #0]

  //setup i2c io
  //rcc()->instance->apb1enr.par.i2c1en = 1;
  rcc_instance()->apb1enr.par.i2c1en = 1;
 8000c48:	f00a f9c2 	bl	800afd0 <rcc_instance>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000c50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
  //gpiob()->instance->pupdr.par.pin_7 = 1;

  //setup i2c parameters
  //i2c1_instance()->cr2.par.freq = query()->pclk1 / 1000000;
  //i2c1_instance()->trise.par.trise = (query()->pclk1 / 1000000) + 1;
  i2c.Init.ClockSpeed = 100000;
 8000c56:	4bab      	ldr	r3, [pc, #684]	@ (8000f04 <main+0x2f4>)
 8000c58:	4aab      	ldr	r2, [pc, #684]	@ (8000f08 <main+0x2f8>)
 8000c5a:	605a      	str	r2, [r3, #4]
  i2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c5c:	4ba9      	ldr	r3, [pc, #676]	@ (8000f04 <main+0x2f4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  i2c.Init.OwnAddress1 = 'A';
 8000c62:	4ba8      	ldr	r3, [pc, #672]	@ (8000f04 <main+0x2f4>)
 8000c64:	2241      	movs	r2, #65	@ 0x41
 8000c66:	60da      	str	r2, [r3, #12]
  i2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c68:	4ba6      	ldr	r3, [pc, #664]	@ (8000f04 <main+0x2f4>)
 8000c6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c6e:	611a      	str	r2, [r3, #16]
  i2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c70:	4ba4      	ldr	r3, [pc, #656]	@ (8000f04 <main+0x2f4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  i2c.Init.OwnAddress2 = 'A';
 8000c76:	4ba3      	ldr	r3, [pc, #652]	@ (8000f04 <main+0x2f4>)
 8000c78:	2241      	movs	r2, #65	@ 0x41
 8000c7a:	619a      	str	r2, [r3, #24]
  i2c.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8000c7c:	4ba1      	ldr	r3, [pc, #644]	@ (8000f04 <main+0x2f4>)
 8000c7e:	2240      	movs	r2, #64	@ 0x40
 8000c80:	61da      	str	r2, [r3, #28]
  i2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c82:	4ba0      	ldr	r3, [pc, #640]	@ (8000f04 <main+0x2f4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]

  //Initialise parameters
  if (HAL_I2C_Init(&i2c) != HAL_OK)
 8000c88:	489e      	ldr	r0, [pc, #632]	@ (8000f04 <main+0x2f4>)
 8000c8a:	f000 fbb3 	bl	80013f4 <HAL_I2C_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <main+0x88>
  {
	  Error_Handler();
 8000c94:	f000 f940 	bl	8000f18 <Error_Handler>
  }

  ARMLCD0_enable((GPIO_TypeDef*)gpiob()->instance);
 8000c98:	f00a f90e 	bl	800aeb8 <gpiob>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fd8e 	bl	80027c8 <ARMLCD0_enable>
  FUNC_enable();
 8000cac:	463b      	mov	r3, r7
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fd04 	bl	80016bc <FUNC_enable>

  //gpioc()->instance->moder.par.pin_1 = 1;
  gpioc()->instance->moder.par.pin_13 = 1;
 8000cb4:	f00a f91e 	bl	800aef4 <gpioc>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	6813      	ldr	r3, [r2, #0]
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	f361 639b 	bfi	r3, r1, #26, #2
 8000cc4:	6013      	str	r3, [r2, #0]

  stm()->tim1->nvic(1);
 8000cc6:	f00a fad3 	bl	800b270 <stm>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	4798      	blx	r3
  //stm()->tim1->nvic(17);
  stm()->tim1->clock(on);
 8000cd6:	f00a facb 	bl	800b270 <stm>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	4798      	blx	r3

  gpioa()->instance->afr.par.pin_7 = 1; // pin 7 af tim1ch1n
 8000ce6:	f00a f8c9 	bl	800ae7c <gpioa>
 8000cea:	4603      	mov	r3, r0
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	6a13      	ldr	r3, [r2, #32]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	f361 731f 	bfi	r3, r1, #28, #4
 8000cf6:	6213      	str	r3, [r2, #32]
  gpioa()->instance->afr.par.pin_8 = 1; // pin 8 af tim1ch1
 8000cf8:	f00a f8c0 	bl	800ae7c <gpioa>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000d02:	2101      	movs	r1, #1
 8000d04:	f361 0303 	bfi	r3, r1, #0, #4
 8000d08:	6253      	str	r3, [r2, #36]	@ 0x24
  gpioa()->instance->moder.par.pin_7 = 2; // AF enable
 8000d0a:	f00a f8b7 	bl	800ae7c <gpioa>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	6813      	ldr	r3, [r2, #0]
 8000d14:	2102      	movs	r1, #2
 8000d16:	f361 338f 	bfi	r3, r1, #14, #2
 8000d1a:	6013      	str	r3, [r2, #0]
  gpioa()->instance->moder.par.pin_8 = 2; // AF enable
 8000d1c:	f00a f8ae 	bl	800ae7c <gpioa>
 8000d20:	4603      	mov	r3, r0
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	6813      	ldr	r3, [r2, #0]
 8000d26:	2102      	movs	r1, #2
 8000d28:	f361 4311 	bfi	r3, r1, #16, #2
 8000d2c:	6013      	str	r3, [r2, #0]

  tim1()->instance->ccmr1.tim1and8_ocm_par.oc1m = 6;
 8000d2e:	f00c fc2b 	bl	800d588 <tim1>
 8000d32:	4603      	mov	r3, r0
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	6993      	ldr	r3, [r2, #24]
 8000d38:	2106      	movs	r1, #6
 8000d3a:	f361 1306 	bfi	r3, r1, #4, #3
 8000d3e:	6193      	str	r3, [r2, #24]
  //tim1()->instance->ccmr1.ocm_par.oc1m = 6;
  tim1()->instance->ccer.tim1and8_par.cc1ne = 1;
 8000d40:	f00c fc22 	bl	800d588 <tim1>
 8000d44:	4603      	mov	r3, r0
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	6a13      	ldr	r3, [r2, #32]
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6213      	str	r3, [r2, #32]
  tim1()->instance->ccer.tim1and8_par.cc1e = 1;
 8000d50:	f00c fc1a 	bl	800d588 <tim1>
 8000d54:	4603      	mov	r3, r0
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	6a13      	ldr	r3, [r2, #32]
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6213      	str	r3, [r2, #32]
  tim1()->instance->bdtr.tim1and8_par.moe = 1;
 8000d60:	f00c fc12 	bl	800d588 <tim1>
 8000d64:	4603      	mov	r3, r0
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8000d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d6e:	6453      	str	r3, [r2, #68]	@ 0x44
  tim1()->instance->arr.par.w0 = 0xFFFF;
 8000d70:	f00c fc0a 	bl	800d588 <tim1>
 8000d74:	4603      	mov	r3, r0
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d7c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  // Compare
  tim1()->instance->ccr1.par.w0 = 1000;
 8000d7e:	f00c fc03 	bl	800d588 <tim1>
 8000d82:	4603      	mov	r3, r0
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  tim1()->instance->ccr2.par.w0 = 60000;
 8000d8c:	f00c fbfc 	bl	800d588 <tim1>
 8000d90:	4603      	mov	r3, r0
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000d98:	871a      	strh	r2, [r3, #56]	@ 0x38
  // pre-scaler
  tim1()->instance->psc.par.w0 = 1;
 8000d9a:	f00c fbf5 	bl	800d588 <tim1>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2201      	movs	r2, #1
 8000da4:	851a      	strh	r2, [r3, #40]	@ 0x28
  // interrupt
  tim1()->instance->dier.tim1and8_par.cc1ie = 1;
 8000da6:	f00c fbef 	bl	800d588 <tim1>
 8000daa:	4603      	mov	r3, r0
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68d3      	ldr	r3, [r2, #12]
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	60d3      	str	r3, [r2, #12]
  tim1()->instance->dier.tim1and8_par.cc2ie = 1;
 8000db6:	f00c fbe7 	bl	800d588 <tim1>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68d3      	ldr	r3, [r2, #12]
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	60d3      	str	r3, [r2, #12]
  //
  //tim1()->instance->dier.tim1and8_par.ude = 1;
  //tim1()->instance->dier.tim1and8_par.cc1de = 1;

  // Enable (Start/Stop)
  tim1()->instance->cr1.tim1and8_par.arpe = 1;
 8000dc6:	f00c fbdf 	bl	800d588 <tim1>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	6813      	ldr	r3, [r2, #0]
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd4:	6013      	str	r3, [r2, #0]
  tim1()->instance->cr1.tim1and8_par.cen = 1;
 8000dd6:	f00c fbd7 	bl	800d588 <tim1>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	6813      	ldr	r3, [r2, #0]
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6013      	str	r3, [r2, #0]
  //rtc()->Month(1);
  //rtc()->Day(1);
  //rtc()->Hour(12);
  //rtc()->Minute(0);
  //rtc()->Second(0);
  cdir = 1;
 8000de6:	4b49      	ldr	r3, [pc, #292]	@ (8000f0c <main+0x2fc>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]

  //stm()->rtc->BckWrite(2,33);

  while (1)
  {
	  lcd0()->gotoxy(0,0);
 8000dec:	f001 fd42 	bl	8002874 <lcd0>
 8000df0:	4603      	mov	r3, r0
 8000df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df4:	2100      	movs	r1, #0
 8000df6:	2000      	movs	r0, #0
 8000df8:	4798      	blx	r3
	  lcd0()->string_size(func()->ui32toa(TIM1->ARR),6); lcd0()->string_size(func()->ui32toa(tim1()->instance->ccr1.par.w0),6); lcd0()->string_size(func()->ui32toa(TIM1->CCR2),6);
 8000dfa:	f001 fd3b 	bl	8002874 <lcd0>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	699c      	ldr	r4, [r3, #24]
 8000e02:	f000 fd17 	bl	8001834 <func>
 8000e06:	4603      	mov	r3, r0
 8000e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0a:	4a41      	ldr	r2, [pc, #260]	@ (8000f10 <main+0x300>)
 8000e0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4798      	blx	r3
 8000e12:	4603      	mov	r3, r0
 8000e14:	2106      	movs	r1, #6
 8000e16:	4618      	mov	r0, r3
 8000e18:	47a0      	blx	r4
 8000e1a:	f001 fd2b 	bl	8002874 <lcd0>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	699c      	ldr	r4, [r3, #24]
 8000e22:	f000 fd07 	bl	8001834 <func>
 8000e26:	4603      	mov	r3, r0
 8000e28:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8000e2a:	f00c fbad 	bl	800d588 <tim1>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	47a8      	blx	r5
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2106      	movs	r1, #6
 8000e3e:	4618      	mov	r0, r3
 8000e40:	47a0      	blx	r4
 8000e42:	f001 fd17 	bl	8002874 <lcd0>
 8000e46:	4603      	mov	r3, r0
 8000e48:	699c      	ldr	r4, [r3, #24]
 8000e4a:	f000 fcf3 	bl	8001834 <func>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	4a2f      	ldr	r2, [pc, #188]	@ (8000f10 <main+0x300>)
 8000e54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000e56:	4610      	mov	r0, r2
 8000e58:	4798      	blx	r3
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2106      	movs	r1, #6
 8000e5e:	4618      	mov	r0, r3
 8000e60:	47a0      	blx	r4

	  //lcd0()->gotoxy(1,0);
	  //lcd0()->string_size(func()->ui32toa(count1),6); lcd0()->string_size(func()->i32toa(count2),6); lcd0()->string_size(func()->i32toa(count3),6);

	  lcd0()->gotoxy(2,0);
 8000e62:	f001 fd07 	bl	8002874 <lcd0>
 8000e66:	4603      	mov	r3, r0
 8000e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	4798      	blx	r3
	  //lcd0()->string_size(func()->ui32toa(count4),6); lcd0()->string_size(func()->i32toa(count5),6); lcd0()->string_size(func()->i32toa(count6),6);
	  //lcd0()->string_size(func()->print_binary(16,tim1()->cr1->reg),17);
	  rtc()->tr2vec(vecT);
 8000e70:	f00b fa48 	bl	800c304 <rtc>
 8000e74:	4603      	mov	r3, r0
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4798      	blx	r3
	  lcd0()->string_size(func()->print_v2("hora: %d%d:%d%d:%d%d", vecT[0],vecT[1],vecT[2],vecT[3],vecT[4],vecT[5]),14);
 8000e80:	f001 fcf8 	bl	8002874 <lcd0>
 8000e84:	4603      	mov	r3, r0
 8000e86:	699c      	ldr	r4, [r3, #24]
 8000e88:	f000 fcd4 	bl	8001834 <func>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8000e90:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8000e94:	4618      	mov	r0, r3
 8000e96:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8000e9a:	461e      	mov	r6, r3
 8000e9c:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 8000ea0:	469c      	mov	ip, r3
 8000ea2:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8000ea6:	f897 20bc 	ldrb.w	r2, [r7, #188]	@ 0xbc
 8000eaa:	f897 10bd 	ldrb.w	r1, [r7, #189]	@ 0xbd
 8000eae:	9102      	str	r1, [sp, #8]
 8000eb0:	9201      	str	r2, [sp, #4]
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	4663      	mov	r3, ip
 8000eb6:	4632      	mov	r2, r6
 8000eb8:	4601      	mov	r1, r0
 8000eba:	4816      	ldr	r0, [pc, #88]	@ (8000f14 <main+0x304>)
 8000ebc:	47a8      	blx	r5
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	210e      	movs	r1, #14
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	47a0      	blx	r4

	  lcd0()->gotoxy(3,0);
 8000ec6:	f001 fcd5 	bl	8002874 <lcd0>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	4798      	blx	r3
	  //lcd0()->string_size(func()->ui32toa(count4),6); lcd0()->string_size(func()->ui32toa(count5),6); lcd0()->string_size(func()->ui32toa(count7),6);
	  //lcd0()->string_size(func()->print_v2("pclk1: %d", query()->pclk1()),14);
	  lcd0()->string(func()->i32toa(stm()->rtc->BckRead(2)));
 8000ed4:	f001 fcce 	bl	8002874 <lcd0>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	695c      	ldr	r4, [r3, #20]
 8000edc:	f000 fcaa 	bl	8001834 <func>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8000ee4:	f00a f9c4 	bl	800b270 <stm>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4798      	blx	r3
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	47a8      	blx	r5
 8000efa:	4603      	mov	r3, r0
 8000efc:	4618      	mov	r0, r3
 8000efe:	47a0      	blx	r4
	  lcd0()->gotoxy(0,0);
 8000f00:	bf00      	nop
 8000f02:	e773      	b.n	8000dec <main+0x1dc>
 8000f04:	20000074 	.word	0x20000074
 8000f08:	000186a0 	.word	0x000186a0
 8000f0c:	20000070 	.word	0x20000070
 8000f10:	40010000 	.word	0x40010000
 8000f14:	0800f138 	.word	0x0800f138

08000f18 <Error_Handler>:
  }
}
/*** END MAIN ***/

void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  __disable_irq();
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <Error_Handler+0x8>

08000f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a19      	ldr	r2, [pc, #100]	@ (8000fa8 <HAL_I2C_MspInit+0x84>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12b      	bne.n	8000f9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f62:	23c0      	movs	r3, #192	@ 0xc0
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f66:	2312      	movs	r3, #18
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f72:	2304      	movs	r3, #4
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <HAL_I2C_MspInit+0x8c>)
 8000f7e:	f000 f8b5 	bl	80010ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	@ 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <NMI_Handler+0x4>

08000fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f00d fb38 	bl	800e6ac <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20020000 	.word	0x20020000
 8001068:	00000400 	.word	0x00000400
 800106c:	200000c8 	.word	0x200000c8
 8001070:	20000e30 	.word	0x20000e30

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800109c:	f7ff ffea 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	@ (80010d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	@ (80010e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f00d faf7 	bl	800e6b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fda1 	bl	8000c10 <main>
  bx  lr    
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80010dc:	0800f1dc 	.word	0x0800f1dc
  ldr r2, =_sbss
 80010e0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80010e4:	20000e30 	.word	0x20000e30

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	e159      	b.n	80013bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8148 	bne.w	80013b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b01      	cmp	r3, #1
 8001130:	d005      	beq.n	800113e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	2b02      	cmp	r3, #2
 800113c:	d130      	bne.n	80011a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f003 0201 	and.w	r2, r3, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d017      	beq.n	80011dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d123      	bne.n	8001230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	69b9      	ldr	r1, [r7, #24]
 800122c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0203 	and.w	r2, r3, #3
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80a2 	beq.w	80013b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b57      	ldr	r3, [pc, #348]	@ (80013d4 <HAL_GPIO_Init+0x2e8>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a56      	ldr	r2, [pc, #344]	@ (80013d4 <HAL_GPIO_Init+0x2e8>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b54      	ldr	r3, [pc, #336]	@ (80013d4 <HAL_GPIO_Init+0x2e8>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128e:	4a52      	ldr	r2, [pc, #328]	@ (80013d8 <HAL_GPIO_Init+0x2ec>)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a49      	ldr	r2, [pc, #292]	@ (80013dc <HAL_GPIO_Init+0x2f0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_GPIO_Init+0x202>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a48      	ldr	r2, [pc, #288]	@ (80013e0 <HAL_GPIO_Init+0x2f4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x1fe>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a47      	ldr	r2, [pc, #284]	@ (80013e4 <HAL_GPIO_Init+0x2f8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x1fa>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a46      	ldr	r2, [pc, #280]	@ (80013e8 <HAL_GPIO_Init+0x2fc>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x1f6>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a45      	ldr	r2, [pc, #276]	@ (80013ec <HAL_GPIO_Init+0x300>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x1f2>
 80012da:	2304      	movs	r3, #4
 80012dc:	e008      	b.n	80012f0 <HAL_GPIO_Init+0x204>
 80012de:	2307      	movs	r3, #7
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x204>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x204>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x204>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x204>
 80012ee:	2300      	movs	r3, #0
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001300:	4935      	ldr	r1, [pc, #212]	@ (80013d8 <HAL_GPIO_Init+0x2ec>)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001332:	4a2f      	ldr	r2, [pc, #188]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001338:	4b2d      	ldr	r3, [pc, #180]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800135c:	4a24      	ldr	r2, [pc, #144]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001386:	4a1a      	ldr	r2, [pc, #104]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b0:	4a0f      	ldr	r2, [pc, #60]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	f67f aea2 	bls.w	8001108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3724      	adds	r7, #36	@ 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40013800 	.word	0x40013800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020c00 	.word	0x40020c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40013c00 	.word	0x40013c00

080013f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e12b      	b.n	800165e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fd82 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2224      	movs	r2, #36	@ 0x24
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001458:	f000 f91c 	bl	8001694 <HAL_RCC_GetPCLK1Freq>
 800145c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a81      	ldr	r2, [pc, #516]	@ (8001668 <HAL_I2C_Init+0x274>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d807      	bhi.n	8001478 <HAL_I2C_Init+0x84>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a80      	ldr	r2, [pc, #512]	@ (800166c <HAL_I2C_Init+0x278>)
 800146c:	4293      	cmp	r3, r2
 800146e:	bf94      	ite	ls
 8001470:	2301      	movls	r3, #1
 8001472:	2300      	movhi	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	e006      	b.n	8001486 <HAL_I2C_Init+0x92>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4a7d      	ldr	r2, [pc, #500]	@ (8001670 <HAL_I2C_Init+0x27c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	bf94      	ite	ls
 8001480:	2301      	movls	r3, #1
 8001482:	2300      	movhi	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0e7      	b.n	800165e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4a78      	ldr	r2, [pc, #480]	@ (8001674 <HAL_I2C_Init+0x280>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0c9b      	lsrs	r3, r3, #18
 8001498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001668 <HAL_I2C_Init+0x274>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d802      	bhi.n	80014c8 <HAL_I2C_Init+0xd4>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	e009      	b.n	80014dc <HAL_I2C_Init+0xe8>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	4a69      	ldr	r2, [pc, #420]	@ (8001678 <HAL_I2C_Init+0x284>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	3301      	adds	r3, #1
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	495c      	ldr	r1, [pc, #368]	@ (8001668 <HAL_I2C_Init+0x274>)
 80014f8:	428b      	cmp	r3, r1
 80014fa:	d819      	bhi.n	8001530 <HAL_I2C_Init+0x13c>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e59      	subs	r1, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fbb1 f3f3 	udiv	r3, r1, r3
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001510:	400b      	ands	r3, r1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00a      	beq.n	800152c <HAL_I2C_Init+0x138>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1e59      	subs	r1, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fbb1 f3f3 	udiv	r3, r1, r3
 8001524:	3301      	adds	r3, #1
 8001526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152a:	e051      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 800152c:	2304      	movs	r3, #4
 800152e:	e04f      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d111      	bne.n	800155c <HAL_I2C_Init+0x168>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1e58      	subs	r0, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6859      	ldr	r1, [r3, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	440b      	add	r3, r1
 8001546:	fbb0 f3f3 	udiv	r3, r0, r3
 800154a:	3301      	adds	r3, #1
 800154c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	e012      	b.n	8001582 <HAL_I2C_Init+0x18e>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e58      	subs	r0, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	0099      	lsls	r1, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001572:	3301      	adds	r3, #1
 8001574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Init+0x196>
 8001586:	2301      	movs	r3, #1
 8001588:	e022      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10e      	bne.n	80015b0 <HAL_I2C_Init+0x1bc>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1e58      	subs	r0, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6859      	ldr	r1, [r3, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	440b      	add	r3, r1
 80015a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a4:	3301      	adds	r3, #1
 80015a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ae:	e00f      	b.n	80015d0 <HAL_I2C_Init+0x1dc>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1e58      	subs	r0, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	0099      	lsls	r1, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c6:	3301      	adds	r3, #1
 80015c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	6809      	ldr	r1, [r1, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6911      	ldr	r1, [r2, #16]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68d2      	ldr	r2, [r2, #12]
 800160a:	4311      	orrs	r1, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	430b      	orrs	r3, r1
 8001612:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2220      	movs	r2, #32
 800164a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	000186a0 	.word	0x000186a0
 800166c:	001e847f 	.word	0x001e847f
 8001670:	003d08ff 	.word	0x003d08ff
 8001674:	431bde83 	.word	0x431bde83
 8001678:	10624dd3 	.word	0x10624dd3

0800167c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <HAL_RCC_GetHCLKFreq+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000000 	.word	0x20000000

08001694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001698:	f7ff fff0 	bl	800167c <HAL_RCC_GetHCLKFreq>
 800169c:	4602      	mov	r2, r0
 800169e:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	0a9b      	lsrs	r3, r3, #10
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	4903      	ldr	r1, [pc, #12]	@ (80016b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016aa:	5ccb      	ldrb	r3, [r1, r3]
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	0800f190 	.word	0x0800f190

080016bc <FUNC_enable>:
/*** COMMON ***/
void FUNC_var(void);

/*** FUNC Procedure & Function Definition ***/
FUNC FUNC_enable( void )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	FUNC_var();
 80016c4:	f000 f8c0 	bl	8001848 <FUNC_var>
	/*** TOP ***/
	setup_func.stringlength = function_StringLength;
 80016c8:	4b39      	ldr	r3, [pc, #228]	@ (80017b0 <FUNC_enable+0xf4>)
 80016ca:	4a3a      	ldr	r2, [pc, #232]	@ (80017b4 <FUNC_enable+0xf8>)
 80016cc:	609a      	str	r2, [r3, #8]
	setup_func.reverse = function_Reverse;
 80016ce:	4b38      	ldr	r3, [pc, #224]	@ (80017b0 <FUNC_enable+0xf4>)
 80016d0:	4a39      	ldr	r2, [pc, #228]	@ (80017b8 <FUNC_enable+0xfc>)
 80016d2:	60da      	str	r2, [r3, #12]
	setup_func.swap = function_swap;
 80016d4:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <FUNC_enable+0xf4>)
 80016d6:	4a39      	ldr	r2, [pc, #228]	@ (80017bc <FUNC_enable+0x100>)
 80016d8:	615a      	str	r2, [r3, #20]
	/***********/
	// 1
	setup_func.SwapByte = function_SwapByte;
 80016da:	4b35      	ldr	r3, [pc, #212]	@ (80017b0 <FUNC_enable+0xf4>)
 80016dc:	4a38      	ldr	r2, [pc, #224]	@ (80017c0 <FUNC_enable+0x104>)
 80016de:	605a      	str	r2, [r3, #4]
	// 2
	setup_func.copy = function_copy;
 80016e0:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <FUNC_enable+0xf4>)
 80016e2:	4a38      	ldr	r2, [pc, #224]	@ (80017c4 <FUNC_enable+0x108>)
 80016e4:	619a      	str	r2, [r3, #24]
	setup_func.squeeze = function_squeeze;
 80016e6:	4b32      	ldr	r3, [pc, #200]	@ (80017b0 <FUNC_enable+0xf4>)
 80016e8:	4a37      	ldr	r2, [pc, #220]	@ (80017c8 <FUNC_enable+0x10c>)
 80016ea:	61da      	str	r2, [r3, #28]
	setup_func.shellsort = function_shellsort;
 80016ec:	4b30      	ldr	r3, [pc, #192]	@ (80017b0 <FUNC_enable+0xf4>)
 80016ee:	4a37      	ldr	r2, [pc, #220]	@ (80017cc <FUNC_enable+0x110>)
 80016f0:	621a      	str	r2, [r3, #32]
	setup_func.resizestr = function_resizestr;
 80016f2:	4b2f      	ldr	r3, [pc, #188]	@ (80017b0 <FUNC_enable+0xf4>)
 80016f4:	4a36      	ldr	r2, [pc, #216]	@ (80017d0 <FUNC_enable+0x114>)
 80016f6:	625a      	str	r2, [r3, #36]	@ 0x24
	setup_func.trim = function_trim;
 80016f8:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <FUNC_enable+0xf4>)
 80016fa:	4a36      	ldr	r2, [pc, #216]	@ (80017d4 <FUNC_enable+0x118>)
 80016fc:	629a      	str	r2, [r3, #40]	@ 0x28
	// 3
	setup_func.bcd2dec = function_bcd2dec;
 80016fe:	4b2c      	ldr	r3, [pc, #176]	@ (80017b0 <FUNC_enable+0xf4>)
 8001700:	4a35      	ldr	r2, [pc, #212]	@ (80017d8 <FUNC_enable+0x11c>)
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c
	setup_func.dec2bcd = function_dec2bcd;
 8001704:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <FUNC_enable+0xf4>)
 8001706:	4a35      	ldr	r2, [pc, #212]	@ (80017dc <FUNC_enable+0x120>)
 8001708:	631a      	str	r2, [r3, #48]	@ 0x30
	setup_func.dectohex = function_dectohex;
 800170a:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <FUNC_enable+0xf4>)
 800170c:	4a34      	ldr	r2, [pc, #208]	@ (80017e0 <FUNC_enable+0x124>)
 800170e:	635a      	str	r2, [r3, #52]	@ 0x34
	setup_func.bcd2bin = function_bcd2bin;
 8001710:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <FUNC_enable+0xf4>)
 8001712:	4a34      	ldr	r2, [pc, #208]	@ (80017e4 <FUNC_enable+0x128>)
 8001714:	639a      	str	r2, [r3, #56]	@ 0x38
	setup_func.twocomptoint8bit = function_twocomptoint8bit;
 8001716:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <FUNC_enable+0xf4>)
 8001718:	4a33      	ldr	r2, [pc, #204]	@ (80017e8 <FUNC_enable+0x12c>)
 800171a:	63da      	str	r2, [r3, #60]	@ 0x3c
	setup_func.twocomptoint10bit = function_twocomptoint10bit;
 800171c:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <FUNC_enable+0xf4>)
 800171e:	4a33      	ldr	r2, [pc, #204]	@ (80017ec <FUNC_enable+0x130>)
 8001720:	641a      	str	r2, [r3, #64]	@ 0x40
	setup_func.twocomptointnbit = function_twocomptointnbit;
 8001722:	4b23      	ldr	r3, [pc, #140]	@ (80017b0 <FUNC_enable+0xf4>)
 8001724:	4a32      	ldr	r2, [pc, #200]	@ (80017f0 <FUNC_enable+0x134>)
 8001726:	645a      	str	r2, [r3, #68]	@ 0x44
	// 4
	setup_func.print_v1 = function_print_v1;
 8001728:	4b21      	ldr	r3, [pc, #132]	@ (80017b0 <FUNC_enable+0xf4>)
 800172a:	4a32      	ldr	r2, [pc, #200]	@ (80017f4 <FUNC_enable+0x138>)
 800172c:	649a      	str	r2, [r3, #72]	@ 0x48
	setup_func.print_v2 = function_print_v2;
 800172e:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <FUNC_enable+0xf4>)
 8001730:	4a31      	ldr	r2, [pc, #196]	@ (80017f8 <FUNC_enable+0x13c>)
 8001732:	64da      	str	r2, [r3, #76]	@ 0x4c
	setup_func.print_binary = function_print_binary;
 8001734:	4b1e      	ldr	r3, [pc, #120]	@ (80017b0 <FUNC_enable+0xf4>)
 8001736:	4a31      	ldr	r2, [pc, #196]	@ (80017fc <FUNC_enable+0x140>)
 8001738:	651a      	str	r2, [r3, #80]	@ 0x50
	// 5
	setup_func.i16toa = function_i16toa;
 800173a:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <FUNC_enable+0xf4>)
 800173c:	4a30      	ldr	r2, [pc, #192]	@ (8001800 <FUNC_enable+0x144>)
 800173e:	655a      	str	r2, [r3, #84]	@ 0x54
	setup_func.ui16toa = function_ui16toa;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <FUNC_enable+0xf4>)
 8001742:	4a30      	ldr	r2, [pc, #192]	@ (8001804 <FUNC_enable+0x148>)
 8001744:	659a      	str	r2, [r3, #88]	@ 0x58
	setup_func.i32toa = function_i32toa;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <FUNC_enable+0xf4>)
 8001748:	4a2f      	ldr	r2, [pc, #188]	@ (8001808 <FUNC_enable+0x14c>)
 800174a:	65da      	str	r2, [r3, #92]	@ 0x5c
	setup_func.ui32toa = FUNCui32toa;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <FUNC_enable+0xf4>)
 800174e:	4a2f      	ldr	r2, [pc, #188]	@ (800180c <FUNC_enable+0x150>)
 8001750:	661a      	str	r2, [r3, #96]	@ 0x60
	setup_func.ftoa = function_ftoa;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <FUNC_enable+0xf4>)
 8001754:	4a2e      	ldr	r2, [pc, #184]	@ (8001810 <FUNC_enable+0x154>)
 8001756:	665a      	str	r2, [r3, #100]	@ 0x64

	// 6
	setup_func.trimmer = function_trimmer;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <FUNC_enable+0xf4>)
 800175a:	4a2e      	ldr	r2, [pc, #184]	@ (8001814 <FUNC_enable+0x158>)
 800175c:	66da      	str	r2, [r3, #108]	@ 0x6c
	setup_func.pmax = function_pmax;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <FUNC_enable+0xf4>)
 8001760:	4a2d      	ldr	r2, [pc, #180]	@ (8001818 <FUNC_enable+0x15c>)
 8001762:	671a      	str	r2, [r3, #112]	@ 0x70
	setup_func.gcd_v1 = function_gcd_v1;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <FUNC_enable+0xf4>)
 8001766:	4a2d      	ldr	r2, [pc, #180]	@ (800181c <FUNC_enable+0x160>)
 8001768:	675a      	str	r2, [r3, #116]	@ 0x74
	setup_func.gcd_v2 = function_gcd_v2;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <FUNC_enable+0xf4>)
 800176c:	4a2c      	ldr	r2, [pc, #176]	@ (8001820 <FUNC_enable+0x164>)
 800176e:	679a      	str	r2, [r3, #120]	@ 0x78
	// 8
	setup_func.strToInt = function_StrToInt;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <FUNC_enable+0xf4>)
 8001772:	4a2c      	ldr	r2, [pc, #176]	@ (8001824 <FUNC_enable+0x168>)
 8001774:	669a      	str	r2, [r3, #104]	@ 0x68
	// 9
	setup_func.triggerA = function_triggerA;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <FUNC_enable+0xf4>)
 8001778:	4a2b      	ldr	r2, [pc, #172]	@ (8001828 <FUNC_enable+0x16c>)
 800177a:	67da      	str	r2, [r3, #124]	@ 0x7c
	setup_func.triggerB = function_triggerB;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <FUNC_enable+0xf4>)
 800177e:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <FUNC_enable+0x170>)
 8001780:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	setup_func.value = read_value;
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <FUNC_enable+0xf4>)
 8001786:	4a2a      	ldr	r2, [pc, #168]	@ (8001830 <FUNC_enable+0x174>)
 8001788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	// 10
	setup_func.arm = arm_func_inic();
 800178c:	f000 f872 	bl	8001874 <arm_func_inic>
 8001790:	4603      	mov	r3, r0
 8001792:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <FUNC_enable+0xf4>)
 8001794:	6013      	str	r3, [r2, #0]

	return setup_func;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <FUNC_enable+0xf4>)
 800179a:	4618      	mov	r0, r3
 800179c:	4611      	mov	r1, r2
 800179e:	2388      	movs	r3, #136	@ 0x88
 80017a0:	461a      	mov	r2, r3
 80017a2:	f00c ffaf 	bl	800e704 <memcpy>
}
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200000cc 	.word	0x200000cc
 80017b4:	08001aa5 	.word	0x08001aa5
 80017b8:	08001ad3 	.word	0x08001ad3
 80017bc:	08001c7d 	.word	0x08001c7d
 80017c0:	08001ca7 	.word	0x08001ca7
 80017c4:	08001ccf 	.word	0x08001ccf
 80017c8:	08001d09 	.word	0x08001d09
 80017cc:	08001d6b 	.word	0x08001d6b
 80017d0:	08001e1d 	.word	0x08001e1d
 80017d4:	08001e91 	.word	0x08001e91
 80017d8:	08001ef1 	.word	0x08001ef1
 80017dc:	08001f25 	.word	0x08001f25
 80017e0:	08001f9d 	.word	0x08001f9d
 80017e4:	08001f69 	.word	0x08001f69
 80017e8:	08002029 	.word	0x08002029
 80017ec:	0800206b 	.word	0x0800206b
 80017f0:	080020af 	.word	0x080020af
 80017f4:	080020ff 	.word	0x080020ff
 80017f8:	0800213d 	.word	0x0800213d
 80017fc:	080023d9 	.word	0x080023d9
 8001800:	08002179 	.word	0x08002179
 8001804:	0800221d 	.word	0x0800221d
 8001808:	080022b5 	.word	0x080022b5
 800180c:	08002349 	.word	0x08002349
 8001810:	08002445 	.word	0x08002445
 8001814:	08002531 	.word	0x08002531
 8001818:	08002569 	.word	0x08002569
 800181c:	08002593 	.word	0x08002593
 8001820:	080025cd 	.word	0x080025cd
 8001824:	0800261b 	.word	0x0800261b
 8001828:	08002679 	.word	0x08002679
 800182c:	08002711 	.word	0x08002711
 8001830:	080027b1 	.word	0x080027b1

08001834 <func>:

FUNC* func(void){ return &setup_func; }
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
 8001838:	4b02      	ldr	r3, [pc, #8]	@ (8001844 <func+0x10>)
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	200000cc 	.word	0x200000cc

08001848 <FUNC_var>:

void FUNC_var(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
	FUNCstr[FUNCSTRSIZE] = '\0';
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <FUNC_var+0x20>)
 800184e:	2200      	movs	r2, #0
 8001850:	77da      	strb	r2, [r3, #31]
	mem[0] = 0; nen[0] = 0;
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <FUNC_var+0x24>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <FUNC_var+0x28>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	20000158 	.word	0x20000158
 800186c:	20000178 	.word	0x20000178
 8001870:	20000188 	.word	0x20000188

08001874 <arm_func_inic>:
ARM_FUNC* arm_func_inic(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	setup_arm_func.dispar4x20 = ARMFUNC_ArmParDisplay4x20;
 8001878:	4b04      	ldr	r3, [pc, #16]	@ (800188c <arm_func_inic+0x18>)
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <arm_func_inic+0x1c>)
 800187c:	601a      	str	r2, [r3, #0]

	return &setup_arm_func;
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <arm_func_inic+0x18>)
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000154 	.word	0x20000154
 8001890:	08001895 	.word	0x08001895

08001894 <ARMFUNC_ArmParDisplay4x20>:
/*** FUNC Procedure & Function Definition***/
void ARMFUNC_ArmParDisplay4x20(ARMLCD0* func_lcd)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
#ifdef STM32F4
	#ifdef _ARMLCD_H_
		  static uint16_t toggle = 0;
		  func_lcd->gotoxy(0,0);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	2100      	movs	r1, #0
 80018a2:	2000      	movs	r0, #0
 80018a4:	4798      	blx	r3
		  func_lcd->string_size("sysclk:",7);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2107      	movs	r1, #7
 80018ac:	4872      	ldr	r0, [pc, #456]	@ (8001a78 <ARMFUNC_ArmParDisplay4x20+0x1e4>)
 80018ae:	4798      	blx	r3
		  func_lcd->string_size( FUNCui32toa( getsysclk()), 10);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699c      	ldr	r4, [r3, #24]
 80018b4:	f001 fd06 	bl	80032c4 <getsysclk>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fd44 	bl	8002348 <FUNCui32toa>
 80018c0:	4603      	mov	r3, r0
 80018c2:	210a      	movs	r1, #10
 80018c4:	4618      	mov	r0, r3
 80018c6:	47a0      	blx	r4
		  func_lcd->gotoxy(1,0);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	2100      	movs	r1, #0
 80018ce:	2001      	movs	r0, #1
 80018d0:	4798      	blx	r3
		  func_lcd->string_size("pllclk:",7);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2107      	movs	r1, #7
 80018d8:	4868      	ldr	r0, [pc, #416]	@ (8001a7c <ARMFUNC_ArmParDisplay4x20+0x1e8>)
 80018da:	4798      	blx	r3
		  func_lcd->string_size( FUNCui32toa( getpllclk()), 10);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699c      	ldr	r4, [r3, #24]
 80018e0:	f001 fcd2 	bl	8003288 <getpllclk>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fd2e 	bl	8002348 <FUNCui32toa>
 80018ec:	4603      	mov	r3, r0
 80018ee:	210a      	movs	r1, #10
 80018f0:	4618      	mov	r0, r3
 80018f2:	47a0      	blx	r4
		  if(toggle & 1){
 80018f4:	4b62      	ldr	r3, [pc, #392]	@ (8001a80 <ARMFUNC_ArmParDisplay4x20+0x1ec>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d04e      	beq.n	800199e <ARMFUNC_ArmParDisplay4x20+0x10a>
		  	func_lcd->gotoxy(2,0);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	2100      	movs	r1, #0
 8001906:	2002      	movs	r0, #2
 8001908:	4798      	blx	r3
		  	func_lcd->string_size("ahb:",4); func_lcd->string_size( FUNCui32toa( gethpre() ), 4);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2104      	movs	r1, #4
 8001910:	485c      	ldr	r0, [pc, #368]	@ (8001a84 <ARMFUNC_ArmParDisplay4x20+0x1f0>)
 8001912:	4798      	blx	r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699c      	ldr	r4, [r3, #24]
 8001918:	f001 fb26 	bl	8002f68 <gethpre>
 800191c:	4603      	mov	r3, r0
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fd12 	bl	8002348 <FUNCui32toa>
 8001924:	4603      	mov	r3, r0
 8001926:	2104      	movs	r1, #4
 8001928:	4618      	mov	r0, r3
 800192a:	47a0      	blx	r4
		  	func_lcd->string_size("apb1:",5); func_lcd->string_size( FUNCui32toa( gethppre1() ), 3);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2105      	movs	r1, #5
 8001932:	4855      	ldr	r0, [pc, #340]	@ (8001a88 <ARMFUNC_ArmParDisplay4x20+0x1f4>)
 8001934:	4798      	blx	r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699c      	ldr	r4, [r3, #24]
 800193a:	f001 fb5d 	bl	8002ff8 <gethppre1>
 800193e:	4603      	mov	r3, r0
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fd01 	bl	8002348 <FUNCui32toa>
 8001946:	4603      	mov	r3, r0
 8001948:	2103      	movs	r1, #3
 800194a:	4618      	mov	r0, r3
 800194c:	47a0      	blx	r4
		  	func_lcd->gotoxy(3,0);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	2100      	movs	r1, #0
 8001954:	2003      	movs	r0, #3
 8001956:	4798      	blx	r3
		  	func_lcd->string_size("apb2:",5); func_lcd->string_size( FUNCui32toa( gethppre2() ), 3);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2105      	movs	r1, #5
 800195e:	484b      	ldr	r0, [pc, #300]	@ (8001a8c <ARMFUNC_ArmParDisplay4x20+0x1f8>)
 8001960:	4798      	blx	r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699c      	ldr	r4, [r3, #24]
 8001966:	f001 fb79 	bl	800305c <gethppre2>
 800196a:	4603      	mov	r3, r0
 800196c:	4618      	mov	r0, r3
 800196e:	f000 fceb 	bl	8002348 <FUNCui32toa>
 8001972:	4603      	mov	r3, r0
 8001974:	2103      	movs	r1, #3
 8001976:	4618      	mov	r0, r3
 8001978:	47a0      	blx	r4
		  	func_lcd->string_size("rtc:",4); func_lcd->string_size( FUNCui32toa( getrtcpre() ), 3);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2104      	movs	r1, #4
 8001980:	4843      	ldr	r0, [pc, #268]	@ (8001a90 <ARMFUNC_ArmParDisplay4x20+0x1fc>)
 8001982:	4798      	blx	r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699c      	ldr	r4, [r3, #24]
 8001988:	f001 fb9a 	bl	80030c0 <getrtcpre>
 800198c:	4603      	mov	r3, r0
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fcda 	bl	8002348 <FUNCui32toa>
 8001994:	4603      	mov	r3, r0
 8001996:	2103      	movs	r1, #3
 8001998:	4618      	mov	r0, r3
 800199a:	47a0      	blx	r4
 800199c:	e04d      	b.n	8001a3a <ARMFUNC_ArmParDisplay4x20+0x1a6>
		  }else{
		  func_lcd->gotoxy(2,0);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a2:	2100      	movs	r1, #0
 80019a4:	2002      	movs	r0, #2
 80019a6:	4798      	blx	r3
		  	func_lcd->string_size("M:",2); func_lcd->string_size( FUNCui32toa( getpllm() ), 6);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2102      	movs	r1, #2
 80019ae:	4839      	ldr	r0, [pc, #228]	@ (8001a94 <ARMFUNC_ArmParDisplay4x20+0x200>)
 80019b0:	4798      	blx	r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699c      	ldr	r4, [r3, #24]
 80019b6:	f001 fbf7 	bl	80031a8 <getpllm>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fcc3 	bl	8002348 <FUNCui32toa>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2106      	movs	r1, #6
 80019c6:	4618      	mov	r0, r3
 80019c8:	47a0      	blx	r4
		  	func_lcd->string_size("N:",2); func_lcd->string_size( FUNCui32toa( getplln() ), 6);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2102      	movs	r1, #2
 80019d0:	4831      	ldr	r0, [pc, #196]	@ (8001a98 <ARMFUNC_ArmParDisplay4x20+0x204>)
 80019d2:	4798      	blx	r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699c      	ldr	r4, [r3, #24]
 80019d8:	f001 fbf6 	bl	80031c8 <getplln>
 80019dc:	4603      	mov	r3, r0
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fcb2 	bl	8002348 <FUNCui32toa>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2106      	movs	r1, #6
 80019e8:	4618      	mov	r0, r3
 80019ea:	47a0      	blx	r4
		  	func_lcd->gotoxy(3,0);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	2100      	movs	r1, #0
 80019f2:	2003      	movs	r0, #3
 80019f4:	4798      	blx	r3
		  	func_lcd->string_size("P:",2); func_lcd->string_size( FUNCui32toa( getpllp() ), 2);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2102      	movs	r1, #2
 80019fc:	4827      	ldr	r0, [pc, #156]	@ (8001a9c <ARMFUNC_ArmParDisplay4x20+0x208>)
 80019fe:	4798      	blx	r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699c      	ldr	r4, [r3, #24]
 8001a04:	f001 fbf0 	bl	80031e8 <getpllp>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fc9c 	bl	8002348 <FUNCui32toa>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2102      	movs	r1, #2
 8001a14:	4618      	mov	r0, r3
 8001a16:	47a0      	blx	r4
		  	func_lcd->string_size("Q:",2); func_lcd->string_size( FUNCui32toa( getpllq() ), 7);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4820      	ldr	r0, [pc, #128]	@ (8001aa0 <ARMFUNC_ArmParDisplay4x20+0x20c>)
 8001a20:	4798      	blx	r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699c      	ldr	r4, [r3, #24]
 8001a26:	f001 fc0f 	bl	8003248 <getpllq>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fc8b 	bl	8002348 <FUNCui32toa>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2107      	movs	r1, #7
 8001a36:	4618      	mov	r0, r3
 8001a38:	47a0      	blx	r4
		  }
		  func_lcd->gotoxy(3,15);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	210f      	movs	r1, #15
 8001a40:	2003      	movs	r0, #3
 8001a42:	4798      	blx	r3
		  func_lcd->string_size(FUNCui32toa(toggle),5);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699c      	ldr	r4, [r3, #24]
 8001a48:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <ARMFUNC_ArmParDisplay4x20+0x1ec>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fc7b 	bl	8002348 <FUNCui32toa>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2105      	movs	r1, #5
 8001a56:	4618      	mov	r0, r3
 8001a58:	47a0      	blx	r4
		  toggle++;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <ARMFUNC_ArmParDisplay4x20+0x1ec>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <ARMFUNC_ArmParDisplay4x20+0x1ec>)
 8001a64:	801a      	strh	r2, [r3, #0]
		  _delay_ms(6000);
 8001a66:	f241 7070 	movw	r0, #6000	@ 0x1770
 8001a6a:	f001 fef3 	bl	8003854 <_delay_ms>
	#endif
#endif
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd90      	pop	{r4, r7, pc}
 8001a76:	bf00      	nop
 8001a78:	0800f150 	.word	0x0800f150
 8001a7c:	0800f158 	.word	0x0800f158
 8001a80:	20000198 	.word	0x20000198
 8001a84:	0800f160 	.word	0x0800f160
 8001a88:	0800f168 	.word	0x0800f168
 8001a8c:	0800f170 	.word	0x0800f170
 8001a90:	0800f178 	.word	0x0800f178
 8001a94:	0800f180 	.word	0x0800f180
 8001a98:	0800f184 	.word	0x0800f184
 8001a9c:	0800f188 	.word	0x0800f188
 8001aa0:	0800f18c 	.word	0x0800f18c

08001aa4 <function_StringLength>:
/******/
int function_StringLength (const char string[])
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	int count;
	for (count = 0; string[count] != '\0'; count++ ) ;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e002      	b.n	8001ab8 <function_StringLength+0x14>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f6      	bne.n	8001ab2 <function_StringLength+0xe>
	return count;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <function_Reverse>:
void function_Reverse(char s[])
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
	char c; int i, j;
	for ( i = 0, j = function_StringLength(s) - 1; i < j ; i++, j-- ){
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffe0 	bl	8001aa4 <function_StringLength>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	e017      	b.n	8001b1c <function_Reverse+0x4a>
		c = s[i]; s[i] = s[j]; s[j] = c;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	441a      	add	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	440b      	add	r3, r1
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	701a      	strb	r2, [r3, #0]
	for ( i = 0, j = function_StringLength(s) - 1; i < j ; i++, j-- ){
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	dbe3      	blt.n	8001aec <function_Reverse+0x1a>
	}
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <function_UintInvStr>:
uint8_t function_UintInvStr(uint32_t num, uint8_t index)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
	for(FUNCstr[index++] = (uint8_t)((num % 10) + '0'); (num /= 10) > 0 ; FUNCstr[index++] = (char)((num % 10) + '0'));
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <function_UintInvStr+0x88>)
 8001b40:	fba3 2301 	umull	r2, r3, r3, r1
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	1aca      	subs	r2, r1, r3
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	1c59      	adds	r1, r3, #1
 8001b56:	70f9      	strb	r1, [r7, #3]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <function_UintInvStr+0x8c>)
 8001b62:	545a      	strb	r2, [r3, r1]
 8001b64:	e013      	b.n	8001b8e <function_UintInvStr+0x5e>
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <function_UintInvStr+0x88>)
 8001b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	1aca      	subs	r2, r1, r3
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	1c59      	adds	r1, r3, #1
 8001b80:	70f9      	strb	r1, [r7, #3]
 8001b82:	4619      	mov	r1, r3
 8001b84:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <function_UintInvStr+0x8c>)
 8001b8c:	545a      	strb	r2, [r3, r1]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a09      	ldr	r2, [pc, #36]	@ (8001bb8 <function_UintInvStr+0x88>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e2      	bne.n	8001b66 <function_UintInvStr+0x36>
	FUNCstr[index] = '\0'; return index;
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	4a06      	ldr	r2, [pc, #24]	@ (8001bbc <function_UintInvStr+0x8c>)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	54d1      	strb	r1, [r2, r3]
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	cccccccd 	.word	0xcccccccd
 8001bbc:	20000158 	.word	0x20000158

08001bc0 <function_fPartStr>:
uint8_t function_fPartStr(double num, uint8_t index, uint8_t afterpoint)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460a      	mov	r2, r1
 8001bce:	71fb      	strb	r3, [r7, #7]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	71bb      	strb	r3, [r7, #6]
	for( num *= 10; afterpoint ; FUNCstr[index++] = (uint8_t)(num + '0'), num -= (uint8_t)num, num *= 10, afterpoint--);
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <function_fPartStr+0xb0>)
 8001bda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bde:	f7fe fd0b 	bl	80005f8 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001bea:	e035      	b.n	8001c58 <function_fPartStr+0x98>
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <function_fPartStr+0xb4>)
 8001bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bf6:	f7fe fb49 	bl	800028c <__adddf3>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	71fa      	strb	r2, [r7, #7]
 8001c08:	461c      	mov	r4, r3
 8001c0a:	f7fe ff8f 	bl	8000b2c <__aeabi_d2uiz>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <function_fPartStr+0xb8>)
 8001c14:	551a      	strb	r2, [r3, r4]
 8001c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c1a:	f7fe ff87 	bl	8000b2c <__aeabi_d2uiz>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc7e 	bl	8000524 <__aeabi_i2d>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c30:	f7fe fb2a 	bl	8000288 <__aeabi_dsub>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <function_fPartStr+0xb0>)
 8001c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c46:	f7fe fcd7 	bl	80005f8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c52:	79bb      	ldrb	r3, [r7, #6]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	71bb      	strb	r3, [r7, #6]
 8001c58:	79bb      	ldrb	r3, [r7, #6]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1c6      	bne.n	8001bec <function_fPartStr+0x2c>
	FUNCstr[index] = '\0'; return index;
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <function_fPartStr+0xb8>)
 8001c62:	2100      	movs	r1, #0
 8001c64:	54d1      	strb	r1, [r2, r3]
 8001c66:	79fb      	ldrb	r3, [r7, #7]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	40240000 	.word	0x40240000
 8001c74:	40480000 	.word	0x40480000
 8001c78:	20000158 	.word	0x20000158

08001c7c <function_swap>:
void function_swap(long *px, long *py)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	long temp = *px; *px = *py; *py = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <function_SwapByte>:
uint16_t function_SwapByte(uint16_t num)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	80fb      	strh	r3, [r7, #6]
	uint16_t tp;
	tp = (uint16_t)(num << 8);
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	81fb      	strh	r3, [r7, #14]
	return (num >> 8) | tp;
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b29b      	uxth	r3, r3
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <function_copy>:
void function_copy(char to[], char from[])
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
	int i = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
	while ((to[i] = from[i]) != '\0') ++i;
 8001cdc:	e002      	b.n	8001ce4 <function_copy+0x16>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	441a      	add	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	440b      	add	r3, r1
 8001cf0:	7812      	ldrb	r2, [r2, #0]
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f1      	bne.n	8001cde <function_copy+0x10>
}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <function_squeeze>:
void function_squeeze(char s[], int c)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
	int i, j;
	for (i = 0, j = 0; (s[i] != '\0'); i++){
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	e015      	b.n	8001d48 <function_squeeze+0x40>
		if (s[i] != c) s[j++] = s[i];
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00a      	beq.n	8001d42 <function_squeeze+0x3a>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	441a      	add	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1c59      	adds	r1, r3, #1
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	440b      	add	r3, r1
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	701a      	strb	r2, [r3, #0]
	for (i = 0, j = 0; (s[i] != '\0'); i++){
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3301      	adds	r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e3      	bne.n	8001d1c <function_squeeze+0x14>
	}
	s[j] = '\0';
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <function_shellsort>:
void function_shellsort(int v[], int n)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
	int gap, i, j, temp;
	for (gap = n / 2; gap > 0; gap /= 2)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	0fda      	lsrs	r2, r3, #31
 8001d78:	4413      	add	r3, r2
 8001d7a:	105b      	asrs	r3, r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e042      	b.n	8001e06 <function_shellsort+0x9c>
		for (i = gap; i < n; i++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	e036      	b.n	8001df4 <function_shellsort+0x8a>
			for (j = i - gap; j >= 0 && v[j] > v[j + gap]; j -= gap){
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	e01d      	b.n	8001dcc <function_shellsort+0x62>
				temp = v[j]; v[j] = v[j + gap]; v[j + gap] = temp;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	441a      	add	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	440b      	add	r3, r1
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	601a      	str	r2, [r3, #0]
			for (j = i - gap; j >= 0 && v[j] > v[j + gap]; j -= gap){
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db0d      	blt.n	8001dee <function_shellsort+0x84>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	440b      	add	r3, r1
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	440b      	add	r3, r1
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	dcd0      	bgt.n	8001d90 <function_shellsort+0x26>
		for (i = gap; i < n; i++)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	3301      	adds	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbc4      	blt.n	8001d86 <function_shellsort+0x1c>
	for (gap = n / 2; gap > 0; gap /= 2)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	0fda      	lsrs	r2, r3, #31
 8001e00:	4413      	add	r3, r2
 8001e02:	105b      	asrs	r3, r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	dcb9      	bgt.n	8001d80 <function_shellsort+0x16>
			}
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <function_resizestr>:
char* function_resizestr(char *string, int size)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
	int i; FUNCstr[size] = '\0';
 8001e26:	4a19      	ldr	r2, [pc, #100]	@ (8001e8c <function_resizestr+0x70>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < size; i++){
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	e01f      	b.n	8001e76 <function_resizestr+0x5a>
		if(*(string + i) == '\0'){
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10d      	bne.n	8001e5e <function_resizestr+0x42>
			for(; i < size; i++){ FUNCstr[i] = ' '; }
 8001e42:	e007      	b.n	8001e54 <function_resizestr+0x38>
 8001e44:	4a11      	ldr	r2, [pc, #68]	@ (8001e8c <function_resizestr+0x70>)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4413      	add	r3, r2
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dbf3      	blt.n	8001e44 <function_resizestr+0x28>
			break;
 8001e5c:	e00f      	b.n	8001e7e <function_resizestr+0x62>
		}
		FUNCstr[i] = *(string + i);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	7819      	ldrb	r1, [r3, #0]
 8001e66:	4a09      	ldr	r2, [pc, #36]	@ (8001e8c <function_resizestr+0x70>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < size; i++){
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	dbdb      	blt.n	8001e36 <function_resizestr+0x1a>
	}
	return FUNCstr;
 8001e7e:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <function_resizestr+0x70>)
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	20000158 	.word	0x20000158

08001e90 <function_trim>:
int function_trim(char s[])
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	int n;
	for (n = function_StringLength(s) - 1; n >= 0; n--)
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fe03 	bl	8001aa4 <function_StringLength>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e014      	b.n	8001ed0 <function_trim+0x40>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n') break;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d00b      	beq.n	8001eca <function_trim+0x3a>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	d005      	beq.n	8001eca <function_trim+0x3a>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b0a      	cmp	r3, #10
 8001ec8:	d106      	bne.n	8001ed8 <function_trim+0x48>
	for (n = function_StringLength(s) - 1; n >= 0; n--)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	dae7      	bge.n	8001ea6 <function_trim+0x16>
 8001ed6:	e000      	b.n	8001eda <function_trim+0x4a>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n') break;
 8001ed8:	bf00      	nop
	s[n + 1] = '\0';
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3301      	adds	r3, #1
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
	return n;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <function_bcd2dec>:
/******/
uint8_t function_bcd2dec(uint8_t num)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
	return ((num / 16 * 10) + (num % 16));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	b2db      	uxtb	r3, r3
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <function_dec2bcd>:
uint8_t function_dec2bcd(uint8_t num)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	return ((num / 10 * 16) + (num % 10));
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	4a0c      	ldr	r2, [pc, #48]	@ (8001f64 <function_dec2bcd+0x40>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	08db      	lsrs	r3, r3, #3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	b2d8      	uxtb	r0, r3
 8001f3e:	79fa      	ldrb	r2, [r7, #7]
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <function_dec2bcd+0x40>)
 8001f42:	fba3 1302 	umull	r1, r3, r3, r2
 8001f46:	08d9      	lsrs	r1, r3, #3
 8001f48:	460b      	mov	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	4403      	add	r3, r0
 8001f56:	b2db      	uxtb	r3, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	cccccccd 	.word	0xcccccccd

08001f68 <function_bcd2bin>:
uint8_t function_bcd2bin(uint8_t val)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
	return (val & 0x0f) + (val >> 4) * 10;
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4619      	mov	r1, r3
 8001f82:	0089      	lsls	r1, r1, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b2db      	uxtb	r3, r3
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <function_dectohex>:
char* function_dectohex(int32_t num)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	int32_t remainder; uint8_t j;
	for(j = 0, FUNCstr[j] = '\0'; num; FUNCstr[j] = '\0', num = num / 16){
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	4a1e      	ldr	r2, [pc, #120]	@ (8002024 <function_dectohex+0x88>)
 8001fac:	2100      	movs	r1, #0
 8001fae:	54d1      	strb	r1, [r2, r3]
 8001fb0:	e02c      	b.n	800200c <function_dectohex+0x70>
		remainder = num % 16;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	425a      	negs	r2, r3
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	f002 020f 	and.w	r2, r2, #15
 8001fbe:	bf58      	it	pl
 8001fc0:	4253      	negpl	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
		if (remainder < 10) FUNCstr[j++] = (char) (48 + remainder);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b09      	cmp	r3, #9
 8001fc8:	dc0b      	bgt.n	8001fe2 <function_dectohex+0x46>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	1c59      	adds	r1, r3, #1
 8001fd2:	73f9      	strb	r1, [r7, #15]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <function_dectohex+0x88>)
 8001fde:	545a      	strb	r2, [r3, r1]
 8001fe0:	e00a      	b.n	8001ff8 <function_dectohex+0x5c>
		else FUNCstr[j++] = (char) (55 + remainder);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	1c59      	adds	r1, r3, #1
 8001fea:	73f9      	strb	r1, [r7, #15]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f102 0337 	add.w	r3, r2, #55	@ 0x37
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <function_dectohex+0x88>)
 8001ff6:	545a      	strb	r2, [r3, r1]
	for(j = 0, FUNCstr[j] = '\0'; num; FUNCstr[j] = '\0', num = num / 16){
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <function_dectohex+0x88>)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	54d1      	strb	r1, [r2, r3]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	da00      	bge.n	8002008 <function_dectohex+0x6c>
 8002006:	330f      	adds	r3, #15
 8002008:	111b      	asrs	r3, r3, #4
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1cf      	bne.n	8001fb2 <function_dectohex+0x16>
	}
	function_Reverse(FUNCstr);
 8002012:	4804      	ldr	r0, [pc, #16]	@ (8002024 <function_dectohex+0x88>)
 8002014:	f7ff fd5d 	bl	8001ad2 <function_Reverse>
	return FUNCstr;
 8002018:	4b02      	ldr	r3, [pc, #8]	@ (8002024 <function_dectohex+0x88>)
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000158 	.word	0x20000158

08002028 <function_twocomptoint8bit>:
int function_twocomptoint8bit(int twoscomp){
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  int value;
	// Let's see if the byte is negative
  if (twoscomp & 0x80){
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <function_twocomptoint8bit+0x28>
    // Invert
    twoscomp = ~twoscomp + 1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	425b      	negs	r3, r3
 800203e:	607b      	str	r3, [r7, #4]
		twoscomp = (twoscomp & 0xFF);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	607b      	str	r3, [r7, #4]
    // Cast as int and multiply by negative one
    value = (int)(twoscomp) * (-1);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	425b      	negs	r3, r3
 800204a:	60fb      	str	r3, [r7, #12]
    return value;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	e006      	b.n	800205e <function_twocomptoint8bit+0x36>
  }else{
    // Byte is non-negative, therefore convert to decimal and display
    // Make sure we are never over 1279
    twoscomp = (twoscomp & 0x7F);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002056:	607b      	str	r3, [r7, #4]
    // Cast as int and return
    value = (int)(twoscomp);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	60fb      	str	r3, [r7, #12]
    return value;
 800205c:	68fb      	ldr	r3, [r7, #12]
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <function_twocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int function_twocomptoint10bit(int twoscomp){
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
	int value;
  // Let's see if the byte is negative
  if (twoscomp & 0x200){
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00b      	beq.n	8002094 <function_twocomptoint10bit+0x2a>
    // Invert
    twoscomp = ~twoscomp + 1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	425b      	negs	r3, r3
 8002080:	607b      	str	r3, [r7, #4]
    twoscomp = (twoscomp & 0x3FF);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002088:	607b      	str	r3, [r7, #4]
    // Cast as int and multiply by negative one
    value = (int)(twoscomp) * (-1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	425b      	negs	r3, r3
 800208e:	60fb      	str	r3, [r7, #12]
    return value;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	e006      	b.n	80020a2 <function_twocomptoint10bit+0x38>
  }else{
    // Serial.println("We entered the positive loop");
    // Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800209a:	607b      	str	r3, [r7, #4]
    // Cast as int and return
    // Serial.println(twoscomp);
    value = (int)(twoscomp);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	60fb      	str	r3, [r7, #12]
    return value;
 80020a0:	68fb      	ldr	r3, [r7, #12]
  }
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <function_twocomptointnbit>:
// Two's Complement function, nbits
int function_twocomptointnbit(int twoscomp, uint8_t nbits){
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70fb      	strb	r3, [r7, #3]
  unsigned int signmask;
  unsigned int mask;
  signmask = (1 << (nbits - 1));
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	3b01      	subs	r3, #1
 80020be:	2201      	movs	r2, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	60fb      	str	r3, [r7, #12]
  mask = signmask - 1;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
  if ((unsigned int) twoscomp & signmask){
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <function_twocomptointnbit+0x3a>
	twoscomp &= mask;
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4013      	ands	r3, r2
 80020dc:	607b      	str	r3, [r7, #4]
    twoscomp -= signmask;
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	e003      	b.n	80020f0 <function_twocomptointnbit+0x42>
  }else{
	  twoscomp &= mask;
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	4013      	ands	r3, r2
 80020ee:	607b      	str	r3, [r7, #4]
  }
  return twoscomp;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <function_print_v1>:
/******/
char* function_print_v1( char* str, uint8_t size_str, const char* format, ... )
{
 80020fe:	b40c      	push	{r2, r3}
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
	va_list aptr; int ret;
	va_start(aptr, format);
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	60bb      	str	r3, [r7, #8]
	ret = vsnprintf( str, size_str, (const char*) format, aptr );
 8002112:	78f9      	ldrb	r1, [r7, #3]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f00c fab9 	bl	800e690 <vsniprintf>
 800211e:	60f8      	str	r0, [r7, #12]
	va_end(aptr);
	if(ret < 0){ return NULL; }else return str;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	da01      	bge.n	800212a <function_print_v1+0x2c>
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <function_print_v1+0x2e>
 800212a:	687b      	ldr	r3, [r7, #4]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002136:	b002      	add	sp, #8
 8002138:	4770      	bx	lr
	...

0800213c <function_print_v2>:
char* function_print_v2( const char* format, ... )
{
 800213c:	b40f      	push	{r0, r1, r2, r3}
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
	va_list aptr; int ret;
	va_start(aptr, format);
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	603b      	str	r3, [r7, #0]
	ret = vsnprintf( FUNCstr, FUNCSTRSIZE, (const char*) format, aptr );
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	211f      	movs	r1, #31
 8002150:	4808      	ldr	r0, [pc, #32]	@ (8002174 <function_print_v2+0x38>)
 8002152:	f00c fa9d 	bl	800e690 <vsniprintf>
 8002156:	6078      	str	r0, [r7, #4]
	va_end(aptr);
	if(ret < 0){ return NULL; }else return FUNCstr;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	da01      	bge.n	8002162 <function_print_v2+0x26>
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <function_print_v2+0x28>
 8002162:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <function_print_v2+0x38>)
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800216e:	b004      	add	sp, #16
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000158 	.word	0x20000158

08002178 <function_i16toa>:
/******/
char* function_i16toa(int16_t n)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	80fb      	strh	r3, [r7, #6]
	uint8_t i;
	int16_t sign;
	if ((sign = n) < 0) n = -n;
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	81bb      	strh	r3, [r7, #12]
 8002186:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	da03      	bge.n	8002196 <function_i16toa+0x1e>
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	425b      	negs	r3, r3
 8002192:	b29b      	uxth	r3, r3
 8002194:	80fb      	strh	r3, [r7, #6]
	i = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
	do {
		FUNCstr[i++] = (char) (n % 10 + '0');
 800219a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <function_i16toa+0x9c>)
 80021a0:	fb83 1302 	smull	r1, r3, r3, r2
 80021a4:	1099      	asrs	r1, r3, #2
 80021a6:	17d3      	asrs	r3, r2, #31
 80021a8:	1ac9      	subs	r1, r1, r3
 80021aa:	460b      	mov	r3, r1
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	73f9      	strb	r1, [r7, #15]
 80021be:	4619      	mov	r1, r3
 80021c0:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <function_i16toa+0xa0>)
 80021c8:	545a      	strb	r2, [r3, r1]
	}while ((n /= 10) > 0);
 80021ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ce:	4a11      	ldr	r2, [pc, #68]	@ (8002214 <function_i16toa+0x9c>)
 80021d0:	fb82 1203 	smull	r1, r2, r2, r3
 80021d4:	1092      	asrs	r2, r2, #2
 80021d6:	17db      	asrs	r3, r3, #31
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	80fb      	strh	r3, [r7, #6]
 80021dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dcda      	bgt.n	800219a <function_i16toa+0x22>
	if (sign < 0) FUNCstr[i++] = '-';
 80021e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da06      	bge.n	80021fa <function_i16toa+0x82>
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	73fa      	strb	r2, [r7, #15]
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <function_i16toa+0xa0>)
 80021f6:	212d      	movs	r1, #45	@ 0x2d
 80021f8:	5499      	strb	r1, [r3, r2]
	FUNCstr[i] = '\0';
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	4a06      	ldr	r2, [pc, #24]	@ (8002218 <function_i16toa+0xa0>)
 80021fe:	2100      	movs	r1, #0
 8002200:	54d1      	strb	r1, [r2, r3]
	function_Reverse(FUNCstr);
 8002202:	4805      	ldr	r0, [pc, #20]	@ (8002218 <function_i16toa+0xa0>)
 8002204:	f7ff fc65 	bl	8001ad2 <function_Reverse>
	return FUNCstr;
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <function_i16toa+0xa0>)
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	66666667 	.word	0x66666667
 8002218:	20000158 	.word	0x20000158

0800221c <function_ui16toa>:
char* function_ui16toa(uint16_t n)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	80fb      	strh	r3, [r7, #6]
	uint8_t i;
	for(i = 0, FUNCstr[i++] = n % 10 + '0'; (n /= 10) > 0; FUNCstr[i++] = n % 10 + '0');
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	88fa      	ldrh	r2, [r7, #6]
 800222c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <function_ui16toa+0x90>)
 800222e:	fba3 1302 	umull	r1, r3, r3, r2
 8002232:	08d9      	lsrs	r1, r3, #3
 8002234:	460b      	mov	r3, r1
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	b29b      	uxth	r3, r3
 8002240:	b2da      	uxtb	r2, r3
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	1c59      	adds	r1, r3, #1
 8002246:	73f9      	strb	r1, [r7, #15]
 8002248:	4619      	mov	r1, r3
 800224a:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <function_ui16toa+0x94>)
 8002252:	545a      	strb	r2, [r3, r1]
 8002254:	e014      	b.n	8002280 <function_ui16toa+0x64>
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <function_ui16toa+0x90>)
 800225a:	fba3 1302 	umull	r1, r3, r3, r2
 800225e:	08d9      	lsrs	r1, r3, #3
 8002260:	460b      	mov	r3, r1
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	b29b      	uxth	r3, r3
 800226c:	b2da      	uxtb	r2, r3
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	1c59      	adds	r1, r3, #1
 8002272:	73f9      	strb	r1, [r7, #15]
 8002274:	4619      	mov	r1, r3
 8002276:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <function_ui16toa+0x94>)
 800227e:	545a      	strb	r2, [r3, r1]
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <function_ui16toa+0x90>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	08db      	lsrs	r3, r3, #3
 800228a:	80fb      	strh	r3, [r7, #6]
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1e1      	bne.n	8002256 <function_ui16toa+0x3a>
	FUNCstr[i] = '\0';
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	4a06      	ldr	r2, [pc, #24]	@ (80022b0 <function_ui16toa+0x94>)
 8002296:	2100      	movs	r1, #0
 8002298:	54d1      	strb	r1, [r2, r3]
	function_Reverse(FUNCstr);
 800229a:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <function_ui16toa+0x94>)
 800229c:	f7ff fc19 	bl	8001ad2 <function_Reverse>
	return FUNCstr;
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <function_ui16toa+0x94>)
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	cccccccd 	.word	0xcccccccd
 80022b0:	20000158 	.word	0x20000158

080022b4 <function_i32toa>:
char* function_i32toa(int32_t n)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	uint8_t i;
	int32_t sign;
	if ((sign = n) < 0) n = -n;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da02      	bge.n	80022cc <function_i32toa+0x18>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	425b      	negs	r3, r3
 80022ca:	607b      	str	r3, [r7, #4]
	i = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
	do {
		FUNCstr[i++] = (char) (n % 10 + '0');
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <function_i32toa+0x8c>)
 80022d4:	fb83 1302 	smull	r1, r3, r3, r2
 80022d8:	1099      	asrs	r1, r3, #2
 80022da:	17d3      	asrs	r3, r2, #31
 80022dc:	1ac9      	subs	r1, r1, r3
 80022de:	460b      	mov	r3, r1
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	1ad1      	subs	r1, r2, r3
 80022e8:	b2ca      	uxtb	r2, r1
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	1c59      	adds	r1, r3, #1
 80022ee:	73f9      	strb	r1, [r7, #15]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <function_i32toa+0x90>)
 80022fa:	545a      	strb	r2, [r3, r1]
	}while ((n /= 10) > 0);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a10      	ldr	r2, [pc, #64]	@ (8002340 <function_i32toa+0x8c>)
 8002300:	fb82 1203 	smull	r1, r2, r2, r3
 8002304:	1092      	asrs	r2, r2, #2
 8002306:	17db      	asrs	r3, r3, #31
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	dcde      	bgt.n	80022d0 <function_i32toa+0x1c>
	if (sign < 0) FUNCstr[i++] = '-';
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	da06      	bge.n	8002326 <function_i32toa+0x72>
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	73fa      	strb	r2, [r7, #15]
 800231e:	461a      	mov	r2, r3
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <function_i32toa+0x90>)
 8002322:	212d      	movs	r1, #45	@ 0x2d
 8002324:	5499      	strb	r1, [r3, r2]
	FUNCstr[i] = '\0';
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	4a06      	ldr	r2, [pc, #24]	@ (8002344 <function_i32toa+0x90>)
 800232a:	2100      	movs	r1, #0
 800232c:	54d1      	strb	r1, [r2, r3]
	function_Reverse(FUNCstr);
 800232e:	4805      	ldr	r0, [pc, #20]	@ (8002344 <function_i32toa+0x90>)
 8002330:	f7ff fbcf 	bl	8001ad2 <function_Reverse>
	return FUNCstr;
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <function_i32toa+0x90>)
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	66666667 	.word	0x66666667
 8002344:	20000158 	.word	0x20000158

08002348 <FUNCui32toa>:
char* FUNCui32toa(uint32_t n)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0, FUNCstr[i++] = n % 10 + '0'; (n /= 10) > 0; FUNCstr[i++] = n % 10 + '0');
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4b1e      	ldr	r3, [pc, #120]	@ (80023d0 <FUNCui32toa+0x88>)
 8002358:	fba3 2301 	umull	r2, r3, r3, r1
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	1aca      	subs	r2, r1, r3
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	1c59      	adds	r1, r3, #1
 800236e:	73f9      	strb	r1, [r7, #15]
 8002370:	4619      	mov	r1, r3
 8002372:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b16      	ldr	r3, [pc, #88]	@ (80023d4 <FUNCui32toa+0x8c>)
 800237a:	545a      	strb	r2, [r3, r1]
 800237c:	e013      	b.n	80023a6 <FUNCui32toa+0x5e>
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <FUNCui32toa+0x88>)
 8002382:	fba3 2301 	umull	r2, r3, r3, r1
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	1aca      	subs	r2, r1, r3
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	1c59      	adds	r1, r3, #1
 8002398:	73f9      	strb	r1, [r7, #15]
 800239a:	4619      	mov	r1, r3
 800239c:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <FUNCui32toa+0x8c>)
 80023a4:	545a      	strb	r2, [r3, r1]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a09      	ldr	r2, [pc, #36]	@ (80023d0 <FUNCui32toa+0x88>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	08db      	lsrs	r3, r3, #3
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e2      	bne.n	800237e <FUNCui32toa+0x36>
	FUNCstr[i] = '\0';
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	4a06      	ldr	r2, [pc, #24]	@ (80023d4 <FUNCui32toa+0x8c>)
 80023bc:	2100      	movs	r1, #0
 80023be:	54d1      	strb	r1, [r2, r3]
	function_Reverse(FUNCstr);
 80023c0:	4804      	ldr	r0, [pc, #16]	@ (80023d4 <FUNCui32toa+0x8c>)
 80023c2:	f7ff fb86 	bl	8001ad2 <function_Reverse>
	return FUNCstr;
 80023c6:	4b03      	ldr	r3, [pc, #12]	@ (80023d4 <FUNCui32toa+0x8c>)
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	cccccccd 	.word	0xcccccccd
 80023d4:	20000158 	.word	0x20000158

080023d8 <function_print_binary>:
char* function_print_binary(unsigned int n_bits, unsigned int number)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
	unsigned int i, c;
	for(i = (1 << (n_bits - 1)), c = 0; i; i >>= 1, c++)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	2201      	movs	r2, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	e015      	b.n	8002420 <function_print_binary+0x48>
		(number & i) ? (FUNCstr[c] = '1') : (FUNCstr[c] = '0');
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <function_print_binary+0x32>
 80023fe:	4a10      	ldr	r2, [pc, #64]	@ (8002440 <function_print_binary+0x68>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4413      	add	r3, r2
 8002404:	2231      	movs	r2, #49	@ 0x31
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e004      	b.n	8002414 <function_print_binary+0x3c>
 800240a:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <function_print_binary+0x68>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4413      	add	r3, r2
 8002410:	2230      	movs	r2, #48	@ 0x30
 8002412:	701a      	strb	r2, [r3, #0]
	for(i = (1 << (n_bits - 1)), c = 0; i; i >>= 1, c++)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3301      	adds	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1e6      	bne.n	80023f4 <function_print_binary+0x1c>
	FUNCstr[c] = '\0';
 8002426:	4a06      	ldr	r2, [pc, #24]	@ (8002440 <function_print_binary+0x68>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4413      	add	r3, r2
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
	return FUNCstr;
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <function_print_binary+0x68>)
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000158 	.word	0x20000158

08002444 <function_ftoa>:
char* function_ftoa(double num, uint8_t afterpoint)
{
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	b08c      	sub	sp, #48	@ 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	ed87 0b02 	vstr	d0, [r7, #8]
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
	double ipart, fpart, n; uint8_t k = 0; int8_t sign;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (num < 0){ n = -num; sign = -1;}else{n = num; sign = 1;}
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002464:	f7fe fb3a 	bl	8000adc <__aeabi_dcmplt>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <function_ftoa+0x3e>
 800246e:	68bc      	ldr	r4, [r7, #8]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002476:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 800247a:	23ff      	movs	r3, #255	@ 0xff
 800247c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002480:	e006      	b.n	8002490 <function_ftoa+0x4c>
 8002482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002486:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800248a:	2301      	movs	r3, #1
 800248c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	ipart = (uint32_t) n; fpart = n - ipart;
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002494:	f7fe fb4a 	bl	8000b2c <__aeabi_d2uiz>
 8002498:	4603      	mov	r3, r0
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f832 	bl	8000504 <__aeabi_ui2d>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80024a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024b0:	f7fd feea 	bl	8000288 <__aeabi_dsub>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	k = function_UintInvStr(ipart, 0); if (sign < 0) FUNCstr[k++] = '-'; FUNCstr[k] = '\0'; function_Reverse(FUNCstr);
 80024bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c0:	f7fe fb34 	bl	8000b2c <__aeabi_d2uiz>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fb31 	bl	8001b30 <function_UintInvStr>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80024d4:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80024d8:	2b00      	cmp	r3, #0
 80024da:	da08      	bge.n	80024ee <function_ftoa+0xaa>
 80024dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b10      	ldr	r3, [pc, #64]	@ (800252c <function_ftoa+0xe8>)
 80024ea:	212d      	movs	r1, #45	@ 0x2d
 80024ec:	5499      	strb	r1, [r3, r2]
 80024ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024f2:	4a0e      	ldr	r2, [pc, #56]	@ (800252c <function_ftoa+0xe8>)
 80024f4:	2100      	movs	r1, #0
 80024f6:	54d1      	strb	r1, [r2, r3]
 80024f8:	480c      	ldr	r0, [pc, #48]	@ (800252c <function_ftoa+0xe8>)
 80024fa:	f7ff faea 	bl	8001ad2 <function_Reverse>
	FUNCstr[k++] = '.';
 80024fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8002508:	461a      	mov	r2, r3
 800250a:	4b08      	ldr	r3, [pc, #32]	@ (800252c <function_ftoa+0xe8>)
 800250c:	212e      	movs	r1, #46	@ 0x2e
 800250e:	5499      	strb	r1, [r3, r2]
	function_fPartStr(fpart, k, afterpoint);
 8002510:	79fa      	ldrb	r2, [r7, #7]
 8002512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	ed97 0b04 	vldr	d0, [r7, #16]
 800251e:	f7ff fb4f 	bl	8001bc0 <function_fPartStr>
	return FUNCstr;
 8002522:	4b02      	ldr	r3, [pc, #8]	@ (800252c <function_ftoa+0xe8>)
}
 8002524:	4618      	mov	r0, r3
 8002526:	3730      	adds	r7, #48	@ 0x30
 8002528:	46bd      	mov	sp, r7
 800252a:	bdb0      	pop	{r4, r5, r7, pc}
 800252c:	20000158 	.word	0x20000158

08002530 <function_trimmer>:
/******/
long function_trimmer(long x, long in_min, long in_max, long out_min, long out_max)
// same as arduino map function
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	69b9      	ldr	r1, [r7, #24]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	1a8a      	subs	r2, r1, r2
 800254a:	fb03 f202 	mul.w	r2, r3, r2
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1acb      	subs	r3, r1, r3
 8002554:	fb92 f2f3 	sdiv	r2, r2, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4413      	add	r3, r2
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <function_pmax>:
int function_pmax(int a1, int a2)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
	int biggest;
	if(a1 > a2){ biggest = a1; }else{ biggest = a2; }
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	dd02      	ble.n	8002580 <function_pmax+0x18>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e001      	b.n	8002584 <function_pmax+0x1c>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	60fb      	str	r3, [r7, #12]
	return biggest;
 8002584:	68fb      	ldr	r3, [r7, #12]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <function_gcd_v1>:
int function_gcd_v1 (int u, int v)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
	int temp;
	while ( v != 0 ) {
 800259c:	e00c      	b.n	80025b8 <function_gcd_v1+0x26>
		temp = u % v; u = v; v = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	fb93 f2f2 	sdiv	r2, r3, r2
 80025a6:	6839      	ldr	r1, [r7, #0]
 80025a8:	fb01 f202 	mul.w	r2, r1, r2
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	603b      	str	r3, [r7, #0]
	while ( v != 0 ) {
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1ef      	bne.n	800259e <function_gcd_v1+0xc>
	}
	return u;
 80025be:	687b      	ldr	r3, [r7, #4]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <function_gcd_v2>:
long function_gcd_v2(long a, long b)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
	long r;
	if (a < b) function_swap(&a, &b);
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	da05      	bge.n	80025ea <function_gcd_v2+0x1e>
 80025de:	463a      	mov	r2, r7
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fb49 	bl	8001c7c <function_swap>
	if (!b){
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10f      	bne.n	8002610 <function_gcd_v2+0x44>
		while ((r = a % b) != 0) {
 80025f0:	e003      	b.n	80025fa <function_gcd_v2+0x2e>
			a = b; b = r;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	603b      	str	r3, [r7, #0]
		while ((r = a % b) != 0) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8002602:	fb01 f202 	mul.w	r2, r1, r2
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <function_gcd_v2+0x26>
		}
	}
	return b;
 8002610:	683b      	ldr	r3, [r7, #0]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <function_StrToInt>:
/******/
int function_StrToInt (const char string[])
{
 800261a:	b480      	push	{r7}
 800261c:	b087      	sub	sp, #28
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
	int i, intValue, result = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	e011      	b.n	8002650 <function_StrToInt+0x36>
		intValue = string[i] - '0';
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	3b30      	subs	r3, #48	@ 0x30
 8002636:	60fb      	str	r3, [r7, #12]
		result = result * 10 + intValue;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b2f      	cmp	r3, #47	@ 0x2f
 800265a:	d905      	bls.n	8002668 <function_StrToInt+0x4e>
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b39      	cmp	r3, #57	@ 0x39
 8002666:	d9e1      	bls.n	800262c <function_StrToInt+0x12>
	}
	return result;
 8002668:	693b      	ldr	r3, [r7, #16]
}
 800266a:	4618      	mov	r0, r3
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <function_triggerA>:
/******/
// triggerA
uint32_t function_triggerA(uint32_t ll_io, uint8_t pin, uint32_t counter)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	460b      	mov	r3, r1
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	72fb      	strb	r3, [r7, #11]
	mem[3] = 0;
 8002686:	4b21      	ldr	r3, [pc, #132]	@ (800270c <function_triggerA+0x94>)
 8002688:	2200      	movs	r2, #0
 800268a:	60da      	str	r2, [r3, #12]
	if(mem[0] == 0){
 800268c:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <function_triggerA+0x94>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d111      	bne.n	80026b8 <function_triggerA+0x40>
		if( ll_io & (1 << pin) ){ mem[1] = counter; mem[2] = 0; mem[0] = 1; }
 8002694:	7afb      	ldrb	r3, [r7, #11]
 8002696:	2201      	movs	r2, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	461a      	mov	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <function_triggerA+0x40>
 80026a6:	4a19      	ldr	r2, [pc, #100]	@ (800270c <function_triggerA+0x94>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6053      	str	r3, [r2, #4]
 80026ac:	4b17      	ldr	r3, [pc, #92]	@ (800270c <function_triggerA+0x94>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	4b16      	ldr	r3, [pc, #88]	@ (800270c <function_triggerA+0x94>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
	}
	if(mem[0] == 1){
 80026b8:	4b14      	ldr	r3, [pc, #80]	@ (800270c <function_triggerA+0x94>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d11d      	bne.n	80026fc <function_triggerA+0x84>
		if( ll_io & (1 << pin) ){ if( counter != mem[1] ){ mem[2]++; mem[1] = counter; } }
 80026c0:	7afb      	ldrb	r3, [r7, #11]
 80026c2:	2201      	movs	r2, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <function_triggerA+0x76>
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <function_triggerA+0x94>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d00f      	beq.n	80026fc <function_triggerA+0x84>
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <function_triggerA+0x94>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	3301      	adds	r3, #1
 80026e2:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <function_triggerA+0x94>)
 80026e4:	6093      	str	r3, [r2, #8]
 80026e6:	4a09      	ldr	r2, [pc, #36]	@ (800270c <function_triggerA+0x94>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6053      	str	r3, [r2, #4]
 80026ec:	e006      	b.n	80026fc <function_triggerA+0x84>
		else{ mem[3] = mem[2]; mem[0] = 0; }
 80026ee:	4b07      	ldr	r3, [pc, #28]	@ (800270c <function_triggerA+0x94>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4a06      	ldr	r2, [pc, #24]	@ (800270c <function_triggerA+0x94>)
 80026f4:	60d3      	str	r3, [r2, #12]
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <function_triggerA+0x94>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
	}
	return mem[3];
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <function_triggerA+0x94>)
 80026fe:	68db      	ldr	r3, [r3, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	20000178 	.word	0x20000178

08002710 <function_triggerB>:
// triggerB
uint32_t function_triggerB(uint32_t hl_io, uint32_t lh_io, uint8_t pin, uint32_t counter)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	71fb      	strb	r3, [r7, #7]
	nen[3] = 0;
 8002720:	4b22      	ldr	r3, [pc, #136]	@ (80027ac <function_triggerB+0x9c>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]

	switch( nen[0] ){ // Start value
 8002726:	4b21      	ldr	r3, [pc, #132]	@ (80027ac <function_triggerB+0x9c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <function_triggerB+0x24>
 800272e:	2b01      	cmp	r3, #1
 8002730:	d013      	beq.n	800275a <function_triggerB+0x4a>
		case 1:
			if( counter != nen[1] ){ nen[2]++; nen[1] = counter; }
			if( lh_io & (1 << pin) ){ nen[3] = nen[2]; nen[0] = 0; }
		break;
		default:
		break;
 8002732:	e033      	b.n	800279c <function_triggerB+0x8c>
			if( hl_io & (1 << pin) ){ nen[1] = counter; nen[2] = 0; nen[0] = 1; }
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	2201      	movs	r2, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	461a      	mov	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d027      	beq.n	8002796 <function_triggerB+0x86>
 8002746:	4a19      	ldr	r2, [pc, #100]	@ (80027ac <function_triggerB+0x9c>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6053      	str	r3, [r2, #4]
 800274c:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <function_triggerB+0x9c>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	4b16      	ldr	r3, [pc, #88]	@ (80027ac <function_triggerB+0x9c>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
		break;
 8002758:	e01d      	b.n	8002796 <function_triggerB+0x86>
			if( counter != nen[1] ){ nen[2]++; nen[1] = counter; }
 800275a:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <function_triggerB+0x9c>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d007      	beq.n	8002774 <function_triggerB+0x64>
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <function_triggerB+0x9c>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	3301      	adds	r3, #1
 800276a:	4a10      	ldr	r2, [pc, #64]	@ (80027ac <function_triggerB+0x9c>)
 800276c:	6093      	str	r3, [r2, #8]
 800276e:	4a0f      	ldr	r2, [pc, #60]	@ (80027ac <function_triggerB+0x9c>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6053      	str	r3, [r2, #4]
			if( lh_io & (1 << pin) ){ nen[3] = nen[2]; nen[0] = 0; }
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2201      	movs	r2, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	461a      	mov	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <function_triggerB+0x8a>
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <function_triggerB+0x9c>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	4a08      	ldr	r2, [pc, #32]	@ (80027ac <function_triggerB+0x9c>)
 800278c:	60d3      	str	r3, [r2, #12]
 800278e:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <function_triggerB+0x9c>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
		break;
 8002794:	e001      	b.n	800279a <function_triggerB+0x8a>
		break;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <function_triggerB+0x8c>
		break;
 800279a:	bf00      	nop
	}
	return nen[3];
 800279c:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <function_triggerB+0x9c>)
 800279e:	68db      	ldr	r3, [r3, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	20000188 	.word	0x20000188

080027b0 <read_value>:

uint32_t read_value(void){ return mem[2];}
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4b03      	ldr	r3, [pc, #12]	@ (80027c4 <read_value+0x14>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000178 	.word	0x20000178

080027c8 <ARMLCD0_enable>:
void ARMLCD0_gotoxy(unsigned int y, unsigned int x);
void ARMLCD0_reboot(void);

/*** LCD0 Procedure & Function Definition ***/
ARMLCD0 ARMLCD0_enable(GPIO_TypeDef* reg)
{
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
	ireg = reg;
 80027d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002840 <ARMLCD0_enable+0x78>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6013      	str	r3, [r2, #0]

	setup_armlcd0.write = ARMLCD0_write;
 80027d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <ARMLCD0_enable+0x7c>)
 80027da:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <ARMLCD0_enable+0x80>)
 80027dc:	601a      	str	r2, [r3, #0]
	setup_armlcd0.read = ARMLCD0_read;
 80027de:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <ARMLCD0_enable+0x7c>)
 80027e0:	4a1a      	ldr	r2, [pc, #104]	@ (800284c <ARMLCD0_enable+0x84>)
 80027e2:	605a      	str	r2, [r3, #4]
	setup_armlcd0.BF = ARMLCD0_BF;
 80027e4:	4b17      	ldr	r3, [pc, #92]	@ (8002844 <ARMLCD0_enable+0x7c>)
 80027e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002850 <ARMLCD0_enable+0x88>)
 80027e8:	609a      	str	r2, [r3, #8]
	setup_armlcd0.putch = ARMLCD0_putch;
 80027ea:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <ARMLCD0_enable+0x7c>)
 80027ec:	4a19      	ldr	r2, [pc, #100]	@ (8002854 <ARMLCD0_enable+0x8c>)
 80027ee:	60da      	str	r2, [r3, #12]
	setup_armlcd0.getch = ARMLCD0_getch;
 80027f0:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <ARMLCD0_enable+0x7c>)
 80027f2:	4a19      	ldr	r2, [pc, #100]	@ (8002858 <ARMLCD0_enable+0x90>)
 80027f4:	611a      	str	r2, [r3, #16]
	setup_armlcd0.string = ARMLCD0_string; // RAW
 80027f6:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <ARMLCD0_enable+0x7c>)
 80027f8:	4a18      	ldr	r2, [pc, #96]	@ (800285c <ARMLCD0_enable+0x94>)
 80027fa:	615a      	str	r2, [r3, #20]
	setup_armlcd0.string_size = ARMLCD0_string_size; // RAW
 80027fc:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <ARMLCD0_enable+0x7c>)
 80027fe:	4a18      	ldr	r2, [pc, #96]	@ (8002860 <ARMLCD0_enable+0x98>)
 8002800:	619a      	str	r2, [r3, #24]
	setup_armlcd0.hspace = ARMLCD0_hspace;
 8002802:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <ARMLCD0_enable+0x7c>)
 8002804:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <ARMLCD0_enable+0x9c>)
 8002806:	61da      	str	r2, [r3, #28]
	setup_armlcd0.clear = ARMLCD0_clear;
 8002808:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <ARMLCD0_enable+0x7c>)
 800280a:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <ARMLCD0_enable+0xa0>)
 800280c:	621a      	str	r2, [r3, #32]
	setup_armlcd0.gotoxy = ARMLCD0_gotoxy;
 800280e:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <ARMLCD0_enable+0x7c>)
 8002810:	4a16      	ldr	r2, [pc, #88]	@ (800286c <ARMLCD0_enable+0xa4>)
 8002812:	625a      	str	r2, [r3, #36]	@ 0x24
	setup_armlcd0.reboot = ARMLCD0_reboot;
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <ARMLCD0_enable+0x7c>)
 8002816:	4a16      	ldr	r2, [pc, #88]	@ (8002870 <ARMLCD0_enable+0xa8>)
 8002818:	629a      	str	r2, [r3, #40]	@ 0x28

	ARMLCD0_inic();
 800281a:	f000 f835 	bl	8002888 <ARMLCD0_inic>
	
	return setup_armlcd0;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a08      	ldr	r2, [pc, #32]	@ (8002844 <ARMLCD0_enable+0x7c>)
 8002822:	461c      	mov	r4, r3
 8002824:	4615      	mov	r5, r2
 8002826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800282a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800282e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bdb0      	pop	{r4, r5, r7, pc}
 800283e:	bf00      	nop
 8002840:	200001c8 	.word	0x200001c8
 8002844:	2000019c 	.word	0x2000019c
 8002848:	080029d9 	.word	0x080029d9
 800284c:	08002bbd 	.word	0x08002bbd
 8002850:	08002d59 	.word	0x08002d59
 8002854:	08002db1 	.word	0x08002db1
 8002858:	08002d93 	.word	0x08002d93
 800285c:	08002dd1 	.word	0x08002dd1
 8002860:	08002dff 	.word	0x08002dff
 8002864:	08002e5b 	.word	0x08002e5b
 8002868:	08002e81 	.word	0x08002e81
 800286c:	08002e99 	.word	0x08002e99
 8002870:	08002f25 	.word	0x08002f25

08002874 <lcd0>:

ARMLCD0* lcd0(void){ return (ARMLCD0*) &setup_armlcd0; }
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
 8002878:	4b02      	ldr	r3, [pc, #8]	@ (8002884 <lcd0+0x10>)
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	2000019c 	.word	0x2000019c

08002888 <ARMLCD0_inic>:

void ARMLCD0_inic(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	//uint8_t repeat;

	clear_reg(&ireg->MODER,(3 << (ARMLCD0_RS * 2)) | (3 << (ARMLCD0_RW * 2)) | (3 << (ARMLCD0_EN * 2))); // reset control pins
 800288c:	4b4f      	ldr	r3, [pc, #316]	@ (80029cc <ARMLCD0_inic+0x144>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fe2a 	bl	80034ee <clear_reg>
	set_reg(&ireg->MODER,(1 << (ARMLCD0_RS * 2)) | (1 << (ARMLCD0_RW * 2)) | (1 << (ARMLCD0_EN * 2))); // control pins as output
 800289a:	4b4c      	ldr	r3, [pc, #304]	@ (80029cc <ARMLCD0_inic+0x144>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fe12 	bl	80034cc <set_reg>
	
	clear_reg(&ireg->PUPDR,(3 << (ARMLCD0_DB4 * 2)) | (3 << (ARMLCD0_DB5 * 2)) | (3 << (ARMLCD0_DB6 * 2)) | (3 << (ARMLCD0_DB7 * 2))); // reset pull up resistors
 80028a8:	4b48      	ldr	r3, [pc, #288]	@ (80029cc <ARMLCD0_inic+0x144>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	330c      	adds	r3, #12
 80028ae:	f44f 217f 	mov.w	r1, #1044480	@ 0xff000
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fe1b 	bl	80034ee <clear_reg>
	set_reg(&ireg->PUPDR,(1 << (ARMLCD0_DB4 * 2)) | (1 << (ARMLCD0_DB5 * 2)) | (1 << (ARMLCD0_DB6 * 2)) | (1 << (ARMLCD0_DB7 * 2))); // enable pull up resistors
 80028b8:	4b44      	ldr	r3, [pc, #272]	@ (80029cc <ARMLCD0_inic+0x144>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	330c      	adds	r3, #12
 80028be:	f44f 21aa 	mov.w	r1, #348160	@ 0x55000
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fe02 	bl	80034cc <set_reg>

	clear_reg(&ireg->MODER,3 << (ARMLCD0_NC * 2)); // reboot detect input
 80028c8:	4b40      	ldr	r3, [pc, #256]	@ (80029cc <ARMLCD0_inic+0x144>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f44f 1140 	mov.w	r1, #3145728	@ 0x300000
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fe0c 	bl	80034ee <clear_reg>
	
	clear_reg(&ireg->PUPDR,3 << (ARMLCD0_NC * 2)); // reset pull up resistors
 80028d6:	4b3d      	ldr	r3, [pc, #244]	@ (80029cc <ARMLCD0_inic+0x144>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	f44f 1140 	mov.w	r1, #3145728	@ 0x300000
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fe04 	bl	80034ee <clear_reg>
	set_reg(&ireg->PUPDR,1 << (ARMLCD0_NC * 2)); // pull up resistors
 80028e6:	4b39      	ldr	r3, [pc, #228]	@ (80029cc <ARMLCD0_inic+0x144>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	330c      	adds	r3, #12
 80028ec:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fdeb 	bl	80034cc <set_reg>

	clear_reg(&ireg->OSPEEDR,(3 << (ARMLCD0_RS * 2)) | (3 << (ARMLCD0_RW * 2)) | (3 << (ARMLCD0_EN * 2)) | (3 << (ARMLCD0_DB4 * 2)) | (3 << (ARMLCD0_DB5 * 2)) | (3 << (ARMLCD0_DB6 * 2)) | (3 << (ARMLCD0_DB7 * 2))); // reset speed
 80028f6:	4b35      	ldr	r3, [pc, #212]	@ (80029cc <ARMLCD0_inic+0x144>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3308      	adds	r3, #8
 80028fc:	4934      	ldr	r1, [pc, #208]	@ (80029d0 <ARMLCD0_inic+0x148>)
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fdf5 	bl	80034ee <clear_reg>
	//ireg->OSPEEDR |= ( (3 << (ARMLCD0_RS * 2)) | (3 << (ARMLCD0_RW * 2)) | (3 << (ARMLCD0_EN * 2)) | (3 << (ARMLCD0_DB4 * 2)) | (3 << (ARMLCD0_DB5 * 2)) | (3 << (ARMLCD0_DB6 * 2)) | (3 << (ARMLCD0_DB7 * 2)) ); // set speed
	 
	armlcd0_detect = ireg->IDR & (1 << ARMLCD0_NC);
 8002904:	4b31      	ldr	r3, [pc, #196]	@ (80029cc <ARMLCD0_inic+0x144>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290e:	4a31      	ldr	r2, [pc, #196]	@ (80029d4 <ARMLCD0_inic+0x14c>)
 8002910:	6013      	str	r3, [r2, #0]
	
	// INICIALIZACAO LCD datasheet
	_delay_ms(20); // using clock at 16Mhz
 8002912:	2014      	movs	r0, #20
 8002914:	f000 ff9e 	bl	8003854 <_delay_ms>
	ARMLCD0_write(0x38, ARMLCD0_INST); // function set
 8002918:	2100      	movs	r1, #0
 800291a:	2038      	movs	r0, #56	@ 0x38
 800291c:	f000 f85c 	bl	80029d8 <ARMLCD0_write>
	_delay_10us(4);
 8002920:	2004      	movs	r0, #4
 8002922:	f000 ff6b 	bl	80037fc <_delay_10us>
	ARMLCD0_write(0x38, ARMLCD0_INST); // function set
 8002926:	2100      	movs	r1, #0
 8002928:	2038      	movs	r0, #56	@ 0x38
 800292a:	f000 f855 	bl	80029d8 <ARMLCD0_write>
	_delay_10us(10);
 800292e:	200a      	movs	r0, #10
 8002930:	f000 ff64 	bl	80037fc <_delay_10us>
	ARMLCD0_write(0x38, ARMLCD0_INST); // function set
 8002934:	2100      	movs	r1, #0
 8002936:	2038      	movs	r0, #56	@ 0x38
 8002938:	f000 f84e 	bl	80029d8 <ARMLCD0_write>
	_delay_10us(4);
 800293c:	2004      	movs	r0, #4
 800293e:	f000 ff5d 	bl	80037fc <_delay_10us>
	ARMLCD0_write(0x28, ARMLCD0_INST); // function set 2B
 8002942:	2100      	movs	r1, #0
 8002944:	2028      	movs	r0, #40	@ 0x28
 8002946:	f000 f847 	bl	80029d8 <ARMLCD0_write>
	_delay_10us(4);
 800294a:	2004      	movs	r0, #4
 800294c:	f000 ff56 	bl	80037fc <_delay_10us>
	ARMLCD0_write(0x28, ARMLCD0_INST); // function set 2B
 8002950:	2100      	movs	r1, #0
 8002952:	2028      	movs	r0, #40	@ 0x28
 8002954:	f000 f840 	bl	80029d8 <ARMLCD0_write>
	_delay_10us(4);
 8002958:	2004      	movs	r0, #4
 800295a:	f000 ff4f 	bl	80037fc <_delay_10us>
	
	//for(repeat = 1 ; repeat ; repeat--){
		// repeat twice in 4 bit length
		ARMLCD0_write(0x28, ARMLCD0_INST); // function set 2B
 800295e:	2100      	movs	r1, #0
 8002960:	2028      	movs	r0, #40	@ 0x28
 8002962:	f000 f839 	bl	80029d8 <ARMLCD0_write>
		ARMLCD0_BF();
 8002966:	f000 f9f7 	bl	8002d58 <ARMLCD0_BF>
		ARMLCD0_write(0x28, ARMLCD0_INST); // function set 2B
 800296a:	2100      	movs	r1, #0
 800296c:	2028      	movs	r0, #40	@ 0x28
 800296e:	f000 f833 	bl	80029d8 <ARMLCD0_write>
		ARMLCD0_BF();
 8002972:	f000 f9f1 	bl	8002d58 <ARMLCD0_BF>

		ARMLCD0_write(0x0C, ARMLCD0_INST); // display on/off control
 8002976:	2100      	movs	r1, #0
 8002978:	200c      	movs	r0, #12
 800297a:	f000 f82d 	bl	80029d8 <ARMLCD0_write>
		ARMLCD0_BF();
 800297e:	f000 f9eb 	bl	8002d58 <ARMLCD0_BF>
		ARMLCD0_write(0x0C, ARMLCD0_INST); // display on/off control
 8002982:	2100      	movs	r1, #0
 8002984:	200c      	movs	r0, #12
 8002986:	f000 f827 	bl	80029d8 <ARMLCD0_write>
		ARMLCD0_BF();
 800298a:	f000 f9e5 	bl	8002d58 <ARMLCD0_BF>

		ARMLCD0_write(0x01, ARMLCD0_INST); // clear display
 800298e:	2100      	movs	r1, #0
 8002990:	2001      	movs	r0, #1
 8002992:	f000 f821 	bl	80029d8 <ARMLCD0_write>
		ARMLCD0_BF();
 8002996:	f000 f9df 	bl	8002d58 <ARMLCD0_BF>
		ARMLCD0_write(0x01, ARMLCD0_INST); // clear display
 800299a:	2100      	movs	r1, #0
 800299c:	2001      	movs	r0, #1
 800299e:	f000 f81b 	bl	80029d8 <ARMLCD0_write>
		ARMLCD0_BF();
 80029a2:	f000 f9d9 	bl	8002d58 <ARMLCD0_BF>

		ARMLCD0_write(0x06, ARMLCD0_INST); // entry mode set (crazy settings)
 80029a6:	2100      	movs	r1, #0
 80029a8:	2006      	movs	r0, #6
 80029aa:	f000 f815 	bl	80029d8 <ARMLCD0_write>
		ARMLCD0_BF();
 80029ae:	f000 f9d3 	bl	8002d58 <ARMLCD0_BF>
		ARMLCD0_write(0x06, ARMLCD0_INST); // entry mode set (crazy settings)
 80029b2:	2100      	movs	r1, #0
 80029b4:	2006      	movs	r0, #6
 80029b6:	f000 f80f 	bl	80029d8 <ARMLCD0_write>
		ARMLCD0_BF();
 80029ba:	f000 f9cd 	bl	8002d58 <ARMLCD0_BF>
	// INICIALIZATION END
	// ARMLCD0_write(0x1F, ARMLCD0_INST); // cursor or display shift
	// _delay_10us(4);
	// ARMLCD0_write(0x03, ARMLCD0_INST); // return home
	// _delay_ms(10);
	ARMLCD0_gotoxy(0,0);
 80029be:	2100      	movs	r1, #0
 80029c0:	2000      	movs	r0, #0
 80029c2:	f000 fa69 	bl	8002e98 <ARMLCD0_gotoxy>
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200001c8 	.word	0x200001c8
 80029d0:	000fffc0 	.word	0x000fffc0
 80029d4:	200001cc 	.word	0x200001cc

080029d8 <ARMLCD0_write>:
void ARMLCD0_write(char c, unsigned short D_I)
{ // write to LCD
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	460a      	mov	r2, r1
 80029e2:	71fb      	strb	r3, [r7, #7]
 80029e4:	4613      	mov	r3, r2
 80029e6:	80bb      	strh	r3, [r7, #4]
	reset_hpins(ireg,1 << ARMLCD0_RW); // lcd as input
 80029e8:	4b73      	ldr	r3, [pc, #460]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2110      	movs	r1, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fec1 	bl	8003776 <reset_hpins>
	clear_reg(&ireg->MODER,(3 << (ARMLCD0_DB4 * 2)) | (3 << (ARMLCD0_DB5 * 2)) | (3 << (ARMLCD0_DB6 * 2)) | (3 << (ARMLCD0_DB7 * 2))); // reset mcu output
 80029f4:	4b70      	ldr	r3, [pc, #448]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 217f 	mov.w	r1, #1044480	@ 0xff000
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fd76 	bl	80034ee <clear_reg>
	set_reg(&ireg->MODER,(1 << (ARMLCD0_DB4 * 2)) | (1 << (ARMLCD0_DB5 * 2)) | (1 << (ARMLCD0_DB6 * 2)) | (1 << (ARMLCD0_DB7 * 2))); // mcu as output
 8002a02:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f44f 21aa 	mov.w	r1, #348160	@ 0x55000
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fd5e 	bl	80034cc <set_reg>
	
	if(D_I) set_hpins(ireg,1 << ARMLCD0_RS); else reset_hpins(ireg,1 << ARMLCD0_RS);
 8002a10:	88bb      	ldrh	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <ARMLCD0_write+0x4c>
 8002a16:	4b68      	ldr	r3, [pc, #416]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2108      	movs	r1, #8
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fe9b 	bl	8003758 <set_hpins>
 8002a22:	e005      	b.n	8002a30 <ARMLCD0_write+0x58>
 8002a24:	4b64      	ldr	r3, [pc, #400]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2108      	movs	r1, #8
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fea3 	bl	8003776 <reset_hpins>
	
	set_hpins(ireg, 1 << ARMLCD0_EN);
 8002a30:	4b61      	ldr	r3, [pc, #388]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2120      	movs	r1, #32
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fe8e 	bl	8003758 <set_hpins>
	if(c & 0x80) set_hpins(ireg,1 << ARMLCD0_DB7); else reset_hpins(ireg,1 << ARMLCD0_DB7);
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da07      	bge.n	8002a54 <ARMLCD0_write+0x7c>
 8002a44:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fe83 	bl	8003758 <set_hpins>
 8002a52:	e006      	b.n	8002a62 <ARMLCD0_write+0x8a>
 8002a54:	4b58      	ldr	r3, [pc, #352]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fe8a 	bl	8003776 <reset_hpins>
	if(c & 0x40) set_hpins(ireg,1 << ARMLCD0_DB6); else reset_hpins(ireg,1 << ARMLCD0_DB6);
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <ARMLCD0_write+0xa4>
 8002a6c:	4b52      	ldr	r3, [pc, #328]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fe6f 	bl	8003758 <set_hpins>
 8002a7a:	e006      	b.n	8002a8a <ARMLCD0_write+0xb2>
 8002a7c:	4b4e      	ldr	r3, [pc, #312]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fe76 	bl	8003776 <reset_hpins>
	if(c & 0x20) set_hpins(ireg,1 << ARMLCD0_DB5); else reset_hpins(ireg,1 << ARMLCD0_DB5);
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <ARMLCD0_write+0xca>
 8002a94:	4b48      	ldr	r3, [pc, #288]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2180      	movs	r1, #128	@ 0x80
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fe5c 	bl	8003758 <set_hpins>
 8002aa0:	e005      	b.n	8002aae <ARMLCD0_write+0xd6>
 8002aa2:	4b45      	ldr	r3, [pc, #276]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2180      	movs	r1, #128	@ 0x80
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fe64 	bl	8003776 <reset_hpins>
	if(c & 0x10) set_hpins(ireg,1 << ARMLCD0_DB4); else reset_hpins(ireg,1 << ARMLCD0_DB4);
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <ARMLCD0_write+0xee>
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2140      	movs	r1, #64	@ 0x40
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fe4a 	bl	8003758 <set_hpins>
 8002ac4:	e005      	b.n	8002ad2 <ARMLCD0_write+0xfa>
 8002ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2140      	movs	r1, #64	@ 0x40
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fe52 	bl	8003776 <reset_hpins>
	reset_hpins(ireg,1 << ARMLCD0_EN);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2120      	movs	r1, #32
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fe4c 	bl	8003776 <reset_hpins>
	
	if(D_I) set_hpins(ireg,1 << ARMLCD0_RS); else reset_hpins(ireg,1 << ARMLCD0_RS);
 8002ade:	88bb      	ldrh	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <ARMLCD0_write+0x11a>
 8002ae4:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2108      	movs	r1, #8
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fe34 	bl	8003758 <set_hpins>
 8002af0:	e005      	b.n	8002afe <ARMLCD0_write+0x126>
 8002af2:	4b31      	ldr	r3, [pc, #196]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2108      	movs	r1, #8
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fe3c 	bl	8003776 <reset_hpins>
	
	set_hpins(ireg,1 << ARMLCD0_EN);
 8002afe:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2120      	movs	r1, #32
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fe27 	bl	8003758 <set_hpins>
	if(c & 0x08) set_hpins(ireg,1 << ARMLCD0_DB7); else reset_hpins(ireg,1 << ARMLCD0_DB7);
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <ARMLCD0_write+0x14c>
 8002b14:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fe1b 	bl	8003758 <set_hpins>
 8002b22:	e006      	b.n	8002b32 <ARMLCD0_write+0x15a>
 8002b24:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fe22 	bl	8003776 <reset_hpins>
	if(c & 0x04) set_hpins(ireg,1 << ARMLCD0_DB6); else reset_hpins(ireg,1 << ARMLCD0_DB6);
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <ARMLCD0_write+0x174>
 8002b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fe07 	bl	8003758 <set_hpins>
 8002b4a:	e006      	b.n	8002b5a <ARMLCD0_write+0x182>
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fe0e 	bl	8003776 <reset_hpins>
	if(c & 0x02) set_hpins(ireg,1 << ARMLCD0_DB5); else reset_hpins(ireg,1 << ARMLCD0_DB5);
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <ARMLCD0_write+0x19a>
 8002b64:	4b14      	ldr	r3, [pc, #80]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2180      	movs	r1, #128	@ 0x80
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fdf4 	bl	8003758 <set_hpins>
 8002b70:	e005      	b.n	8002b7e <ARMLCD0_write+0x1a6>
 8002b72:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2180      	movs	r1, #128	@ 0x80
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fdfc 	bl	8003776 <reset_hpins>
	if(c & 0x01) set_hpins(ireg,1 << ARMLCD0_DB4); else reset_hpins(ireg,1 << ARMLCD0_DB4);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <ARMLCD0_write+0x1be>
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2140      	movs	r1, #64	@ 0x40
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fde2 	bl	8003758 <set_hpins>
 8002b94:	e005      	b.n	8002ba2 <ARMLCD0_write+0x1ca>
 8002b96:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2140      	movs	r1, #64	@ 0x40
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fdea 	bl	8003776 <reset_hpins>
	reset_hpins(ireg,1 << ARMLCD0_EN);
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <ARMLCD0_write+0x1e0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fde4 	bl	8003776 <reset_hpins>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200001c8 	.word	0x200001c8

08002bbc <ARMLCD0_read>:

char ARMLCD0_read(unsigned short D_I)
{ // Read from LCD
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	80fb      	strh	r3, [r7, #6]
	uint32_t data = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
	uint8_t c = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
	clear_reg(&ireg->MODER,(3 << (ARMLCD0_DB4 * 2)) | (3 << (ARMLCD0_DB5 * 2)) | (3 << (ARMLCD0_DB6 * 2)) | (3 << (ARMLCD0_DB7 * 2))); // reset mcu input
 8002bce:	4b61      	ldr	r3, [pc, #388]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f44f 217f 	mov.w	r1, #1044480	@ 0xff000
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fc89 	bl	80034ee <clear_reg>
	set_hpins(ireg,1 << ARMLCD0_RW); // lcd as output
 8002bdc:	4b5d      	ldr	r3, [pc, #372]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2110      	movs	r1, #16
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fdb8 	bl	8003758 <set_hpins>
	
	if(D_I) set_hpins(ireg,1 << ARMLCD0_RS); else reset_hpins(ireg,1 << ARMLCD0_RS);
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <ARMLCD0_read+0x40>
 8002bee:	4b59      	ldr	r3, [pc, #356]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2108      	movs	r1, #8
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fdaf 	bl	8003758 <set_hpins>
 8002bfa:	e005      	b.n	8002c08 <ARMLCD0_read+0x4c>
 8002bfc:	4b55      	ldr	r3, [pc, #340]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2108      	movs	r1, #8
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fdb7 	bl	8003776 <reset_hpins>
	
	set_hpins(ireg,1 << ARMLCD0_EN);
 8002c08:	4b52      	ldr	r3, [pc, #328]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2120      	movs	r1, #32
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fda2 	bl	8003758 <set_hpins>
	data = ireg->IDR; // read data
 8002c14:	4b4f      	ldr	r3, [pc, #316]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	60bb      	str	r3, [r7, #8]
	reset_hpins(ireg,1 << ARMLCD0_EN);
 8002c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2120      	movs	r1, #32
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fda7 	bl	8003776 <reset_hpins>
	
	if(data & (1 << ARMLCD0_DB7)) c |= 1 << 7; else c &= ~(1 << 7);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <ARMLCD0_read+0x80>
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	e003      	b.n	8002c44 <ARMLCD0_read+0x88>
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c42:	73fb      	strb	r3, [r7, #15]
	if(data & (1 << ARMLCD0_DB6)) c |= 1 << 6; else c &= ~(1 << 6);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <ARMLCD0_read+0x9c>
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e003      	b.n	8002c60 <ARMLCD0_read+0xa4>
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c5e:	73fb      	strb	r3, [r7, #15]
	if(data & (1 << ARMLCD0_DB5)) c |= 1 << 5; else c &= ~(1 << 5);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <ARMLCD0_read+0xb8>
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	f043 0320 	orr.w	r3, r3, #32
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	e003      	b.n	8002c7c <ARMLCD0_read+0xc0>
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	f023 0320 	bic.w	r3, r3, #32
 8002c7a:	73fb      	strb	r3, [r7, #15]
	if(data & (1 << ARMLCD0_DB4)) c |= 1 << 4; else c &= ~(1 << 4);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <ARMLCD0_read+0xd4>
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	f043 0310 	orr.w	r3, r3, #16
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	e003      	b.n	8002c98 <ARMLCD0_read+0xdc>
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	f023 0310 	bic.w	r3, r3, #16
 8002c96:	73fb      	strb	r3, [r7, #15]
	
	if(D_I) set_hpins(ireg,1 << ARMLCD0_RS); else reset_hpins(ireg,1 << ARMLCD0_RS);
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d006      	beq.n	8002cac <ARMLCD0_read+0xf0>
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2108      	movs	r1, #8
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fd57 	bl	8003758 <set_hpins>
 8002caa:	e005      	b.n	8002cb8 <ARMLCD0_read+0xfc>
 8002cac:	4b29      	ldr	r3, [pc, #164]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2108      	movs	r1, #8
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fd5f 	bl	8003776 <reset_hpins>
	
	set_hpins(ireg,1 << ARMLCD0_EN);
 8002cb8:	4b26      	ldr	r3, [pc, #152]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2120      	movs	r1, #32
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fd4a 	bl	8003758 <set_hpins>
	data = ireg->IDR; // read data
 8002cc4:	4b23      	ldr	r3, [pc, #140]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	60bb      	str	r3, [r7, #8]
	reset_hpins(ireg,1 << ARMLCD0_EN);
 8002ccc:	4b21      	ldr	r3, [pc, #132]	@ (8002d54 <ARMLCD0_read+0x198>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2120      	movs	r1, #32
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fd4f 	bl	8003776 <reset_hpins>

	if(data & (1 << ARMLCD0_DB7)) c |= 1 << 3; else c &= ~(1 << 3);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <ARMLCD0_read+0x130>
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	f043 0308 	orr.w	r3, r3, #8
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e003      	b.n	8002cf4 <ARMLCD0_read+0x138>
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	f023 0308 	bic.w	r3, r3, #8
 8002cf2:	73fb      	strb	r3, [r7, #15]
	if(data & (1 << ARMLCD0_DB6)) c |= 1 << 2; else c &= ~(1 << 2);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <ARMLCD0_read+0x14c>
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	73fb      	strb	r3, [r7, #15]
 8002d06:	e003      	b.n	8002d10 <ARMLCD0_read+0x154>
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	f023 0304 	bic.w	r3, r3, #4
 8002d0e:	73fb      	strb	r3, [r7, #15]
	if(data & (1 << ARMLCD0_DB5)) c |= 1 << 1; else c &= ~(1 << 1);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <ARMLCD0_read+0x168>
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e003      	b.n	8002d2c <ARMLCD0_read+0x170>
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	f023 0302 	bic.w	r3, r3, #2
 8002d2a:	73fb      	strb	r3, [r7, #15]
	if(data & (1 << ARMLCD0_DB4)) c |= 1 << 0; else c &= ~(1 << 0);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <ARMLCD0_read+0x184>
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
 8002d3e:	e003      	b.n	8002d48 <ARMLCD0_read+0x18c>
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]

	return c;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200001c8 	.word	0x200001c8

08002d58 <ARMLCD0_BF>:

void ARMLCD0_BF(void)
//	It has to read at minimum one equal and exit
//	immediately if not equal, weird property.
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
	uint8_t i;
	char inst = 0x80;
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	71bb      	strb	r3, [r7, #6]
	for(i=0; 0x80 & inst; i++){
 8002d62:	2300      	movs	r3, #0
 8002d64:	71fb      	strb	r3, [r7, #7]
 8002d66:	e00a      	b.n	8002d7e <ARMLCD0_BF+0x26>
		inst = ARMLCD0_read(ARMLCD0_INST);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7ff ff27 	bl	8002bbc <ARMLCD0_read>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71bb      	strb	r3, [r7, #6]
		if(i > 10) // 1
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2b0a      	cmp	r3, #10
 8002d76:	d807      	bhi.n	8002d88 <ARMLCD0_BF+0x30>
	for(i=0; 0x80 & inst; i++){
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	71fb      	strb	r3, [r7, #7]
 8002d7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	dbf0      	blt.n	8002d68 <ARMLCD0_BF+0x10>
			break;
	}
}
 8002d86:	e000      	b.n	8002d8a <ARMLCD0_BF+0x32>
			break;
 8002d88:	bf00      	nop
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <ARMLCD0_getch>:

char ARMLCD0_getch(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
	char c;
	c = ARMLCD0_read(ARMLCD0_DATA);
 8002d98:	2001      	movs	r0, #1
 8002d9a:	f7ff ff0f 	bl	8002bbc <ARMLCD0_read>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
	ARMLCD0_BF();
 8002da2:	f7ff ffd9 	bl	8002d58 <ARMLCD0_BF>
	return c;
 8002da6:	79fb      	ldrb	r3, [r7, #7]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <ARMLCD0_putch>:

void ARMLCD0_putch(char c)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
	ARMLCD0_write(c, ARMLCD0_DATA);
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fe0a 	bl	80029d8 <ARMLCD0_write>
	ARMLCD0_BF();
 8002dc4:	f7ff ffc8 	bl	8002d58 <ARMLCD0_BF>
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <ARMLCD0_string>:

void ARMLCD0_string(const char* s)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	char tmp;
	while(*s){
 8002dd8:	e008      	b.n	8002dec <ARMLCD0_string+0x1c>
		tmp = *(s++);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	73fb      	strb	r3, [r7, #15]
		ARMLCD0_putch(tmp);
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ffe2 	bl	8002db0 <ARMLCD0_putch>
	while(*s){
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f2      	bne.n	8002dda <ARMLCD0_string+0xa>
	}
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <ARMLCD0_string_size>:

void ARMLCD0_string_size(const char* s, uint32_t size)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
	char tmp;
	uint32_t pos = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
	while(*s){
 8002e0c:	e00f      	b.n	8002e2e <ARMLCD0_string_size+0x30>
		tmp=*(s++);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	72fb      	strb	r3, [r7, #11]
		pos++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
		if(pos > size) // 1 TO SIZE+1
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d808      	bhi.n	8002e38 <ARMLCD0_string_size+0x3a>
			break;
		ARMLCD0_putch(tmp);
 8002e26:	7afb      	ldrb	r3, [r7, #11]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ffc1 	bl	8002db0 <ARMLCD0_putch>
	while(*s){
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1eb      	bne.n	8002e0e <ARMLCD0_string_size+0x10>
 8002e36:	e007      	b.n	8002e48 <ARMLCD0_string_size+0x4a>
			break;
 8002e38:	bf00      	nop
	}
	while(pos < size){ // TO SIZE
 8002e3a:	e005      	b.n	8002e48 <ARMLCD0_string_size+0x4a>
		ARMLCD0_putch(' ');
 8002e3c:	2020      	movs	r0, #32
 8002e3e:	f7ff ffb7 	bl	8002db0 <ARMLCD0_putch>
		pos++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3301      	adds	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
	while(pos < size){ // TO SIZE
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d3f5      	bcc.n	8002e3c <ARMLCD0_string_size+0x3e>
	}
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <ARMLCD0_hspace>:

void ARMLCD0_hspace(uint32_t n)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
	for(; n; n--){
 8002e62:	e005      	b.n	8002e70 <ARMLCD0_hspace+0x16>
		ARMLCD0_putch(' ');
 8002e64:	2020      	movs	r0, #32
 8002e66:	f7ff ffa3 	bl	8002db0 <ARMLCD0_putch>
	for(; n; n--){
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f6      	bne.n	8002e64 <ARMLCD0_hspace+0xa>
	}
}
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <ARMLCD0_clear>:

void ARMLCD0_clear(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
	ARMLCD0_write(0x01, ARMLCD0_INST);
 8002e84:	2100      	movs	r1, #0
 8002e86:	2001      	movs	r0, #1
 8002e88:	f7ff fda6 	bl	80029d8 <ARMLCD0_write>
	_delay_10us(200);
 8002e8c:	20c8      	movs	r0, #200	@ 0xc8
 8002e8e:	f000 fcb5 	bl	80037fc <_delay_10us>
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <ARMLCD0_gotoxy>:

void ARMLCD0_gotoxy(unsigned int y, unsigned int x)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
	switch(y){
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d837      	bhi.n	8002f18 <ARMLCD0_gotoxy+0x80>
 8002ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb0 <ARMLCD0_gotoxy+0x18>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ec1 	.word	0x08002ec1
 8002eb4:	08002ed7 	.word	0x08002ed7
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002f03 	.word	0x08002f03
		case 0:
			ARMLCD0_write((char)(0x80 + x), ARMLCD0_INST);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3b80      	subs	r3, #128	@ 0x80
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fd84 	bl	80029d8 <ARMLCD0_write>
			ARMLCD0_BF();
 8002ed0:	f7ff ff42 	bl	8002d58 <ARMLCD0_BF>
		break;
 8002ed4:	e021      	b.n	8002f1a <ARMLCD0_gotoxy+0x82>
		case 1:
			ARMLCD0_write((char)(0xC0 + x), ARMLCD0_INST);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3b40      	subs	r3, #64	@ 0x40
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fd79 	bl	80029d8 <ARMLCD0_write>
			ARMLCD0_BF();
 8002ee6:	f7ff ff37 	bl	8002d58 <ARMLCD0_BF>
		break;
 8002eea:	e016      	b.n	8002f1a <ARMLCD0_gotoxy+0x82>
		case 2:
			ARMLCD0_write((char)(0x94 + x), ARMLCD0_INST); // 0x94
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3b6c      	subs	r3, #108	@ 0x6c
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fd6e 	bl	80029d8 <ARMLCD0_write>
			ARMLCD0_BF();
 8002efc:	f7ff ff2c 	bl	8002d58 <ARMLCD0_BF>
		break;
 8002f00:	e00b      	b.n	8002f1a <ARMLCD0_gotoxy+0x82>
		case 3:
			ARMLCD0_write((char)(0xD4 + x), ARMLCD0_INST); // 0xD4
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3b2c      	subs	r3, #44	@ 0x2c
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fd63 	bl	80029d8 <ARMLCD0_write>
			ARMLCD0_BF();
 8002f12:	f7ff ff21 	bl	8002d58 <ARMLCD0_BF>
		break;
 8002f16:	e000      	b.n	8002f1a <ARMLCD0_gotoxy+0x82>
		default:
		break;
 8002f18:	bf00      	nop
	}
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop

08002f24 <ARMLCD0_reboot>:

void ARMLCD0_reboot(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
	// low high detect pin NC
	uint32_t i;
	uint32_t tmp;
	tmp = ireg->IDR & (1 << ARMLCD0_NC);
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <ARMLCD0_reboot+0x3c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	607b      	str	r3, [r7, #4]
	i = tmp ^ armlcd0_detect;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <ARMLCD0_reboot+0x40>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4053      	eors	r3, r2
 8002f3e:	603b      	str	r3, [r7, #0]
	i &= tmp;
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4013      	ands	r3, r2
 8002f46:	603b      	str	r3, [r7, #0]
	if(i)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <ARMLCD0_reboot+0x2e>
		ARMLCD0_inic();
 8002f4e:	f7ff fc9b 	bl	8002888 <ARMLCD0_inic>
	armlcd0_detect = tmp;
 8002f52:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <ARMLCD0_reboot+0x40>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200001c8 	.word	0x200001c8
 8002f64:	200001cc 	.word	0x200001cc

08002f68 <gethpre>:

STM32FXXXSYSTEM_prescaler* System_prescaler_inic(void);
STM32FXXXPLL_prescaler* Pll_prescaler_inic(void);

uint16_t gethpre(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
	uint32_t value = get_reg_block(RCC->CFGR, 4, 4);
 8002f6e:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <gethpre+0x8c>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2204      	movs	r2, #4
 8002f74:	2104      	movs	r1, #4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 facb 	bl	8003512 <get_reg_block>
 8002f7c:	6078      	str	r0, [r7, #4]
	switch(value)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3b08      	subs	r3, #8
 8002f82:	2b07      	cmp	r3, #7
 8002f84:	d82c      	bhi.n	8002fe0 <gethpre+0x78>
 8002f86:	a201      	add	r2, pc, #4	@ (adr r2, 8002f8c <gethpre+0x24>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002fad 	.word	0x08002fad
 8002f90:	08002fb3 	.word	0x08002fb3
 8002f94:	08002fb9 	.word	0x08002fb9
 8002f98:	08002fbf 	.word	0x08002fbf
 8002f9c:	08002fc5 	.word	0x08002fc5
 8002fa0:	08002fcb 	.word	0x08002fcb
 8002fa4:	08002fd1 	.word	0x08002fd1
 8002fa8:	08002fd9 	.word	0x08002fd9
	{
		case 0b1000:
			value = 2;
 8002fac:	2302      	movs	r3, #2
 8002fae:	607b      	str	r3, [r7, #4]
		break;
 8002fb0:	e019      	b.n	8002fe6 <gethpre+0x7e>
		case 0b1001:
			value = 4;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	607b      	str	r3, [r7, #4]
		break;
 8002fb6:	e016      	b.n	8002fe6 <gethpre+0x7e>
		case 0b1010:
			value = 8;
 8002fb8:	2308      	movs	r3, #8
 8002fba:	607b      	str	r3, [r7, #4]
		break;
 8002fbc:	e013      	b.n	8002fe6 <gethpre+0x7e>
		case 0b1011:
			value = 16;
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	607b      	str	r3, [r7, #4]
		break;
 8002fc2:	e010      	b.n	8002fe6 <gethpre+0x7e>
		case 0b1100:
			value = 64;
 8002fc4:	2340      	movs	r3, #64	@ 0x40
 8002fc6:	607b      	str	r3, [r7, #4]
		break;
 8002fc8:	e00d      	b.n	8002fe6 <gethpre+0x7e>
		case 0b1101:
			value = 128;
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	607b      	str	r3, [r7, #4]
		break;
 8002fce:	e00a      	b.n	8002fe6 <gethpre+0x7e>
		case 0b1110:
			value = 256;
 8002fd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fd4:	607b      	str	r3, [r7, #4]
		break;
 8002fd6:	e006      	b.n	8002fe6 <gethpre+0x7e>
		case 0b1111:
			value = 512;
 8002fd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fdc:	607b      	str	r3, [r7, #4]
		break;
 8002fde:	e002      	b.n	8002fe6 <gethpre+0x7e>
		default:
			value = 1;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	607b      	str	r3, [r7, #4]
		break;
 8002fe4:	bf00      	nop
	}
	return value;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	b29b      	uxth	r3, r3
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800

08002ff8 <gethppre1>:
uint8_t gethppre1(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
	uint32_t value = get_reg_block(RCC->CFGR, 3, 10);
 8002ffe:	4b16      	ldr	r3, [pc, #88]	@ (8003058 <gethppre1+0x60>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	220a      	movs	r2, #10
 8003004:	2103      	movs	r1, #3
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fa83 	bl	8003512 <get_reg_block>
 800300c:	6078      	str	r0, [r7, #4]
	switch(value)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3b04      	subs	r3, #4
 8003012:	2b03      	cmp	r3, #3
 8003014:	d816      	bhi.n	8003044 <gethppre1+0x4c>
 8003016:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <gethppre1+0x24>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	0800302d 	.word	0x0800302d
 8003020:	08003033 	.word	0x08003033
 8003024:	08003039 	.word	0x08003039
 8003028:	0800303f 	.word	0x0800303f
	{
		case 0b100:
			value = 2;
 800302c:	2302      	movs	r3, #2
 800302e:	607b      	str	r3, [r7, #4]
		break;
 8003030:	e00b      	b.n	800304a <gethppre1+0x52>
		case 0b101:
			value = 4;
 8003032:	2304      	movs	r3, #4
 8003034:	607b      	str	r3, [r7, #4]
		break;
 8003036:	e008      	b.n	800304a <gethppre1+0x52>
		case 0b110:
			value = 8;
 8003038:	2308      	movs	r3, #8
 800303a:	607b      	str	r3, [r7, #4]
		break;
 800303c:	e005      	b.n	800304a <gethppre1+0x52>
		case 0b111:
			value = 16;
 800303e:	2310      	movs	r3, #16
 8003040:	607b      	str	r3, [r7, #4]
		break;
 8003042:	e002      	b.n	800304a <gethppre1+0x52>
		default:
			value = 1;
 8003044:	2301      	movs	r3, #1
 8003046:	607b      	str	r3, [r7, #4]
		break;
 8003048:	bf00      	nop
	}
	return value;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	b2db      	uxtb	r3, r3
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <gethppre2>:
uint8_t gethppre2(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
	uint32_t value = get_reg_block(RCC->CFGR, 3, 13);
 8003062:	4b16      	ldr	r3, [pc, #88]	@ (80030bc <gethppre2+0x60>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	220d      	movs	r2, #13
 8003068:	2103      	movs	r1, #3
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fa51 	bl	8003512 <get_reg_block>
 8003070:	6078      	str	r0, [r7, #4]
	switch(value)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3b04      	subs	r3, #4
 8003076:	2b03      	cmp	r3, #3
 8003078:	d816      	bhi.n	80030a8 <gethppre2+0x4c>
 800307a:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <gethppre2+0x24>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	08003091 	.word	0x08003091
 8003084:	08003097 	.word	0x08003097
 8003088:	0800309d 	.word	0x0800309d
 800308c:	080030a3 	.word	0x080030a3
	{
		case 0b100:
			value = 2;
 8003090:	2302      	movs	r3, #2
 8003092:	607b      	str	r3, [r7, #4]
		break;
 8003094:	e00b      	b.n	80030ae <gethppre2+0x52>
		case 0b101:
			value = 4;
 8003096:	2304      	movs	r3, #4
 8003098:	607b      	str	r3, [r7, #4]
		break;
 800309a:	e008      	b.n	80030ae <gethppre2+0x52>
		case 0b110:
			value = 8;
 800309c:	2308      	movs	r3, #8
 800309e:	607b      	str	r3, [r7, #4]
		break;
 80030a0:	e005      	b.n	80030ae <gethppre2+0x52>
		case 0b111:
			value = 16;
 80030a2:	2310      	movs	r3, #16
 80030a4:	607b      	str	r3, [r7, #4]
		break;
 80030a6:	e002      	b.n	80030ae <gethppre2+0x52>
		default:
			value = 1;
 80030a8:	2301      	movs	r3, #1
 80030aa:	607b      	str	r3, [r7, #4]
		break;
 80030ac:	bf00      	nop
	}
	return value;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	b2db      	uxtb	r3, r3
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800

080030c0 <getrtcpre>:
uint8_t getrtcpre(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
	return get_reg_block(RCC->CFGR, 5, 16);
 80030c4:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <getrtcpre+0x1c>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2210      	movs	r2, #16
 80030ca:	2105      	movs	r1, #5
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fa20 	bl	8003512 <get_reg_block>
 80030d2:	4603      	mov	r3, r0
 80030d4:	b2db      	uxtb	r3, r3
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800

080030e0 <gethmco1pre>:
uint8_t gethmco1pre(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
	uint32_t value = get_reg_block(RCC->CFGR, 3, 24);
 80030e6:	4b16      	ldr	r3, [pc, #88]	@ (8003140 <gethmco1pre+0x60>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2218      	movs	r2, #24
 80030ec:	2103      	movs	r1, #3
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fa0f 	bl	8003512 <get_reg_block>
 80030f4:	6078      	str	r0, [r7, #4]
	switch(value)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3b04      	subs	r3, #4
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d816      	bhi.n	800312c <gethmco1pre+0x4c>
 80030fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003104 <gethmco1pre+0x24>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003115 	.word	0x08003115
 8003108:	0800311b 	.word	0x0800311b
 800310c:	08003121 	.word	0x08003121
 8003110:	08003127 	.word	0x08003127
	{
		case 0b100:
			value = 2;
 8003114:	2302      	movs	r3, #2
 8003116:	607b      	str	r3, [r7, #4]
		break;
 8003118:	e00b      	b.n	8003132 <gethmco1pre+0x52>
		case 0b101:
			value = 3;
 800311a:	2303      	movs	r3, #3
 800311c:	607b      	str	r3, [r7, #4]
		break;
 800311e:	e008      	b.n	8003132 <gethmco1pre+0x52>
		case 0b110:
			value = 4;
 8003120:	2304      	movs	r3, #4
 8003122:	607b      	str	r3, [r7, #4]
		break;
 8003124:	e005      	b.n	8003132 <gethmco1pre+0x52>
		case 0b111:
			value = 5;
 8003126:	2305      	movs	r3, #5
 8003128:	607b      	str	r3, [r7, #4]
		break;
 800312a:	e002      	b.n	8003132 <gethmco1pre+0x52>
		default:
			value = 1;
 800312c:	2301      	movs	r3, #1
 800312e:	607b      	str	r3, [r7, #4]
		break;
 8003130:	bf00      	nop
	}
	return value;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	b2db      	uxtb	r3, r3
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800

08003144 <gethmco2pre>:
uint8_t gethmco2pre(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
	uint32_t value = get_reg_block(RCC->CFGR, 3, 27);
 800314a:	4b16      	ldr	r3, [pc, #88]	@ (80031a4 <gethmco2pre+0x60>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	221b      	movs	r2, #27
 8003150:	2103      	movs	r1, #3
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f9dd 	bl	8003512 <get_reg_block>
 8003158:	6078      	str	r0, [r7, #4]
	switch(value)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3b04      	subs	r3, #4
 800315e:	2b03      	cmp	r3, #3
 8003160:	d816      	bhi.n	8003190 <gethmco2pre+0x4c>
 8003162:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <gethmco2pre+0x24>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	08003179 	.word	0x08003179
 800316c:	0800317f 	.word	0x0800317f
 8003170:	08003185 	.word	0x08003185
 8003174:	0800318b 	.word	0x0800318b
	{
		case 0b100:
			value = 2;
 8003178:	2302      	movs	r3, #2
 800317a:	607b      	str	r3, [r7, #4]
		break;
 800317c:	e00b      	b.n	8003196 <gethmco2pre+0x52>
		case 0b101:
			value = 3;
 800317e:	2303      	movs	r3, #3
 8003180:	607b      	str	r3, [r7, #4]
		break;
 8003182:	e008      	b.n	8003196 <gethmco2pre+0x52>
		case 0b110:
			value = 4;
 8003184:	2304      	movs	r3, #4
 8003186:	607b      	str	r3, [r7, #4]
		break;
 8003188:	e005      	b.n	8003196 <gethmco2pre+0x52>
		case 0b111:
			value = 5;
 800318a:	2305      	movs	r3, #5
 800318c:	607b      	str	r3, [r7, #4]
		break;
 800318e:	e002      	b.n	8003196 <gethmco2pre+0x52>
		default:
			value = 1;
 8003190:	2301      	movs	r3, #1
 8003192:	607b      	str	r3, [r7, #4]
		break;
 8003194:	bf00      	nop
		}
	return value;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	b2db      	uxtb	r3, r3
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <getpllm>:
uint8_t getpllm(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
	return get_reg_block(RCC->PLLCFGR, 6, 0);
 80031ac:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <getpllm+0x1c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	2106      	movs	r1, #6
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f9ac 	bl	8003512 <get_reg_block>
 80031ba:	4603      	mov	r3, r0
 80031bc:	b2db      	uxtb	r3, r3
}
 80031be:	4618      	mov	r0, r3
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <getplln>:
uint16_t getplln(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
	return get_reg_block(RCC->PLLCFGR, 9, 6);
 80031cc:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <getplln+0x1c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2206      	movs	r2, #6
 80031d2:	2109      	movs	r1, #9
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f99c 	bl	8003512 <get_reg_block>
 80031da:	4603      	mov	r3, r0
 80031dc:	b29b      	uxth	r3, r3
}
 80031de:	4618      	mov	r0, r3
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800

080031e8 <getpllp>:
uint8_t getpllp(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
	uint32_t value = get_reg_block(RCC->PLLCFGR, 2, 16);
 80031ee:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <getpllp+0x5c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2210      	movs	r2, #16
 80031f4:	2102      	movs	r1, #2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f98b 	bl	8003512 <get_reg_block>
 80031fc:	6078      	str	r0, [r7, #4]
	switch(value)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d817      	bhi.n	8003234 <getpllp+0x4c>
 8003204:	a201      	add	r2, pc, #4	@ (adr r2, 800320c <getpllp+0x24>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	0800321d 	.word	0x0800321d
 8003210:	08003223 	.word	0x08003223
 8003214:	08003229 	.word	0x08003229
 8003218:	0800322f 	.word	0x0800322f
	{
		case 0b00:
			value = 2;
 800321c:	2302      	movs	r3, #2
 800321e:	607b      	str	r3, [r7, #4]
		break;
 8003220:	e009      	b.n	8003236 <getpllp+0x4e>
		case 0b01:
			value = 4;
 8003222:	2304      	movs	r3, #4
 8003224:	607b      	str	r3, [r7, #4]
		break;
 8003226:	e006      	b.n	8003236 <getpllp+0x4e>
		case 0b10:
			value = 6;
 8003228:	2306      	movs	r3, #6
 800322a:	607b      	str	r3, [r7, #4]
		break;
 800322c:	e003      	b.n	8003236 <getpllp+0x4e>
		case 0b11:
			value = 8;
 800322e:	2308      	movs	r3, #8
 8003230:	607b      	str	r3, [r7, #4]
		break;
 8003232:	e000      	b.n	8003236 <getpllp+0x4e>
		default:
		break;
 8003234:	bf00      	nop
	}
	return value;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	b2db      	uxtb	r3, r3
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <getpllq>:
uint8_t getpllq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
	return get_reg_block(RCC->PLLCFGR, 4, 24);
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <getpllq+0x1c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2218      	movs	r2, #24
 8003252:	2104      	movs	r1, #4
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f95c 	bl	8003512 <get_reg_block>
 800325a:	4603      	mov	r3, r0
 800325c:	b2db      	uxtb	r3, r3
}
 800325e:	4618      	mov	r0, r3
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <getpllr>:
uint8_t getpllr(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
	return get_reg_block(RCC->PLLCFGR, 3, 28);
 800326c:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <getpllr+0x1c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	221c      	movs	r2, #28
 8003272:	2103      	movs	r1, #3
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f94c 	bl	8003512 <get_reg_block>
 800327a:	4603      	mov	r3, r0
 800327c:	b2db      	uxtb	r3, r3
}
 800327e:	4618      	mov	r0, r3
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800

08003288 <getpllclk>:
uint32_t getpllclk(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
	uint32_t source;
	if( get_reg_block(RCC->PLLCFGR, 1, 22) ) source = HSE_OSC; else source = HSI_RC;
 800328e:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <getpllclk+0x30>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2216      	movs	r2, #22
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f93b 	bl	8003512 <get_reg_block>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <getpllclk+0x20>
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <getpllclk+0x34>)
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	e001      	b.n	80032ac <getpllclk+0x24>
 80032a8:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <getpllclk+0x38>)
 80032aa:	607b      	str	r3, [r7, #4]
	return source;
 80032ac:	687b      	ldr	r3, [r7, #4]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	017d7840 	.word	0x017d7840
 80032c0:	00f42400 	.word	0x00f42400

080032c4 <getsysclk>:
uint32_t getsysclk(void)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
	long value = get_reg_block(RCC->CFGR, 2, 2);
 80032ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003344 <getsysclk+0x80>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2202      	movs	r2, #2
 80032d0:	2102      	movs	r1, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f91d 	bl	8003512 <get_reg_block>
 80032d8:	4603      	mov	r3, r0
 80032da:	607b      	str	r3, [r7, #4]
	switch(value) // SWS[2]: System clock switch status
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d82a      	bhi.n	8003338 <getsysclk+0x74>
 80032e2:	a201      	add	r2, pc, #4	@ (adr r2, 80032e8 <getsysclk+0x24>)
 80032e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e8:	080032f9 	.word	0x080032f9
 80032ec:	080032ff 	.word	0x080032ff
 80032f0:	08003305 	.word	0x08003305
 80032f4:	08003339 	.word	0x08003339
	{
		case 0:
			value = HSI_RC;
 80032f8:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <getsysclk+0x84>)
 80032fa:	607b      	str	r3, [r7, #4]
		break;
 80032fc:	e01d      	b.n	800333a <getsysclk+0x76>
		case 1: // 01: HSE oscillator used as the system clock
			value = HSE_OSC;
 80032fe:	4b13      	ldr	r3, [pc, #76]	@ (800334c <getsysclk+0x88>)
 8003300:	607b      	str	r3, [r7, #4]
		break;
 8003302:	e01a      	b.n	800333a <getsysclk+0x76>
		case 2: // 10: PLL used as the system clock
			value = getpllclk() / getpllm();
 8003304:	f7ff ffc0 	bl	8003288 <getpllclk>
 8003308:	4604      	mov	r4, r0
 800330a:	f7ff ff4d 	bl	80031a8 <getpllm>
 800330e:	4603      	mov	r3, r0
 8003310:	fbb4 f3f3 	udiv	r3, r4, r3
 8003314:	607b      	str	r3, [r7, #4]
			value /= getpllp();
 8003316:	f7ff ff67 	bl	80031e8 <getpllp>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	fb93 f3f2 	sdiv	r3, r3, r2
 8003324:	607b      	str	r3, [r7, #4]
			value *= getplln();
 8003326:	f7ff ff4f 	bl	80031c8 <getplln>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	fb02 f303 	mul.w	r3, r2, r3
 8003334:	607b      	str	r3, [r7, #4]
		break;
 8003336:	e000      	b.n	800333a <getsysclk+0x76>
				value /= getpllr();
				value *= getplln();
			#endif
		break;
		default: // 00: HSI oscillator used as the system clock
		break;
 8003338:	bf00      	nop
	}
	return (uint32_t)value;
 800333a:	687b      	ldr	r3, [r7, #4]
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bd90      	pop	{r4, r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	00f42400 	.word	0x00f42400
 800334c:	017d7840 	.word	0x017d7840

08003350 <gethclk>:
uint32_t gethclk(void){
 8003350:	b598      	push	{r3, r4, r7, lr}
 8003352:	af00      	add	r7, sp, #0
	return getsysclk()/gethpre();
 8003354:	f7ff ffb6 	bl	80032c4 <getsysclk>
 8003358:	4604      	mov	r4, r0
 800335a:	f7ff fe05 	bl	8002f68 <gethpre>
 800335e:	4603      	mov	r3, r0
 8003360:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd98      	pop	{r3, r4, r7, pc}

08003368 <getpclk1>:
uint32_t getpclk1(void){
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
	uint32_t freq = getsysclk()/gethpre();
 800336e:	f7ff ffa9 	bl	80032c4 <getsysclk>
 8003372:	4604      	mov	r4, r0
 8003374:	f7ff fdf8 	bl	8002f68 <gethpre>
 8003378:	4603      	mov	r3, r0
 800337a:	fbb4 f3f3 	udiv	r3, r4, r3
 800337e:	607b      	str	r3, [r7, #4]
	return freq/gethppre1();
 8003380:	f7ff fe3a 	bl	8002ff8 <gethppre1>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bd90      	pop	{r4, r7, pc}

08003396 <getpclk2>:
uint32_t getpclk2(void){
 8003396:	b590      	push	{r4, r7, lr}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
	uint32_t freq = getsysclk()/gethpre();
 800339c:	f7ff ff92 	bl	80032c4 <getsysclk>
 80033a0:	4604      	mov	r4, r0
 80033a2:	f7ff fde1 	bl	8002f68 <gethpre>
 80033a6:	4603      	mov	r3, r0
 80033a8:	fbb4 f3f3 	udiv	r3, r4, r3
 80033ac:	607b      	str	r3, [r7, #4]
	return freq/gethppre2();
 80033ae:	f7ff fe55 	bl	800305c <gethppre2>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd90      	pop	{r4, r7, pc}

080033c4 <System_prescaler_inic>:
STM32FXXXSYSTEM_prescaler* System_prescaler_inic(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
	stm32fxxx_System_prescaler.AHB = gethpre;
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <System_prescaler_inic+0x34>)
 80033ca:	4a0c      	ldr	r2, [pc, #48]	@ (80033fc <System_prescaler_inic+0x38>)
 80033cc:	601a      	str	r2, [r3, #0]
	stm32fxxx_System_prescaler.APB1 = gethppre1;
 80033ce:	4b0a      	ldr	r3, [pc, #40]	@ (80033f8 <System_prescaler_inic+0x34>)
 80033d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003400 <System_prescaler_inic+0x3c>)
 80033d2:	605a      	str	r2, [r3, #4]
	stm32fxxx_System_prescaler.APB2 = gethppre2;
 80033d4:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <System_prescaler_inic+0x34>)
 80033d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003404 <System_prescaler_inic+0x40>)
 80033d8:	609a      	str	r2, [r3, #8]
	stm32fxxx_System_prescaler.RTCclk = getrtcpre;
 80033da:	4b07      	ldr	r3, [pc, #28]	@ (80033f8 <System_prescaler_inic+0x34>)
 80033dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <System_prescaler_inic+0x44>)
 80033de:	60da      	str	r2, [r3, #12]
	stm32fxxx_System_prescaler.MCO1 = gethmco1pre;
 80033e0:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <System_prescaler_inic+0x34>)
 80033e2:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <System_prescaler_inic+0x48>)
 80033e4:	611a      	str	r2, [r3, #16]
	stm32fxxx_System_prescaler.MCO2 = gethmco2pre;
 80033e6:	4b04      	ldr	r3, [pc, #16]	@ (80033f8 <System_prescaler_inic+0x34>)
 80033e8:	4a09      	ldr	r2, [pc, #36]	@ (8003410 <System_prescaler_inic+0x4c>)
 80033ea:	615a      	str	r2, [r3, #20]
	return &stm32fxxx_System_prescaler;
 80033ec:	4b02      	ldr	r3, [pc, #8]	@ (80033f8 <System_prescaler_inic+0x34>)
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	200001ec 	.word	0x200001ec
 80033fc:	08002f69 	.word	0x08002f69
 8003400:	08002ff9 	.word	0x08002ff9
 8003404:	0800305d 	.word	0x0800305d
 8003408:	080030c1 	.word	0x080030c1
 800340c:	080030e1 	.word	0x080030e1
 8003410:	08003145 	.word	0x08003145

08003414 <Pll_prescaler_inic>:
STM32FXXXPLL_prescaler* Pll_prescaler_inic(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
	stm32fxxx_Pll_prescaler.M = getpllm;
 8003418:	4b0a      	ldr	r3, [pc, #40]	@ (8003444 <Pll_prescaler_inic+0x30>)
 800341a:	4a0b      	ldr	r2, [pc, #44]	@ (8003448 <Pll_prescaler_inic+0x34>)
 800341c:	601a      	str	r2, [r3, #0]
	stm32fxxx_Pll_prescaler.N = getplln;
 800341e:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <Pll_prescaler_inic+0x30>)
 8003420:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <Pll_prescaler_inic+0x38>)
 8003422:	605a      	str	r2, [r3, #4]
	stm32fxxx_Pll_prescaler.P = getpllp;
 8003424:	4b07      	ldr	r3, [pc, #28]	@ (8003444 <Pll_prescaler_inic+0x30>)
 8003426:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <Pll_prescaler_inic+0x3c>)
 8003428:	609a      	str	r2, [r3, #8]
	stm32fxxx_Pll_prescaler.Q = getpllq;
 800342a:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <Pll_prescaler_inic+0x30>)
 800342c:	4a09      	ldr	r2, [pc, #36]	@ (8003454 <Pll_prescaler_inic+0x40>)
 800342e:	60da      	str	r2, [r3, #12]
	stm32fxxx_Pll_prescaler.R = getpllr;
 8003430:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <Pll_prescaler_inic+0x30>)
 8003432:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <Pll_prescaler_inic+0x44>)
 8003434:	611a      	str	r2, [r3, #16]
	return &stm32fxxx_Pll_prescaler;
 8003436:	4b03      	ldr	r3, [pc, #12]	@ (8003444 <Pll_prescaler_inic+0x30>)
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000204 	.word	0x20000204
 8003448:	080031a9 	.word	0x080031a9
 800344c:	080031c9 	.word	0x080031c9
 8003450:	080031e9 	.word	0x080031e9
 8003454:	08003249 	.word	0x08003249
 8003458:	08003269 	.word	0x08003269

0800345c <query_enable>:
STM32FXXX_Query query_enable(void)
{
 800345c:	b5b0      	push	{r4, r5, r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	stm32fxxx_query.System_prescaler = System_prescaler_inic();
 8003464:	f7ff ffae 	bl	80033c4 <System_prescaler_inic>
 8003468:	4603      	mov	r3, r0
 800346a:	4a12      	ldr	r2, [pc, #72]	@ (80034b4 <query_enable+0x58>)
 800346c:	6013      	str	r3, [r2, #0]
	stm32fxxx_query.Pll_prescaler = Pll_prescaler_inic();
 800346e:	f7ff ffd1 	bl	8003414 <Pll_prescaler_inic>
 8003472:	4603      	mov	r3, r0
 8003474:	4a0f      	ldr	r2, [pc, #60]	@ (80034b4 <query_enable+0x58>)
 8003476:	6053      	str	r3, [r2, #4]
	stm32fxxx_query.PllClock = getpllclk;
 8003478:	4b0e      	ldr	r3, [pc, #56]	@ (80034b4 <query_enable+0x58>)
 800347a:	4a0f      	ldr	r2, [pc, #60]	@ (80034b8 <query_enable+0x5c>)
 800347c:	609a      	str	r2, [r3, #8]
	stm32fxxx_query.SystemClock = getsysclk;
 800347e:	4b0d      	ldr	r3, [pc, #52]	@ (80034b4 <query_enable+0x58>)
 8003480:	4a0e      	ldr	r2, [pc, #56]	@ (80034bc <query_enable+0x60>)
 8003482:	60da      	str	r2, [r3, #12]
	stm32fxxx_query.hclk = gethclk;
 8003484:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <query_enable+0x58>)
 8003486:	4a0e      	ldr	r2, [pc, #56]	@ (80034c0 <query_enable+0x64>)
 8003488:	611a      	str	r2, [r3, #16]
	stm32fxxx_query.pclk1 = getpclk1;
 800348a:	4b0a      	ldr	r3, [pc, #40]	@ (80034b4 <query_enable+0x58>)
 800348c:	4a0d      	ldr	r2, [pc, #52]	@ (80034c4 <query_enable+0x68>)
 800348e:	615a      	str	r2, [r3, #20]
	stm32fxxx_query.pclk2 = getpclk2;
 8003490:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <query_enable+0x58>)
 8003492:	4a0d      	ldr	r2, [pc, #52]	@ (80034c8 <query_enable+0x6c>)
 8003494:	619a      	str	r2, [r3, #24]
	return stm32fxxx_query;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a06      	ldr	r2, [pc, #24]	@ (80034b4 <query_enable+0x58>)
 800349a:	461c      	mov	r4, r3
 800349c:	4615      	mov	r5, r2
 800349e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bdb0      	pop	{r4, r5, r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200001d0 	.word	0x200001d0
 80034b8:	08003289 	.word	0x08003289
 80034bc:	080032c5 	.word	0x080032c5
 80034c0:	08003351 	.word	0x08003351
 80034c4:	08003369 	.word	0x08003369
 80034c8:	08003397 	.word	0x08003397

080034cc <set_reg>:

STM32FXXX_Query* query(void){ return (STM32FXXX_Query*) &stm32fxxx_query; }

/*** Tools ***/
void set_reg(volatile uint32_t* reg, uint32_t hbits){
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
	*reg |= hbits;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	601a      	str	r2, [r3, #0]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <clear_reg>:
void clear_reg(volatile uint32_t* reg, uint32_t hbits){
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
	*reg &= ~hbits;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	43db      	mvns	r3, r3
 8003500:	401a      	ands	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <get_reg_block>:
uint32_t get_reg_block(uint32_t reg, uint8_t size_block, uint8_t bit_n)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	70fb      	strb	r3, [r7, #3]
 800351e:	4613      	mov	r3, r2
 8003520:	70bb      	strb	r3, [r7, #2]
	if(bit_n > 31){ bit_n = 0;} if(size_block > 32){ size_block = 32;}
 8003522:	78bb      	ldrb	r3, [r7, #2]
 8003524:	2b1f      	cmp	r3, #31
 8003526:	d901      	bls.n	800352c <get_reg_block+0x1a>
 8003528:	2300      	movs	r3, #0
 800352a:	70bb      	strb	r3, [r7, #2]
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	2b20      	cmp	r3, #32
 8003530:	d901      	bls.n	8003536 <get_reg_block+0x24>
 8003532:	2320      	movs	r3, #32
 8003534:	70fb      	strb	r3, [r7, #3]
	uint32_t mask = (unsigned int)((1 << size_block) - 1);
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	2201      	movs	r2, #1
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
	reg &= (mask << bit_n);
 8003542:	78bb      	ldrb	r3, [r7, #2]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4013      	ands	r3, r2
 800354e:	607b      	str	r3, [r7, #4]
	reg = (reg >> bit_n);
 8003550:	78bb      	ldrb	r3, [r7, #2]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	607b      	str	r3, [r7, #4]
	return reg;
 800355a:	687b      	ldr	r3, [r7, #4]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <write_reg_block>:
void write_reg_block(volatile uint32_t* reg, uint8_t size_block, uint8_t bit_n, uint32_t data)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	72fb      	strb	r3, [r7, #11]
 8003576:	4613      	mov	r3, r2
 8003578:	72bb      	strb	r3, [r7, #10]
	if(bit_n > 31){ bit_n = 0;} if(size_block > 32){ size_block = 32;}
 800357a:	7abb      	ldrb	r3, [r7, #10]
 800357c:	2b1f      	cmp	r3, #31
 800357e:	d901      	bls.n	8003584 <write_reg_block+0x1c>
 8003580:	2300      	movs	r3, #0
 8003582:	72bb      	strb	r3, [r7, #10]
 8003584:	7afb      	ldrb	r3, [r7, #11]
 8003586:	2b20      	cmp	r3, #32
 8003588:	d901      	bls.n	800358e <write_reg_block+0x26>
 800358a:	2320      	movs	r3, #32
 800358c:	72fb      	strb	r3, [r7, #11]
	uint32_t value = *reg;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	617b      	str	r3, [r7, #20]
	uint32_t mask = (unsigned int)((1 << size_block) - 1);
 8003594:	7afb      	ldrb	r3, [r7, #11]
 8003596:	2201      	movs	r2, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	613b      	str	r3, [r7, #16]
	data &= mask; value &= ~(mask << bit_n);
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4013      	ands	r3, r2
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	7abb      	ldrb	r3, [r7, #10]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
	data = (data << bit_n);
 80035b8:	7abb      	ldrb	r3, [r7, #10]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	607b      	str	r3, [r7, #4]
	value |= data;
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
	*reg = value;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	601a      	str	r2, [r3, #0]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <set_reg_block>:
void set_reg_block(volatile uint32_t* reg, uint8_t size_block, uint8_t bit_n, uint32_t data)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	72fb      	strb	r3, [r7, #11]
 80035ea:	4613      	mov	r3, r2
 80035ec:	72bb      	strb	r3, [r7, #10]
	if(bit_n > 31){ bit_n = 0;} if(size_block > 32){ size_block = 32;}
 80035ee:	7abb      	ldrb	r3, [r7, #10]
 80035f0:	2b1f      	cmp	r3, #31
 80035f2:	d901      	bls.n	80035f8 <set_reg_block+0x1c>
 80035f4:	2300      	movs	r3, #0
 80035f6:	72bb      	strb	r3, [r7, #10]
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d901      	bls.n	8003602 <set_reg_block+0x26>
 80035fe:	2320      	movs	r3, #32
 8003600:	72fb      	strb	r3, [r7, #11]
	uint32_t mask = (unsigned int)((1 << size_block) - 1);
 8003602:	7afb      	ldrb	r3, [r7, #11]
 8003604:	2201      	movs	r2, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
	data &= mask;
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	4013      	ands	r3, r2
 8003614:	607b      	str	r3, [r7, #4]
	*reg &= ~(mask << bit_n);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	7abb      	ldrb	r3, [r7, #10]
 800361c:	6979      	ldr	r1, [r7, #20]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	401a      	ands	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	601a      	str	r2, [r3, #0]
	*reg |= (data << bit_n);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	7abb      	ldrb	r3, [r7, #10]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	431a      	orrs	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <get_bit_block>:
uint32_t get_bit_block(volatile uint32_t* reg, uint8_t size_block, uint8_t bit_n)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
 8003654:	4613      	mov	r3, r2
 8003656:	70bb      	strb	r3, [r7, #2]
	uint32_t n = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
	if(bit_n > 31){ n = bit_n/32; bit_n = bit_n - (n * 32); } if(size_block > 32){ size_block = 32;}
 800365c:	78bb      	ldrb	r3, [r7, #2]
 800365e:	2b1f      	cmp	r3, #31
 8003660:	d90a      	bls.n	8003678 <get_bit_block+0x30>
 8003662:	78bb      	ldrb	r3, [r7, #2]
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	b2db      	uxtb	r3, r3
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	015b      	lsls	r3, r3, #5
 8003670:	b2db      	uxtb	r3, r3
 8003672:	78ba      	ldrb	r2, [r7, #2]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	70bb      	strb	r3, [r7, #2]
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	2b20      	cmp	r3, #32
 800367c:	d901      	bls.n	8003682 <get_bit_block+0x3a>
 800367e:	2320      	movs	r3, #32
 8003680:	70fb      	strb	r3, [r7, #3]
	uint32_t value = *(reg + n );
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	613b      	str	r3, [r7, #16]
	uint32_t mask = (unsigned int)((1 << size_block) - 1);
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	2201      	movs	r2, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
	value &= (mask << bit_n);
 800369a:	78bb      	ldrb	r3, [r7, #2]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
	value = (value >> bit_n);
 80036a8:	78bb      	ldrb	r3, [r7, #2]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	613b      	str	r3, [r7, #16]
	return value;
 80036b2:	693b      	ldr	r3, [r7, #16]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <set_bit_block>:
void set_bit_block(volatile uint32_t* reg, uint8_t size_block, uint8_t bit_n, uint32_t data)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	72fb      	strb	r3, [r7, #11]
 80036ce:	4613      	mov	r3, r2
 80036d0:	72bb      	strb	r3, [r7, #10]
	uint32_t n = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
	if(bit_n > 31){ n = bit_n/32; bit_n = bit_n - (n * 32); } if(size_block > 32){ size_block = 32;}
 80036d6:	7abb      	ldrb	r3, [r7, #10]
 80036d8:	2b1f      	cmp	r3, #31
 80036da:	d90a      	bls.n	80036f2 <set_bit_block+0x32>
 80036dc:	7abb      	ldrb	r3, [r7, #10]
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	015b      	lsls	r3, r3, #5
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	7aba      	ldrb	r2, [r7, #10]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	72bb      	strb	r3, [r7, #10]
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d901      	bls.n	80036fc <set_bit_block+0x3c>
 80036f8:	2320      	movs	r3, #32
 80036fa:	72fb      	strb	r3, [r7, #11]
	uint32_t mask = (unsigned int)((1 << size_block) - 1);
 80036fc:	7afb      	ldrb	r3, [r7, #11]
 80036fe:	2201      	movs	r2, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	613b      	str	r3, [r7, #16]
	data &= mask;
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	607b      	str	r3, [r7, #4]
	*(reg + n ) &= ~(mask << bit_n);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	7abb      	ldrb	r3, [r7, #10]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43da      	mvns	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	4403      	add	r3, r0
 800372c:	400a      	ands	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
	*(reg + n ) |= (data << bit_n);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	7abb      	ldrb	r3, [r7, #10]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	409a      	lsls	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	4403      	add	r3, r0
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <set_hpins>:
	data &= mask;
	vec[index] &= ~( mask << ((block_n * size_block) - (index * n_bits)) );
	vec[index] |= ( data << ((block_n * size_block) - (index * n_bits)) );
}
void set_hpins( GPIO_TypeDef* reg, uint16_t hpins )
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
	reg->BSRR = (uint32_t)hpins;
 8003764:	887a      	ldrh	r2, [r7, #2]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	619a      	str	r2, [r3, #24]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <reset_hpins>:
void reset_hpins( GPIO_TypeDef* reg, uint16_t hpins )
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	807b      	strh	r3, [r7, #2]
	reg->BSRR = (uint32_t)(hpins << 16);
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	619a      	str	r2, [r3, #24]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <systick_sysclk_10us>:
uint32_t systick_sysclk_5us(void)
{
	return systick_sysclk_calc_xs = DelayCounter_top / 200000 - 1;
}
uint32_t systick_sysclk_10us(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
	return systick_sysclk_calc_xs = DelayCounter_top / 100000 - 1;
 800379c:	4b08      	ldr	r3, [pc, #32]	@ (80037c0 <systick_sysclk_10us+0x28>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	4a08      	ldr	r2, [pc, #32]	@ (80037c4 <systick_sysclk_10us+0x2c>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	09db      	lsrs	r3, r3, #7
 80037aa:	3b01      	subs	r3, #1
 80037ac:	4a06      	ldr	r2, [pc, #24]	@ (80037c8 <systick_sysclk_10us+0x30>)
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <systick_sysclk_10us+0x30>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	2000021c 	.word	0x2000021c
 80037c4:	0a7c5ac5 	.word	0x0a7c5ac5
 80037c8:	20000220 	.word	0x20000220

080037cc <systick_sysclk_ms>:
uint32_t systick_sysclk_ms(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
	return systick_sysclk_calc_xs = DelayCounter_top / 1000 - 1;
 80037d0:	4b07      	ldr	r3, [pc, #28]	@ (80037f0 <systick_sysclk_ms+0x24>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a07      	ldr	r2, [pc, #28]	@ (80037f4 <systick_sysclk_ms+0x28>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	3b01      	subs	r3, #1
 80037de:	4a06      	ldr	r2, [pc, #24]	@ (80037f8 <systick_sysclk_ms+0x2c>)
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <systick_sysclk_ms+0x2c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	2000021c 	.word	0x2000021c
 80037f4:	10624dd3 	.word	0x10624dd3
 80037f8:	20000220 	.word	0x20000220

080037fc <_delay_10us>:
	trigger *= cinco_us;
	for( DelayCounter = 0, SysTick->CTRL |= (1 << 0); DelayCounter < trigger; );
	SysTick->CTRL &= (uint32_t) ~(1 << 0);
}
void _delay_10us(uint32_t dez_us)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	uint32_t trigger = systick_sysclk_10us();
 8003804:	f7ff ffc8 	bl	8003798 <systick_sysclk_10us>
 8003808:	60f8      	str	r0, [r7, #12]
	SysTick->LOAD = trigger;
 800380a:	4a10      	ldr	r2, [pc, #64]	@ (800384c <_delay_10us+0x50>)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6053      	str	r3, [r2, #4]
	trigger *= dez_us;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	60fb      	str	r3, [r7, #12]
	for( DelayCounter = 0, SysTick->CTRL |= (1 << 0); DelayCounter < trigger; );
 800381a:	4b0d      	ldr	r3, [pc, #52]	@ (8003850 <_delay_10us+0x54>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <_delay_10us+0x50>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a09      	ldr	r2, [pc, #36]	@ (800384c <_delay_10us+0x50>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	bf00      	nop
 800382e:	4b08      	ldr	r3, [pc, #32]	@ (8003850 <_delay_10us+0x54>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	429a      	cmp	r2, r3
 8003836:	d8fa      	bhi.n	800382e <_delay_10us+0x32>
	SysTick->CTRL &= (uint32_t) ~(1 << 0);
 8003838:	4b04      	ldr	r3, [pc, #16]	@ (800384c <_delay_10us+0x50>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a03      	ldr	r2, [pc, #12]	@ (800384c <_delay_10us+0x50>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	e000e010 	.word	0xe000e010
 8003850:	20000218 	.word	0x20000218

08003854 <_delay_ms>:
void _delay_ms(uint32_t ms)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	uint32_t trigger = systick_sysclk_ms();
 800385c:	f7ff ffb6 	bl	80037cc <systick_sysclk_ms>
 8003860:	60f8      	str	r0, [r7, #12]
	SysTick->LOAD = trigger;
 8003862:	4a10      	ldr	r2, [pc, #64]	@ (80038a4 <_delay_ms+0x50>)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6053      	str	r3, [r2, #4]
	trigger *= ms;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	60fb      	str	r3, [r7, #12]
	for( DelayCounter = 0, SysTick->CTRL |= (1 << 0); DelayCounter < trigger; );
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <_delay_ms+0x54>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	4b0a      	ldr	r3, [pc, #40]	@ (80038a4 <_delay_ms+0x50>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a09      	ldr	r2, [pc, #36]	@ (80038a4 <_delay_ms+0x50>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	bf00      	nop
 8003886:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <_delay_ms+0x54>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d8fa      	bhi.n	8003886 <_delay_ms+0x32>
	SysTick->CTRL &= (uint32_t) ~(1 << 0);
 8003890:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <_delay_ms+0x50>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a03      	ldr	r2, [pc, #12]	@ (80038a4 <_delay_ms+0x50>)
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	e000e010 	.word	0xe000e010
 80038a8:	20000218 	.word	0x20000218

080038ac <systick_start>:
	trigger *= xs;
	for( DelayCounter = 0, SysTick->CTRL |= (1 << 0); DelayCounter < trigger; );
	SysTick->CTRL &= (uint32_t) ~(1 << 0);
}
void systick_start(void)
{
 80038ac:	b598      	push	{r3, r4, r7, lr}
 80038ae:	af00      	add	r7, sp, #0
	DelayCounter_top = getsysclk()/gethpre();
 80038b0:	f7ff fd08 	bl	80032c4 <getsysclk>
 80038b4:	4604      	mov	r4, r0
 80038b6:	f7ff fb57 	bl	8002f68 <gethpre>
 80038ba:	4603      	mov	r3, r0
 80038bc:	fbb4 f3f3 	udiv	r3, r4, r3
 80038c0:	4a08      	ldr	r2, [pc, #32]	@ (80038e4 <systick_start+0x38>)
 80038c2:	6013      	str	r3, [r2, #0]
	//DelayCounter_top = getsysclk();
	SysTick->LOAD = 0xffffffff;
 80038c4:	4b08      	ldr	r3, [pc, #32]	@ (80038e8 <systick_start+0x3c>)
 80038c6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ca:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0UL;
 80038cc:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <systick_start+0x3c>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= ((1 << 1) | (1 << 2));
 80038d2:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <systick_start+0x3c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a04      	ldr	r2, [pc, #16]	@ (80038e8 <systick_start+0x3c>)
 80038d8:	f043 0306 	orr.w	r3, r3, #6
 80038dc:	6013      	str	r3, [r2, #0]
}
 80038de:	bf00      	nop
 80038e0:	bd98      	pop	{r3, r4, r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2000021c 	.word	0x2000021c
 80038e8:	e000e010 	.word	0xe000e010

080038ec <SysTick_Handler>:

/**** Interrupt Handler ****/
void SysTick_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
	DelayCounter += systick_sysclk_calc_xs;
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <SysTick_Handler+0x1c>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <SysTick_Handler+0x20>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4413      	add	r3, r2
 80038fa:	4a03      	ldr	r2, [pc, #12]	@ (8003908 <SysTick_Handler+0x1c>)
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	20000218 	.word	0x20000218
 800390c:	20000220 	.word	0x20000220

08003910 <STM32FXXXAdc1IClock>:
static STM32FXXXADC1single stm32fxxx_adc1_single;
/*** File Procedure & Function Header ***/
STM32FXXXADC1single* stm32fxxx_adc1_single_inic(void);
/*** ADC1 ***/
void STM32FXXXAdc1IClock(uint8_t bool)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->APB1ENR |= (1 << 29); }else{ RCC->APB1ENR &= ~(1 << 29); }
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <STM32FXXXAdc1IClock+0x1e>
 8003920:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <STM32FXXXAdc1IClock+0x38>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	4a08      	ldr	r2, [pc, #32]	@ (8003948 <STM32FXXXAdc1IClock+0x38>)
 8003926:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800392a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800392c:	e005      	b.n	800393a <STM32FXXXAdc1IClock+0x2a>
	if(bool){ RCC->APB1ENR |= (1 << 29); }else{ RCC->APB1ENR &= ~(1 << 29); }
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <STM32FXXXAdc1IClock+0x38>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	4a05      	ldr	r2, [pc, #20]	@ (8003948 <STM32FXXXAdc1IClock+0x38>)
 8003934:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003938:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800

0800394c <STM32FXXXAdc1Clock>:
void STM32FXXXAdc1Clock(uint8_t bool)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->APB2ENR |= (1 << 8); }else{ RCC->APB2ENR &= ~(1 << 8); }
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <STM32FXXXAdc1Clock+0x1e>
 800395c:	4b09      	ldr	r3, [pc, #36]	@ (8003984 <STM32FXXXAdc1Clock+0x38>)
 800395e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003960:	4a08      	ldr	r2, [pc, #32]	@ (8003984 <STM32FXXXAdc1Clock+0x38>)
 8003962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003966:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8003968:	e005      	b.n	8003976 <STM32FXXXAdc1Clock+0x2a>
	if(bool){ RCC->APB2ENR |= (1 << 8); }else{ RCC->APB2ENR &= ~(1 << 8); }
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <STM32FXXXAdc1Clock+0x38>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	4a05      	ldr	r2, [pc, #20]	@ (8003984 <STM32FXXXAdc1Clock+0x38>)
 8003970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003974:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <STM32FXXXAdc1Nvic>:
void STM32FXXXAdc1Nvic(uint8_t bool)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
	if(bool){ set_bit_block(NVIC->ISER, 1, ADC_IRQn, 1); } else{ set_bit_block(NVIC->ICER, 1, ADC_IRQn, 1); }
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d006      	beq.n	80039a6 <STM32FXXXAdc1Nvic+0x1e>
 8003998:	2301      	movs	r3, #1
 800399a:	2212      	movs	r2, #18
 800399c:	2101      	movs	r1, #1
 800399e:	4807      	ldr	r0, [pc, #28]	@ (80039bc <STM32FXXXAdc1Nvic+0x34>)
 80039a0:	f7ff fe8e 	bl	80036c0 <set_bit_block>
}
 80039a4:	e005      	b.n	80039b2 <STM32FXXXAdc1Nvic+0x2a>
	if(bool){ set_bit_block(NVIC->ISER, 1, ADC_IRQn, 1); } else{ set_bit_block(NVIC->ICER, 1, ADC_IRQn, 1); }
 80039a6:	2301      	movs	r3, #1
 80039a8:	2212      	movs	r2, #18
 80039aa:	2101      	movs	r1, #1
 80039ac:	4804      	ldr	r0, [pc, #16]	@ (80039c0 <STM32FXXXAdc1Nvic+0x38>)
 80039ae:	f7ff fe87 	bl	80036c0 <set_bit_block>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000e180 	.word	0xe000e180

080039c4 <STM32FXXXAdc1Inic>:
void STM32FXXXAdc1Inic(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
	STM32FXXXADC_TypeDef* adc1 = adc1_instance();
 80039ca:	f007 fae3 	bl	800af94 <adc1_instance>
 80039ce:	6078      	str	r0, [r7, #4]
	STM32FXXXADC_COMMON_TypeDef* adc1_common = adc_common_instance();
 80039d0:	f007 fad6 	bl	800af80 <adc_common_instance>
 80039d4:	6038      	str	r0, [r7, #0]
	//STM32FXXXADCCOMMONobj* adc_common = stm32fxxx_adc_common_inic( );
	// ADC Clock
	 STM32FXXXAdc1IClock(1); // DACEN: DAC interface clock enable
 80039d6:	2001      	movs	r0, #1
 80039d8:	f7ff ff9a 	bl	8003910 <STM32FXXXAdc1IClock>
	 STM32FXXXAdc1Clock(1); // ADC1EN: ADC1 clock enable
 80039dc:	2001      	movs	r0, #1
 80039de:	f7ff ffb5 	bl	800394c <STM32FXXXAdc1Clock>
	 adc1->cr2.par.adon = 0; // ADON: A/D Converter ON / OFF
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6893      	ldr	r3, [r2, #8]
 80039e6:	f36f 0300 	bfc	r3, #0, #1
 80039ea:	6093      	str	r3, [r2, #8]
	// ADC CONFIG
	//STM32FXXXADC1_cr1_discnum(1);
	//STM32FXXXADC1_cr1_scan(1);
	//STM32FXXXADC1_cr2_eocs(1); // EOCS: End of conversion selection

	 adc1_common->ccr.par.adcpre = 3; // ADCPRE: ADC prescaler, 11: PCLK2 divided by 8
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	88d3      	ldrh	r3, [r2, #6]
 80039f0:	f043 0303 	orr.w	r3, r3, #3
 80039f4:	80d3      	strh	r3, [r2, #6]
	 //adc_common->ccr->par.adcpre = 3; // ADCPRE: ADC prescaler, 11: PCLK2 divided by 8

	adc1->smpr1.par.smp18 = 7; // SMPx[2:0]: Channel x sampling time selection
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68d3      	ldr	r3, [r2, #12]
 80039fa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80039fe:	60d3      	str	r3, [r2, #12]
	adc1->smpr2.par.smp0 = 7; // SMPx[2:0]: Channel x sampling time selection
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6913      	ldr	r3, [r2, #16]
 8003a04:	f043 0307 	orr.w	r3, r3, #7
 8003a08:	6113      	str	r3, [r2, #16]
	adc1->sqr1.par.l = 1; // 0 -> read one channel, 1 -> read two channels
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003a0e:	2101      	movs	r1, #1
 8003a10:	f361 5317 	bfi	r3, r1, #20, #4
 8003a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
	adc1->sqr3.par.sq1 = 18; // SQ1[4:0]: 1st conversion in regular sequence
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003a1a:	2112      	movs	r1, #18
 8003a1c:	f361 0304 	bfi	r3, r1, #0, #5
 8003a20:	6353      	str	r3, [r2, #52]	@ 0x34
	adc1->sqr3.par.sq2 = 0; // SQ2[4:0]: 2st conversion in regular sequence
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003a26:	f36f 1349 	bfc	r3, #5, #5
 8003a2a:	6353      	str	r3, [r2, #52]	@ 0x34

	//STM32FXXXADC1_cr1_discen(1); // DISCEN: Discontinuous mode on regular channels
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <STM32FXXXAdc1VBAT>:
void STM32FXXXAdc1VBAT(void) // vbat overrides temperature
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
	STM32FXXXADC_COMMON_TypeDef* adc1_common = adc_common_instance();
 8003a3a:	f007 faa1 	bl	800af80 <adc_common_instance>
 8003a3e:	6078      	str	r0, [r7, #4]
	adc1_common->ccr.par.vbate = 1; // VBATE: VBAT enable
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	88d3      	ldrh	r3, [r2, #6]
 8003a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a48:	80d3      	strh	r3, [r2, #6]
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <STM32FXXXAdc1TEMP>:
void STM32FXXXAdc1TEMP(void)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
	STM32FXXXADC_COMMON_TypeDef* adc1_common = adc_common_instance();
 8003a58:	f007 fa92 	bl	800af80 <adc_common_instance>
 8003a5c:	6078      	str	r0, [r7, #4]
	// Temperature (in degrees) = {(VSENSE V25) / Avg_Slope} + 25
	adc1_common->ccr.par.tsvrefe = 1; // TSVREFE: Temperature sensor and VREFINT enable
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	88d3      	ldrh	r3, [r2, #6]
 8003a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a66:	80d3      	strh	r3, [r2, #6]
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <STM32FXXXAdc1Start>:
void STM32FXXXAdc1Start(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
	uint32_t time_out;
	STM32FXXXADC_TypeDef* adc1 = adc1_instance();
 8003a76:	f007 fa8d 	bl	800af94 <adc1_instance>
 8003a7a:	6038      	str	r0, [r7, #0]
	// turn on select source and start reading
	adc1->cr2.par.adon = 1; // ADON: A/D Converter ON / OFF
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	6893      	ldr	r3, [r2, #8]
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6093      	str	r3, [r2, #8]
	adc1->cr2.par.swstart = 1; // SWSTART: Start conversion of regular channels
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	6893      	ldr	r3, [r2, #8]
 8003a8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a8e:	6093      	str	r3, [r2, #8]
	for(time_out = 200; adc1->cr2.par.swstart && time_out; time_out-- );
 8003a90:	23c8      	movs	r3, #200	@ 0xc8
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	e002      	b.n	8003a9c <STM32FXXXAdc1Start+0x2c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f3c3 7380 	ubfx	r3, r3, #30, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <STM32FXXXAdc1Start+0x40>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f2      	bne.n	8003a96 <STM32FXXXAdc1Start+0x26>
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <stm32fxxx_adc1_single_inic>:
STM32FXXXADC1single* stm32fxxx_adc1_single_inic(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
	stm32fxxx_adc1_single.inic = STM32FXXXAdc1Inic;
 8003abc:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <stm32fxxx_adc1_single_inic+0x28>)
 8003abe:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <stm32fxxx_adc1_single_inic+0x2c>)
 8003ac0:	601a      	str	r2, [r3, #0]
	stm32fxxx_adc1_single.vbat = STM32FXXXAdc1VBAT;
 8003ac2:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <stm32fxxx_adc1_single_inic+0x28>)
 8003ac4:	4a08      	ldr	r2, [pc, #32]	@ (8003ae8 <stm32fxxx_adc1_single_inic+0x30>)
 8003ac6:	605a      	str	r2, [r3, #4]
	stm32fxxx_adc1_single.temp = STM32FXXXAdc1TEMP;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <stm32fxxx_adc1_single_inic+0x28>)
 8003aca:	4a08      	ldr	r2, [pc, #32]	@ (8003aec <stm32fxxx_adc1_single_inic+0x34>)
 8003acc:	609a      	str	r2, [r3, #8]
	stm32fxxx_adc1_single.start = STM32FXXXAdc1Start;
 8003ace:	4b04      	ldr	r3, [pc, #16]	@ (8003ae0 <stm32fxxx_adc1_single_inic+0x28>)
 8003ad0:	4a07      	ldr	r2, [pc, #28]	@ (8003af0 <stm32fxxx_adc1_single_inic+0x38>)
 8003ad2:	60da      	str	r2, [r3, #12]

	return &stm32fxxx_adc1_single;
 8003ad4:	4b02      	ldr	r3, [pc, #8]	@ (8003ae0 <stm32fxxx_adc1_single_inic+0x28>)
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	20000240 	.word	0x20000240
 8003ae4:	080039c5 	.word	0x080039c5
 8003ae8:	08003a35 	.word	0x08003a35
 8003aec:	08003a53 	.word	0x08003a53
 8003af0:	08003a71 	.word	0x08003a71

08003af4 <adc1_enable>:
/*** ADC1 INIC Procedure & Function Definition ***/
STM32FXXX_ADC1* adc1_enable(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0

	/*** ADC1 Bit Mapping Link ***/
	stm32fxxx_adc1.instance = adc1_instance();
 8003af8:	f007 fa4c 	bl	800af94 <adc1_instance>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4a0d      	ldr	r2, [pc, #52]	@ (8003b34 <adc1_enable+0x40>)
 8003b00:	6013      	str	r3, [r2, #0]
	stm32fxxx_adc1.common_instance = adc_common_instance();
 8003b02:	f007 fa3d 	bl	800af80 <adc_common_instance>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4a0a      	ldr	r2, [pc, #40]	@ (8003b34 <adc1_enable+0x40>)
 8003b0a:	6053      	str	r3, [r2, #4]
	/*** Other ***/
	stm32fxxx_adc1.single = stm32fxxx_adc1_single_inic();
 8003b0c:	f7ff ffd4 	bl	8003ab8 <stm32fxxx_adc1_single_inic>
 8003b10:	4603      	mov	r3, r0
 8003b12:	4a08      	ldr	r2, [pc, #32]	@ (8003b34 <adc1_enable+0x40>)
 8003b14:	6093      	str	r3, [r2, #8]
	stm32fxxx_adc1.start = STM32FXXXAdc1Start;
 8003b16:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <adc1_enable+0x40>)
 8003b18:	4a07      	ldr	r2, [pc, #28]	@ (8003b38 <adc1_enable+0x44>)
 8003b1a:	60da      	str	r2, [r3, #12]
	stm32fxxx_adc1.iclock = STM32FXXXAdc1IClock;
 8003b1c:	4b05      	ldr	r3, [pc, #20]	@ (8003b34 <adc1_enable+0x40>)
 8003b1e:	4a07      	ldr	r2, [pc, #28]	@ (8003b3c <adc1_enable+0x48>)
 8003b20:	611a      	str	r2, [r3, #16]
	stm32fxxx_adc1.clock = STM32FXXXAdc1Clock;
 8003b22:	4b04      	ldr	r3, [pc, #16]	@ (8003b34 <adc1_enable+0x40>)
 8003b24:	4a06      	ldr	r2, [pc, #24]	@ (8003b40 <adc1_enable+0x4c>)
 8003b26:	615a      	str	r2, [r3, #20]
	stm32fxxx_adc1.nvic = STM32FXXXAdc1Nvic;
 8003b28:	4b02      	ldr	r3, [pc, #8]	@ (8003b34 <adc1_enable+0x40>)
 8003b2a:	4a06      	ldr	r2, [pc, #24]	@ (8003b44 <adc1_enable+0x50>)
 8003b2c:	619a      	str	r2, [r3, #24]
	return &stm32fxxx_adc1;
 8003b2e:	4b01      	ldr	r3, [pc, #4]	@ (8003b34 <adc1_enable+0x40>)
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000224 	.word	0x20000224
 8003b38:	08003a71 	.word	0x08003a71
 8003b3c:	08003911 	.word	0x08003911
 8003b40:	0800394d 	.word	0x0800394d
 8003b44:	08003989 	.word	0x08003989

08003b48 <STM32FXXXCRC_dr>:
static STM32FXXXCRCobj stm32fxxx_crc;

/*** File Procedure & Function Header ***/
/*** CRC Bit Mapping ***/
void STM32FXXXCRC_dr(uint32_t value)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	CRC->DR = value;
 8003b50:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <STM32FXXXCRC_dr+0x1c>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6013      	str	r3, [r2, #0]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023000 	.word	0x40023000

08003b68 <STM32FXXXCRC_get_dr>:
uint32_t STM32FXXXCRC_get_dr(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
	return CRC->DR;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <STM32FXXXCRC_get_dr+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40023000 	.word	0x40023000

08003b80 <STM32FXXXCRC_idr>:
void STM32FXXXCRC_idr(uint8_t value)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
	CRC->IDR = value;
 8003b8a:	4a04      	ldr	r2, [pc, #16]	@ (8003b9c <STM32FXXXCRC_idr+0x1c>)
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	7113      	strb	r3, [r2, #4]
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	40023000 	.word	0x40023000

08003ba0 <STM32FXXXCRC_get_idr>:
uint8_t STM32FXXXCRC_get_idr(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
	return CRC->IDR;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	@ (8003bb4 <STM32FXXXCRC_get_idr+0x14>)
 8003ba6:	791b      	ldrb	r3, [r3, #4]
 8003ba8:	b2db      	uxtb	r3, r3
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40023000 	.word	0x40023000

08003bb8 <STM32FXXXCRC_reset>:
void STM32FXXXCRC_reset(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
	CRC->CR = 1;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <STM32FXXXCRC_reset+0x14>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	609a      	str	r2, [r3, #8]
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40023000 	.word	0x40023000

08003bd0 <crc_enable>:
{
	if(bool){ RCC->AHB1ENR |= (1 << 12); } else{ RCC->AHB1ENR &= ~(1 << 12); }
}
/*** INIC Procedure & Function Definition ***/
STM32FXXXCRCobj* crc_enable(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0


	/***CRC Bit Mapping Link***/
	stm32fxxx_crc.dr = STM32FXXXCRC_dr;
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <crc_enable+0x30>)
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8003c04 <crc_enable+0x34>)
 8003bd8:	601a      	str	r2, [r3, #0]
	stm32fxxx_crc.get_dr = STM32FXXXCRC_get_dr;
 8003bda:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <crc_enable+0x30>)
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <crc_enable+0x38>)
 8003bde:	605a      	str	r2, [r3, #4]
	stm32fxxx_crc.idr = STM32FXXXCRC_idr;
 8003be0:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <crc_enable+0x30>)
 8003be2:	4a0a      	ldr	r2, [pc, #40]	@ (8003c0c <crc_enable+0x3c>)
 8003be4:	609a      	str	r2, [r3, #8]
	stm32fxxx_crc.get_idr = STM32FXXXCRC_get_idr;
 8003be6:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <crc_enable+0x30>)
 8003be8:	4a09      	ldr	r2, [pc, #36]	@ (8003c10 <crc_enable+0x40>)
 8003bea:	60da      	str	r2, [r3, #12]
	stm32fxxx_crc.reset = STM32FXXXCRC_reset;
 8003bec:	4b04      	ldr	r3, [pc, #16]	@ (8003c00 <crc_enable+0x30>)
 8003bee:	4a09      	ldr	r2, [pc, #36]	@ (8003c14 <crc_enable+0x44>)
 8003bf0:	611a      	str	r2, [r3, #16]
	return &stm32fxxx_crc;
 8003bf2:	4b03      	ldr	r3, [pc, #12]	@ (8003c00 <crc_enable+0x30>)
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000250 	.word	0x20000250
 8003c04:	08003b49 	.word	0x08003b49
 8003c08:	08003b69 	.word	0x08003b69
 8003c0c:	08003b81 	.word	0x08003b81
 8003c10:	08003ba1 	.word	0x08003ba1
 8003c14:	08003bb9 	.word	0x08003bb9

08003c18 <STM32FXXXDma1Clock>:
STM32FXXXDMA_func* stm32fxxx_dma2_func_inic(void);
/*******************************************/
/*** DMA Procedure & Function Definition ***/
/*******************************************/
void STM32FXXXDma1Clock(uint8_t bool)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->AHB1ENR |= (1 << 21); } else{ RCC->AHB1ENR &= ~(1 << 21); }
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d006      	beq.n	8003c36 <STM32FXXXDma1Clock+0x1e>
 8003c28:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <STM32FXXXDma1Clock+0x38>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	4a08      	ldr	r2, [pc, #32]	@ (8003c50 <STM32FXXXDma1Clock+0x38>)
 8003c2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c32:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8003c34:	e005      	b.n	8003c42 <STM32FXXXDma1Clock+0x2a>
	if(bool){ RCC->AHB1ENR |= (1 << 21); } else{ RCC->AHB1ENR &= ~(1 << 21); }
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <STM32FXXXDma1Clock+0x38>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	4a05      	ldr	r2, [pc, #20]	@ (8003c50 <STM32FXXXDma1Clock+0x38>)
 8003c3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c40:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <STM32FXXXDma2Clock>:
void STM32FXXXDma2Clock(uint8_t bool)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->AHB1ENR |= (1 << 22); } else{ RCC->AHB1ENR &= ~(1 << 22); }
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d006      	beq.n	8003c72 <STM32FXXXDma2Clock+0x1e>
 8003c64:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <STM32FXXXDma2Clock+0x38>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	4a08      	ldr	r2, [pc, #32]	@ (8003c8c <STM32FXXXDma2Clock+0x38>)
 8003c6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c6e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8003c70:	e005      	b.n	8003c7e <STM32FXXXDma2Clock+0x2a>
	if(bool){ RCC->AHB1ENR |= (1 << 22); } else{ RCC->AHB1ENR &= ~(1 << 22); }
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <STM32FXXXDma2Clock+0x38>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	4a05      	ldr	r2, [pc, #20]	@ (8003c8c <STM32FXXXDma2Clock+0x38>)
 8003c78:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003c7c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800

08003c90 <STM32FXXXDMA1_sr_tcif>:
/********************************************/
/************* DMA1 Bit Mapping *************/
/********************************************/
// SR
uint8_t STM32FXXXDMA1_sr_tcif(uint8_t stream_n)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	73fb      	strb	r3, [r7, #15]
	switch(stream_n){
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	2b07      	cmp	r3, #7
 8003ca2:	d863      	bhi.n	8003d6c <STM32FXXXDMA1_sr_tcif+0xdc>
 8003ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <STM32FXXXDMA1_sr_tcif+0x1c>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003ccd 	.word	0x08003ccd
 8003cb0:	08003ce1 	.word	0x08003ce1
 8003cb4:	08003cf5 	.word	0x08003cf5
 8003cb8:	08003d09 	.word	0x08003d09
 8003cbc:	08003d1d 	.word	0x08003d1d
 8003cc0:	08003d31 	.word	0x08003d31
 8003cc4:	08003d45 	.word	0x08003d45
 8003cc8:	08003d59 	.word	0x08003d59
		case 0:
			value = get_reg_block(DMA1->LISR, 1, 5);
 8003ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8003d78 <STM32FXXXDMA1_sr_tcif+0xe8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2205      	movs	r2, #5
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fc1c 	bl	8003512 <get_reg_block>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	73fb      	strb	r3, [r7, #15]
		break;
 8003cde:	e046      	b.n	8003d6e <STM32FXXXDMA1_sr_tcif+0xde>
		case 1:
			value = get_reg_block(DMA1->LISR, 1, 11);
 8003ce0:	4b25      	ldr	r3, [pc, #148]	@ (8003d78 <STM32FXXXDMA1_sr_tcif+0xe8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	220b      	movs	r2, #11
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fc12 	bl	8003512 <get_reg_block>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	73fb      	strb	r3, [r7, #15]
		break;
 8003cf2:	e03c      	b.n	8003d6e <STM32FXXXDMA1_sr_tcif+0xde>
		case 2:
			value = get_reg_block(DMA1->LISR, 1, 21);
 8003cf4:	4b20      	ldr	r3, [pc, #128]	@ (8003d78 <STM32FXXXDMA1_sr_tcif+0xe8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2215      	movs	r2, #21
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fc08 	bl	8003512 <get_reg_block>
 8003d02:	4603      	mov	r3, r0
 8003d04:	73fb      	strb	r3, [r7, #15]
		break;
 8003d06:	e032      	b.n	8003d6e <STM32FXXXDMA1_sr_tcif+0xde>
		case 3:
			value = get_reg_block(DMA1->LISR, 1, 27);
 8003d08:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <STM32FXXXDMA1_sr_tcif+0xe8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	221b      	movs	r2, #27
 8003d0e:	2101      	movs	r1, #1
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fbfe 	bl	8003512 <get_reg_block>
 8003d16:	4603      	mov	r3, r0
 8003d18:	73fb      	strb	r3, [r7, #15]
		break;
 8003d1a:	e028      	b.n	8003d6e <STM32FXXXDMA1_sr_tcif+0xde>
		case 4:
			value = get_reg_block(DMA1->HISR, 1, 5);
 8003d1c:	4b16      	ldr	r3, [pc, #88]	@ (8003d78 <STM32FXXXDMA1_sr_tcif+0xe8>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2205      	movs	r2, #5
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fbf4 	bl	8003512 <get_reg_block>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73fb      	strb	r3, [r7, #15]
		break;
 8003d2e:	e01e      	b.n	8003d6e <STM32FXXXDMA1_sr_tcif+0xde>
		case 5:
			value = get_reg_block(DMA1->HISR, 1, 11);
 8003d30:	4b11      	ldr	r3, [pc, #68]	@ (8003d78 <STM32FXXXDMA1_sr_tcif+0xe8>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	220b      	movs	r2, #11
 8003d36:	2101      	movs	r1, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fbea 	bl	8003512 <get_reg_block>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	73fb      	strb	r3, [r7, #15]
		break;
 8003d42:	e014      	b.n	8003d6e <STM32FXXXDMA1_sr_tcif+0xde>
		case 6:
			value = get_reg_block(DMA1->HISR, 1, 21);
 8003d44:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <STM32FXXXDMA1_sr_tcif+0xe8>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2215      	movs	r2, #21
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fbe0 	bl	8003512 <get_reg_block>
 8003d52:	4603      	mov	r3, r0
 8003d54:	73fb      	strb	r3, [r7, #15]
		break;
 8003d56:	e00a      	b.n	8003d6e <STM32FXXXDMA1_sr_tcif+0xde>
		case 7:
			value = get_reg_block(DMA1->HISR, 1, 27);
 8003d58:	4b07      	ldr	r3, [pc, #28]	@ (8003d78 <STM32FXXXDMA1_sr_tcif+0xe8>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	221b      	movs	r2, #27
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fbd6 	bl	8003512 <get_reg_block>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73fb      	strb	r3, [r7, #15]
		break;
 8003d6a:	e000      	b.n	8003d6e <STM32FXXXDMA1_sr_tcif+0xde>
	default: break;
 8003d6c:	bf00      	nop
	}
	return value;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40026000 	.word	0x40026000

08003d7c <STM32FXXXDMA1_sr_clear_tcif>:
void STM32FXXXDMA1_sr_clear_tcif(uint8_t stream_n)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
	switch(stream_n){
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	2b07      	cmp	r3, #7
 8003d8a:	d84b      	bhi.n	8003e24 <STM32FXXXDMA1_sr_clear_tcif+0xa8>
 8003d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d94 <STM32FXXXDMA1_sr_clear_tcif+0x18>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003db5 	.word	0x08003db5
 8003d98:	08003dc3 	.word	0x08003dc3
 8003d9c:	08003dd1 	.word	0x08003dd1
 8003da0:	08003ddf 	.word	0x08003ddf
 8003da4:	08003ded 	.word	0x08003ded
 8003da8:	08003dfb 	.word	0x08003dfb
 8003dac:	08003e09 	.word	0x08003e09
 8003db0:	08003e17 	.word	0x08003e17
		case 0:
			set_reg_block(&DMA1->LIFCR, 1, 5, 1);
 8003db4:	2301      	movs	r3, #1
 8003db6:	2205      	movs	r2, #5
 8003db8:	2101      	movs	r1, #1
 8003dba:	481d      	ldr	r0, [pc, #116]	@ (8003e30 <STM32FXXXDMA1_sr_clear_tcif+0xb4>)
 8003dbc:	f7ff fc0e 	bl	80035dc <set_reg_block>
		break;
 8003dc0:	e031      	b.n	8003e26 <STM32FXXXDMA1_sr_clear_tcif+0xaa>
		case 1:
			set_reg_block(&DMA1->LIFCR, 1, 11, 1);
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	220b      	movs	r2, #11
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4819      	ldr	r0, [pc, #100]	@ (8003e30 <STM32FXXXDMA1_sr_clear_tcif+0xb4>)
 8003dca:	f7ff fc07 	bl	80035dc <set_reg_block>
		break;
 8003dce:	e02a      	b.n	8003e26 <STM32FXXXDMA1_sr_clear_tcif+0xaa>
		case 2:
			set_reg_block(&DMA1->LIFCR, 1, 21, 1);
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	2215      	movs	r2, #21
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	4816      	ldr	r0, [pc, #88]	@ (8003e30 <STM32FXXXDMA1_sr_clear_tcif+0xb4>)
 8003dd8:	f7ff fc00 	bl	80035dc <set_reg_block>
		break;
 8003ddc:	e023      	b.n	8003e26 <STM32FXXXDMA1_sr_clear_tcif+0xaa>
		case 3:
			set_reg_block(&DMA1->LIFCR, 1, 27, 1);
 8003dde:	2301      	movs	r3, #1
 8003de0:	221b      	movs	r2, #27
 8003de2:	2101      	movs	r1, #1
 8003de4:	4812      	ldr	r0, [pc, #72]	@ (8003e30 <STM32FXXXDMA1_sr_clear_tcif+0xb4>)
 8003de6:	f7ff fbf9 	bl	80035dc <set_reg_block>
		break;
 8003dea:	e01c      	b.n	8003e26 <STM32FXXXDMA1_sr_clear_tcif+0xaa>
		case 4:
			set_reg_block(&DMA1->HIFCR, 1, 5, 1);
 8003dec:	2301      	movs	r3, #1
 8003dee:	2205      	movs	r2, #5
 8003df0:	2101      	movs	r1, #1
 8003df2:	4810      	ldr	r0, [pc, #64]	@ (8003e34 <STM32FXXXDMA1_sr_clear_tcif+0xb8>)
 8003df4:	f7ff fbf2 	bl	80035dc <set_reg_block>
		break;
 8003df8:	e015      	b.n	8003e26 <STM32FXXXDMA1_sr_clear_tcif+0xaa>
		case 5:
			set_reg_block(&DMA1->HIFCR, 1, 11, 1);
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	220b      	movs	r2, #11
 8003dfe:	2101      	movs	r1, #1
 8003e00:	480c      	ldr	r0, [pc, #48]	@ (8003e34 <STM32FXXXDMA1_sr_clear_tcif+0xb8>)
 8003e02:	f7ff fbeb 	bl	80035dc <set_reg_block>
		break;
 8003e06:	e00e      	b.n	8003e26 <STM32FXXXDMA1_sr_clear_tcif+0xaa>
		case 6:
			set_reg_block(&DMA1->HIFCR, 1, 21, 1);
 8003e08:	2301      	movs	r3, #1
 8003e0a:	2215      	movs	r2, #21
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	4809      	ldr	r0, [pc, #36]	@ (8003e34 <STM32FXXXDMA1_sr_clear_tcif+0xb8>)
 8003e10:	f7ff fbe4 	bl	80035dc <set_reg_block>
		break;
 8003e14:	e007      	b.n	8003e26 <STM32FXXXDMA1_sr_clear_tcif+0xaa>
		case 7:
			set_reg_block(&DMA1->HIFCR, 1, 27, 1);
 8003e16:	2301      	movs	r3, #1
 8003e18:	221b      	movs	r2, #27
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4805      	ldr	r0, [pc, #20]	@ (8003e34 <STM32FXXXDMA1_sr_clear_tcif+0xb8>)
 8003e1e:	f7ff fbdd 	bl	80035dc <set_reg_block>
		break;
 8003e22:	e000      	b.n	8003e26 <STM32FXXXDMA1_sr_clear_tcif+0xaa>
		default: break;
 8003e24:	bf00      	nop
	}
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40026008 	.word	0x40026008
 8003e34:	4002600c 	.word	0x4002600c

08003e38 <STM32FXXXDMA1_sr_htif>:
uint8_t STM32FXXXDMA1_sr_htif(uint8_t stream_n)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
	switch(stream_n){
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	2b07      	cmp	r3, #7
 8003e4a:	d863      	bhi.n	8003f14 <STM32FXXXDMA1_sr_htif+0xdc>
 8003e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <STM32FXXXDMA1_sr_htif+0x1c>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e75 	.word	0x08003e75
 8003e58:	08003e89 	.word	0x08003e89
 8003e5c:	08003e9d 	.word	0x08003e9d
 8003e60:	08003eb1 	.word	0x08003eb1
 8003e64:	08003ec5 	.word	0x08003ec5
 8003e68:	08003ed9 	.word	0x08003ed9
 8003e6c:	08003eed 	.word	0x08003eed
 8003e70:	08003f01 	.word	0x08003f01
		case 0:
			value = get_reg_block(DMA1->LISR, 1, 4);
 8003e74:	4b2a      	ldr	r3, [pc, #168]	@ (8003f20 <STM32FXXXDMA1_sr_htif+0xe8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fb48 	bl	8003512 <get_reg_block>
 8003e82:	4603      	mov	r3, r0
 8003e84:	73fb      	strb	r3, [r7, #15]
		break;
 8003e86:	e046      	b.n	8003f16 <STM32FXXXDMA1_sr_htif+0xde>
		case 1:
			value = get_reg_block(DMA1->LISR, 1, 10);
 8003e88:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <STM32FXXXDMA1_sr_htif+0xe8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	220a      	movs	r2, #10
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fb3e 	bl	8003512 <get_reg_block>
 8003e96:	4603      	mov	r3, r0
 8003e98:	73fb      	strb	r3, [r7, #15]
		break;
 8003e9a:	e03c      	b.n	8003f16 <STM32FXXXDMA1_sr_htif+0xde>
		case 2:
			value = get_reg_block(DMA1->LISR, 1, 20);
 8003e9c:	4b20      	ldr	r3, [pc, #128]	@ (8003f20 <STM32FXXXDMA1_sr_htif+0xe8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2214      	movs	r2, #20
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fb34 	bl	8003512 <get_reg_block>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	73fb      	strb	r3, [r7, #15]
		break;
 8003eae:	e032      	b.n	8003f16 <STM32FXXXDMA1_sr_htif+0xde>
		case 3:
			value = get_reg_block(DMA1->LISR, 1, 26);
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <STM32FXXXDMA1_sr_htif+0xe8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	221a      	movs	r2, #26
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fb2a 	bl	8003512 <get_reg_block>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	73fb      	strb	r3, [r7, #15]
		break;
 8003ec2:	e028      	b.n	8003f16 <STM32FXXXDMA1_sr_htif+0xde>
		case 4:
			value = get_reg_block(DMA1->HISR, 1, 4);
 8003ec4:	4b16      	ldr	r3, [pc, #88]	@ (8003f20 <STM32FXXXDMA1_sr_htif+0xe8>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2204      	movs	r2, #4
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fb20 	bl	8003512 <get_reg_block>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	73fb      	strb	r3, [r7, #15]
		break;
 8003ed6:	e01e      	b.n	8003f16 <STM32FXXXDMA1_sr_htif+0xde>
		case 5:
			value = get_reg_block(DMA1->HISR, 1, 10);
 8003ed8:	4b11      	ldr	r3, [pc, #68]	@ (8003f20 <STM32FXXXDMA1_sr_htif+0xe8>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	220a      	movs	r2, #10
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fb16 	bl	8003512 <get_reg_block>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]
		break;
 8003eea:	e014      	b.n	8003f16 <STM32FXXXDMA1_sr_htif+0xde>
		case 6:
			value = get_reg_block(DMA1->HISR, 1, 20);
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <STM32FXXXDMA1_sr_htif+0xe8>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2214      	movs	r2, #20
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fb0c 	bl	8003512 <get_reg_block>
 8003efa:	4603      	mov	r3, r0
 8003efc:	73fb      	strb	r3, [r7, #15]
		break;
 8003efe:	e00a      	b.n	8003f16 <STM32FXXXDMA1_sr_htif+0xde>
		case 7:
			value = get_reg_block(DMA1->HISR, 1, 26);
 8003f00:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <STM32FXXXDMA1_sr_htif+0xe8>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	221a      	movs	r2, #26
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fb02 	bl	8003512 <get_reg_block>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	73fb      	strb	r3, [r7, #15]
		break;
 8003f12:	e000      	b.n	8003f16 <STM32FXXXDMA1_sr_htif+0xde>
	default: break;
 8003f14:	bf00      	nop
	}
	return value;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40026000 	.word	0x40026000

08003f24 <STM32FXXXDMA1_sr_clear_htif>:
void STM32FXXXDMA1_sr_clear_htif(uint8_t stream_n)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
	switch(stream_n){
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	2b07      	cmp	r3, #7
 8003f32:	d84b      	bhi.n	8003fcc <STM32FXXXDMA1_sr_clear_htif+0xa8>
 8003f34:	a201      	add	r2, pc, #4	@ (adr r2, 8003f3c <STM32FXXXDMA1_sr_clear_htif+0x18>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f5d 	.word	0x08003f5d
 8003f40:	08003f6b 	.word	0x08003f6b
 8003f44:	08003f79 	.word	0x08003f79
 8003f48:	08003f87 	.word	0x08003f87
 8003f4c:	08003f95 	.word	0x08003f95
 8003f50:	08003fa3 	.word	0x08003fa3
 8003f54:	08003fb1 	.word	0x08003fb1
 8003f58:	08003fbf 	.word	0x08003fbf
		case 0:
			set_reg_block(&DMA1->LIFCR, 1, 4, 1);
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	2204      	movs	r2, #4
 8003f60:	2101      	movs	r1, #1
 8003f62:	481d      	ldr	r0, [pc, #116]	@ (8003fd8 <STM32FXXXDMA1_sr_clear_htif+0xb4>)
 8003f64:	f7ff fb3a 	bl	80035dc <set_reg_block>
		break;
 8003f68:	e031      	b.n	8003fce <STM32FXXXDMA1_sr_clear_htif+0xaa>
		case 1:
			set_reg_block(&DMA1->LIFCR, 1, 10, 1);
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	220a      	movs	r2, #10
 8003f6e:	2101      	movs	r1, #1
 8003f70:	4819      	ldr	r0, [pc, #100]	@ (8003fd8 <STM32FXXXDMA1_sr_clear_htif+0xb4>)
 8003f72:	f7ff fb33 	bl	80035dc <set_reg_block>
		break;
 8003f76:	e02a      	b.n	8003fce <STM32FXXXDMA1_sr_clear_htif+0xaa>
		case 2:
			set_reg_block(&DMA1->LIFCR, 1, 20, 1);
 8003f78:	2301      	movs	r3, #1
 8003f7a:	2214      	movs	r2, #20
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4816      	ldr	r0, [pc, #88]	@ (8003fd8 <STM32FXXXDMA1_sr_clear_htif+0xb4>)
 8003f80:	f7ff fb2c 	bl	80035dc <set_reg_block>
		break;
 8003f84:	e023      	b.n	8003fce <STM32FXXXDMA1_sr_clear_htif+0xaa>
		case 3:
			set_reg_block(&DMA1->LIFCR, 1, 26, 1);
 8003f86:	2301      	movs	r3, #1
 8003f88:	221a      	movs	r2, #26
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4812      	ldr	r0, [pc, #72]	@ (8003fd8 <STM32FXXXDMA1_sr_clear_htif+0xb4>)
 8003f8e:	f7ff fb25 	bl	80035dc <set_reg_block>
		break;
 8003f92:	e01c      	b.n	8003fce <STM32FXXXDMA1_sr_clear_htif+0xaa>
		case 4:
			set_reg_block(&DMA1->HIFCR, 1, 4, 1);
 8003f94:	2301      	movs	r3, #1
 8003f96:	2204      	movs	r2, #4
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4810      	ldr	r0, [pc, #64]	@ (8003fdc <STM32FXXXDMA1_sr_clear_htif+0xb8>)
 8003f9c:	f7ff fb1e 	bl	80035dc <set_reg_block>
		break;
 8003fa0:	e015      	b.n	8003fce <STM32FXXXDMA1_sr_clear_htif+0xaa>
		case 5:
			set_reg_block(&DMA1->HIFCR, 1, 10, 1);
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	220a      	movs	r2, #10
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	480c      	ldr	r0, [pc, #48]	@ (8003fdc <STM32FXXXDMA1_sr_clear_htif+0xb8>)
 8003faa:	f7ff fb17 	bl	80035dc <set_reg_block>
		break;
 8003fae:	e00e      	b.n	8003fce <STM32FXXXDMA1_sr_clear_htif+0xaa>
		case 6:
			set_reg_block(&DMA1->HIFCR, 1, 20, 1);
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	2214      	movs	r2, #20
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4809      	ldr	r0, [pc, #36]	@ (8003fdc <STM32FXXXDMA1_sr_clear_htif+0xb8>)
 8003fb8:	f7ff fb10 	bl	80035dc <set_reg_block>
		break;
 8003fbc:	e007      	b.n	8003fce <STM32FXXXDMA1_sr_clear_htif+0xaa>
		case 7:
			set_reg_block(&DMA1->HIFCR, 1, 26, 1);
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	221a      	movs	r2, #26
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4805      	ldr	r0, [pc, #20]	@ (8003fdc <STM32FXXXDMA1_sr_clear_htif+0xb8>)
 8003fc6:	f7ff fb09 	bl	80035dc <set_reg_block>
		break;
 8003fca:	e000      	b.n	8003fce <STM32FXXXDMA1_sr_clear_htif+0xaa>
		default: break;
 8003fcc:	bf00      	nop
	}
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40026008 	.word	0x40026008
 8003fdc:	4002600c 	.word	0x4002600c

08003fe0 <STM32FXXXDMA1_sr_teif>:
uint8_t STM32FXXXDMA1_sr_teif(uint8_t stream_n)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
	switch(stream_n){
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	2b07      	cmp	r3, #7
 8003ff2:	d863      	bhi.n	80040bc <STM32FXXXDMA1_sr_teif+0xdc>
 8003ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ffc <STM32FXXXDMA1_sr_teif+0x1c>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	0800401d 	.word	0x0800401d
 8004000:	08004031 	.word	0x08004031
 8004004:	08004045 	.word	0x08004045
 8004008:	08004059 	.word	0x08004059
 800400c:	0800406d 	.word	0x0800406d
 8004010:	08004081 	.word	0x08004081
 8004014:	08004095 	.word	0x08004095
 8004018:	080040a9 	.word	0x080040a9
		case 0:
			value = get_reg_block(DMA1->LISR, 1, 3);
 800401c:	4b2a      	ldr	r3, [pc, #168]	@ (80040c8 <STM32FXXXDMA1_sr_teif+0xe8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2203      	movs	r2, #3
 8004022:	2101      	movs	r1, #1
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fa74 	bl	8003512 <get_reg_block>
 800402a:	4603      	mov	r3, r0
 800402c:	73fb      	strb	r3, [r7, #15]
		break;
 800402e:	e046      	b.n	80040be <STM32FXXXDMA1_sr_teif+0xde>
		case 1:
			value = get_reg_block(DMA1->LISR, 1, 9);
 8004030:	4b25      	ldr	r3, [pc, #148]	@ (80040c8 <STM32FXXXDMA1_sr_teif+0xe8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2209      	movs	r2, #9
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fa6a 	bl	8003512 <get_reg_block>
 800403e:	4603      	mov	r3, r0
 8004040:	73fb      	strb	r3, [r7, #15]
		break;
 8004042:	e03c      	b.n	80040be <STM32FXXXDMA1_sr_teif+0xde>
		case 2:
			value = get_reg_block(DMA1->LISR, 1, 19);
 8004044:	4b20      	ldr	r3, [pc, #128]	@ (80040c8 <STM32FXXXDMA1_sr_teif+0xe8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2213      	movs	r2, #19
 800404a:	2101      	movs	r1, #1
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fa60 	bl	8003512 <get_reg_block>
 8004052:	4603      	mov	r3, r0
 8004054:	73fb      	strb	r3, [r7, #15]
		break;
 8004056:	e032      	b.n	80040be <STM32FXXXDMA1_sr_teif+0xde>
		case 3:
			value = get_reg_block(DMA1->LISR, 1, 25);
 8004058:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <STM32FXXXDMA1_sr_teif+0xe8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2219      	movs	r2, #25
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fa56 	bl	8003512 <get_reg_block>
 8004066:	4603      	mov	r3, r0
 8004068:	73fb      	strb	r3, [r7, #15]
		break;
 800406a:	e028      	b.n	80040be <STM32FXXXDMA1_sr_teif+0xde>
		case 4:
			value = get_reg_block(DMA1->HISR, 1, 3);
 800406c:	4b16      	ldr	r3, [pc, #88]	@ (80040c8 <STM32FXXXDMA1_sr_teif+0xe8>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2203      	movs	r2, #3
 8004072:	2101      	movs	r1, #1
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fa4c 	bl	8003512 <get_reg_block>
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]
		break;
 800407e:	e01e      	b.n	80040be <STM32FXXXDMA1_sr_teif+0xde>
		case 5:
			value = get_reg_block(DMA1->HISR, 1, 9);
 8004080:	4b11      	ldr	r3, [pc, #68]	@ (80040c8 <STM32FXXXDMA1_sr_teif+0xe8>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2209      	movs	r2, #9
 8004086:	2101      	movs	r1, #1
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fa42 	bl	8003512 <get_reg_block>
 800408e:	4603      	mov	r3, r0
 8004090:	73fb      	strb	r3, [r7, #15]
		break;
 8004092:	e014      	b.n	80040be <STM32FXXXDMA1_sr_teif+0xde>
		case 6:
			value = get_reg_block(DMA1->HISR, 1, 19);
 8004094:	4b0c      	ldr	r3, [pc, #48]	@ (80040c8 <STM32FXXXDMA1_sr_teif+0xe8>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2213      	movs	r2, #19
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fa38 	bl	8003512 <get_reg_block>
 80040a2:	4603      	mov	r3, r0
 80040a4:	73fb      	strb	r3, [r7, #15]
		break;
 80040a6:	e00a      	b.n	80040be <STM32FXXXDMA1_sr_teif+0xde>
		case 7:
			value = get_reg_block(DMA1->HISR, 1, 25);
 80040a8:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <STM32FXXXDMA1_sr_teif+0xe8>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2219      	movs	r2, #25
 80040ae:	2101      	movs	r1, #1
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fa2e 	bl	8003512 <get_reg_block>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]
		break;
 80040ba:	e000      	b.n	80040be <STM32FXXXDMA1_sr_teif+0xde>
	default: break;
 80040bc:	bf00      	nop
	}
	return value;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40026000 	.word	0x40026000

080040cc <STM32FXXXDMA1_sr_clear_teif>:
void STM32FXXXDMA1_sr_clear_teif(uint8_t stream_n)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	71fb      	strb	r3, [r7, #7]
	switch(stream_n){
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	2b07      	cmp	r3, #7
 80040da:	d84b      	bhi.n	8004174 <STM32FXXXDMA1_sr_clear_teif+0xa8>
 80040dc:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <STM32FXXXDMA1_sr_clear_teif+0x18>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	08004105 	.word	0x08004105
 80040e8:	08004113 	.word	0x08004113
 80040ec:	08004121 	.word	0x08004121
 80040f0:	0800412f 	.word	0x0800412f
 80040f4:	0800413d 	.word	0x0800413d
 80040f8:	0800414b 	.word	0x0800414b
 80040fc:	08004159 	.word	0x08004159
 8004100:	08004167 	.word	0x08004167
		case 0:
			set_reg_block(&DMA1->LIFCR, 1, 3, 1);
 8004104:	2301      	movs	r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	2101      	movs	r1, #1
 800410a:	481d      	ldr	r0, [pc, #116]	@ (8004180 <STM32FXXXDMA1_sr_clear_teif+0xb4>)
 800410c:	f7ff fa66 	bl	80035dc <set_reg_block>
		break;
 8004110:	e031      	b.n	8004176 <STM32FXXXDMA1_sr_clear_teif+0xaa>
		case 1:
			set_reg_block(&DMA1->LIFCR, 1, 9, 1);
 8004112:	2301      	movs	r3, #1
 8004114:	2209      	movs	r2, #9
 8004116:	2101      	movs	r1, #1
 8004118:	4819      	ldr	r0, [pc, #100]	@ (8004180 <STM32FXXXDMA1_sr_clear_teif+0xb4>)
 800411a:	f7ff fa5f 	bl	80035dc <set_reg_block>
		break;
 800411e:	e02a      	b.n	8004176 <STM32FXXXDMA1_sr_clear_teif+0xaa>
		case 2:
			set_reg_block(&DMA1->LIFCR, 1, 19, 1);
 8004120:	2301      	movs	r3, #1
 8004122:	2213      	movs	r2, #19
 8004124:	2101      	movs	r1, #1
 8004126:	4816      	ldr	r0, [pc, #88]	@ (8004180 <STM32FXXXDMA1_sr_clear_teif+0xb4>)
 8004128:	f7ff fa58 	bl	80035dc <set_reg_block>
		break;
 800412c:	e023      	b.n	8004176 <STM32FXXXDMA1_sr_clear_teif+0xaa>
		case 3:
			set_reg_block(&DMA1->LIFCR, 1, 25, 1);
 800412e:	2301      	movs	r3, #1
 8004130:	2219      	movs	r2, #25
 8004132:	2101      	movs	r1, #1
 8004134:	4812      	ldr	r0, [pc, #72]	@ (8004180 <STM32FXXXDMA1_sr_clear_teif+0xb4>)
 8004136:	f7ff fa51 	bl	80035dc <set_reg_block>
		break;
 800413a:	e01c      	b.n	8004176 <STM32FXXXDMA1_sr_clear_teif+0xaa>
		case 4:
			set_reg_block(&DMA1->HIFCR, 1, 3, 1);
 800413c:	2301      	movs	r3, #1
 800413e:	2203      	movs	r2, #3
 8004140:	2101      	movs	r1, #1
 8004142:	4810      	ldr	r0, [pc, #64]	@ (8004184 <STM32FXXXDMA1_sr_clear_teif+0xb8>)
 8004144:	f7ff fa4a 	bl	80035dc <set_reg_block>
		break;
 8004148:	e015      	b.n	8004176 <STM32FXXXDMA1_sr_clear_teif+0xaa>
		case 5:
			set_reg_block(&DMA1->HIFCR, 1, 9, 1);
 800414a:	2301      	movs	r3, #1
 800414c:	2209      	movs	r2, #9
 800414e:	2101      	movs	r1, #1
 8004150:	480c      	ldr	r0, [pc, #48]	@ (8004184 <STM32FXXXDMA1_sr_clear_teif+0xb8>)
 8004152:	f7ff fa43 	bl	80035dc <set_reg_block>
		break;
 8004156:	e00e      	b.n	8004176 <STM32FXXXDMA1_sr_clear_teif+0xaa>
		case 6:
			set_reg_block(&DMA1->HIFCR, 1, 19, 1);
 8004158:	2301      	movs	r3, #1
 800415a:	2213      	movs	r2, #19
 800415c:	2101      	movs	r1, #1
 800415e:	4809      	ldr	r0, [pc, #36]	@ (8004184 <STM32FXXXDMA1_sr_clear_teif+0xb8>)
 8004160:	f7ff fa3c 	bl	80035dc <set_reg_block>
		break;
 8004164:	e007      	b.n	8004176 <STM32FXXXDMA1_sr_clear_teif+0xaa>
		case 7:
			set_reg_block(&DMA1->HIFCR, 1, 25, 1);
 8004166:	2301      	movs	r3, #1
 8004168:	2219      	movs	r2, #25
 800416a:	2101      	movs	r1, #1
 800416c:	4805      	ldr	r0, [pc, #20]	@ (8004184 <STM32FXXXDMA1_sr_clear_teif+0xb8>)
 800416e:	f7ff fa35 	bl	80035dc <set_reg_block>
		break;
 8004172:	e000      	b.n	8004176 <STM32FXXXDMA1_sr_clear_teif+0xaa>
		default: break;
 8004174:	bf00      	nop
	}
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40026008 	.word	0x40026008
 8004184:	4002600c 	.word	0x4002600c

08004188 <STM32FXXXDMA1_sr_dmeif>:
uint8_t STM32FXXXDMA1_sr_dmeif(uint8_t stream_n)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
	switch(stream_n){
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	2b07      	cmp	r3, #7
 800419a:	d863      	bhi.n	8004264 <STM32FXXXDMA1_sr_dmeif+0xdc>
 800419c:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <STM32FXXXDMA1_sr_dmeif+0x1c>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041c5 	.word	0x080041c5
 80041a8:	080041d9 	.word	0x080041d9
 80041ac:	080041ed 	.word	0x080041ed
 80041b0:	08004201 	.word	0x08004201
 80041b4:	08004215 	.word	0x08004215
 80041b8:	08004229 	.word	0x08004229
 80041bc:	0800423d 	.word	0x0800423d
 80041c0:	08004251 	.word	0x08004251
		case 0:
			value = get_reg_block(DMA1->LISR, 1, 2);
 80041c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004270 <STM32FXXXDMA1_sr_dmeif+0xe8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2202      	movs	r2, #2
 80041ca:	2101      	movs	r1, #1
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff f9a0 	bl	8003512 <get_reg_block>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]
		break;
 80041d6:	e046      	b.n	8004266 <STM32FXXXDMA1_sr_dmeif+0xde>
		case 1:
			value = get_reg_block(DMA1->LISR, 1, 8);
 80041d8:	4b25      	ldr	r3, [pc, #148]	@ (8004270 <STM32FXXXDMA1_sr_dmeif+0xe8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2208      	movs	r2, #8
 80041de:	2101      	movs	r1, #1
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff f996 	bl	8003512 <get_reg_block>
 80041e6:	4603      	mov	r3, r0
 80041e8:	73fb      	strb	r3, [r7, #15]
		break;
 80041ea:	e03c      	b.n	8004266 <STM32FXXXDMA1_sr_dmeif+0xde>
		case 2:
			value = get_reg_block(DMA1->LISR, 1, 18);
 80041ec:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <STM32FXXXDMA1_sr_dmeif+0xe8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2212      	movs	r2, #18
 80041f2:	2101      	movs	r1, #1
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff f98c 	bl	8003512 <get_reg_block>
 80041fa:	4603      	mov	r3, r0
 80041fc:	73fb      	strb	r3, [r7, #15]
		break;
 80041fe:	e032      	b.n	8004266 <STM32FXXXDMA1_sr_dmeif+0xde>
		case 3:
			value = get_reg_block(DMA1->LISR, 1, 24);
 8004200:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <STM32FXXXDMA1_sr_dmeif+0xe8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2218      	movs	r2, #24
 8004206:	2101      	movs	r1, #1
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff f982 	bl	8003512 <get_reg_block>
 800420e:	4603      	mov	r3, r0
 8004210:	73fb      	strb	r3, [r7, #15]
		break;
 8004212:	e028      	b.n	8004266 <STM32FXXXDMA1_sr_dmeif+0xde>
		case 4:
			value = get_reg_block(DMA1->HISR, 1, 2);
 8004214:	4b16      	ldr	r3, [pc, #88]	@ (8004270 <STM32FXXXDMA1_sr_dmeif+0xe8>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	2101      	movs	r1, #1
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff f978 	bl	8003512 <get_reg_block>
 8004222:	4603      	mov	r3, r0
 8004224:	73fb      	strb	r3, [r7, #15]
		break;
 8004226:	e01e      	b.n	8004266 <STM32FXXXDMA1_sr_dmeif+0xde>
		case 5:
			value = get_reg_block(DMA1->HISR, 1, 8);
 8004228:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <STM32FXXXDMA1_sr_dmeif+0xe8>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2208      	movs	r2, #8
 800422e:	2101      	movs	r1, #1
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff f96e 	bl	8003512 <get_reg_block>
 8004236:	4603      	mov	r3, r0
 8004238:	73fb      	strb	r3, [r7, #15]
		break;
 800423a:	e014      	b.n	8004266 <STM32FXXXDMA1_sr_dmeif+0xde>
		case 6:
			value = get_reg_block(DMA1->HISR, 1, 18);
 800423c:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <STM32FXXXDMA1_sr_dmeif+0xe8>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2212      	movs	r2, #18
 8004242:	2101      	movs	r1, #1
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff f964 	bl	8003512 <get_reg_block>
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]
		break;
 800424e:	e00a      	b.n	8004266 <STM32FXXXDMA1_sr_dmeif+0xde>
		case 7:
			value = get_reg_block(DMA1->HISR, 1, 24);
 8004250:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <STM32FXXXDMA1_sr_dmeif+0xe8>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2218      	movs	r2, #24
 8004256:	2101      	movs	r1, #1
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff f95a 	bl	8003512 <get_reg_block>
 800425e:	4603      	mov	r3, r0
 8004260:	73fb      	strb	r3, [r7, #15]
		break;
 8004262:	e000      	b.n	8004266 <STM32FXXXDMA1_sr_dmeif+0xde>
	default: break;
 8004264:	bf00      	nop
	}
	return value;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40026000 	.word	0x40026000

08004274 <STM32FXXXDMA1_sr_clear_dmeif>:
void STM32FXXXDMA1_sr_clear_dmeif(uint8_t stream_n)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
	switch(stream_n){
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	2b07      	cmp	r3, #7
 8004282:	d84b      	bhi.n	800431c <STM32FXXXDMA1_sr_clear_dmeif+0xa8>
 8004284:	a201      	add	r2, pc, #4	@ (adr r2, 800428c <STM32FXXXDMA1_sr_clear_dmeif+0x18>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042ad 	.word	0x080042ad
 8004290:	080042bb 	.word	0x080042bb
 8004294:	080042c9 	.word	0x080042c9
 8004298:	080042d7 	.word	0x080042d7
 800429c:	080042e5 	.word	0x080042e5
 80042a0:	080042f3 	.word	0x080042f3
 80042a4:	08004301 	.word	0x08004301
 80042a8:	0800430f 	.word	0x0800430f
		case 0:
			set_reg_block(&DMA1->LIFCR, 1, 2, 1);
 80042ac:	2301      	movs	r3, #1
 80042ae:	2202      	movs	r2, #2
 80042b0:	2101      	movs	r1, #1
 80042b2:	481d      	ldr	r0, [pc, #116]	@ (8004328 <STM32FXXXDMA1_sr_clear_dmeif+0xb4>)
 80042b4:	f7ff f992 	bl	80035dc <set_reg_block>
		break;
 80042b8:	e031      	b.n	800431e <STM32FXXXDMA1_sr_clear_dmeif+0xaa>
		case 1:
			set_reg_block(&DMA1->LIFCR, 1, 8, 1);
 80042ba:	2301      	movs	r3, #1
 80042bc:	2208      	movs	r2, #8
 80042be:	2101      	movs	r1, #1
 80042c0:	4819      	ldr	r0, [pc, #100]	@ (8004328 <STM32FXXXDMA1_sr_clear_dmeif+0xb4>)
 80042c2:	f7ff f98b 	bl	80035dc <set_reg_block>
		break;
 80042c6:	e02a      	b.n	800431e <STM32FXXXDMA1_sr_clear_dmeif+0xaa>
		case 2:
			set_reg_block(&DMA1->LIFCR, 1, 18, 1);
 80042c8:	2301      	movs	r3, #1
 80042ca:	2212      	movs	r2, #18
 80042cc:	2101      	movs	r1, #1
 80042ce:	4816      	ldr	r0, [pc, #88]	@ (8004328 <STM32FXXXDMA1_sr_clear_dmeif+0xb4>)
 80042d0:	f7ff f984 	bl	80035dc <set_reg_block>
		break;
 80042d4:	e023      	b.n	800431e <STM32FXXXDMA1_sr_clear_dmeif+0xaa>
		case 3:
			set_reg_block(&DMA1->LIFCR, 1, 24, 1);
 80042d6:	2301      	movs	r3, #1
 80042d8:	2218      	movs	r2, #24
 80042da:	2101      	movs	r1, #1
 80042dc:	4812      	ldr	r0, [pc, #72]	@ (8004328 <STM32FXXXDMA1_sr_clear_dmeif+0xb4>)
 80042de:	f7ff f97d 	bl	80035dc <set_reg_block>
		break;
 80042e2:	e01c      	b.n	800431e <STM32FXXXDMA1_sr_clear_dmeif+0xaa>
		case 4:
			set_reg_block(&DMA1->HIFCR, 1, 2, 1);
 80042e4:	2301      	movs	r3, #1
 80042e6:	2202      	movs	r2, #2
 80042e8:	2101      	movs	r1, #1
 80042ea:	4810      	ldr	r0, [pc, #64]	@ (800432c <STM32FXXXDMA1_sr_clear_dmeif+0xb8>)
 80042ec:	f7ff f976 	bl	80035dc <set_reg_block>
		break;
 80042f0:	e015      	b.n	800431e <STM32FXXXDMA1_sr_clear_dmeif+0xaa>
		case 5:
			set_reg_block(&DMA1->HIFCR, 1, 8, 1);
 80042f2:	2301      	movs	r3, #1
 80042f4:	2208      	movs	r2, #8
 80042f6:	2101      	movs	r1, #1
 80042f8:	480c      	ldr	r0, [pc, #48]	@ (800432c <STM32FXXXDMA1_sr_clear_dmeif+0xb8>)
 80042fa:	f7ff f96f 	bl	80035dc <set_reg_block>
		break;
 80042fe:	e00e      	b.n	800431e <STM32FXXXDMA1_sr_clear_dmeif+0xaa>
		case 6:
			set_reg_block(&DMA1->HIFCR, 1, 18, 1);
 8004300:	2301      	movs	r3, #1
 8004302:	2212      	movs	r2, #18
 8004304:	2101      	movs	r1, #1
 8004306:	4809      	ldr	r0, [pc, #36]	@ (800432c <STM32FXXXDMA1_sr_clear_dmeif+0xb8>)
 8004308:	f7ff f968 	bl	80035dc <set_reg_block>
		break;
 800430c:	e007      	b.n	800431e <STM32FXXXDMA1_sr_clear_dmeif+0xaa>
		case 7:
			set_reg_block(&DMA1->HIFCR, 1, 24, 1);
 800430e:	2301      	movs	r3, #1
 8004310:	2218      	movs	r2, #24
 8004312:	2101      	movs	r1, #1
 8004314:	4805      	ldr	r0, [pc, #20]	@ (800432c <STM32FXXXDMA1_sr_clear_dmeif+0xb8>)
 8004316:	f7ff f961 	bl	80035dc <set_reg_block>
		break;
 800431a:	e000      	b.n	800431e <STM32FXXXDMA1_sr_clear_dmeif+0xaa>
		default: break;
 800431c:	bf00      	nop
	}
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40026008 	.word	0x40026008
 800432c:	4002600c 	.word	0x4002600c

08004330 <STM32FXXXDMA1_sr_feif>:
uint8_t STM32FXXXDMA1_sr_feif(uint8_t stream_n)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]
	switch(stream_n){
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	2b07      	cmp	r3, #7
 8004342:	d863      	bhi.n	800440c <STM32FXXXDMA1_sr_feif+0xdc>
 8004344:	a201      	add	r2, pc, #4	@ (adr r2, 800434c <STM32FXXXDMA1_sr_feif+0x1c>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	0800436d 	.word	0x0800436d
 8004350:	08004381 	.word	0x08004381
 8004354:	08004395 	.word	0x08004395
 8004358:	080043a9 	.word	0x080043a9
 800435c:	080043bd 	.word	0x080043bd
 8004360:	080043d1 	.word	0x080043d1
 8004364:	080043e5 	.word	0x080043e5
 8004368:	080043f9 	.word	0x080043f9
		case 0:
			value = get_reg_block(DMA1->LISR, 1, 0);
 800436c:	4b2a      	ldr	r3, [pc, #168]	@ (8004418 <STM32FXXXDMA1_sr_feif+0xe8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2200      	movs	r2, #0
 8004372:	2101      	movs	r1, #1
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff f8cc 	bl	8003512 <get_reg_block>
 800437a:	4603      	mov	r3, r0
 800437c:	73fb      	strb	r3, [r7, #15]
		break;
 800437e:	e046      	b.n	800440e <STM32FXXXDMA1_sr_feif+0xde>
		case 1:
			value = get_reg_block(DMA1->LISR, 1, 6);
 8004380:	4b25      	ldr	r3, [pc, #148]	@ (8004418 <STM32FXXXDMA1_sr_feif+0xe8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2206      	movs	r2, #6
 8004386:	2101      	movs	r1, #1
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff f8c2 	bl	8003512 <get_reg_block>
 800438e:	4603      	mov	r3, r0
 8004390:	73fb      	strb	r3, [r7, #15]
		break;
 8004392:	e03c      	b.n	800440e <STM32FXXXDMA1_sr_feif+0xde>
		case 2:
			value = get_reg_block(DMA1->LISR, 1, 16);
 8004394:	4b20      	ldr	r3, [pc, #128]	@ (8004418 <STM32FXXXDMA1_sr_feif+0xe8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2210      	movs	r2, #16
 800439a:	2101      	movs	r1, #1
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff f8b8 	bl	8003512 <get_reg_block>
 80043a2:	4603      	mov	r3, r0
 80043a4:	73fb      	strb	r3, [r7, #15]
		break;
 80043a6:	e032      	b.n	800440e <STM32FXXXDMA1_sr_feif+0xde>
		case 3:
			value = get_reg_block(DMA1->LISR, 1, 22);
 80043a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <STM32FXXXDMA1_sr_feif+0xe8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2216      	movs	r2, #22
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff f8ae 	bl	8003512 <get_reg_block>
 80043b6:	4603      	mov	r3, r0
 80043b8:	73fb      	strb	r3, [r7, #15]
		break;
 80043ba:	e028      	b.n	800440e <STM32FXXXDMA1_sr_feif+0xde>
		case 4:
			value = get_reg_block(DMA1->HISR, 1, 0);
 80043bc:	4b16      	ldr	r3, [pc, #88]	@ (8004418 <STM32FXXXDMA1_sr_feif+0xe8>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	2101      	movs	r1, #1
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff f8a4 	bl	8003512 <get_reg_block>
 80043ca:	4603      	mov	r3, r0
 80043cc:	73fb      	strb	r3, [r7, #15]
		break;
 80043ce:	e01e      	b.n	800440e <STM32FXXXDMA1_sr_feif+0xde>
		case 5:
			value = get_reg_block(DMA1->HISR, 1, 6);
 80043d0:	4b11      	ldr	r3, [pc, #68]	@ (8004418 <STM32FXXXDMA1_sr_feif+0xe8>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2206      	movs	r2, #6
 80043d6:	2101      	movs	r1, #1
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff f89a 	bl	8003512 <get_reg_block>
 80043de:	4603      	mov	r3, r0
 80043e0:	73fb      	strb	r3, [r7, #15]
		break;
 80043e2:	e014      	b.n	800440e <STM32FXXXDMA1_sr_feif+0xde>
		case 6:
			value = get_reg_block(DMA1->HISR, 1, 16);
 80043e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <STM32FXXXDMA1_sr_feif+0xe8>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2210      	movs	r2, #16
 80043ea:	2101      	movs	r1, #1
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f890 	bl	8003512 <get_reg_block>
 80043f2:	4603      	mov	r3, r0
 80043f4:	73fb      	strb	r3, [r7, #15]
		break;
 80043f6:	e00a      	b.n	800440e <STM32FXXXDMA1_sr_feif+0xde>
		case 7:
			value = get_reg_block(DMA1->HISR, 1, 22);
 80043f8:	4b07      	ldr	r3, [pc, #28]	@ (8004418 <STM32FXXXDMA1_sr_feif+0xe8>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2216      	movs	r2, #22
 80043fe:	2101      	movs	r1, #1
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff f886 	bl	8003512 <get_reg_block>
 8004406:	4603      	mov	r3, r0
 8004408:	73fb      	strb	r3, [r7, #15]
		break;
 800440a:	e000      	b.n	800440e <STM32FXXXDMA1_sr_feif+0xde>
	default: break;
 800440c:	bf00      	nop
	}
	return value;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40026000 	.word	0x40026000

0800441c <STM32FXXXDMA1_sr_clear_feif>:
void STM32FXXXDMA1_sr_clear_feif(uint8_t stream_n)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
	switch(stream_n){
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	2b07      	cmp	r3, #7
 800442a:	d84b      	bhi.n	80044c4 <STM32FXXXDMA1_sr_clear_feif+0xa8>
 800442c:	a201      	add	r2, pc, #4	@ (adr r2, 8004434 <STM32FXXXDMA1_sr_clear_feif+0x18>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	08004455 	.word	0x08004455
 8004438:	08004463 	.word	0x08004463
 800443c:	08004471 	.word	0x08004471
 8004440:	0800447f 	.word	0x0800447f
 8004444:	0800448d 	.word	0x0800448d
 8004448:	0800449b 	.word	0x0800449b
 800444c:	080044a9 	.word	0x080044a9
 8004450:	080044b7 	.word	0x080044b7
		case 0:
			set_reg_block(&DMA1->LIFCR, 1, 0, 1);
 8004454:	2301      	movs	r3, #1
 8004456:	2200      	movs	r2, #0
 8004458:	2101      	movs	r1, #1
 800445a:	481d      	ldr	r0, [pc, #116]	@ (80044d0 <STM32FXXXDMA1_sr_clear_feif+0xb4>)
 800445c:	f7ff f8be 	bl	80035dc <set_reg_block>
		break;
 8004460:	e031      	b.n	80044c6 <STM32FXXXDMA1_sr_clear_feif+0xaa>
		case 1:
			set_reg_block(&DMA1->LIFCR, 1, 6, 1);
 8004462:	2301      	movs	r3, #1
 8004464:	2206      	movs	r2, #6
 8004466:	2101      	movs	r1, #1
 8004468:	4819      	ldr	r0, [pc, #100]	@ (80044d0 <STM32FXXXDMA1_sr_clear_feif+0xb4>)
 800446a:	f7ff f8b7 	bl	80035dc <set_reg_block>
		break;
 800446e:	e02a      	b.n	80044c6 <STM32FXXXDMA1_sr_clear_feif+0xaa>
		case 2:
			set_reg_block(&DMA1->LIFCR, 1, 16, 1);
 8004470:	2301      	movs	r3, #1
 8004472:	2210      	movs	r2, #16
 8004474:	2101      	movs	r1, #1
 8004476:	4816      	ldr	r0, [pc, #88]	@ (80044d0 <STM32FXXXDMA1_sr_clear_feif+0xb4>)
 8004478:	f7ff f8b0 	bl	80035dc <set_reg_block>
		break;
 800447c:	e023      	b.n	80044c6 <STM32FXXXDMA1_sr_clear_feif+0xaa>
		case 3:
			set_reg_block(&DMA1->LIFCR, 1, 22, 1);
 800447e:	2301      	movs	r3, #1
 8004480:	2216      	movs	r2, #22
 8004482:	2101      	movs	r1, #1
 8004484:	4812      	ldr	r0, [pc, #72]	@ (80044d0 <STM32FXXXDMA1_sr_clear_feif+0xb4>)
 8004486:	f7ff f8a9 	bl	80035dc <set_reg_block>
		break;
 800448a:	e01c      	b.n	80044c6 <STM32FXXXDMA1_sr_clear_feif+0xaa>
		case 4:
			set_reg_block(&DMA1->HIFCR, 1, 0, 1);
 800448c:	2301      	movs	r3, #1
 800448e:	2200      	movs	r2, #0
 8004490:	2101      	movs	r1, #1
 8004492:	4810      	ldr	r0, [pc, #64]	@ (80044d4 <STM32FXXXDMA1_sr_clear_feif+0xb8>)
 8004494:	f7ff f8a2 	bl	80035dc <set_reg_block>
		break;
 8004498:	e015      	b.n	80044c6 <STM32FXXXDMA1_sr_clear_feif+0xaa>
		case 5:
			set_reg_block(&DMA1->HIFCR, 1, 6, 1);
 800449a:	2301      	movs	r3, #1
 800449c:	2206      	movs	r2, #6
 800449e:	2101      	movs	r1, #1
 80044a0:	480c      	ldr	r0, [pc, #48]	@ (80044d4 <STM32FXXXDMA1_sr_clear_feif+0xb8>)
 80044a2:	f7ff f89b 	bl	80035dc <set_reg_block>
		break;
 80044a6:	e00e      	b.n	80044c6 <STM32FXXXDMA1_sr_clear_feif+0xaa>
		case 6:
			set_reg_block(&DMA1->HIFCR, 1, 16, 1);
 80044a8:	2301      	movs	r3, #1
 80044aa:	2210      	movs	r2, #16
 80044ac:	2101      	movs	r1, #1
 80044ae:	4809      	ldr	r0, [pc, #36]	@ (80044d4 <STM32FXXXDMA1_sr_clear_feif+0xb8>)
 80044b0:	f7ff f894 	bl	80035dc <set_reg_block>
		break;
 80044b4:	e007      	b.n	80044c6 <STM32FXXXDMA1_sr_clear_feif+0xaa>
		case 7:
			set_reg_block(&DMA1->HIFCR, 1, 22, 1);
 80044b6:	2301      	movs	r3, #1
 80044b8:	2216      	movs	r2, #22
 80044ba:	2101      	movs	r1, #1
 80044bc:	4805      	ldr	r0, [pc, #20]	@ (80044d4 <STM32FXXXDMA1_sr_clear_feif+0xb8>)
 80044be:	f7ff f88d 	bl	80035dc <set_reg_block>
		break;
 80044c2:	e000      	b.n	80044c6 <STM32FXXXDMA1_sr_clear_feif+0xaa>
		default: break;
 80044c4:	bf00      	nop
	}
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40026008 	.word	0x40026008
 80044d4:	4002600c 	.word	0x4002600c

080044d8 <stm32fxxx_dma1_sr_inic>:
/*** Inic SR ***/
STM32FXXXDMA_sr* stm32fxxx_dma1_sr_inic(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0

	// SR
	stm32fxxx_dma1_sr.tcif = STM32FXXXDMA1_sr_tcif;
 80044dc:	4b11      	ldr	r3, [pc, #68]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
 80044de:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <stm32fxxx_dma1_sr_inic+0x50>)
 80044e0:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_sr.clear_tcif = STM32FXXXDMA1_sr_clear_tcif;
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
 80044e4:	4a11      	ldr	r2, [pc, #68]	@ (800452c <stm32fxxx_dma1_sr_inic+0x54>)
 80044e6:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_sr.htif = STM32FXXXDMA1_sr_htif;
 80044e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
 80044ea:	4a11      	ldr	r2, [pc, #68]	@ (8004530 <stm32fxxx_dma1_sr_inic+0x58>)
 80044ec:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_sr.clear_htif = STM32FXXXDMA1_sr_clear_htif;
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
 80044f0:	4a10      	ldr	r2, [pc, #64]	@ (8004534 <stm32fxxx_dma1_sr_inic+0x5c>)
 80044f2:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1_sr.teif = STM32FXXXDMA1_sr_teif;
 80044f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
 80044f6:	4a10      	ldr	r2, [pc, #64]	@ (8004538 <stm32fxxx_dma1_sr_inic+0x60>)
 80044f8:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma1_sr.clear_teif = STM32FXXXDMA1_sr_clear_teif;
 80044fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
 80044fc:	4a0f      	ldr	r2, [pc, #60]	@ (800453c <stm32fxxx_dma1_sr_inic+0x64>)
 80044fe:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma1_sr.dmeif = STM32FXXXDMA1_sr_dmeif;
 8004500:	4b08      	ldr	r3, [pc, #32]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
 8004502:	4a0f      	ldr	r2, [pc, #60]	@ (8004540 <stm32fxxx_dma1_sr_inic+0x68>)
 8004504:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma1_sr.clear_dmeif = STM32FXXXDMA1_sr_clear_dmeif;
 8004506:	4b07      	ldr	r3, [pc, #28]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
 8004508:	4a0e      	ldr	r2, [pc, #56]	@ (8004544 <stm32fxxx_dma1_sr_inic+0x6c>)
 800450a:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma1_sr.feif = STM32FXXXDMA1_sr_feif;
 800450c:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
 800450e:	4a0e      	ldr	r2, [pc, #56]	@ (8004548 <stm32fxxx_dma1_sr_inic+0x70>)
 8004510:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma1_sr.clear_feif = STM32FXXXDMA1_sr_clear_feif;
 8004512:	4b04      	ldr	r3, [pc, #16]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
 8004514:	4a0d      	ldr	r2, [pc, #52]	@ (800454c <stm32fxxx_dma1_sr_inic+0x74>)
 8004516:	625a      	str	r2, [r3, #36]	@ 0x24
	return &stm32fxxx_dma1_sr;
 8004518:	4b02      	ldr	r3, [pc, #8]	@ (8004524 <stm32fxxx_dma1_sr_inic+0x4c>)
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	20000268 	.word	0x20000268
 8004528:	08003c91 	.word	0x08003c91
 800452c:	08003d7d 	.word	0x08003d7d
 8004530:	08003e39 	.word	0x08003e39
 8004534:	08003f25 	.word	0x08003f25
 8004538:	08003fe1 	.word	0x08003fe1
 800453c:	080040cd 	.word	0x080040cd
 8004540:	08004189 	.word	0x08004189
 8004544:	08004275 	.word	0x08004275
 8004548:	08004331 	.word	0x08004331
 800454c:	0800441d 	.word	0x0800441d

08004550 <STM32FXXXDMA1_stream0_cr_chsel>:
// DMA1 STREAM0 CR
void STM32FXXXDMA1_stream0_cr_chsel(uint8_t value)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 3, 25, value);
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	2219      	movs	r2, #25
 800455e:	2103      	movs	r1, #3
 8004560:	4803      	ldr	r0, [pc, #12]	@ (8004570 <STM32FXXXDMA1_stream0_cr_chsel+0x20>)
 8004562:	f7ff f83b 	bl	80035dc <set_reg_block>
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40026010 	.word	0x40026010

08004574 <STM32FXXXDMA1_stream0_cr_mburst>:
void STM32FXXXDMA1_stream0_cr_mburst(uint8_t value)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 2, 23, value);
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	2217      	movs	r2, #23
 8004582:	2102      	movs	r1, #2
 8004584:	4803      	ldr	r0, [pc, #12]	@ (8004594 <STM32FXXXDMA1_stream0_cr_mburst+0x20>)
 8004586:	f7ff f829 	bl	80035dc <set_reg_block>
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40026010 	.word	0x40026010

08004598 <STM32FXXXDMA1_stream0_cr_pburst>:
void STM32FXXXDMA1_stream0_cr_pburst(uint8_t value)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 2, 21, value);
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	2215      	movs	r2, #21
 80045a6:	2102      	movs	r1, #2
 80045a8:	4803      	ldr	r0, [pc, #12]	@ (80045b8 <STM32FXXXDMA1_stream0_cr_pburst+0x20>)
 80045aa:	f7ff f817 	bl	80035dc <set_reg_block>
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40026010 	.word	0x40026010

080045bc <STM32FXXXDMA1_stream0_cr_ct>:
void STM32FXXXDMA1_stream0_cr_ct(uint8_t bool)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 19, bool);
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2213      	movs	r2, #19
 80045ca:	2101      	movs	r1, #1
 80045cc:	4803      	ldr	r0, [pc, #12]	@ (80045dc <STM32FXXXDMA1_stream0_cr_ct+0x20>)
 80045ce:	f7ff f805 	bl	80035dc <set_reg_block>
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40026010 	.word	0x40026010

080045e0 <STM32FXXXDMA1_stream0_cr_dbm>:
void STM32FXXXDMA1_stream0_cr_dbm(uint8_t bool)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 18, bool);
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	2212      	movs	r2, #18
 80045ee:	2101      	movs	r1, #1
 80045f0:	4803      	ldr	r0, [pc, #12]	@ (8004600 <STM32FXXXDMA1_stream0_cr_dbm+0x20>)
 80045f2:	f7fe fff3 	bl	80035dc <set_reg_block>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40026010 	.word	0x40026010

08004604 <STM32FXXXDMA1_stream0_cr_pl>:
void STM32FXXXDMA1_stream0_cr_pl(uint8_t value)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 2, 16, value);
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	2210      	movs	r2, #16
 8004612:	2102      	movs	r1, #2
 8004614:	4803      	ldr	r0, [pc, #12]	@ (8004624 <STM32FXXXDMA1_stream0_cr_pl+0x20>)
 8004616:	f7fe ffe1 	bl	80035dc <set_reg_block>
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40026010 	.word	0x40026010

08004628 <STM32FXXXDMA1_stream0_cr_pincos>:
void STM32FXXXDMA1_stream0_cr_pincos(uint8_t bool)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 15, bool);
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	220f      	movs	r2, #15
 8004636:	2101      	movs	r1, #1
 8004638:	4803      	ldr	r0, [pc, #12]	@ (8004648 <STM32FXXXDMA1_stream0_cr_pincos+0x20>)
 800463a:	f7fe ffcf 	bl	80035dc <set_reg_block>
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40026010 	.word	0x40026010

0800464c <STM32FXXXDMA1_stream0_cr_msize>:
void STM32FXXXDMA1_stream0_cr_msize(uint8_t value)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 2, 13, value);
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	220d      	movs	r2, #13
 800465a:	2102      	movs	r1, #2
 800465c:	4803      	ldr	r0, [pc, #12]	@ (800466c <STM32FXXXDMA1_stream0_cr_msize+0x20>)
 800465e:	f7fe ffbd 	bl	80035dc <set_reg_block>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40026010 	.word	0x40026010

08004670 <STM32FXXXDMA1_stream0_cr_psize>:
void STM32FXXXDMA1_stream0_cr_psize(uint8_t value)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 2, 11, value);
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	220b      	movs	r2, #11
 800467e:	2102      	movs	r1, #2
 8004680:	4803      	ldr	r0, [pc, #12]	@ (8004690 <STM32FXXXDMA1_stream0_cr_psize+0x20>)
 8004682:	f7fe ffab 	bl	80035dc <set_reg_block>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40026010 	.word	0x40026010

08004694 <STM32FXXXDMA1_stream0_cr_minc>:
void STM32FXXXDMA1_stream0_cr_minc(uint8_t bool)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 10, bool);
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	220a      	movs	r2, #10
 80046a2:	2101      	movs	r1, #1
 80046a4:	4803      	ldr	r0, [pc, #12]	@ (80046b4 <STM32FXXXDMA1_stream0_cr_minc+0x20>)
 80046a6:	f7fe ff99 	bl	80035dc <set_reg_block>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40026010 	.word	0x40026010

080046b8 <STM32FXXXDMA1_stream0_cr_pinc>:
void STM32FXXXDMA1_stream0_cr_pinc(uint8_t bool)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 9, bool);
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	2209      	movs	r2, #9
 80046c6:	2101      	movs	r1, #1
 80046c8:	4803      	ldr	r0, [pc, #12]	@ (80046d8 <STM32FXXXDMA1_stream0_cr_pinc+0x20>)
 80046ca:	f7fe ff87 	bl	80035dc <set_reg_block>
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40026010 	.word	0x40026010

080046dc <STM32FXXXDMA1_stream0_cr_circ>:
void STM32FXXXDMA1_stream0_cr_circ(uint8_t bool)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 8, bool);
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	2208      	movs	r2, #8
 80046ea:	2101      	movs	r1, #1
 80046ec:	4803      	ldr	r0, [pc, #12]	@ (80046fc <STM32FXXXDMA1_stream0_cr_circ+0x20>)
 80046ee:	f7fe ff75 	bl	80035dc <set_reg_block>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40026010 	.word	0x40026010

08004700 <STM32FXXXDMA1_stream0_cr_dir>:
void STM32FXXXDMA1_stream0_cr_dir(uint8_t value)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 2, 7, value);
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	2207      	movs	r2, #7
 800470e:	2102      	movs	r1, #2
 8004710:	4803      	ldr	r0, [pc, #12]	@ (8004720 <STM32FXXXDMA1_stream0_cr_dir+0x20>)
 8004712:	f7fe ff63 	bl	80035dc <set_reg_block>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40026010 	.word	0x40026010

08004724 <STM32FXXXDMA1_stream0_cr_pfctrl>:
void STM32FXXXDMA1_stream0_cr_pfctrl(uint8_t bool)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 5, bool);
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	2205      	movs	r2, #5
 8004732:	2101      	movs	r1, #1
 8004734:	4803      	ldr	r0, [pc, #12]	@ (8004744 <STM32FXXXDMA1_stream0_cr_pfctrl+0x20>)
 8004736:	f7fe ff51 	bl	80035dc <set_reg_block>
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40026010 	.word	0x40026010

08004748 <STM32FXXXDMA1_stream0_cr_tcie>:
void STM32FXXXDMA1_stream0_cr_tcie(uint8_t bool)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 4, bool);
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	2204      	movs	r2, #4
 8004756:	2101      	movs	r1, #1
 8004758:	4803      	ldr	r0, [pc, #12]	@ (8004768 <STM32FXXXDMA1_stream0_cr_tcie+0x20>)
 800475a:	f7fe ff3f 	bl	80035dc <set_reg_block>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40026010 	.word	0x40026010

0800476c <STM32FXXXDMA1_stream0_cr_htie>:
void STM32FXXXDMA1_stream0_cr_htie(uint8_t bool)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 3, bool);
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	2203      	movs	r2, #3
 800477a:	2101      	movs	r1, #1
 800477c:	4803      	ldr	r0, [pc, #12]	@ (800478c <STM32FXXXDMA1_stream0_cr_htie+0x20>)
 800477e:	f7fe ff2d 	bl	80035dc <set_reg_block>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40026010 	.word	0x40026010

08004790 <STM32FXXXDMA1_stream0_cr_teie>:
void STM32FXXXDMA1_stream0_cr_teie(uint8_t bool)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 2, bool);
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2202      	movs	r2, #2
 800479e:	2101      	movs	r1, #1
 80047a0:	4803      	ldr	r0, [pc, #12]	@ (80047b0 <STM32FXXXDMA1_stream0_cr_teie+0x20>)
 80047a2:	f7fe ff1b 	bl	80035dc <set_reg_block>
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40026010 	.word	0x40026010

080047b4 <STM32FXXXDMA1_stream0_cr_dmeie>:
void STM32FXXXDMA1_stream0_cr_dmeie(uint8_t bool)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 1, bool);
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	2201      	movs	r2, #1
 80047c2:	2101      	movs	r1, #1
 80047c4:	4803      	ldr	r0, [pc, #12]	@ (80047d4 <STM32FXXXDMA1_stream0_cr_dmeie+0x20>)
 80047c6:	f7fe ff09 	bl	80035dc <set_reg_block>
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40026010 	.word	0x40026010

080047d8 <STM32FXXXDMA1_stream0_cr_en>:
void STM32FXXXDMA1_stream0_cr_en(uint8_t bool)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->CR, 1, 0, bool);
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2101      	movs	r1, #1
 80047e8:	4803      	ldr	r0, [pc, #12]	@ (80047f8 <STM32FXXXDMA1_stream0_cr_en+0x20>)
 80047ea:	f7fe fef7 	bl	80035dc <set_reg_block>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40026010 	.word	0x40026010

080047fc <stm32fxxx_dma1_stream0_cr_inic>:
/*** Inic DMA1 STREAM0 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma1_stream0_cr_inic(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma1_stream0_cr.chsel = STM32FXXXDMA1_stream0_cr_chsel;
 8004800:	4b1f      	ldr	r3, [pc, #124]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004802:	4a20      	ldr	r2, [pc, #128]	@ (8004884 <stm32fxxx_dma1_stream0_cr_inic+0x88>)
 8004804:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream0_cr.mburst = STM32FXXXDMA1_stream0_cr_mburst;
 8004806:	4b1e      	ldr	r3, [pc, #120]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004808:	4a1f      	ldr	r2, [pc, #124]	@ (8004888 <stm32fxxx_dma1_stream0_cr_inic+0x8c>)
 800480a:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream0_cr.pburst = STM32FXXXDMA1_stream0_cr_pburst;
 800480c:	4b1c      	ldr	r3, [pc, #112]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 800480e:	4a1f      	ldr	r2, [pc, #124]	@ (800488c <stm32fxxx_dma1_stream0_cr_inic+0x90>)
 8004810:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream0_cr.ct = STM32FXXXDMA1_stream0_cr_ct;
 8004812:	4b1b      	ldr	r3, [pc, #108]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004814:	4a1e      	ldr	r2, [pc, #120]	@ (8004890 <stm32fxxx_dma1_stream0_cr_inic+0x94>)
 8004816:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1_stream0_cr.dbm = STM32FXXXDMA1_stream0_cr_dbm;
 8004818:	4b19      	ldr	r3, [pc, #100]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 800481a:	4a1e      	ldr	r2, [pc, #120]	@ (8004894 <stm32fxxx_dma1_stream0_cr_inic+0x98>)
 800481c:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma1_stream0_cr.pl = STM32FXXXDMA1_stream0_cr_pl;
 800481e:	4b18      	ldr	r3, [pc, #96]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004820:	4a1d      	ldr	r2, [pc, #116]	@ (8004898 <stm32fxxx_dma1_stream0_cr_inic+0x9c>)
 8004822:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma1_stream0_cr.pincos = STM32FXXXDMA1_stream0_cr_pincos;
 8004824:	4b16      	ldr	r3, [pc, #88]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004826:	4a1d      	ldr	r2, [pc, #116]	@ (800489c <stm32fxxx_dma1_stream0_cr_inic+0xa0>)
 8004828:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma1_stream0_cr.msize = STM32FXXXDMA1_stream0_cr_msize;
 800482a:	4b15      	ldr	r3, [pc, #84]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 800482c:	4a1c      	ldr	r2, [pc, #112]	@ (80048a0 <stm32fxxx_dma1_stream0_cr_inic+0xa4>)
 800482e:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma1_stream0_cr.psize = STM32FXXXDMA1_stream0_cr_psize;
 8004830:	4b13      	ldr	r3, [pc, #76]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004832:	4a1c      	ldr	r2, [pc, #112]	@ (80048a4 <stm32fxxx_dma1_stream0_cr_inic+0xa8>)
 8004834:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma1_stream0_cr.minc = STM32FXXXDMA1_stream0_cr_minc;
 8004836:	4b12      	ldr	r3, [pc, #72]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004838:	4a1b      	ldr	r2, [pc, #108]	@ (80048a8 <stm32fxxx_dma1_stream0_cr_inic+0xac>)
 800483a:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma1_stream0_cr.pinc = STM32FXXXDMA1_stream0_cr_pinc;
 800483c:	4b10      	ldr	r3, [pc, #64]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 800483e:	4a1b      	ldr	r2, [pc, #108]	@ (80048ac <stm32fxxx_dma1_stream0_cr_inic+0xb0>)
 8004840:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma1_stream0_cr.circ = STM32FXXXDMA1_stream0_cr_circ;
 8004842:	4b0f      	ldr	r3, [pc, #60]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004844:	4a1a      	ldr	r2, [pc, #104]	@ (80048b0 <stm32fxxx_dma1_stream0_cr_inic+0xb4>)
 8004846:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma1_stream0_cr.dir = STM32FXXXDMA1_stream0_cr_dir;
 8004848:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 800484a:	4a1a      	ldr	r2, [pc, #104]	@ (80048b4 <stm32fxxx_dma1_stream0_cr_inic+0xb8>)
 800484c:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma1_stream0_cr.pfctrl = STM32FXXXDMA1_stream0_cr_pfctrl;
 800484e:	4b0c      	ldr	r3, [pc, #48]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004850:	4a19      	ldr	r2, [pc, #100]	@ (80048b8 <stm32fxxx_dma1_stream0_cr_inic+0xbc>)
 8004852:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma1_stream0_cr.tcie = STM32FXXXDMA1_stream0_cr_tcie;
 8004854:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004856:	4a19      	ldr	r2, [pc, #100]	@ (80048bc <stm32fxxx_dma1_stream0_cr_inic+0xc0>)
 8004858:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma1_stream0_cr.htie = STM32FXXXDMA1_stream0_cr_htie;
 800485a:	4b09      	ldr	r3, [pc, #36]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 800485c:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <stm32fxxx_dma1_stream0_cr_inic+0xc4>)
 800485e:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma1_stream0_cr.teie = STM32FXXXDMA1_stream0_cr_teie;
 8004860:	4b07      	ldr	r3, [pc, #28]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004862:	4a18      	ldr	r2, [pc, #96]	@ (80048c4 <stm32fxxx_dma1_stream0_cr_inic+0xc8>)
 8004864:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma1_stream0_cr.dmeie = STM32FXXXDMA1_stream0_cr_dmeie;
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 8004868:	4a17      	ldr	r2, [pc, #92]	@ (80048c8 <stm32fxxx_dma1_stream0_cr_inic+0xcc>)
 800486a:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma1_stream0_cr.en = STM32FXXXDMA1_stream0_cr_en;
 800486c:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
 800486e:	4a17      	ldr	r2, [pc, #92]	@ (80048cc <stm32fxxx_dma1_stream0_cr_inic+0xd0>)
 8004870:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma1_stream0_cr;
 8004872:	4b03      	ldr	r3, [pc, #12]	@ (8004880 <stm32fxxx_dma1_stream0_cr_inic+0x84>)
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000290 	.word	0x20000290
 8004884:	08004551 	.word	0x08004551
 8004888:	08004575 	.word	0x08004575
 800488c:	08004599 	.word	0x08004599
 8004890:	080045bd 	.word	0x080045bd
 8004894:	080045e1 	.word	0x080045e1
 8004898:	08004605 	.word	0x08004605
 800489c:	08004629 	.word	0x08004629
 80048a0:	0800464d 	.word	0x0800464d
 80048a4:	08004671 	.word	0x08004671
 80048a8:	08004695 	.word	0x08004695
 80048ac:	080046b9 	.word	0x080046b9
 80048b0:	080046dd 	.word	0x080046dd
 80048b4:	08004701 	.word	0x08004701
 80048b8:	08004725 	.word	0x08004725
 80048bc:	08004749 	.word	0x08004749
 80048c0:	0800476d 	.word	0x0800476d
 80048c4:	08004791 	.word	0x08004791
 80048c8:	080047b5 	.word	0x080047b5
 80048cc:	080047d9 	.word	0x080047d9

080048d0 <stm32fxxx_dma1_stream0_ndt>:
/*** Inic DMA1 STREAM0 Function ***/
void stm32fxxx_dma1_stream0_ndt(uint16_t value)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	80fb      	strh	r3, [r7, #6]
	DMA1_Stream0->NDTR = value;
 80048da:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <stm32fxxx_dma1_stream0_ndt+0x1c>)
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	6053      	str	r3, [r2, #4]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	40026010 	.word	0x40026010

080048f0 <stm32fxxx_dma1_stream0_par>:
void stm32fxxx_dma1_stream0_par(volatile long unsigned int periferal_addr)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	DMA1_Stream0->PAR = periferal_addr;
 80048f8:	4a04      	ldr	r2, [pc, #16]	@ (800490c <stm32fxxx_dma1_stream0_par+0x1c>)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6093      	str	r3, [r2, #8]
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40026010 	.word	0x40026010

08004910 <stm32fxxx_dma1_stream0_m0a>:
void stm32fxxx_dma1_stream0_m0a(volatile long unsigned int mem0_addr)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	DMA1_Stream0->M0AR = mem0_addr;
 8004918:	4a04      	ldr	r2, [pc, #16]	@ (800492c <stm32fxxx_dma1_stream0_m0a+0x1c>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60d3      	str	r3, [r2, #12]
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40026010 	.word	0x40026010

08004930 <stm32fxxx_dma1_stream0_m1a>:
void stm32fxxx_dma1_stream0_m1a(volatile long unsigned int mem1_addr)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	DMA1_Stream0->M1AR = mem1_addr;
 8004938:	4a04      	ldr	r2, [pc, #16]	@ (800494c <stm32fxxx_dma1_stream0_m1a+0x1c>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6113      	str	r3, [r2, #16]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40026010 	.word	0x40026010

08004950 <STM32FXXXDMA1_stream1_cr_chsel>:
// DMA1 STREAM1 CR
void STM32FXXXDMA1_stream1_cr_chsel(uint8_t value)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 3, 25, value);
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	2219      	movs	r2, #25
 800495e:	2103      	movs	r1, #3
 8004960:	4803      	ldr	r0, [pc, #12]	@ (8004970 <STM32FXXXDMA1_stream1_cr_chsel+0x20>)
 8004962:	f7fe fe3b 	bl	80035dc <set_reg_block>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40026028 	.word	0x40026028

08004974 <STM32FXXXDMA1_stream1_cr_mburst>:
void STM32FXXXDMA1_stream1_cr_mburst(uint8_t value)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 2, 23, value);
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	2217      	movs	r2, #23
 8004982:	2102      	movs	r1, #2
 8004984:	4803      	ldr	r0, [pc, #12]	@ (8004994 <STM32FXXXDMA1_stream1_cr_mburst+0x20>)
 8004986:	f7fe fe29 	bl	80035dc <set_reg_block>
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40026028 	.word	0x40026028

08004998 <STM32FXXXDMA1_stream1_cr_pburst>:
void STM32FXXXDMA1_stream1_cr_pburst(uint8_t value)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 2, 21, value);
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	2215      	movs	r2, #21
 80049a6:	2102      	movs	r1, #2
 80049a8:	4803      	ldr	r0, [pc, #12]	@ (80049b8 <STM32FXXXDMA1_stream1_cr_pburst+0x20>)
 80049aa:	f7fe fe17 	bl	80035dc <set_reg_block>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40026028 	.word	0x40026028

080049bc <STM32FXXXDMA1_stream1_cr_ct>:
void STM32FXXXDMA1_stream1_cr_ct(uint8_t bool)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 19, bool);
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	2213      	movs	r2, #19
 80049ca:	2101      	movs	r1, #1
 80049cc:	4803      	ldr	r0, [pc, #12]	@ (80049dc <STM32FXXXDMA1_stream1_cr_ct+0x20>)
 80049ce:	f7fe fe05 	bl	80035dc <set_reg_block>
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40026028 	.word	0x40026028

080049e0 <STM32FXXXDMA1_stream1_cr_dbm>:
void STM32FXXXDMA1_stream1_cr_dbm(uint8_t bool)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 18, bool);
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	2212      	movs	r2, #18
 80049ee:	2101      	movs	r1, #1
 80049f0:	4803      	ldr	r0, [pc, #12]	@ (8004a00 <STM32FXXXDMA1_stream1_cr_dbm+0x20>)
 80049f2:	f7fe fdf3 	bl	80035dc <set_reg_block>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40026028 	.word	0x40026028

08004a04 <STM32FXXXDMA1_stream1_cr_pl>:
void STM32FXXXDMA1_stream1_cr_pl(uint8_t value)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 2, 16, value);
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	2210      	movs	r2, #16
 8004a12:	2102      	movs	r1, #2
 8004a14:	4803      	ldr	r0, [pc, #12]	@ (8004a24 <STM32FXXXDMA1_stream1_cr_pl+0x20>)
 8004a16:	f7fe fde1 	bl	80035dc <set_reg_block>
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40026028 	.word	0x40026028

08004a28 <STM32FXXXDMA1_stream1_cr_pincos>:
void STM32FXXXDMA1_stream1_cr_pincos(uint8_t bool)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 15, bool);
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	220f      	movs	r2, #15
 8004a36:	2101      	movs	r1, #1
 8004a38:	4803      	ldr	r0, [pc, #12]	@ (8004a48 <STM32FXXXDMA1_stream1_cr_pincos+0x20>)
 8004a3a:	f7fe fdcf 	bl	80035dc <set_reg_block>
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40026028 	.word	0x40026028

08004a4c <STM32FXXXDMA1_stream1_cr_msize>:
void STM32FXXXDMA1_stream1_cr_msize(uint8_t value)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 2, 13, value);
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	220d      	movs	r2, #13
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	4803      	ldr	r0, [pc, #12]	@ (8004a6c <STM32FXXXDMA1_stream1_cr_msize+0x20>)
 8004a5e:	f7fe fdbd 	bl	80035dc <set_reg_block>
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40026028 	.word	0x40026028

08004a70 <STM32FXXXDMA1_stream1_cr_psize>:
void STM32FXXXDMA1_stream1_cr_psize(uint8_t value)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 2, 11, value);
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	220b      	movs	r2, #11
 8004a7e:	2102      	movs	r1, #2
 8004a80:	4803      	ldr	r0, [pc, #12]	@ (8004a90 <STM32FXXXDMA1_stream1_cr_psize+0x20>)
 8004a82:	f7fe fdab 	bl	80035dc <set_reg_block>
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40026028 	.word	0x40026028

08004a94 <STM32FXXXDMA1_stream1_cr_minc>:
void STM32FXXXDMA1_stream1_cr_minc(uint8_t bool)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 10, bool);
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	220a      	movs	r2, #10
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	4803      	ldr	r0, [pc, #12]	@ (8004ab4 <STM32FXXXDMA1_stream1_cr_minc+0x20>)
 8004aa6:	f7fe fd99 	bl	80035dc <set_reg_block>
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40026028 	.word	0x40026028

08004ab8 <STM32FXXXDMA1_stream1_cr_pinc>:
void STM32FXXXDMA1_stream1_cr_pinc(uint8_t bool)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 9, bool);
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	2209      	movs	r2, #9
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4803      	ldr	r0, [pc, #12]	@ (8004ad8 <STM32FXXXDMA1_stream1_cr_pinc+0x20>)
 8004aca:	f7fe fd87 	bl	80035dc <set_reg_block>
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40026028 	.word	0x40026028

08004adc <STM32FXXXDMA1_stream1_cr_circ>:
void STM32FXXXDMA1_stream1_cr_circ(uint8_t bool)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 8, bool);
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	2101      	movs	r1, #1
 8004aec:	4803      	ldr	r0, [pc, #12]	@ (8004afc <STM32FXXXDMA1_stream1_cr_circ+0x20>)
 8004aee:	f7fe fd75 	bl	80035dc <set_reg_block>
}
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40026028 	.word	0x40026028

08004b00 <STM32FXXXDMA1_stream1_cr_dir>:
void STM32FXXXDMA1_stream1_cr_dir(uint8_t value)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 2, 7, value);
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	2102      	movs	r1, #2
 8004b10:	4803      	ldr	r0, [pc, #12]	@ (8004b20 <STM32FXXXDMA1_stream1_cr_dir+0x20>)
 8004b12:	f7fe fd63 	bl	80035dc <set_reg_block>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40026028 	.word	0x40026028

08004b24 <STM32FXXXDMA1_stream1_cr_pfctrl>:
void STM32FXXXDMA1_stream1_cr_pfctrl(uint8_t bool)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 5, bool);
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	2205      	movs	r2, #5
 8004b32:	2101      	movs	r1, #1
 8004b34:	4803      	ldr	r0, [pc, #12]	@ (8004b44 <STM32FXXXDMA1_stream1_cr_pfctrl+0x20>)
 8004b36:	f7fe fd51 	bl	80035dc <set_reg_block>
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40026028 	.word	0x40026028

08004b48 <STM32FXXXDMA1_stream1_cr_tcie>:
void STM32FXXXDMA1_stream1_cr_tcie(uint8_t bool)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 4, bool);
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	2204      	movs	r2, #4
 8004b56:	2101      	movs	r1, #1
 8004b58:	4803      	ldr	r0, [pc, #12]	@ (8004b68 <STM32FXXXDMA1_stream1_cr_tcie+0x20>)
 8004b5a:	f7fe fd3f 	bl	80035dc <set_reg_block>
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40026028 	.word	0x40026028

08004b6c <STM32FXXXDMA1_stream1_cr_htie>:
void STM32FXXXDMA1_stream1_cr_htie(uint8_t bool)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 3, bool);
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	2203      	movs	r2, #3
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	4803      	ldr	r0, [pc, #12]	@ (8004b8c <STM32FXXXDMA1_stream1_cr_htie+0x20>)
 8004b7e:	f7fe fd2d 	bl	80035dc <set_reg_block>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40026028 	.word	0x40026028

08004b90 <STM32FXXXDMA1_stream1_cr_teie>:
void STM32FXXXDMA1_stream1_cr_teie(uint8_t bool)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 2, bool);
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	4803      	ldr	r0, [pc, #12]	@ (8004bb0 <STM32FXXXDMA1_stream1_cr_teie+0x20>)
 8004ba2:	f7fe fd1b 	bl	80035dc <set_reg_block>
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40026028 	.word	0x40026028

08004bb4 <STM32FXXXDMA1_stream1_cr_dmeie>:
void STM32FXXXDMA1_stream1_cr_dmeie(uint8_t bool)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 1, bool);
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4803      	ldr	r0, [pc, #12]	@ (8004bd4 <STM32FXXXDMA1_stream1_cr_dmeie+0x20>)
 8004bc6:	f7fe fd09 	bl	80035dc <set_reg_block>
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40026028 	.word	0x40026028

08004bd8 <STM32FXXXDMA1_stream1_cr_en>:
void STM32FXXXDMA1_stream1_cr_en(uint8_t bool)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->CR, 1, 0, bool);
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	2200      	movs	r2, #0
 8004be6:	2101      	movs	r1, #1
 8004be8:	4803      	ldr	r0, [pc, #12]	@ (8004bf8 <STM32FXXXDMA1_stream1_cr_en+0x20>)
 8004bea:	f7fe fcf7 	bl	80035dc <set_reg_block>
}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40026028 	.word	0x40026028

08004bfc <stm32fxxx_dma1_stream1_cr_inic>:
/*** Inic DMA1 STREAM1 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma1_stream1_cr_inic(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma1_stream1_cr.chsel = STM32FXXXDMA1_stream1_cr_chsel;
 8004c00:	4b1f      	ldr	r3, [pc, #124]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c02:	4a20      	ldr	r2, [pc, #128]	@ (8004c84 <stm32fxxx_dma1_stream1_cr_inic+0x88>)
 8004c04:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream1_cr.mburst = STM32FXXXDMA1_stream1_cr_mburst;
 8004c06:	4b1e      	ldr	r3, [pc, #120]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c08:	4a1f      	ldr	r2, [pc, #124]	@ (8004c88 <stm32fxxx_dma1_stream1_cr_inic+0x8c>)
 8004c0a:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream1_cr.pburst = STM32FXXXDMA1_stream1_cr_pburst;
 8004c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c8c <stm32fxxx_dma1_stream1_cr_inic+0x90>)
 8004c10:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream1_cr.ct = STM32FXXXDMA1_stream1_cr_ct;
 8004c12:	4b1b      	ldr	r3, [pc, #108]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c14:	4a1e      	ldr	r2, [pc, #120]	@ (8004c90 <stm32fxxx_dma1_stream1_cr_inic+0x94>)
 8004c16:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1_stream1_cr.dbm = STM32FXXXDMA1_stream1_cr_dbm;
 8004c18:	4b19      	ldr	r3, [pc, #100]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c94 <stm32fxxx_dma1_stream1_cr_inic+0x98>)
 8004c1c:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma1_stream1_cr.pl = STM32FXXXDMA1_stream1_cr_pl;
 8004c1e:	4b18      	ldr	r3, [pc, #96]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c20:	4a1d      	ldr	r2, [pc, #116]	@ (8004c98 <stm32fxxx_dma1_stream1_cr_inic+0x9c>)
 8004c22:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma1_stream1_cr.pincos = STM32FXXXDMA1_stream1_cr_pincos;
 8004c24:	4b16      	ldr	r3, [pc, #88]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c26:	4a1d      	ldr	r2, [pc, #116]	@ (8004c9c <stm32fxxx_dma1_stream1_cr_inic+0xa0>)
 8004c28:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma1_stream1_cr.msize = STM32FXXXDMA1_stream1_cr_msize;
 8004c2a:	4b15      	ldr	r3, [pc, #84]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca0 <stm32fxxx_dma1_stream1_cr_inic+0xa4>)
 8004c2e:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma1_stream1_cr.psize = STM32FXXXDMA1_stream1_cr_psize;
 8004c30:	4b13      	ldr	r3, [pc, #76]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca4 <stm32fxxx_dma1_stream1_cr_inic+0xa8>)
 8004c34:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma1_stream1_cr.minc = STM32FXXXDMA1_stream1_cr_minc;
 8004c36:	4b12      	ldr	r3, [pc, #72]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c38:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca8 <stm32fxxx_dma1_stream1_cr_inic+0xac>)
 8004c3a:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma1_stream1_cr.pinc = STM32FXXXDMA1_stream1_cr_pinc;
 8004c3c:	4b10      	ldr	r3, [pc, #64]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cac <stm32fxxx_dma1_stream1_cr_inic+0xb0>)
 8004c40:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma1_stream1_cr.circ = STM32FXXXDMA1_stream1_cr_circ;
 8004c42:	4b0f      	ldr	r3, [pc, #60]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c44:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb0 <stm32fxxx_dma1_stream1_cr_inic+0xb4>)
 8004c46:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma1_stream1_cr.dir = STM32FXXXDMA1_stream1_cr_dir;
 8004c48:	4b0d      	ldr	r3, [pc, #52]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb4 <stm32fxxx_dma1_stream1_cr_inic+0xb8>)
 8004c4c:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma1_stream1_cr.pfctrl = STM32FXXXDMA1_stream1_cr_pfctrl;
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c50:	4a19      	ldr	r2, [pc, #100]	@ (8004cb8 <stm32fxxx_dma1_stream1_cr_inic+0xbc>)
 8004c52:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma1_stream1_cr.tcie = STM32FXXXDMA1_stream1_cr_tcie;
 8004c54:	4b0a      	ldr	r3, [pc, #40]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c56:	4a19      	ldr	r2, [pc, #100]	@ (8004cbc <stm32fxxx_dma1_stream1_cr_inic+0xc0>)
 8004c58:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma1_stream1_cr.htie = STM32FXXXDMA1_stream1_cr_htie;
 8004c5a:	4b09      	ldr	r3, [pc, #36]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c5c:	4a18      	ldr	r2, [pc, #96]	@ (8004cc0 <stm32fxxx_dma1_stream1_cr_inic+0xc4>)
 8004c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma1_stream1_cr.teie = STM32FXXXDMA1_stream1_cr_teie;
 8004c60:	4b07      	ldr	r3, [pc, #28]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c62:	4a18      	ldr	r2, [pc, #96]	@ (8004cc4 <stm32fxxx_dma1_stream1_cr_inic+0xc8>)
 8004c64:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma1_stream1_cr.dmeie = STM32FXXXDMA1_stream1_cr_dmeie;
 8004c66:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c68:	4a17      	ldr	r2, [pc, #92]	@ (8004cc8 <stm32fxxx_dma1_stream1_cr_inic+0xcc>)
 8004c6a:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma1_stream1_cr.en = STM32FXXXDMA1_stream1_cr_en;
 8004c6c:	4b04      	ldr	r3, [pc, #16]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
 8004c6e:	4a17      	ldr	r2, [pc, #92]	@ (8004ccc <stm32fxxx_dma1_stream1_cr_inic+0xd0>)
 8004c70:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma1_stream1_cr;
 8004c72:	4b03      	ldr	r3, [pc, #12]	@ (8004c80 <stm32fxxx_dma1_stream1_cr_inic+0x84>)
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	200002dc 	.word	0x200002dc
 8004c84:	08004951 	.word	0x08004951
 8004c88:	08004975 	.word	0x08004975
 8004c8c:	08004999 	.word	0x08004999
 8004c90:	080049bd 	.word	0x080049bd
 8004c94:	080049e1 	.word	0x080049e1
 8004c98:	08004a05 	.word	0x08004a05
 8004c9c:	08004a29 	.word	0x08004a29
 8004ca0:	08004a4d 	.word	0x08004a4d
 8004ca4:	08004a71 	.word	0x08004a71
 8004ca8:	08004a95 	.word	0x08004a95
 8004cac:	08004ab9 	.word	0x08004ab9
 8004cb0:	08004add 	.word	0x08004add
 8004cb4:	08004b01 	.word	0x08004b01
 8004cb8:	08004b25 	.word	0x08004b25
 8004cbc:	08004b49 	.word	0x08004b49
 8004cc0:	08004b6d 	.word	0x08004b6d
 8004cc4:	08004b91 	.word	0x08004b91
 8004cc8:	08004bb5 	.word	0x08004bb5
 8004ccc:	08004bd9 	.word	0x08004bd9

08004cd0 <stm32fxxx_dma1_stream1_ndt>:
/*** Inic DMA1 STREAM1 Function ***/
void stm32fxxx_dma1_stream1_ndt(uint16_t value)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80fb      	strh	r3, [r7, #6]
	DMA1_Stream1->NDTR = value;
 8004cda:	4a04      	ldr	r2, [pc, #16]	@ (8004cec <stm32fxxx_dma1_stream1_ndt+0x1c>)
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	6053      	str	r3, [r2, #4]
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	40026028 	.word	0x40026028

08004cf0 <stm32fxxx_dma1_stream1_par>:
void stm32fxxx_dma1_stream1_par(volatile long unsigned int periferal_addr)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	DMA1_Stream1->PAR = periferal_addr;
 8004cf8:	4a04      	ldr	r2, [pc, #16]	@ (8004d0c <stm32fxxx_dma1_stream1_par+0x1c>)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6093      	str	r3, [r2, #8]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40026028 	.word	0x40026028

08004d10 <stm32fxxx_dma1_stream1_m0a>:
void stm32fxxx_dma1_stream1_m0a(volatile long unsigned int mem0_addr)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
	DMA1_Stream1->M0AR = mem0_addr;
 8004d18:	4a04      	ldr	r2, [pc, #16]	@ (8004d2c <stm32fxxx_dma1_stream1_m0a+0x1c>)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60d3      	str	r3, [r2, #12]
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40026028 	.word	0x40026028

08004d30 <stm32fxxx_dma1_stream1_m1a>:
void stm32fxxx_dma1_stream1_m1a(volatile long unsigned int mem1_addr)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	DMA1_Stream1->M1AR = mem1_addr;
 8004d38:	4a04      	ldr	r2, [pc, #16]	@ (8004d4c <stm32fxxx_dma1_stream1_m1a+0x1c>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6113      	str	r3, [r2, #16]
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40026028 	.word	0x40026028

08004d50 <STM32FXXXDMA1_stream2_cr_chsel>:
// DMA1 STREAM2 CR
void STM32FXXXDMA1_stream2_cr_chsel(uint8_t value)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 3, 25, value);
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	2219      	movs	r2, #25
 8004d5e:	2103      	movs	r1, #3
 8004d60:	4803      	ldr	r0, [pc, #12]	@ (8004d70 <STM32FXXXDMA1_stream2_cr_chsel+0x20>)
 8004d62:	f7fe fc3b 	bl	80035dc <set_reg_block>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40026040 	.word	0x40026040

08004d74 <STM32FXXXDMA1_stream2_cr_mburst>:
void STM32FXXXDMA1_stream2_cr_mburst(uint8_t value)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 2, 23, value);
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	2217      	movs	r2, #23
 8004d82:	2102      	movs	r1, #2
 8004d84:	4803      	ldr	r0, [pc, #12]	@ (8004d94 <STM32FXXXDMA1_stream2_cr_mburst+0x20>)
 8004d86:	f7fe fc29 	bl	80035dc <set_reg_block>
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40026040 	.word	0x40026040

08004d98 <STM32FXXXDMA1_stream2_cr_pburst>:
void STM32FXXXDMA1_stream2_cr_pburst(uint8_t value)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 2, 21, value);
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	2215      	movs	r2, #21
 8004da6:	2102      	movs	r1, #2
 8004da8:	4803      	ldr	r0, [pc, #12]	@ (8004db8 <STM32FXXXDMA1_stream2_cr_pburst+0x20>)
 8004daa:	f7fe fc17 	bl	80035dc <set_reg_block>
}
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40026040 	.word	0x40026040

08004dbc <STM32FXXXDMA1_stream2_cr_ct>:
void STM32FXXXDMA1_stream2_cr_ct(uint8_t bool)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 19, bool);
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	2213      	movs	r2, #19
 8004dca:	2101      	movs	r1, #1
 8004dcc:	4803      	ldr	r0, [pc, #12]	@ (8004ddc <STM32FXXXDMA1_stream2_cr_ct+0x20>)
 8004dce:	f7fe fc05 	bl	80035dc <set_reg_block>
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40026040 	.word	0x40026040

08004de0 <STM32FXXXDMA1_stream2_cr_dbm>:
void STM32FXXXDMA1_stream2_cr_dbm(uint8_t bool)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 18, bool);
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	2212      	movs	r2, #18
 8004dee:	2101      	movs	r1, #1
 8004df0:	4803      	ldr	r0, [pc, #12]	@ (8004e00 <STM32FXXXDMA1_stream2_cr_dbm+0x20>)
 8004df2:	f7fe fbf3 	bl	80035dc <set_reg_block>
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40026040 	.word	0x40026040

08004e04 <STM32FXXXDMA1_stream2_cr_pl>:
void STM32FXXXDMA1_stream2_cr_pl(uint8_t value)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 2, 16, value);
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	2210      	movs	r2, #16
 8004e12:	2102      	movs	r1, #2
 8004e14:	4803      	ldr	r0, [pc, #12]	@ (8004e24 <STM32FXXXDMA1_stream2_cr_pl+0x20>)
 8004e16:	f7fe fbe1 	bl	80035dc <set_reg_block>
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40026040 	.word	0x40026040

08004e28 <STM32FXXXDMA1_stream2_cr_pincos>:
void STM32FXXXDMA1_stream2_cr_pincos(uint8_t bool)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 15, bool);
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	220f      	movs	r2, #15
 8004e36:	2101      	movs	r1, #1
 8004e38:	4803      	ldr	r0, [pc, #12]	@ (8004e48 <STM32FXXXDMA1_stream2_cr_pincos+0x20>)
 8004e3a:	f7fe fbcf 	bl	80035dc <set_reg_block>
}
 8004e3e:	bf00      	nop
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40026040 	.word	0x40026040

08004e4c <STM32FXXXDMA1_stream2_cr_msize>:
void STM32FXXXDMA1_stream2_cr_msize(uint8_t value)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 2, 13, value);
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	220d      	movs	r2, #13
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	4803      	ldr	r0, [pc, #12]	@ (8004e6c <STM32FXXXDMA1_stream2_cr_msize+0x20>)
 8004e5e:	f7fe fbbd 	bl	80035dc <set_reg_block>
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40026040 	.word	0x40026040

08004e70 <STM32FXXXDMA1_stream2_cr_psize>:
void STM32FXXXDMA1_stream2_cr_psize(uint8_t value)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 2, 11, value);
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	220b      	movs	r2, #11
 8004e7e:	2102      	movs	r1, #2
 8004e80:	4803      	ldr	r0, [pc, #12]	@ (8004e90 <STM32FXXXDMA1_stream2_cr_psize+0x20>)
 8004e82:	f7fe fbab 	bl	80035dc <set_reg_block>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40026040 	.word	0x40026040

08004e94 <STM32FXXXDMA1_stream2_cr_minc>:
void STM32FXXXDMA1_stream2_cr_minc(uint8_t bool)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 10, bool);
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	220a      	movs	r2, #10
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4803      	ldr	r0, [pc, #12]	@ (8004eb4 <STM32FXXXDMA1_stream2_cr_minc+0x20>)
 8004ea6:	f7fe fb99 	bl	80035dc <set_reg_block>
}
 8004eaa:	bf00      	nop
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40026040 	.word	0x40026040

08004eb8 <STM32FXXXDMA1_stream2_cr_pinc>:
void STM32FXXXDMA1_stream2_cr_pinc(uint8_t bool)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 9, bool);
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	2209      	movs	r2, #9
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4803      	ldr	r0, [pc, #12]	@ (8004ed8 <STM32FXXXDMA1_stream2_cr_pinc+0x20>)
 8004eca:	f7fe fb87 	bl	80035dc <set_reg_block>
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40026040 	.word	0x40026040

08004edc <STM32FXXXDMA1_stream2_cr_circ>:
void STM32FXXXDMA1_stream2_cr_circ(uint8_t bool)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 8, bool);
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	2208      	movs	r2, #8
 8004eea:	2101      	movs	r1, #1
 8004eec:	4803      	ldr	r0, [pc, #12]	@ (8004efc <STM32FXXXDMA1_stream2_cr_circ+0x20>)
 8004eee:	f7fe fb75 	bl	80035dc <set_reg_block>
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40026040 	.word	0x40026040

08004f00 <STM32FXXXDMA1_stream2_cr_dir>:
void STM32FXXXDMA1_stream2_cr_dir(uint8_t value)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 2, 7, value);
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	2102      	movs	r1, #2
 8004f10:	4803      	ldr	r0, [pc, #12]	@ (8004f20 <STM32FXXXDMA1_stream2_cr_dir+0x20>)
 8004f12:	f7fe fb63 	bl	80035dc <set_reg_block>
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40026040 	.word	0x40026040

08004f24 <STM32FXXXDMA1_stream2_cr_pfctrl>:
void STM32FXXXDMA1_stream2_cr_pfctrl(uint8_t bool)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 5, bool);
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	2205      	movs	r2, #5
 8004f32:	2101      	movs	r1, #1
 8004f34:	4803      	ldr	r0, [pc, #12]	@ (8004f44 <STM32FXXXDMA1_stream2_cr_pfctrl+0x20>)
 8004f36:	f7fe fb51 	bl	80035dc <set_reg_block>
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40026040 	.word	0x40026040

08004f48 <STM32FXXXDMA1_stream2_cr_tcie>:
void STM32FXXXDMA1_stream2_cr_tcie(uint8_t bool)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 4, bool);
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	2204      	movs	r2, #4
 8004f56:	2101      	movs	r1, #1
 8004f58:	4803      	ldr	r0, [pc, #12]	@ (8004f68 <STM32FXXXDMA1_stream2_cr_tcie+0x20>)
 8004f5a:	f7fe fb3f 	bl	80035dc <set_reg_block>
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40026040 	.word	0x40026040

08004f6c <STM32FXXXDMA1_stream2_cr_htie>:
void STM32FXXXDMA1_stream2_cr_htie(uint8_t bool)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 3, bool);
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	2203      	movs	r2, #3
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	4803      	ldr	r0, [pc, #12]	@ (8004f8c <STM32FXXXDMA1_stream2_cr_htie+0x20>)
 8004f7e:	f7fe fb2d 	bl	80035dc <set_reg_block>
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40026040 	.word	0x40026040

08004f90 <STM32FXXXDMA1_stream2_cr_teie>:
void STM32FXXXDMA1_stream2_cr_teie(uint8_t bool)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 2, bool);
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	4803      	ldr	r0, [pc, #12]	@ (8004fb0 <STM32FXXXDMA1_stream2_cr_teie+0x20>)
 8004fa2:	f7fe fb1b 	bl	80035dc <set_reg_block>
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40026040 	.word	0x40026040

08004fb4 <STM32FXXXDMA1_stream2_cr_dmeie>:
void STM32FXXXDMA1_stream2_cr_dmeie(uint8_t bool)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 1, bool);
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	4803      	ldr	r0, [pc, #12]	@ (8004fd4 <STM32FXXXDMA1_stream2_cr_dmeie+0x20>)
 8004fc6:	f7fe fb09 	bl	80035dc <set_reg_block>
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40026040 	.word	0x40026040

08004fd8 <STM32FXXXDMA1_stream2_cr_en>:
void STM32FXXXDMA1_stream2_cr_en(uint8_t bool)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->CR, 1, 0, bool);
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4803      	ldr	r0, [pc, #12]	@ (8004ff8 <STM32FXXXDMA1_stream2_cr_en+0x20>)
 8004fea:	f7fe faf7 	bl	80035dc <set_reg_block>
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40026040 	.word	0x40026040

08004ffc <stm32fxxx_dma1_stream2_cr_inic>:
/*** Inic DMA1 STREAM2 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma1_stream2_cr_inic(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma1_stream2_cr.chsel = STM32FXXXDMA1_stream2_cr_chsel;
 8005000:	4b1f      	ldr	r3, [pc, #124]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005002:	4a20      	ldr	r2, [pc, #128]	@ (8005084 <stm32fxxx_dma1_stream2_cr_inic+0x88>)
 8005004:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream2_cr.mburst = STM32FXXXDMA1_stream2_cr_mburst;
 8005006:	4b1e      	ldr	r3, [pc, #120]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005008:	4a1f      	ldr	r2, [pc, #124]	@ (8005088 <stm32fxxx_dma1_stream2_cr_inic+0x8c>)
 800500a:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream2_cr.pburst = STM32FXXXDMA1_stream2_cr_pburst;
 800500c:	4b1c      	ldr	r3, [pc, #112]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 800500e:	4a1f      	ldr	r2, [pc, #124]	@ (800508c <stm32fxxx_dma1_stream2_cr_inic+0x90>)
 8005010:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream2_cr.ct = STM32FXXXDMA1_stream2_cr_ct;
 8005012:	4b1b      	ldr	r3, [pc, #108]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005014:	4a1e      	ldr	r2, [pc, #120]	@ (8005090 <stm32fxxx_dma1_stream2_cr_inic+0x94>)
 8005016:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1_stream2_cr.dbm = STM32FXXXDMA1_stream2_cr_dbm;
 8005018:	4b19      	ldr	r3, [pc, #100]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 800501a:	4a1e      	ldr	r2, [pc, #120]	@ (8005094 <stm32fxxx_dma1_stream2_cr_inic+0x98>)
 800501c:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma1_stream2_cr.pl = STM32FXXXDMA1_stream2_cr_pl;
 800501e:	4b18      	ldr	r3, [pc, #96]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005020:	4a1d      	ldr	r2, [pc, #116]	@ (8005098 <stm32fxxx_dma1_stream2_cr_inic+0x9c>)
 8005022:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma1_stream2_cr.pincos = STM32FXXXDMA1_stream2_cr_pincos;
 8005024:	4b16      	ldr	r3, [pc, #88]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005026:	4a1d      	ldr	r2, [pc, #116]	@ (800509c <stm32fxxx_dma1_stream2_cr_inic+0xa0>)
 8005028:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma1_stream2_cr.msize = STM32FXXXDMA1_stream2_cr_msize;
 800502a:	4b15      	ldr	r3, [pc, #84]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 800502c:	4a1c      	ldr	r2, [pc, #112]	@ (80050a0 <stm32fxxx_dma1_stream2_cr_inic+0xa4>)
 800502e:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma1_stream2_cr.psize = STM32FXXXDMA1_stream2_cr_psize;
 8005030:	4b13      	ldr	r3, [pc, #76]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005032:	4a1c      	ldr	r2, [pc, #112]	@ (80050a4 <stm32fxxx_dma1_stream2_cr_inic+0xa8>)
 8005034:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma1_stream2_cr.minc = STM32FXXXDMA1_stream2_cr_minc;
 8005036:	4b12      	ldr	r3, [pc, #72]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005038:	4a1b      	ldr	r2, [pc, #108]	@ (80050a8 <stm32fxxx_dma1_stream2_cr_inic+0xac>)
 800503a:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma1_stream2_cr.pinc = STM32FXXXDMA1_stream2_cr_pinc;
 800503c:	4b10      	ldr	r3, [pc, #64]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 800503e:	4a1b      	ldr	r2, [pc, #108]	@ (80050ac <stm32fxxx_dma1_stream2_cr_inic+0xb0>)
 8005040:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma1_stream2_cr.circ = STM32FXXXDMA1_stream2_cr_circ;
 8005042:	4b0f      	ldr	r3, [pc, #60]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005044:	4a1a      	ldr	r2, [pc, #104]	@ (80050b0 <stm32fxxx_dma1_stream2_cr_inic+0xb4>)
 8005046:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma1_stream2_cr.dir = STM32FXXXDMA1_stream2_cr_dir;
 8005048:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 800504a:	4a1a      	ldr	r2, [pc, #104]	@ (80050b4 <stm32fxxx_dma1_stream2_cr_inic+0xb8>)
 800504c:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma1_stream2_cr.pfctrl = STM32FXXXDMA1_stream2_cr_pfctrl;
 800504e:	4b0c      	ldr	r3, [pc, #48]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005050:	4a19      	ldr	r2, [pc, #100]	@ (80050b8 <stm32fxxx_dma1_stream2_cr_inic+0xbc>)
 8005052:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma1_stream2_cr.tcie = STM32FXXXDMA1_stream2_cr_tcie;
 8005054:	4b0a      	ldr	r3, [pc, #40]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005056:	4a19      	ldr	r2, [pc, #100]	@ (80050bc <stm32fxxx_dma1_stream2_cr_inic+0xc0>)
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma1_stream2_cr.htie = STM32FXXXDMA1_stream2_cr_htie;
 800505a:	4b09      	ldr	r3, [pc, #36]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 800505c:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <stm32fxxx_dma1_stream2_cr_inic+0xc4>)
 800505e:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma1_stream2_cr.teie = STM32FXXXDMA1_stream2_cr_teie;
 8005060:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005062:	4a18      	ldr	r2, [pc, #96]	@ (80050c4 <stm32fxxx_dma1_stream2_cr_inic+0xc8>)
 8005064:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma1_stream2_cr.dmeie = STM32FXXXDMA1_stream2_cr_dmeie;
 8005066:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 8005068:	4a17      	ldr	r2, [pc, #92]	@ (80050c8 <stm32fxxx_dma1_stream2_cr_inic+0xcc>)
 800506a:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma1_stream2_cr.en = STM32FXXXDMA1_stream2_cr_en;
 800506c:	4b04      	ldr	r3, [pc, #16]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
 800506e:	4a17      	ldr	r2, [pc, #92]	@ (80050cc <stm32fxxx_dma1_stream2_cr_inic+0xd0>)
 8005070:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma1_stream2_cr;
 8005072:	4b03      	ldr	r3, [pc, #12]	@ (8005080 <stm32fxxx_dma1_stream2_cr_inic+0x84>)
}
 8005074:	4618      	mov	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000328 	.word	0x20000328
 8005084:	08004d51 	.word	0x08004d51
 8005088:	08004d75 	.word	0x08004d75
 800508c:	08004d99 	.word	0x08004d99
 8005090:	08004dbd 	.word	0x08004dbd
 8005094:	08004de1 	.word	0x08004de1
 8005098:	08004e05 	.word	0x08004e05
 800509c:	08004e29 	.word	0x08004e29
 80050a0:	08004e4d 	.word	0x08004e4d
 80050a4:	08004e71 	.word	0x08004e71
 80050a8:	08004e95 	.word	0x08004e95
 80050ac:	08004eb9 	.word	0x08004eb9
 80050b0:	08004edd 	.word	0x08004edd
 80050b4:	08004f01 	.word	0x08004f01
 80050b8:	08004f25 	.word	0x08004f25
 80050bc:	08004f49 	.word	0x08004f49
 80050c0:	08004f6d 	.word	0x08004f6d
 80050c4:	08004f91 	.word	0x08004f91
 80050c8:	08004fb5 	.word	0x08004fb5
 80050cc:	08004fd9 	.word	0x08004fd9

080050d0 <stm32fxxx_dma1_stream2_ndt>:
/*** Inic DMA1 STREAM2 Function ***/
void stm32fxxx_dma1_stream2_ndt(uint16_t value)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	80fb      	strh	r3, [r7, #6]
	DMA1_Stream2->NDTR = value;
 80050da:	4a04      	ldr	r2, [pc, #16]	@ (80050ec <stm32fxxx_dma1_stream2_ndt+0x1c>)
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	6053      	str	r3, [r2, #4]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40026040 	.word	0x40026040

080050f0 <stm32fxxx_dma1_stream2_par>:
void stm32fxxx_dma1_stream2_par(volatile long unsigned int periferal_addr)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	DMA1_Stream2->PAR = periferal_addr;
 80050f8:	4a04      	ldr	r2, [pc, #16]	@ (800510c <stm32fxxx_dma1_stream2_par+0x1c>)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6093      	str	r3, [r2, #8]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40026040 	.word	0x40026040

08005110 <stm32fxxx_dma1_stream2_m0a>:
void stm32fxxx_dma1_stream2_m0a(volatile long unsigned int mem0_addr)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	DMA1_Stream2->M0AR = mem0_addr;
 8005118:	4a04      	ldr	r2, [pc, #16]	@ (800512c <stm32fxxx_dma1_stream2_m0a+0x1c>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60d3      	str	r3, [r2, #12]
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40026040 	.word	0x40026040

08005130 <stm32fxxx_dma1_stream2_m1a>:
void stm32fxxx_dma1_stream2_m1a(volatile long unsigned int mem1_addr)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	DMA1_Stream2->M1AR = mem1_addr;
 8005138:	4a04      	ldr	r2, [pc, #16]	@ (800514c <stm32fxxx_dma1_stream2_m1a+0x1c>)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6113      	str	r3, [r2, #16]
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40026040 	.word	0x40026040

08005150 <STM32FXXXDMA1_stream3_cr_chsel>:
// DMA1 STREAM3 CR
void STM32FXXXDMA1_stream3_cr_chsel(uint8_t value)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 3, 25, value);
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	2219      	movs	r2, #25
 800515e:	2103      	movs	r1, #3
 8005160:	4803      	ldr	r0, [pc, #12]	@ (8005170 <STM32FXXXDMA1_stream3_cr_chsel+0x20>)
 8005162:	f7fe fa3b 	bl	80035dc <set_reg_block>
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40026058 	.word	0x40026058

08005174 <STM32FXXXDMA1_stream3_cr_mburst>:
void STM32FXXXDMA1_stream3_cr_mburst(uint8_t value)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 2, 23, value);
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	2217      	movs	r2, #23
 8005182:	2102      	movs	r1, #2
 8005184:	4803      	ldr	r0, [pc, #12]	@ (8005194 <STM32FXXXDMA1_stream3_cr_mburst+0x20>)
 8005186:	f7fe fa29 	bl	80035dc <set_reg_block>
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40026058 	.word	0x40026058

08005198 <STM32FXXXDMA1_stream3_cr_pburst>:
void STM32FXXXDMA1_stream3_cr_pburst(uint8_t value)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 2, 21, value);
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	2215      	movs	r2, #21
 80051a6:	2102      	movs	r1, #2
 80051a8:	4803      	ldr	r0, [pc, #12]	@ (80051b8 <STM32FXXXDMA1_stream3_cr_pburst+0x20>)
 80051aa:	f7fe fa17 	bl	80035dc <set_reg_block>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40026058 	.word	0x40026058

080051bc <STM32FXXXDMA1_stream3_cr_ct>:
void STM32FXXXDMA1_stream3_cr_ct(uint8_t bool)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 19, bool);
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	2213      	movs	r2, #19
 80051ca:	2101      	movs	r1, #1
 80051cc:	4803      	ldr	r0, [pc, #12]	@ (80051dc <STM32FXXXDMA1_stream3_cr_ct+0x20>)
 80051ce:	f7fe fa05 	bl	80035dc <set_reg_block>
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40026058 	.word	0x40026058

080051e0 <STM32FXXXDMA1_stream3_cr_dbm>:
void STM32FXXXDMA1_stream3_cr_dbm(uint8_t bool)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 18, bool);
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	2212      	movs	r2, #18
 80051ee:	2101      	movs	r1, #1
 80051f0:	4803      	ldr	r0, [pc, #12]	@ (8005200 <STM32FXXXDMA1_stream3_cr_dbm+0x20>)
 80051f2:	f7fe f9f3 	bl	80035dc <set_reg_block>
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40026058 	.word	0x40026058

08005204 <STM32FXXXDMA1_stream3_cr_pl>:
void STM32FXXXDMA1_stream3_cr_pl(uint8_t value)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 2, 16, value);
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	2210      	movs	r2, #16
 8005212:	2102      	movs	r1, #2
 8005214:	4803      	ldr	r0, [pc, #12]	@ (8005224 <STM32FXXXDMA1_stream3_cr_pl+0x20>)
 8005216:	f7fe f9e1 	bl	80035dc <set_reg_block>
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40026058 	.word	0x40026058

08005228 <STM32FXXXDMA1_stream3_cr_pincos>:
void STM32FXXXDMA1_stream3_cr_pincos(uint8_t bool)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 15, bool);
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	220f      	movs	r2, #15
 8005236:	2101      	movs	r1, #1
 8005238:	4803      	ldr	r0, [pc, #12]	@ (8005248 <STM32FXXXDMA1_stream3_cr_pincos+0x20>)
 800523a:	f7fe f9cf 	bl	80035dc <set_reg_block>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40026058 	.word	0x40026058

0800524c <STM32FXXXDMA1_stream3_cr_msize>:
void STM32FXXXDMA1_stream3_cr_msize(uint8_t value)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 2, 13, value);
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	220d      	movs	r2, #13
 800525a:	2102      	movs	r1, #2
 800525c:	4803      	ldr	r0, [pc, #12]	@ (800526c <STM32FXXXDMA1_stream3_cr_msize+0x20>)
 800525e:	f7fe f9bd 	bl	80035dc <set_reg_block>
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40026058 	.word	0x40026058

08005270 <STM32FXXXDMA1_stream3_cr_psize>:
void STM32FXXXDMA1_stream3_cr_psize(uint8_t value)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 2, 11, value);
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	220b      	movs	r2, #11
 800527e:	2102      	movs	r1, #2
 8005280:	4803      	ldr	r0, [pc, #12]	@ (8005290 <STM32FXXXDMA1_stream3_cr_psize+0x20>)
 8005282:	f7fe f9ab 	bl	80035dc <set_reg_block>
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40026058 	.word	0x40026058

08005294 <STM32FXXXDMA1_stream3_cr_minc>:
void STM32FXXXDMA1_stream3_cr_minc(uint8_t bool)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 10, bool);
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	220a      	movs	r2, #10
 80052a2:	2101      	movs	r1, #1
 80052a4:	4803      	ldr	r0, [pc, #12]	@ (80052b4 <STM32FXXXDMA1_stream3_cr_minc+0x20>)
 80052a6:	f7fe f999 	bl	80035dc <set_reg_block>
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40026058 	.word	0x40026058

080052b8 <STM32FXXXDMA1_stream3_cr_pinc>:
void STM32FXXXDMA1_stream3_cr_pinc(uint8_t bool)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 9, bool);
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2209      	movs	r2, #9
 80052c6:	2101      	movs	r1, #1
 80052c8:	4803      	ldr	r0, [pc, #12]	@ (80052d8 <STM32FXXXDMA1_stream3_cr_pinc+0x20>)
 80052ca:	f7fe f987 	bl	80035dc <set_reg_block>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40026058 	.word	0x40026058

080052dc <STM32FXXXDMA1_stream3_cr_circ>:
void STM32FXXXDMA1_stream3_cr_circ(uint8_t bool)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 8, bool);
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	2208      	movs	r2, #8
 80052ea:	2101      	movs	r1, #1
 80052ec:	4803      	ldr	r0, [pc, #12]	@ (80052fc <STM32FXXXDMA1_stream3_cr_circ+0x20>)
 80052ee:	f7fe f975 	bl	80035dc <set_reg_block>
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40026058 	.word	0x40026058

08005300 <STM32FXXXDMA1_stream3_cr_dir>:
void STM32FXXXDMA1_stream3_cr_dir(uint8_t value)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	4603      	mov	r3, r0
 8005308:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 2, 7, value);
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	2207      	movs	r2, #7
 800530e:	2102      	movs	r1, #2
 8005310:	4803      	ldr	r0, [pc, #12]	@ (8005320 <STM32FXXXDMA1_stream3_cr_dir+0x20>)
 8005312:	f7fe f963 	bl	80035dc <set_reg_block>
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40026058 	.word	0x40026058

08005324 <STM32FXXXDMA1_stream3_cr_pfctrl>:
void STM32FXXXDMA1_stream3_cr_pfctrl(uint8_t bool)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 5, bool);
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	2205      	movs	r2, #5
 8005332:	2101      	movs	r1, #1
 8005334:	4803      	ldr	r0, [pc, #12]	@ (8005344 <STM32FXXXDMA1_stream3_cr_pfctrl+0x20>)
 8005336:	f7fe f951 	bl	80035dc <set_reg_block>
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40026058 	.word	0x40026058

08005348 <STM32FXXXDMA1_stream3_cr_tcie>:
void STM32FXXXDMA1_stream3_cr_tcie(uint8_t bool)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 4, bool);
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	2204      	movs	r2, #4
 8005356:	2101      	movs	r1, #1
 8005358:	4803      	ldr	r0, [pc, #12]	@ (8005368 <STM32FXXXDMA1_stream3_cr_tcie+0x20>)
 800535a:	f7fe f93f 	bl	80035dc <set_reg_block>
}
 800535e:	bf00      	nop
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40026058 	.word	0x40026058

0800536c <STM32FXXXDMA1_stream3_cr_htie>:
void STM32FXXXDMA1_stream3_cr_htie(uint8_t bool)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 3, bool);
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	2203      	movs	r2, #3
 800537a:	2101      	movs	r1, #1
 800537c:	4803      	ldr	r0, [pc, #12]	@ (800538c <STM32FXXXDMA1_stream3_cr_htie+0x20>)
 800537e:	f7fe f92d 	bl	80035dc <set_reg_block>
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40026058 	.word	0x40026058

08005390 <STM32FXXXDMA1_stream3_cr_teie>:
void STM32FXXXDMA1_stream3_cr_teie(uint8_t bool)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 2, bool);
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	2202      	movs	r2, #2
 800539e:	2101      	movs	r1, #1
 80053a0:	4803      	ldr	r0, [pc, #12]	@ (80053b0 <STM32FXXXDMA1_stream3_cr_teie+0x20>)
 80053a2:	f7fe f91b 	bl	80035dc <set_reg_block>
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40026058 	.word	0x40026058

080053b4 <STM32FXXXDMA1_stream3_cr_dmeie>:
void STM32FXXXDMA1_stream3_cr_dmeie(uint8_t bool)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 1, bool);
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	2201      	movs	r2, #1
 80053c2:	2101      	movs	r1, #1
 80053c4:	4803      	ldr	r0, [pc, #12]	@ (80053d4 <STM32FXXXDMA1_stream3_cr_dmeie+0x20>)
 80053c6:	f7fe f909 	bl	80035dc <set_reg_block>
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40026058 	.word	0x40026058

080053d8 <STM32FXXXDMA1_stream3_cr_en>:
void STM32FXXXDMA1_stream3_cr_en(uint8_t bool)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->CR, 1, 0, bool);
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2200      	movs	r2, #0
 80053e6:	2101      	movs	r1, #1
 80053e8:	4803      	ldr	r0, [pc, #12]	@ (80053f8 <STM32FXXXDMA1_stream3_cr_en+0x20>)
 80053ea:	f7fe f8f7 	bl	80035dc <set_reg_block>
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40026058 	.word	0x40026058

080053fc <stm32fxxx_dma1_stream3_cr_inic>:
/*** Inic DMA1 STREAM3 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma1_stream3_cr_inic(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma1_stream3_cr.chsel = STM32FXXXDMA1_stream3_cr_chsel;
 8005400:	4b1f      	ldr	r3, [pc, #124]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005402:	4a20      	ldr	r2, [pc, #128]	@ (8005484 <stm32fxxx_dma1_stream3_cr_inic+0x88>)
 8005404:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream3_cr.mburst = STM32FXXXDMA1_stream3_cr_mburst;
 8005406:	4b1e      	ldr	r3, [pc, #120]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005408:	4a1f      	ldr	r2, [pc, #124]	@ (8005488 <stm32fxxx_dma1_stream3_cr_inic+0x8c>)
 800540a:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream3_cr.pburst = STM32FXXXDMA1_stream3_cr_pburst;
 800540c:	4b1c      	ldr	r3, [pc, #112]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 800540e:	4a1f      	ldr	r2, [pc, #124]	@ (800548c <stm32fxxx_dma1_stream3_cr_inic+0x90>)
 8005410:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream3_cr.ct = STM32FXXXDMA1_stream3_cr_ct;
 8005412:	4b1b      	ldr	r3, [pc, #108]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005414:	4a1e      	ldr	r2, [pc, #120]	@ (8005490 <stm32fxxx_dma1_stream3_cr_inic+0x94>)
 8005416:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1_stream3_cr.dbm = STM32FXXXDMA1_stream3_cr_dbm;
 8005418:	4b19      	ldr	r3, [pc, #100]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 800541a:	4a1e      	ldr	r2, [pc, #120]	@ (8005494 <stm32fxxx_dma1_stream3_cr_inic+0x98>)
 800541c:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma1_stream3_cr.pl = STM32FXXXDMA1_stream3_cr_pl;
 800541e:	4b18      	ldr	r3, [pc, #96]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005420:	4a1d      	ldr	r2, [pc, #116]	@ (8005498 <stm32fxxx_dma1_stream3_cr_inic+0x9c>)
 8005422:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma1_stream3_cr.pincos = STM32FXXXDMA1_stream3_cr_pincos;
 8005424:	4b16      	ldr	r3, [pc, #88]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005426:	4a1d      	ldr	r2, [pc, #116]	@ (800549c <stm32fxxx_dma1_stream3_cr_inic+0xa0>)
 8005428:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma1_stream3_cr.msize = STM32FXXXDMA1_stream3_cr_msize;
 800542a:	4b15      	ldr	r3, [pc, #84]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 800542c:	4a1c      	ldr	r2, [pc, #112]	@ (80054a0 <stm32fxxx_dma1_stream3_cr_inic+0xa4>)
 800542e:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma1_stream3_cr.psize = STM32FXXXDMA1_stream3_cr_psize;
 8005430:	4b13      	ldr	r3, [pc, #76]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005432:	4a1c      	ldr	r2, [pc, #112]	@ (80054a4 <stm32fxxx_dma1_stream3_cr_inic+0xa8>)
 8005434:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma1_stream3_cr.minc = STM32FXXXDMA1_stream3_cr_minc;
 8005436:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005438:	4a1b      	ldr	r2, [pc, #108]	@ (80054a8 <stm32fxxx_dma1_stream3_cr_inic+0xac>)
 800543a:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma1_stream3_cr.pinc = STM32FXXXDMA1_stream3_cr_pinc;
 800543c:	4b10      	ldr	r3, [pc, #64]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 800543e:	4a1b      	ldr	r2, [pc, #108]	@ (80054ac <stm32fxxx_dma1_stream3_cr_inic+0xb0>)
 8005440:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma1_stream3_cr.circ = STM32FXXXDMA1_stream3_cr_circ;
 8005442:	4b0f      	ldr	r3, [pc, #60]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005444:	4a1a      	ldr	r2, [pc, #104]	@ (80054b0 <stm32fxxx_dma1_stream3_cr_inic+0xb4>)
 8005446:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma1_stream3_cr.dir = STM32FXXXDMA1_stream3_cr_dir;
 8005448:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 800544a:	4a1a      	ldr	r2, [pc, #104]	@ (80054b4 <stm32fxxx_dma1_stream3_cr_inic+0xb8>)
 800544c:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma1_stream3_cr.pfctrl = STM32FXXXDMA1_stream3_cr_pfctrl;
 800544e:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005450:	4a19      	ldr	r2, [pc, #100]	@ (80054b8 <stm32fxxx_dma1_stream3_cr_inic+0xbc>)
 8005452:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma1_stream3_cr.tcie = STM32FXXXDMA1_stream3_cr_tcie;
 8005454:	4b0a      	ldr	r3, [pc, #40]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005456:	4a19      	ldr	r2, [pc, #100]	@ (80054bc <stm32fxxx_dma1_stream3_cr_inic+0xc0>)
 8005458:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma1_stream3_cr.htie = STM32FXXXDMA1_stream3_cr_htie;
 800545a:	4b09      	ldr	r3, [pc, #36]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 800545c:	4a18      	ldr	r2, [pc, #96]	@ (80054c0 <stm32fxxx_dma1_stream3_cr_inic+0xc4>)
 800545e:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma1_stream3_cr.teie = STM32FXXXDMA1_stream3_cr_teie;
 8005460:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005462:	4a18      	ldr	r2, [pc, #96]	@ (80054c4 <stm32fxxx_dma1_stream3_cr_inic+0xc8>)
 8005464:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma1_stream3_cr.dmeie = STM32FXXXDMA1_stream3_cr_dmeie;
 8005466:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 8005468:	4a17      	ldr	r2, [pc, #92]	@ (80054c8 <stm32fxxx_dma1_stream3_cr_inic+0xcc>)
 800546a:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma1_stream3_cr.en = STM32FXXXDMA1_stream3_cr_en;
 800546c:	4b04      	ldr	r3, [pc, #16]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
 800546e:	4a17      	ldr	r2, [pc, #92]	@ (80054cc <stm32fxxx_dma1_stream3_cr_inic+0xd0>)
 8005470:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma1_stream3_cr;
 8005472:	4b03      	ldr	r3, [pc, #12]	@ (8005480 <stm32fxxx_dma1_stream3_cr_inic+0x84>)
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000374 	.word	0x20000374
 8005484:	08005151 	.word	0x08005151
 8005488:	08005175 	.word	0x08005175
 800548c:	08005199 	.word	0x08005199
 8005490:	080051bd 	.word	0x080051bd
 8005494:	080051e1 	.word	0x080051e1
 8005498:	08005205 	.word	0x08005205
 800549c:	08005229 	.word	0x08005229
 80054a0:	0800524d 	.word	0x0800524d
 80054a4:	08005271 	.word	0x08005271
 80054a8:	08005295 	.word	0x08005295
 80054ac:	080052b9 	.word	0x080052b9
 80054b0:	080052dd 	.word	0x080052dd
 80054b4:	08005301 	.word	0x08005301
 80054b8:	08005325 	.word	0x08005325
 80054bc:	08005349 	.word	0x08005349
 80054c0:	0800536d 	.word	0x0800536d
 80054c4:	08005391 	.word	0x08005391
 80054c8:	080053b5 	.word	0x080053b5
 80054cc:	080053d9 	.word	0x080053d9

080054d0 <stm32fxxx_dma1_stream3_ndt>:
/*** Inic DMA1 STREAM3 Function ***/
void stm32fxxx_dma1_stream3_ndt(uint16_t value)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	80fb      	strh	r3, [r7, #6]
	DMA1_Stream3->NDTR = value;
 80054da:	4a04      	ldr	r2, [pc, #16]	@ (80054ec <stm32fxxx_dma1_stream3_ndt+0x1c>)
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	6053      	str	r3, [r2, #4]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40026058 	.word	0x40026058

080054f0 <stm32fxxx_dma1_stream3_par>:
void stm32fxxx_dma1_stream3_par(volatile long unsigned int periferal_addr)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	DMA1_Stream3->PAR = periferal_addr;
 80054f8:	4a04      	ldr	r2, [pc, #16]	@ (800550c <stm32fxxx_dma1_stream3_par+0x1c>)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6093      	str	r3, [r2, #8]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40026058 	.word	0x40026058

08005510 <stm32fxxx_dma1_stream3_m0a>:
void stm32fxxx_dma1_stream3_m0a(volatile long unsigned int mem0_addr)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
	DMA1_Stream3->M0AR = mem0_addr;
 8005518:	4a04      	ldr	r2, [pc, #16]	@ (800552c <stm32fxxx_dma1_stream3_m0a+0x1c>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60d3      	str	r3, [r2, #12]
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40026058 	.word	0x40026058

08005530 <stm32fxxx_dma1_stream3_m1a>:
void stm32fxxx_dma1_stream3_m1a(volatile long unsigned int mem1_addr)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	DMA1_Stream3->M1AR = mem1_addr;
 8005538:	4a04      	ldr	r2, [pc, #16]	@ (800554c <stm32fxxx_dma1_stream3_m1a+0x1c>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6113      	str	r3, [r2, #16]
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40026058 	.word	0x40026058

08005550 <STM32FXXXDMA1_stream4_cr_chsel>:
// DMA1 STREAM4 CR
void STM32FXXXDMA1_stream4_cr_chsel(uint8_t value)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 3, 25, value);
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	2219      	movs	r2, #25
 800555e:	2103      	movs	r1, #3
 8005560:	4803      	ldr	r0, [pc, #12]	@ (8005570 <STM32FXXXDMA1_stream4_cr_chsel+0x20>)
 8005562:	f7fe f83b 	bl	80035dc <set_reg_block>
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40026070 	.word	0x40026070

08005574 <STM32FXXXDMA1_stream4_cr_mburst>:
void STM32FXXXDMA1_stream4_cr_mburst(uint8_t value)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 2, 23, value);
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	2217      	movs	r2, #23
 8005582:	2102      	movs	r1, #2
 8005584:	4803      	ldr	r0, [pc, #12]	@ (8005594 <STM32FXXXDMA1_stream4_cr_mburst+0x20>)
 8005586:	f7fe f829 	bl	80035dc <set_reg_block>
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40026070 	.word	0x40026070

08005598 <STM32FXXXDMA1_stream4_cr_pburst>:
void STM32FXXXDMA1_stream4_cr_pburst(uint8_t value)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 2, 21, value);
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	2215      	movs	r2, #21
 80055a6:	2102      	movs	r1, #2
 80055a8:	4803      	ldr	r0, [pc, #12]	@ (80055b8 <STM32FXXXDMA1_stream4_cr_pburst+0x20>)
 80055aa:	f7fe f817 	bl	80035dc <set_reg_block>
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40026070 	.word	0x40026070

080055bc <STM32FXXXDMA1_stream4_cr_ct>:
void STM32FXXXDMA1_stream4_cr_ct(uint8_t bool)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 19, bool);
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	2213      	movs	r2, #19
 80055ca:	2101      	movs	r1, #1
 80055cc:	4803      	ldr	r0, [pc, #12]	@ (80055dc <STM32FXXXDMA1_stream4_cr_ct+0x20>)
 80055ce:	f7fe f805 	bl	80035dc <set_reg_block>
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40026070 	.word	0x40026070

080055e0 <STM32FXXXDMA1_stream4_cr_dbm>:
void STM32FXXXDMA1_stream4_cr_dbm(uint8_t bool)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 18, bool);
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	2212      	movs	r2, #18
 80055ee:	2101      	movs	r1, #1
 80055f0:	4803      	ldr	r0, [pc, #12]	@ (8005600 <STM32FXXXDMA1_stream4_cr_dbm+0x20>)
 80055f2:	f7fd fff3 	bl	80035dc <set_reg_block>
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40026070 	.word	0x40026070

08005604 <STM32FXXXDMA1_stream4_cr_pl>:
void STM32FXXXDMA1_stream4_cr_pl(uint8_t value)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 2, 16, value);
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	2210      	movs	r2, #16
 8005612:	2102      	movs	r1, #2
 8005614:	4803      	ldr	r0, [pc, #12]	@ (8005624 <STM32FXXXDMA1_stream4_cr_pl+0x20>)
 8005616:	f7fd ffe1 	bl	80035dc <set_reg_block>
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40026070 	.word	0x40026070

08005628 <STM32FXXXDMA1_stream4_cr_pincos>:
void STM32FXXXDMA1_stream4_cr_pincos(uint8_t bool)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 15, bool);
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	220f      	movs	r2, #15
 8005636:	2101      	movs	r1, #1
 8005638:	4803      	ldr	r0, [pc, #12]	@ (8005648 <STM32FXXXDMA1_stream4_cr_pincos+0x20>)
 800563a:	f7fd ffcf 	bl	80035dc <set_reg_block>
}
 800563e:	bf00      	nop
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40026070 	.word	0x40026070

0800564c <STM32FXXXDMA1_stream4_cr_msize>:
void STM32FXXXDMA1_stream4_cr_msize(uint8_t value)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 2, 13, value);
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	220d      	movs	r2, #13
 800565a:	2102      	movs	r1, #2
 800565c:	4803      	ldr	r0, [pc, #12]	@ (800566c <STM32FXXXDMA1_stream4_cr_msize+0x20>)
 800565e:	f7fd ffbd 	bl	80035dc <set_reg_block>
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40026070 	.word	0x40026070

08005670 <STM32FXXXDMA1_stream4_cr_psize>:
void STM32FXXXDMA1_stream4_cr_psize(uint8_t value)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 2, 11, value);
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	220b      	movs	r2, #11
 800567e:	2102      	movs	r1, #2
 8005680:	4803      	ldr	r0, [pc, #12]	@ (8005690 <STM32FXXXDMA1_stream4_cr_psize+0x20>)
 8005682:	f7fd ffab 	bl	80035dc <set_reg_block>
}
 8005686:	bf00      	nop
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40026070 	.word	0x40026070

08005694 <STM32FXXXDMA1_stream4_cr_minc>:
void STM32FXXXDMA1_stream4_cr_minc(uint8_t bool)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 10, bool);
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	220a      	movs	r2, #10
 80056a2:	2101      	movs	r1, #1
 80056a4:	4803      	ldr	r0, [pc, #12]	@ (80056b4 <STM32FXXXDMA1_stream4_cr_minc+0x20>)
 80056a6:	f7fd ff99 	bl	80035dc <set_reg_block>
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40026070 	.word	0x40026070

080056b8 <STM32FXXXDMA1_stream4_cr_pinc>:
void STM32FXXXDMA1_stream4_cr_pinc(uint8_t bool)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 9, bool);
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	2209      	movs	r2, #9
 80056c6:	2101      	movs	r1, #1
 80056c8:	4803      	ldr	r0, [pc, #12]	@ (80056d8 <STM32FXXXDMA1_stream4_cr_pinc+0x20>)
 80056ca:	f7fd ff87 	bl	80035dc <set_reg_block>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40026070 	.word	0x40026070

080056dc <STM32FXXXDMA1_stream4_cr_circ>:
void STM32FXXXDMA1_stream4_cr_circ(uint8_t bool)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 8, bool);
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	2208      	movs	r2, #8
 80056ea:	2101      	movs	r1, #1
 80056ec:	4803      	ldr	r0, [pc, #12]	@ (80056fc <STM32FXXXDMA1_stream4_cr_circ+0x20>)
 80056ee:	f7fd ff75 	bl	80035dc <set_reg_block>
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40026070 	.word	0x40026070

08005700 <STM32FXXXDMA1_stream4_cr_dir>:
void STM32FXXXDMA1_stream4_cr_dir(uint8_t value)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 2, 7, value);
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	2207      	movs	r2, #7
 800570e:	2102      	movs	r1, #2
 8005710:	4803      	ldr	r0, [pc, #12]	@ (8005720 <STM32FXXXDMA1_stream4_cr_dir+0x20>)
 8005712:	f7fd ff63 	bl	80035dc <set_reg_block>
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40026070 	.word	0x40026070

08005724 <STM32FXXXDMA1_stream4_cr_pfctrl>:
void STM32FXXXDMA1_stream4_cr_pfctrl(uint8_t bool)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 5, bool);
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2205      	movs	r2, #5
 8005732:	2101      	movs	r1, #1
 8005734:	4803      	ldr	r0, [pc, #12]	@ (8005744 <STM32FXXXDMA1_stream4_cr_pfctrl+0x20>)
 8005736:	f7fd ff51 	bl	80035dc <set_reg_block>
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40026070 	.word	0x40026070

08005748 <STM32FXXXDMA1_stream4_cr_tcie>:
void STM32FXXXDMA1_stream4_cr_tcie(uint8_t bool)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 4, bool);
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	2204      	movs	r2, #4
 8005756:	2101      	movs	r1, #1
 8005758:	4803      	ldr	r0, [pc, #12]	@ (8005768 <STM32FXXXDMA1_stream4_cr_tcie+0x20>)
 800575a:	f7fd ff3f 	bl	80035dc <set_reg_block>
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40026070 	.word	0x40026070

0800576c <STM32FXXXDMA1_stream4_cr_htie>:
void STM32FXXXDMA1_stream4_cr_htie(uint8_t bool)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 3, bool);
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	2203      	movs	r2, #3
 800577a:	2101      	movs	r1, #1
 800577c:	4803      	ldr	r0, [pc, #12]	@ (800578c <STM32FXXXDMA1_stream4_cr_htie+0x20>)
 800577e:	f7fd ff2d 	bl	80035dc <set_reg_block>
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40026070 	.word	0x40026070

08005790 <STM32FXXXDMA1_stream4_cr_teie>:
void STM32FXXXDMA1_stream4_cr_teie(uint8_t bool)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 2, bool);
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	2202      	movs	r2, #2
 800579e:	2101      	movs	r1, #1
 80057a0:	4803      	ldr	r0, [pc, #12]	@ (80057b0 <STM32FXXXDMA1_stream4_cr_teie+0x20>)
 80057a2:	f7fd ff1b 	bl	80035dc <set_reg_block>
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40026070 	.word	0x40026070

080057b4 <STM32FXXXDMA1_stream4_cr_dmeie>:
void STM32FXXXDMA1_stream4_cr_dmeie(uint8_t bool)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 1, bool);
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	2201      	movs	r2, #1
 80057c2:	2101      	movs	r1, #1
 80057c4:	4803      	ldr	r0, [pc, #12]	@ (80057d4 <STM32FXXXDMA1_stream4_cr_dmeie+0x20>)
 80057c6:	f7fd ff09 	bl	80035dc <set_reg_block>
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40026070 	.word	0x40026070

080057d8 <STM32FXXXDMA1_stream4_cr_en>:
void STM32FXXXDMA1_stream4_cr_en(uint8_t bool)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	4603      	mov	r3, r0
 80057e0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->CR, 1, 0, bool);
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	2200      	movs	r2, #0
 80057e6:	2101      	movs	r1, #1
 80057e8:	4803      	ldr	r0, [pc, #12]	@ (80057f8 <STM32FXXXDMA1_stream4_cr_en+0x20>)
 80057ea:	f7fd fef7 	bl	80035dc <set_reg_block>
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40026070 	.word	0x40026070

080057fc <stm32fxxx_dma1_stream4_cr_inic>:
/*** Inic DMA1 STREAM4 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma1_stream4_cr_inic(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma1_stream4_cr.chsel = STM32FXXXDMA1_stream4_cr_chsel;
 8005800:	4b1f      	ldr	r3, [pc, #124]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005802:	4a20      	ldr	r2, [pc, #128]	@ (8005884 <stm32fxxx_dma1_stream4_cr_inic+0x88>)
 8005804:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream4_cr.mburst = STM32FXXXDMA1_stream4_cr_mburst;
 8005806:	4b1e      	ldr	r3, [pc, #120]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005808:	4a1f      	ldr	r2, [pc, #124]	@ (8005888 <stm32fxxx_dma1_stream4_cr_inic+0x8c>)
 800580a:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream4_cr.pburst = STM32FXXXDMA1_stream4_cr_pburst;
 800580c:	4b1c      	ldr	r3, [pc, #112]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 800580e:	4a1f      	ldr	r2, [pc, #124]	@ (800588c <stm32fxxx_dma1_stream4_cr_inic+0x90>)
 8005810:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream4_cr.ct = STM32FXXXDMA1_stream4_cr_ct;
 8005812:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005814:	4a1e      	ldr	r2, [pc, #120]	@ (8005890 <stm32fxxx_dma1_stream4_cr_inic+0x94>)
 8005816:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1_stream4_cr.dbm = STM32FXXXDMA1_stream4_cr_dbm;
 8005818:	4b19      	ldr	r3, [pc, #100]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 800581a:	4a1e      	ldr	r2, [pc, #120]	@ (8005894 <stm32fxxx_dma1_stream4_cr_inic+0x98>)
 800581c:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma1_stream4_cr.pl = STM32FXXXDMA1_stream4_cr_pl;
 800581e:	4b18      	ldr	r3, [pc, #96]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005820:	4a1d      	ldr	r2, [pc, #116]	@ (8005898 <stm32fxxx_dma1_stream4_cr_inic+0x9c>)
 8005822:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma1_stream4_cr.pincos = STM32FXXXDMA1_stream4_cr_pincos;
 8005824:	4b16      	ldr	r3, [pc, #88]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005826:	4a1d      	ldr	r2, [pc, #116]	@ (800589c <stm32fxxx_dma1_stream4_cr_inic+0xa0>)
 8005828:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma1_stream4_cr.msize = STM32FXXXDMA1_stream4_cr_msize;
 800582a:	4b15      	ldr	r3, [pc, #84]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 800582c:	4a1c      	ldr	r2, [pc, #112]	@ (80058a0 <stm32fxxx_dma1_stream4_cr_inic+0xa4>)
 800582e:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma1_stream4_cr.psize = STM32FXXXDMA1_stream4_cr_psize;
 8005830:	4b13      	ldr	r3, [pc, #76]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005832:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <stm32fxxx_dma1_stream4_cr_inic+0xa8>)
 8005834:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma1_stream4_cr.minc = STM32FXXXDMA1_stream4_cr_minc;
 8005836:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005838:	4a1b      	ldr	r2, [pc, #108]	@ (80058a8 <stm32fxxx_dma1_stream4_cr_inic+0xac>)
 800583a:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma1_stream4_cr.pinc = STM32FXXXDMA1_stream4_cr_pinc;
 800583c:	4b10      	ldr	r3, [pc, #64]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 800583e:	4a1b      	ldr	r2, [pc, #108]	@ (80058ac <stm32fxxx_dma1_stream4_cr_inic+0xb0>)
 8005840:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma1_stream4_cr.circ = STM32FXXXDMA1_stream4_cr_circ;
 8005842:	4b0f      	ldr	r3, [pc, #60]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005844:	4a1a      	ldr	r2, [pc, #104]	@ (80058b0 <stm32fxxx_dma1_stream4_cr_inic+0xb4>)
 8005846:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma1_stream4_cr.dir = STM32FXXXDMA1_stream4_cr_dir;
 8005848:	4b0d      	ldr	r3, [pc, #52]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 800584a:	4a1a      	ldr	r2, [pc, #104]	@ (80058b4 <stm32fxxx_dma1_stream4_cr_inic+0xb8>)
 800584c:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma1_stream4_cr.pfctrl = STM32FXXXDMA1_stream4_cr_pfctrl;
 800584e:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005850:	4a19      	ldr	r2, [pc, #100]	@ (80058b8 <stm32fxxx_dma1_stream4_cr_inic+0xbc>)
 8005852:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma1_stream4_cr.tcie = STM32FXXXDMA1_stream4_cr_tcie;
 8005854:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005856:	4a19      	ldr	r2, [pc, #100]	@ (80058bc <stm32fxxx_dma1_stream4_cr_inic+0xc0>)
 8005858:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma1_stream4_cr.htie = STM32FXXXDMA1_stream4_cr_htie;
 800585a:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 800585c:	4a18      	ldr	r2, [pc, #96]	@ (80058c0 <stm32fxxx_dma1_stream4_cr_inic+0xc4>)
 800585e:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma1_stream4_cr.teie = STM32FXXXDMA1_stream4_cr_teie;
 8005860:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005862:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <stm32fxxx_dma1_stream4_cr_inic+0xc8>)
 8005864:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma1_stream4_cr.dmeie = STM32FXXXDMA1_stream4_cr_dmeie;
 8005866:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 8005868:	4a17      	ldr	r2, [pc, #92]	@ (80058c8 <stm32fxxx_dma1_stream4_cr_inic+0xcc>)
 800586a:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma1_stream4_cr.en = STM32FXXXDMA1_stream4_cr_en;
 800586c:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
 800586e:	4a17      	ldr	r2, [pc, #92]	@ (80058cc <stm32fxxx_dma1_stream4_cr_inic+0xd0>)
 8005870:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma1_stream4_cr;
 8005872:	4b03      	ldr	r3, [pc, #12]	@ (8005880 <stm32fxxx_dma1_stream4_cr_inic+0x84>)
}
 8005874:	4618      	mov	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	200003c0 	.word	0x200003c0
 8005884:	08005551 	.word	0x08005551
 8005888:	08005575 	.word	0x08005575
 800588c:	08005599 	.word	0x08005599
 8005890:	080055bd 	.word	0x080055bd
 8005894:	080055e1 	.word	0x080055e1
 8005898:	08005605 	.word	0x08005605
 800589c:	08005629 	.word	0x08005629
 80058a0:	0800564d 	.word	0x0800564d
 80058a4:	08005671 	.word	0x08005671
 80058a8:	08005695 	.word	0x08005695
 80058ac:	080056b9 	.word	0x080056b9
 80058b0:	080056dd 	.word	0x080056dd
 80058b4:	08005701 	.word	0x08005701
 80058b8:	08005725 	.word	0x08005725
 80058bc:	08005749 	.word	0x08005749
 80058c0:	0800576d 	.word	0x0800576d
 80058c4:	08005791 	.word	0x08005791
 80058c8:	080057b5 	.word	0x080057b5
 80058cc:	080057d9 	.word	0x080057d9

080058d0 <stm32fxxx_dma1_stream4_ndt>:
/*** Inic DMA1 STREAM4 Function ***/
void stm32fxxx_dma1_stream4_ndt(uint16_t value)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	80fb      	strh	r3, [r7, #6]
	DMA1_Stream4->NDTR = value;
 80058da:	4a04      	ldr	r2, [pc, #16]	@ (80058ec <stm32fxxx_dma1_stream4_ndt+0x1c>)
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	6053      	str	r3, [r2, #4]
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	40026070 	.word	0x40026070

080058f0 <stm32fxxx_dma1_stream4_par>:
void stm32fxxx_dma1_stream4_par(volatile long unsigned int periferal_addr)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	DMA1_Stream4->PAR = periferal_addr;
 80058f8:	4a04      	ldr	r2, [pc, #16]	@ (800590c <stm32fxxx_dma1_stream4_par+0x1c>)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6093      	str	r3, [r2, #8]
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40026070 	.word	0x40026070

08005910 <stm32fxxx_dma1_stream4_m0a>:
void stm32fxxx_dma1_stream4_m0a(volatile long unsigned int mem0_addr)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	DMA1_Stream4->M0AR = mem0_addr;
 8005918:	4a04      	ldr	r2, [pc, #16]	@ (800592c <stm32fxxx_dma1_stream4_m0a+0x1c>)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60d3      	str	r3, [r2, #12]
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40026070 	.word	0x40026070

08005930 <stm32fxxx_dma1_stream4_m1a>:
void stm32fxxx_dma1_stream4_m1a(volatile long unsigned int mem1_addr)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	DMA1_Stream4->M1AR = mem1_addr;
 8005938:	4a04      	ldr	r2, [pc, #16]	@ (800594c <stm32fxxx_dma1_stream4_m1a+0x1c>)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6113      	str	r3, [r2, #16]
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40026070 	.word	0x40026070

08005950 <STM32FXXXDMA1_stream5_cr_chsel>:
// DMA1 STREAM5 CR
void STM32FXXXDMA1_stream5_cr_chsel(uint8_t value)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 3, 25, value);
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	2219      	movs	r2, #25
 800595e:	2103      	movs	r1, #3
 8005960:	4803      	ldr	r0, [pc, #12]	@ (8005970 <STM32FXXXDMA1_stream5_cr_chsel+0x20>)
 8005962:	f7fd fe3b 	bl	80035dc <set_reg_block>
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40026088 	.word	0x40026088

08005974 <STM32FXXXDMA1_stream5_cr_mburst>:
void STM32FXXXDMA1_stream5_cr_mburst(uint8_t value)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 2, 23, value);
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	2217      	movs	r2, #23
 8005982:	2102      	movs	r1, #2
 8005984:	4803      	ldr	r0, [pc, #12]	@ (8005994 <STM32FXXXDMA1_stream5_cr_mburst+0x20>)
 8005986:	f7fd fe29 	bl	80035dc <set_reg_block>
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40026088 	.word	0x40026088

08005998 <STM32FXXXDMA1_stream5_cr_pburst>:
void STM32FXXXDMA1_stream5_cr_pburst(uint8_t value)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 2, 21, value);
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	2215      	movs	r2, #21
 80059a6:	2102      	movs	r1, #2
 80059a8:	4803      	ldr	r0, [pc, #12]	@ (80059b8 <STM32FXXXDMA1_stream5_cr_pburst+0x20>)
 80059aa:	f7fd fe17 	bl	80035dc <set_reg_block>
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40026088 	.word	0x40026088

080059bc <STM32FXXXDMA1_stream5_cr_ct>:
void STM32FXXXDMA1_stream5_cr_ct(uint8_t bool)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 19, bool);
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	2213      	movs	r2, #19
 80059ca:	2101      	movs	r1, #1
 80059cc:	4803      	ldr	r0, [pc, #12]	@ (80059dc <STM32FXXXDMA1_stream5_cr_ct+0x20>)
 80059ce:	f7fd fe05 	bl	80035dc <set_reg_block>
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40026088 	.word	0x40026088

080059e0 <STM32FXXXDMA1_stream5_cr_dbm>:
void STM32FXXXDMA1_stream5_cr_dbm(uint8_t bool)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 18, bool);
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	2212      	movs	r2, #18
 80059ee:	2101      	movs	r1, #1
 80059f0:	4803      	ldr	r0, [pc, #12]	@ (8005a00 <STM32FXXXDMA1_stream5_cr_dbm+0x20>)
 80059f2:	f7fd fdf3 	bl	80035dc <set_reg_block>
}
 80059f6:	bf00      	nop
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40026088 	.word	0x40026088

08005a04 <STM32FXXXDMA1_stream5_cr_pl>:
void STM32FXXXDMA1_stream5_cr_pl(uint8_t value)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 2, 16, value);
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	2210      	movs	r2, #16
 8005a12:	2102      	movs	r1, #2
 8005a14:	4803      	ldr	r0, [pc, #12]	@ (8005a24 <STM32FXXXDMA1_stream5_cr_pl+0x20>)
 8005a16:	f7fd fde1 	bl	80035dc <set_reg_block>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40026088 	.word	0x40026088

08005a28 <STM32FXXXDMA1_stream5_cr_pincos>:
void STM32FXXXDMA1_stream5_cr_pincos(uint8_t bool)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 15, bool);
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	220f      	movs	r2, #15
 8005a36:	2101      	movs	r1, #1
 8005a38:	4803      	ldr	r0, [pc, #12]	@ (8005a48 <STM32FXXXDMA1_stream5_cr_pincos+0x20>)
 8005a3a:	f7fd fdcf 	bl	80035dc <set_reg_block>
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40026088 	.word	0x40026088

08005a4c <STM32FXXXDMA1_stream5_cr_msize>:
void STM32FXXXDMA1_stream5_cr_msize(uint8_t value)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 2, 13, value);
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	220d      	movs	r2, #13
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	4803      	ldr	r0, [pc, #12]	@ (8005a6c <STM32FXXXDMA1_stream5_cr_msize+0x20>)
 8005a5e:	f7fd fdbd 	bl	80035dc <set_reg_block>
}
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40026088 	.word	0x40026088

08005a70 <STM32FXXXDMA1_stream5_cr_psize>:
void STM32FXXXDMA1_stream5_cr_psize(uint8_t value)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 2, 11, value);
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	220b      	movs	r2, #11
 8005a7e:	2102      	movs	r1, #2
 8005a80:	4803      	ldr	r0, [pc, #12]	@ (8005a90 <STM32FXXXDMA1_stream5_cr_psize+0x20>)
 8005a82:	f7fd fdab 	bl	80035dc <set_reg_block>
}
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40026088 	.word	0x40026088

08005a94 <STM32FXXXDMA1_stream5_cr_minc>:
void STM32FXXXDMA1_stream5_cr_minc(uint8_t bool)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 10, bool);
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	220a      	movs	r2, #10
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	4803      	ldr	r0, [pc, #12]	@ (8005ab4 <STM32FXXXDMA1_stream5_cr_minc+0x20>)
 8005aa6:	f7fd fd99 	bl	80035dc <set_reg_block>
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40026088 	.word	0x40026088

08005ab8 <STM32FXXXDMA1_stream5_cr_pinc>:
void STM32FXXXDMA1_stream5_cr_pinc(uint8_t bool)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 9, bool);
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	2209      	movs	r2, #9
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	4803      	ldr	r0, [pc, #12]	@ (8005ad8 <STM32FXXXDMA1_stream5_cr_pinc+0x20>)
 8005aca:	f7fd fd87 	bl	80035dc <set_reg_block>
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40026088 	.word	0x40026088

08005adc <STM32FXXXDMA1_stream5_cr_circ>:
void STM32FXXXDMA1_stream5_cr_circ(uint8_t bool)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 8, bool);
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	2208      	movs	r2, #8
 8005aea:	2101      	movs	r1, #1
 8005aec:	4803      	ldr	r0, [pc, #12]	@ (8005afc <STM32FXXXDMA1_stream5_cr_circ+0x20>)
 8005aee:	f7fd fd75 	bl	80035dc <set_reg_block>
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40026088 	.word	0x40026088

08005b00 <STM32FXXXDMA1_stream5_cr_dir>:
void STM32FXXXDMA1_stream5_cr_dir(uint8_t value)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 2, 7, value);
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	2207      	movs	r2, #7
 8005b0e:	2102      	movs	r1, #2
 8005b10:	4803      	ldr	r0, [pc, #12]	@ (8005b20 <STM32FXXXDMA1_stream5_cr_dir+0x20>)
 8005b12:	f7fd fd63 	bl	80035dc <set_reg_block>
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40026088 	.word	0x40026088

08005b24 <STM32FXXXDMA1_stream5_cr_pfctrl>:
void STM32FXXXDMA1_stream5_cr_pfctrl(uint8_t bool)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 5, bool);
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	2205      	movs	r2, #5
 8005b32:	2101      	movs	r1, #1
 8005b34:	4803      	ldr	r0, [pc, #12]	@ (8005b44 <STM32FXXXDMA1_stream5_cr_pfctrl+0x20>)
 8005b36:	f7fd fd51 	bl	80035dc <set_reg_block>
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40026088 	.word	0x40026088

08005b48 <STM32FXXXDMA1_stream5_cr_tcie>:
void STM32FXXXDMA1_stream5_cr_tcie(uint8_t bool)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 4, bool);
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	2204      	movs	r2, #4
 8005b56:	2101      	movs	r1, #1
 8005b58:	4803      	ldr	r0, [pc, #12]	@ (8005b68 <STM32FXXXDMA1_stream5_cr_tcie+0x20>)
 8005b5a:	f7fd fd3f 	bl	80035dc <set_reg_block>
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40026088 	.word	0x40026088

08005b6c <STM32FXXXDMA1_stream5_cr_htie>:
void STM32FXXXDMA1_stream5_cr_htie(uint8_t bool)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 3, bool);
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	2203      	movs	r2, #3
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4803      	ldr	r0, [pc, #12]	@ (8005b8c <STM32FXXXDMA1_stream5_cr_htie+0x20>)
 8005b7e:	f7fd fd2d 	bl	80035dc <set_reg_block>
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40026088 	.word	0x40026088

08005b90 <STM32FXXXDMA1_stream5_cr_teie>:
void STM32FXXXDMA1_stream5_cr_teie(uint8_t bool)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 2, bool);
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	4803      	ldr	r0, [pc, #12]	@ (8005bb0 <STM32FXXXDMA1_stream5_cr_teie+0x20>)
 8005ba2:	f7fd fd1b 	bl	80035dc <set_reg_block>
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40026088 	.word	0x40026088

08005bb4 <STM32FXXXDMA1_stream5_cr_dmeie>:
void STM32FXXXDMA1_stream5_cr_dmeie(uint8_t bool)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 1, bool);
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4803      	ldr	r0, [pc, #12]	@ (8005bd4 <STM32FXXXDMA1_stream5_cr_dmeie+0x20>)
 8005bc6:	f7fd fd09 	bl	80035dc <set_reg_block>
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40026088 	.word	0x40026088

08005bd8 <STM32FXXXDMA1_stream5_cr_en>:
void STM32FXXXDMA1_stream5_cr_en(uint8_t bool)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->CR, 1, 0, bool);
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	2200      	movs	r2, #0
 8005be6:	2101      	movs	r1, #1
 8005be8:	4803      	ldr	r0, [pc, #12]	@ (8005bf8 <STM32FXXXDMA1_stream5_cr_en+0x20>)
 8005bea:	f7fd fcf7 	bl	80035dc <set_reg_block>
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40026088 	.word	0x40026088

08005bfc <stm32fxxx_dma1_stream5_cr_inic>:
/*** Inic DMA1 STREAM5 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma1_stream5_cr_inic(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma1_stream5_cr.chsel = STM32FXXXDMA1_stream5_cr_chsel;
 8005c00:	4b1f      	ldr	r3, [pc, #124]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c02:	4a20      	ldr	r2, [pc, #128]	@ (8005c84 <stm32fxxx_dma1_stream5_cr_inic+0x88>)
 8005c04:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream5_cr.mburst = STM32FXXXDMA1_stream5_cr_mburst;
 8005c06:	4b1e      	ldr	r3, [pc, #120]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c08:	4a1f      	ldr	r2, [pc, #124]	@ (8005c88 <stm32fxxx_dma1_stream5_cr_inic+0x8c>)
 8005c0a:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream5_cr.pburst = STM32FXXXDMA1_stream5_cr_pburst;
 8005c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c8c <stm32fxxx_dma1_stream5_cr_inic+0x90>)
 8005c10:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream5_cr.ct = STM32FXXXDMA1_stream5_cr_ct;
 8005c12:	4b1b      	ldr	r3, [pc, #108]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c14:	4a1e      	ldr	r2, [pc, #120]	@ (8005c90 <stm32fxxx_dma1_stream5_cr_inic+0x94>)
 8005c16:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1_stream5_cr.dbm = STM32FXXXDMA1_stream5_cr_dbm;
 8005c18:	4b19      	ldr	r3, [pc, #100]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c94 <stm32fxxx_dma1_stream5_cr_inic+0x98>)
 8005c1c:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma1_stream5_cr.pl = STM32FXXXDMA1_stream5_cr_pl;
 8005c1e:	4b18      	ldr	r3, [pc, #96]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c20:	4a1d      	ldr	r2, [pc, #116]	@ (8005c98 <stm32fxxx_dma1_stream5_cr_inic+0x9c>)
 8005c22:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma1_stream5_cr.pincos = STM32FXXXDMA1_stream5_cr_pincos;
 8005c24:	4b16      	ldr	r3, [pc, #88]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c26:	4a1d      	ldr	r2, [pc, #116]	@ (8005c9c <stm32fxxx_dma1_stream5_cr_inic+0xa0>)
 8005c28:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma1_stream5_cr.msize = STM32FXXXDMA1_stream5_cr_msize;
 8005c2a:	4b15      	ldr	r3, [pc, #84]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca0 <stm32fxxx_dma1_stream5_cr_inic+0xa4>)
 8005c2e:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma1_stream5_cr.psize = STM32FXXXDMA1_stream5_cr_psize;
 8005c30:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca4 <stm32fxxx_dma1_stream5_cr_inic+0xa8>)
 8005c34:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma1_stream5_cr.minc = STM32FXXXDMA1_stream5_cr_minc;
 8005c36:	4b12      	ldr	r3, [pc, #72]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca8 <stm32fxxx_dma1_stream5_cr_inic+0xac>)
 8005c3a:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma1_stream5_cr.pinc = STM32FXXXDMA1_stream5_cr_pinc;
 8005c3c:	4b10      	ldr	r3, [pc, #64]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cac <stm32fxxx_dma1_stream5_cr_inic+0xb0>)
 8005c40:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma1_stream5_cr.circ = STM32FXXXDMA1_stream5_cr_circ;
 8005c42:	4b0f      	ldr	r3, [pc, #60]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c44:	4a1a      	ldr	r2, [pc, #104]	@ (8005cb0 <stm32fxxx_dma1_stream5_cr_inic+0xb4>)
 8005c46:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma1_stream5_cr.dir = STM32FXXXDMA1_stream5_cr_dir;
 8005c48:	4b0d      	ldr	r3, [pc, #52]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005cb4 <stm32fxxx_dma1_stream5_cr_inic+0xb8>)
 8005c4c:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma1_stream5_cr.pfctrl = STM32FXXXDMA1_stream5_cr_pfctrl;
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c50:	4a19      	ldr	r2, [pc, #100]	@ (8005cb8 <stm32fxxx_dma1_stream5_cr_inic+0xbc>)
 8005c52:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma1_stream5_cr.tcie = STM32FXXXDMA1_stream5_cr_tcie;
 8005c54:	4b0a      	ldr	r3, [pc, #40]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c56:	4a19      	ldr	r2, [pc, #100]	@ (8005cbc <stm32fxxx_dma1_stream5_cr_inic+0xc0>)
 8005c58:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma1_stream5_cr.htie = STM32FXXXDMA1_stream5_cr_htie;
 8005c5a:	4b09      	ldr	r3, [pc, #36]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c5c:	4a18      	ldr	r2, [pc, #96]	@ (8005cc0 <stm32fxxx_dma1_stream5_cr_inic+0xc4>)
 8005c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma1_stream5_cr.teie = STM32FXXXDMA1_stream5_cr_teie;
 8005c60:	4b07      	ldr	r3, [pc, #28]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c62:	4a18      	ldr	r2, [pc, #96]	@ (8005cc4 <stm32fxxx_dma1_stream5_cr_inic+0xc8>)
 8005c64:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma1_stream5_cr.dmeie = STM32FXXXDMA1_stream5_cr_dmeie;
 8005c66:	4b06      	ldr	r3, [pc, #24]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c68:	4a17      	ldr	r2, [pc, #92]	@ (8005cc8 <stm32fxxx_dma1_stream5_cr_inic+0xcc>)
 8005c6a:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma1_stream5_cr.en = STM32FXXXDMA1_stream5_cr_en;
 8005c6c:	4b04      	ldr	r3, [pc, #16]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
 8005c6e:	4a17      	ldr	r2, [pc, #92]	@ (8005ccc <stm32fxxx_dma1_stream5_cr_inic+0xd0>)
 8005c70:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma1_stream5_cr;
 8005c72:	4b03      	ldr	r3, [pc, #12]	@ (8005c80 <stm32fxxx_dma1_stream5_cr_inic+0x84>)
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	2000040c 	.word	0x2000040c
 8005c84:	08005951 	.word	0x08005951
 8005c88:	08005975 	.word	0x08005975
 8005c8c:	08005999 	.word	0x08005999
 8005c90:	080059bd 	.word	0x080059bd
 8005c94:	080059e1 	.word	0x080059e1
 8005c98:	08005a05 	.word	0x08005a05
 8005c9c:	08005a29 	.word	0x08005a29
 8005ca0:	08005a4d 	.word	0x08005a4d
 8005ca4:	08005a71 	.word	0x08005a71
 8005ca8:	08005a95 	.word	0x08005a95
 8005cac:	08005ab9 	.word	0x08005ab9
 8005cb0:	08005add 	.word	0x08005add
 8005cb4:	08005b01 	.word	0x08005b01
 8005cb8:	08005b25 	.word	0x08005b25
 8005cbc:	08005b49 	.word	0x08005b49
 8005cc0:	08005b6d 	.word	0x08005b6d
 8005cc4:	08005b91 	.word	0x08005b91
 8005cc8:	08005bb5 	.word	0x08005bb5
 8005ccc:	08005bd9 	.word	0x08005bd9

08005cd0 <stm32fxxx_dma1_stream5_ndt>:
/*** Inic DMA1 STREAM5 Function ***/
void stm32fxxx_dma1_stream5_ndt(uint16_t value)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	80fb      	strh	r3, [r7, #6]
	DMA1_Stream5->NDTR = value;
 8005cda:	4a04      	ldr	r2, [pc, #16]	@ (8005cec <stm32fxxx_dma1_stream5_ndt+0x1c>)
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	6053      	str	r3, [r2, #4]
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	40026088 	.word	0x40026088

08005cf0 <stm32fxxx_dma1_stream5_par>:
void stm32fxxx_dma1_stream5_par(volatile long unsigned int periferal_addr)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	DMA1_Stream5->PAR = periferal_addr;
 8005cf8:	4a04      	ldr	r2, [pc, #16]	@ (8005d0c <stm32fxxx_dma1_stream5_par+0x1c>)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6093      	str	r3, [r2, #8]
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40026088 	.word	0x40026088

08005d10 <stm32fxxx_dma1_stream5_m0a>:
void stm32fxxx_dma1_stream5_m0a(volatile long unsigned int mem0_addr)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	DMA1_Stream5->M0AR = mem0_addr;
 8005d18:	4a04      	ldr	r2, [pc, #16]	@ (8005d2c <stm32fxxx_dma1_stream5_m0a+0x1c>)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60d3      	str	r3, [r2, #12]
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40026088 	.word	0x40026088

08005d30 <stm32fxxx_dma1_stream5_m1a>:
void stm32fxxx_dma1_stream5_m1a(volatile long unsigned int mem1_addr)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	DMA1_Stream5->M1AR = mem1_addr;
 8005d38:	4a04      	ldr	r2, [pc, #16]	@ (8005d4c <stm32fxxx_dma1_stream5_m1a+0x1c>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6113      	str	r3, [r2, #16]
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40026088 	.word	0x40026088

08005d50 <STM32FXXXDMA1_stream6_cr_chsel>:
// DMA1 STREAM6 CR
void STM32FXXXDMA1_stream6_cr_chsel(uint8_t value)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 3, 25, value);
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	2219      	movs	r2, #25
 8005d5e:	2103      	movs	r1, #3
 8005d60:	4803      	ldr	r0, [pc, #12]	@ (8005d70 <STM32FXXXDMA1_stream6_cr_chsel+0x20>)
 8005d62:	f7fd fc3b 	bl	80035dc <set_reg_block>
}
 8005d66:	bf00      	nop
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	400260a0 	.word	0x400260a0

08005d74 <STM32FXXXDMA1_stream6_cr_mburst>:
void STM32FXXXDMA1_stream6_cr_mburst(uint8_t value)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 2, 23, value);
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	2217      	movs	r2, #23
 8005d82:	2102      	movs	r1, #2
 8005d84:	4803      	ldr	r0, [pc, #12]	@ (8005d94 <STM32FXXXDMA1_stream6_cr_mburst+0x20>)
 8005d86:	f7fd fc29 	bl	80035dc <set_reg_block>
}
 8005d8a:	bf00      	nop
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	400260a0 	.word	0x400260a0

08005d98 <STM32FXXXDMA1_stream6_cr_pburst>:
void STM32FXXXDMA1_stream6_cr_pburst(uint8_t value)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 2, 21, value);
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	2215      	movs	r2, #21
 8005da6:	2102      	movs	r1, #2
 8005da8:	4803      	ldr	r0, [pc, #12]	@ (8005db8 <STM32FXXXDMA1_stream6_cr_pburst+0x20>)
 8005daa:	f7fd fc17 	bl	80035dc <set_reg_block>
}
 8005dae:	bf00      	nop
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	400260a0 	.word	0x400260a0

08005dbc <STM32FXXXDMA1_stream6_cr_ct>:
void STM32FXXXDMA1_stream6_cr_ct(uint8_t bool)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 19, bool);
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	2213      	movs	r2, #19
 8005dca:	2101      	movs	r1, #1
 8005dcc:	4803      	ldr	r0, [pc, #12]	@ (8005ddc <STM32FXXXDMA1_stream6_cr_ct+0x20>)
 8005dce:	f7fd fc05 	bl	80035dc <set_reg_block>
}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	400260a0 	.word	0x400260a0

08005de0 <STM32FXXXDMA1_stream6_cr_dbm>:
void STM32FXXXDMA1_stream6_cr_dbm(uint8_t bool)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 18, bool);
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	2212      	movs	r2, #18
 8005dee:	2101      	movs	r1, #1
 8005df0:	4803      	ldr	r0, [pc, #12]	@ (8005e00 <STM32FXXXDMA1_stream6_cr_dbm+0x20>)
 8005df2:	f7fd fbf3 	bl	80035dc <set_reg_block>
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	400260a0 	.word	0x400260a0

08005e04 <STM32FXXXDMA1_stream6_cr_pl>:
void STM32FXXXDMA1_stream6_cr_pl(uint8_t value)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 2, 16, value);
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	2210      	movs	r2, #16
 8005e12:	2102      	movs	r1, #2
 8005e14:	4803      	ldr	r0, [pc, #12]	@ (8005e24 <STM32FXXXDMA1_stream6_cr_pl+0x20>)
 8005e16:	f7fd fbe1 	bl	80035dc <set_reg_block>
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	400260a0 	.word	0x400260a0

08005e28 <STM32FXXXDMA1_stream6_cr_pincos>:
void STM32FXXXDMA1_stream6_cr_pincos(uint8_t bool)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 15, bool);
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	220f      	movs	r2, #15
 8005e36:	2101      	movs	r1, #1
 8005e38:	4803      	ldr	r0, [pc, #12]	@ (8005e48 <STM32FXXXDMA1_stream6_cr_pincos+0x20>)
 8005e3a:	f7fd fbcf 	bl	80035dc <set_reg_block>
}
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	400260a0 	.word	0x400260a0

08005e4c <STM32FXXXDMA1_stream6_cr_msize>:
void STM32FXXXDMA1_stream6_cr_msize(uint8_t value)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 2, 13, value);
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	220d      	movs	r2, #13
 8005e5a:	2102      	movs	r1, #2
 8005e5c:	4803      	ldr	r0, [pc, #12]	@ (8005e6c <STM32FXXXDMA1_stream6_cr_msize+0x20>)
 8005e5e:	f7fd fbbd 	bl	80035dc <set_reg_block>
}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	400260a0 	.word	0x400260a0

08005e70 <STM32FXXXDMA1_stream6_cr_psize>:
void STM32FXXXDMA1_stream6_cr_psize(uint8_t value)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 2, 11, value);
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	220b      	movs	r2, #11
 8005e7e:	2102      	movs	r1, #2
 8005e80:	4803      	ldr	r0, [pc, #12]	@ (8005e90 <STM32FXXXDMA1_stream6_cr_psize+0x20>)
 8005e82:	f7fd fbab 	bl	80035dc <set_reg_block>
}
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	400260a0 	.word	0x400260a0

08005e94 <STM32FXXXDMA1_stream6_cr_minc>:
void STM32FXXXDMA1_stream6_cr_minc(uint8_t bool)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 10, bool);
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	220a      	movs	r2, #10
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4803      	ldr	r0, [pc, #12]	@ (8005eb4 <STM32FXXXDMA1_stream6_cr_minc+0x20>)
 8005ea6:	f7fd fb99 	bl	80035dc <set_reg_block>
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	400260a0 	.word	0x400260a0

08005eb8 <STM32FXXXDMA1_stream6_cr_pinc>:
void STM32FXXXDMA1_stream6_cr_pinc(uint8_t bool)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 9, bool);
 8005ec2:	79fb      	ldrb	r3, [r7, #7]
 8005ec4:	2209      	movs	r2, #9
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	4803      	ldr	r0, [pc, #12]	@ (8005ed8 <STM32FXXXDMA1_stream6_cr_pinc+0x20>)
 8005eca:	f7fd fb87 	bl	80035dc <set_reg_block>
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	400260a0 	.word	0x400260a0

08005edc <STM32FXXXDMA1_stream6_cr_circ>:
void STM32FXXXDMA1_stream6_cr_circ(uint8_t bool)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 8, bool);
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	2101      	movs	r1, #1
 8005eec:	4803      	ldr	r0, [pc, #12]	@ (8005efc <STM32FXXXDMA1_stream6_cr_circ+0x20>)
 8005eee:	f7fd fb75 	bl	80035dc <set_reg_block>
}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	400260a0 	.word	0x400260a0

08005f00 <STM32FXXXDMA1_stream6_cr_dir>:
void STM32FXXXDMA1_stream6_cr_dir(uint8_t value)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 2, 7, value);
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	2207      	movs	r2, #7
 8005f0e:	2102      	movs	r1, #2
 8005f10:	4803      	ldr	r0, [pc, #12]	@ (8005f20 <STM32FXXXDMA1_stream6_cr_dir+0x20>)
 8005f12:	f7fd fb63 	bl	80035dc <set_reg_block>
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	400260a0 	.word	0x400260a0

08005f24 <STM32FXXXDMA1_stream6_cr_pfctrl>:
void STM32FXXXDMA1_stream6_cr_pfctrl(uint8_t bool)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 5, bool);
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	2205      	movs	r2, #5
 8005f32:	2101      	movs	r1, #1
 8005f34:	4803      	ldr	r0, [pc, #12]	@ (8005f44 <STM32FXXXDMA1_stream6_cr_pfctrl+0x20>)
 8005f36:	f7fd fb51 	bl	80035dc <set_reg_block>
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	400260a0 	.word	0x400260a0

08005f48 <STM32FXXXDMA1_stream6_cr_tcie>:
void STM32FXXXDMA1_stream6_cr_tcie(uint8_t bool)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 4, bool);
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	2204      	movs	r2, #4
 8005f56:	2101      	movs	r1, #1
 8005f58:	4803      	ldr	r0, [pc, #12]	@ (8005f68 <STM32FXXXDMA1_stream6_cr_tcie+0x20>)
 8005f5a:	f7fd fb3f 	bl	80035dc <set_reg_block>
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	400260a0 	.word	0x400260a0

08005f6c <STM32FXXXDMA1_stream6_cr_htie>:
void STM32FXXXDMA1_stream6_cr_htie(uint8_t bool)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 3, bool);
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	2203      	movs	r2, #3
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	4803      	ldr	r0, [pc, #12]	@ (8005f8c <STM32FXXXDMA1_stream6_cr_htie+0x20>)
 8005f7e:	f7fd fb2d 	bl	80035dc <set_reg_block>
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	400260a0 	.word	0x400260a0

08005f90 <STM32FXXXDMA1_stream6_cr_teie>:
void STM32FXXXDMA1_stream6_cr_teie(uint8_t bool)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 2, bool);
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4803      	ldr	r0, [pc, #12]	@ (8005fb0 <STM32FXXXDMA1_stream6_cr_teie+0x20>)
 8005fa2:	f7fd fb1b 	bl	80035dc <set_reg_block>
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	400260a0 	.word	0x400260a0

08005fb4 <STM32FXXXDMA1_stream6_cr_dmeie>:
void STM32FXXXDMA1_stream6_cr_dmeie(uint8_t bool)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 1, bool);
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4803      	ldr	r0, [pc, #12]	@ (8005fd4 <STM32FXXXDMA1_stream6_cr_dmeie+0x20>)
 8005fc6:	f7fd fb09 	bl	80035dc <set_reg_block>
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	400260a0 	.word	0x400260a0

08005fd8 <STM32FXXXDMA1_stream6_cr_en>:
void STM32FXXXDMA1_stream6_cr_en(uint8_t bool)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->CR, 1, 0, bool);
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	4803      	ldr	r0, [pc, #12]	@ (8005ff8 <STM32FXXXDMA1_stream6_cr_en+0x20>)
 8005fea:	f7fd faf7 	bl	80035dc <set_reg_block>
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	400260a0 	.word	0x400260a0

08005ffc <stm32fxxx_dma1_stream6_cr_inic>:
/*** Inic DMA1 STREAM6 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma1_stream6_cr_inic(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma1_stream6_cr.chsel = STM32FXXXDMA1_stream6_cr_chsel;
 8006000:	4b1f      	ldr	r3, [pc, #124]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006002:	4a20      	ldr	r2, [pc, #128]	@ (8006084 <stm32fxxx_dma1_stream6_cr_inic+0x88>)
 8006004:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream6_cr.mburst = STM32FXXXDMA1_stream6_cr_mburst;
 8006006:	4b1e      	ldr	r3, [pc, #120]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006008:	4a1f      	ldr	r2, [pc, #124]	@ (8006088 <stm32fxxx_dma1_stream6_cr_inic+0x8c>)
 800600a:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream6_cr.pburst = STM32FXXXDMA1_stream6_cr_pburst;
 800600c:	4b1c      	ldr	r3, [pc, #112]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 800600e:	4a1f      	ldr	r2, [pc, #124]	@ (800608c <stm32fxxx_dma1_stream6_cr_inic+0x90>)
 8006010:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream6_cr.ct = STM32FXXXDMA1_stream6_cr_ct;
 8006012:	4b1b      	ldr	r3, [pc, #108]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006014:	4a1e      	ldr	r2, [pc, #120]	@ (8006090 <stm32fxxx_dma1_stream6_cr_inic+0x94>)
 8006016:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1_stream6_cr.dbm = STM32FXXXDMA1_stream6_cr_dbm;
 8006018:	4b19      	ldr	r3, [pc, #100]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 800601a:	4a1e      	ldr	r2, [pc, #120]	@ (8006094 <stm32fxxx_dma1_stream6_cr_inic+0x98>)
 800601c:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma1_stream6_cr.pl = STM32FXXXDMA1_stream6_cr_pl;
 800601e:	4b18      	ldr	r3, [pc, #96]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006020:	4a1d      	ldr	r2, [pc, #116]	@ (8006098 <stm32fxxx_dma1_stream6_cr_inic+0x9c>)
 8006022:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma1_stream6_cr.pincos = STM32FXXXDMA1_stream6_cr_pincos;
 8006024:	4b16      	ldr	r3, [pc, #88]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006026:	4a1d      	ldr	r2, [pc, #116]	@ (800609c <stm32fxxx_dma1_stream6_cr_inic+0xa0>)
 8006028:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma1_stream6_cr.msize = STM32FXXXDMA1_stream6_cr_msize;
 800602a:	4b15      	ldr	r3, [pc, #84]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 800602c:	4a1c      	ldr	r2, [pc, #112]	@ (80060a0 <stm32fxxx_dma1_stream6_cr_inic+0xa4>)
 800602e:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma1_stream6_cr.psize = STM32FXXXDMA1_stream6_cr_psize;
 8006030:	4b13      	ldr	r3, [pc, #76]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006032:	4a1c      	ldr	r2, [pc, #112]	@ (80060a4 <stm32fxxx_dma1_stream6_cr_inic+0xa8>)
 8006034:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma1_stream6_cr.minc = STM32FXXXDMA1_stream6_cr_minc;
 8006036:	4b12      	ldr	r3, [pc, #72]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006038:	4a1b      	ldr	r2, [pc, #108]	@ (80060a8 <stm32fxxx_dma1_stream6_cr_inic+0xac>)
 800603a:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma1_stream6_cr.pinc = STM32FXXXDMA1_stream6_cr_pinc;
 800603c:	4b10      	ldr	r3, [pc, #64]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 800603e:	4a1b      	ldr	r2, [pc, #108]	@ (80060ac <stm32fxxx_dma1_stream6_cr_inic+0xb0>)
 8006040:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma1_stream6_cr.circ = STM32FXXXDMA1_stream6_cr_circ;
 8006042:	4b0f      	ldr	r3, [pc, #60]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006044:	4a1a      	ldr	r2, [pc, #104]	@ (80060b0 <stm32fxxx_dma1_stream6_cr_inic+0xb4>)
 8006046:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma1_stream6_cr.dir = STM32FXXXDMA1_stream6_cr_dir;
 8006048:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 800604a:	4a1a      	ldr	r2, [pc, #104]	@ (80060b4 <stm32fxxx_dma1_stream6_cr_inic+0xb8>)
 800604c:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma1_stream6_cr.pfctrl = STM32FXXXDMA1_stream6_cr_pfctrl;
 800604e:	4b0c      	ldr	r3, [pc, #48]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006050:	4a19      	ldr	r2, [pc, #100]	@ (80060b8 <stm32fxxx_dma1_stream6_cr_inic+0xbc>)
 8006052:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma1_stream6_cr.tcie = STM32FXXXDMA1_stream6_cr_tcie;
 8006054:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006056:	4a19      	ldr	r2, [pc, #100]	@ (80060bc <stm32fxxx_dma1_stream6_cr_inic+0xc0>)
 8006058:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma1_stream6_cr.htie = STM32FXXXDMA1_stream6_cr_htie;
 800605a:	4b09      	ldr	r3, [pc, #36]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 800605c:	4a18      	ldr	r2, [pc, #96]	@ (80060c0 <stm32fxxx_dma1_stream6_cr_inic+0xc4>)
 800605e:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma1_stream6_cr.teie = STM32FXXXDMA1_stream6_cr_teie;
 8006060:	4b07      	ldr	r3, [pc, #28]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006062:	4a18      	ldr	r2, [pc, #96]	@ (80060c4 <stm32fxxx_dma1_stream6_cr_inic+0xc8>)
 8006064:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma1_stream6_cr.dmeie = STM32FXXXDMA1_stream6_cr_dmeie;
 8006066:	4b06      	ldr	r3, [pc, #24]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 8006068:	4a17      	ldr	r2, [pc, #92]	@ (80060c8 <stm32fxxx_dma1_stream6_cr_inic+0xcc>)
 800606a:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma1_stream6_cr.en = STM32FXXXDMA1_stream6_cr_en;
 800606c:	4b04      	ldr	r3, [pc, #16]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
 800606e:	4a17      	ldr	r2, [pc, #92]	@ (80060cc <stm32fxxx_dma1_stream6_cr_inic+0xd0>)
 8006070:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma1_stream6_cr;
 8006072:	4b03      	ldr	r3, [pc, #12]	@ (8006080 <stm32fxxx_dma1_stream6_cr_inic+0x84>)
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000458 	.word	0x20000458
 8006084:	08005d51 	.word	0x08005d51
 8006088:	08005d75 	.word	0x08005d75
 800608c:	08005d99 	.word	0x08005d99
 8006090:	08005dbd 	.word	0x08005dbd
 8006094:	08005de1 	.word	0x08005de1
 8006098:	08005e05 	.word	0x08005e05
 800609c:	08005e29 	.word	0x08005e29
 80060a0:	08005e4d 	.word	0x08005e4d
 80060a4:	08005e71 	.word	0x08005e71
 80060a8:	08005e95 	.word	0x08005e95
 80060ac:	08005eb9 	.word	0x08005eb9
 80060b0:	08005edd 	.word	0x08005edd
 80060b4:	08005f01 	.word	0x08005f01
 80060b8:	08005f25 	.word	0x08005f25
 80060bc:	08005f49 	.word	0x08005f49
 80060c0:	08005f6d 	.word	0x08005f6d
 80060c4:	08005f91 	.word	0x08005f91
 80060c8:	08005fb5 	.word	0x08005fb5
 80060cc:	08005fd9 	.word	0x08005fd9

080060d0 <stm32fxxx_dma1_stream6_ndt>:
/*** Inic DMA1 STREAM6 Function ***/
void stm32fxxx_dma1_stream6_ndt(uint16_t value)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	80fb      	strh	r3, [r7, #6]
	DMA1_Stream6->NDTR = value;
 80060da:	4a04      	ldr	r2, [pc, #16]	@ (80060ec <stm32fxxx_dma1_stream6_ndt+0x1c>)
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	6053      	str	r3, [r2, #4]
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	400260a0 	.word	0x400260a0

080060f0 <stm32fxxx_dma1_stream6_par>:
void stm32fxxx_dma1_stream6_par(volatile long unsigned int periferal_addr)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	DMA1_Stream6->PAR = periferal_addr;
 80060f8:	4a04      	ldr	r2, [pc, #16]	@ (800610c <stm32fxxx_dma1_stream6_par+0x1c>)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6093      	str	r3, [r2, #8]
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	400260a0 	.word	0x400260a0

08006110 <stm32fxxx_dma1_stream6_m0a>:
void stm32fxxx_dma1_stream6_m0a(volatile long unsigned int mem0_addr)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	DMA1_Stream6->M0AR = mem0_addr;
 8006118:	4a04      	ldr	r2, [pc, #16]	@ (800612c <stm32fxxx_dma1_stream6_m0a+0x1c>)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60d3      	str	r3, [r2, #12]
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	400260a0 	.word	0x400260a0

08006130 <stm32fxxx_dma1_stream6_m1a>:
void stm32fxxx_dma1_stream6_m1a(volatile long unsigned int mem1_addr)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	DMA1_Stream6->M1AR = mem1_addr;
 8006138:	4a04      	ldr	r2, [pc, #16]	@ (800614c <stm32fxxx_dma1_stream6_m1a+0x1c>)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6113      	str	r3, [r2, #16]
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	400260a0 	.word	0x400260a0

08006150 <STM32FXXXDMA1_stream7_cr_chsel>:
// DMA1 STREAM7 CR
void STM32FXXXDMA1_stream7_cr_chsel(uint8_t value)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 3, 25, value);
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	2219      	movs	r2, #25
 800615e:	2103      	movs	r1, #3
 8006160:	4803      	ldr	r0, [pc, #12]	@ (8006170 <STM32FXXXDMA1_stream7_cr_chsel+0x20>)
 8006162:	f7fd fa3b 	bl	80035dc <set_reg_block>
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	400260b8 	.word	0x400260b8

08006174 <STM32FXXXDMA1_stream7_cr_mburst>:
void STM32FXXXDMA1_stream7_cr_mburst(uint8_t value)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 2, 23, value);
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	2217      	movs	r2, #23
 8006182:	2102      	movs	r1, #2
 8006184:	4803      	ldr	r0, [pc, #12]	@ (8006194 <STM32FXXXDMA1_stream7_cr_mburst+0x20>)
 8006186:	f7fd fa29 	bl	80035dc <set_reg_block>
}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	400260b8 	.word	0x400260b8

08006198 <STM32FXXXDMA1_stream7_cr_pburst>:
void STM32FXXXDMA1_stream7_cr_pburst(uint8_t value)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 2, 21, value);
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	2215      	movs	r2, #21
 80061a6:	2102      	movs	r1, #2
 80061a8:	4803      	ldr	r0, [pc, #12]	@ (80061b8 <STM32FXXXDMA1_stream7_cr_pburst+0x20>)
 80061aa:	f7fd fa17 	bl	80035dc <set_reg_block>
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	400260b8 	.word	0x400260b8

080061bc <STM32FXXXDMA1_stream7_cr_ct>:
void STM32FXXXDMA1_stream7_cr_ct(uint8_t bool)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 19, bool);
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	2213      	movs	r2, #19
 80061ca:	2101      	movs	r1, #1
 80061cc:	4803      	ldr	r0, [pc, #12]	@ (80061dc <STM32FXXXDMA1_stream7_cr_ct+0x20>)
 80061ce:	f7fd fa05 	bl	80035dc <set_reg_block>
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	400260b8 	.word	0x400260b8

080061e0 <STM32FXXXDMA1_stream7_cr_dbm>:
void STM32FXXXDMA1_stream7_cr_dbm(uint8_t bool)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 18, bool);
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	2212      	movs	r2, #18
 80061ee:	2101      	movs	r1, #1
 80061f0:	4803      	ldr	r0, [pc, #12]	@ (8006200 <STM32FXXXDMA1_stream7_cr_dbm+0x20>)
 80061f2:	f7fd f9f3 	bl	80035dc <set_reg_block>
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	400260b8 	.word	0x400260b8

08006204 <STM32FXXXDMA1_stream7_cr_pl>:
void STM32FXXXDMA1_stream7_cr_pl(uint8_t value)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 2, 16, value);
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	2210      	movs	r2, #16
 8006212:	2102      	movs	r1, #2
 8006214:	4803      	ldr	r0, [pc, #12]	@ (8006224 <STM32FXXXDMA1_stream7_cr_pl+0x20>)
 8006216:	f7fd f9e1 	bl	80035dc <set_reg_block>
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	400260b8 	.word	0x400260b8

08006228 <STM32FXXXDMA1_stream7_cr_pincos>:
void STM32FXXXDMA1_stream7_cr_pincos(uint8_t bool)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 15, bool);
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	220f      	movs	r2, #15
 8006236:	2101      	movs	r1, #1
 8006238:	4803      	ldr	r0, [pc, #12]	@ (8006248 <STM32FXXXDMA1_stream7_cr_pincos+0x20>)
 800623a:	f7fd f9cf 	bl	80035dc <set_reg_block>
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	400260b8 	.word	0x400260b8

0800624c <STM32FXXXDMA1_stream7_cr_msize>:
void STM32FXXXDMA1_stream7_cr_msize(uint8_t value)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 2, 13, value);
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	220d      	movs	r2, #13
 800625a:	2102      	movs	r1, #2
 800625c:	4803      	ldr	r0, [pc, #12]	@ (800626c <STM32FXXXDMA1_stream7_cr_msize+0x20>)
 800625e:	f7fd f9bd 	bl	80035dc <set_reg_block>
}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	400260b8 	.word	0x400260b8

08006270 <STM32FXXXDMA1_stream7_cr_psize>:
void STM32FXXXDMA1_stream7_cr_psize(uint8_t value)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 2, 11, value);
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	220b      	movs	r2, #11
 800627e:	2102      	movs	r1, #2
 8006280:	4803      	ldr	r0, [pc, #12]	@ (8006290 <STM32FXXXDMA1_stream7_cr_psize+0x20>)
 8006282:	f7fd f9ab 	bl	80035dc <set_reg_block>
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	400260b8 	.word	0x400260b8

08006294 <STM32FXXXDMA1_stream7_cr_minc>:
void STM32FXXXDMA1_stream7_cr_minc(uint8_t bool)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 10, bool);
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	220a      	movs	r2, #10
 80062a2:	2101      	movs	r1, #1
 80062a4:	4803      	ldr	r0, [pc, #12]	@ (80062b4 <STM32FXXXDMA1_stream7_cr_minc+0x20>)
 80062a6:	f7fd f999 	bl	80035dc <set_reg_block>
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	400260b8 	.word	0x400260b8

080062b8 <STM32FXXXDMA1_stream7_cr_pinc>:
void STM32FXXXDMA1_stream7_cr_pinc(uint8_t bool)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 9, bool);
 80062c2:	79fb      	ldrb	r3, [r7, #7]
 80062c4:	2209      	movs	r2, #9
 80062c6:	2101      	movs	r1, #1
 80062c8:	4803      	ldr	r0, [pc, #12]	@ (80062d8 <STM32FXXXDMA1_stream7_cr_pinc+0x20>)
 80062ca:	f7fd f987 	bl	80035dc <set_reg_block>
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	400260b8 	.word	0x400260b8

080062dc <STM32FXXXDMA1_stream7_cr_circ>:
void STM32FXXXDMA1_stream7_cr_circ(uint8_t bool)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 8, bool);
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	2208      	movs	r2, #8
 80062ea:	2101      	movs	r1, #1
 80062ec:	4803      	ldr	r0, [pc, #12]	@ (80062fc <STM32FXXXDMA1_stream7_cr_circ+0x20>)
 80062ee:	f7fd f975 	bl	80035dc <set_reg_block>
}
 80062f2:	bf00      	nop
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	400260b8 	.word	0x400260b8

08006300 <STM32FXXXDMA1_stream7_cr_dir>:
void STM32FXXXDMA1_stream7_cr_dir(uint8_t value)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 2, 7, value);
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	2207      	movs	r2, #7
 800630e:	2102      	movs	r1, #2
 8006310:	4803      	ldr	r0, [pc, #12]	@ (8006320 <STM32FXXXDMA1_stream7_cr_dir+0x20>)
 8006312:	f7fd f963 	bl	80035dc <set_reg_block>
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	400260b8 	.word	0x400260b8

08006324 <STM32FXXXDMA1_stream7_cr_pfctrl>:
void STM32FXXXDMA1_stream7_cr_pfctrl(uint8_t bool)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 5, bool);
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	2205      	movs	r2, #5
 8006332:	2101      	movs	r1, #1
 8006334:	4803      	ldr	r0, [pc, #12]	@ (8006344 <STM32FXXXDMA1_stream7_cr_pfctrl+0x20>)
 8006336:	f7fd f951 	bl	80035dc <set_reg_block>
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	400260b8 	.word	0x400260b8

08006348 <STM32FXXXDMA1_stream7_cr_tcie>:
void STM32FXXXDMA1_stream7_cr_tcie(uint8_t bool)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 4, bool);
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	2204      	movs	r2, #4
 8006356:	2101      	movs	r1, #1
 8006358:	4803      	ldr	r0, [pc, #12]	@ (8006368 <STM32FXXXDMA1_stream7_cr_tcie+0x20>)
 800635a:	f7fd f93f 	bl	80035dc <set_reg_block>
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	400260b8 	.word	0x400260b8

0800636c <STM32FXXXDMA1_stream7_cr_htie>:
void STM32FXXXDMA1_stream7_cr_htie(uint8_t bool)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 3, bool);
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	2203      	movs	r2, #3
 800637a:	2101      	movs	r1, #1
 800637c:	4803      	ldr	r0, [pc, #12]	@ (800638c <STM32FXXXDMA1_stream7_cr_htie+0x20>)
 800637e:	f7fd f92d 	bl	80035dc <set_reg_block>
}
 8006382:	bf00      	nop
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	400260b8 	.word	0x400260b8

08006390 <STM32FXXXDMA1_stream7_cr_teie>:
void STM32FXXXDMA1_stream7_cr_teie(uint8_t bool)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 2, bool);
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	2202      	movs	r2, #2
 800639e:	2101      	movs	r1, #1
 80063a0:	4803      	ldr	r0, [pc, #12]	@ (80063b0 <STM32FXXXDMA1_stream7_cr_teie+0x20>)
 80063a2:	f7fd f91b 	bl	80035dc <set_reg_block>
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	400260b8 	.word	0x400260b8

080063b4 <STM32FXXXDMA1_stream7_cr_dmeie>:
void STM32FXXXDMA1_stream7_cr_dmeie(uint8_t bool)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 1, bool);
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	2201      	movs	r2, #1
 80063c2:	2101      	movs	r1, #1
 80063c4:	4803      	ldr	r0, [pc, #12]	@ (80063d4 <STM32FXXXDMA1_stream7_cr_dmeie+0x20>)
 80063c6:	f7fd f909 	bl	80035dc <set_reg_block>
}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	400260b8 	.word	0x400260b8

080063d8 <STM32FXXXDMA1_stream7_cr_en>:
void STM32FXXXDMA1_stream7_cr_en(uint8_t bool)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->CR, 1, 0, bool);
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	2200      	movs	r2, #0
 80063e6:	2101      	movs	r1, #1
 80063e8:	4803      	ldr	r0, [pc, #12]	@ (80063f8 <STM32FXXXDMA1_stream7_cr_en+0x20>)
 80063ea:	f7fd f8f7 	bl	80035dc <set_reg_block>
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	400260b8 	.word	0x400260b8

080063fc <stm32fxxx_dma1_stream7_cr_inic>:
/*** Inic DMA1 STREAM7 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma1_stream7_cr_inic(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma1_stream7_cr.chsel = STM32FXXXDMA1_stream7_cr_chsel;
 8006400:	4b1f      	ldr	r3, [pc, #124]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006402:	4a20      	ldr	r2, [pc, #128]	@ (8006484 <stm32fxxx_dma1_stream7_cr_inic+0x88>)
 8006404:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream7_cr.mburst = STM32FXXXDMA1_stream7_cr_mburst;
 8006406:	4b1e      	ldr	r3, [pc, #120]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006408:	4a1f      	ldr	r2, [pc, #124]	@ (8006488 <stm32fxxx_dma1_stream7_cr_inic+0x8c>)
 800640a:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream7_cr.pburst = STM32FXXXDMA1_stream7_cr_pburst;
 800640c:	4b1c      	ldr	r3, [pc, #112]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 800640e:	4a1f      	ldr	r2, [pc, #124]	@ (800648c <stm32fxxx_dma1_stream7_cr_inic+0x90>)
 8006410:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream7_cr.ct = STM32FXXXDMA1_stream7_cr_ct;
 8006412:	4b1b      	ldr	r3, [pc, #108]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006414:	4a1e      	ldr	r2, [pc, #120]	@ (8006490 <stm32fxxx_dma1_stream7_cr_inic+0x94>)
 8006416:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1_stream7_cr.dbm = STM32FXXXDMA1_stream7_cr_dbm;
 8006418:	4b19      	ldr	r3, [pc, #100]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 800641a:	4a1e      	ldr	r2, [pc, #120]	@ (8006494 <stm32fxxx_dma1_stream7_cr_inic+0x98>)
 800641c:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma1_stream7_cr.pl = STM32FXXXDMA1_stream7_cr_pl;
 800641e:	4b18      	ldr	r3, [pc, #96]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006420:	4a1d      	ldr	r2, [pc, #116]	@ (8006498 <stm32fxxx_dma1_stream7_cr_inic+0x9c>)
 8006422:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma1_stream7_cr.pincos = STM32FXXXDMA1_stream7_cr_pincos;
 8006424:	4b16      	ldr	r3, [pc, #88]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006426:	4a1d      	ldr	r2, [pc, #116]	@ (800649c <stm32fxxx_dma1_stream7_cr_inic+0xa0>)
 8006428:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma1_stream7_cr.msize = STM32FXXXDMA1_stream7_cr_msize;
 800642a:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 800642c:	4a1c      	ldr	r2, [pc, #112]	@ (80064a0 <stm32fxxx_dma1_stream7_cr_inic+0xa4>)
 800642e:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma1_stream7_cr.psize = STM32FXXXDMA1_stream7_cr_psize;
 8006430:	4b13      	ldr	r3, [pc, #76]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006432:	4a1c      	ldr	r2, [pc, #112]	@ (80064a4 <stm32fxxx_dma1_stream7_cr_inic+0xa8>)
 8006434:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma1_stream7_cr.minc = STM32FXXXDMA1_stream7_cr_minc;
 8006436:	4b12      	ldr	r3, [pc, #72]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006438:	4a1b      	ldr	r2, [pc, #108]	@ (80064a8 <stm32fxxx_dma1_stream7_cr_inic+0xac>)
 800643a:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma1_stream7_cr.pinc = STM32FXXXDMA1_stream7_cr_pinc;
 800643c:	4b10      	ldr	r3, [pc, #64]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 800643e:	4a1b      	ldr	r2, [pc, #108]	@ (80064ac <stm32fxxx_dma1_stream7_cr_inic+0xb0>)
 8006440:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma1_stream7_cr.circ = STM32FXXXDMA1_stream7_cr_circ;
 8006442:	4b0f      	ldr	r3, [pc, #60]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006444:	4a1a      	ldr	r2, [pc, #104]	@ (80064b0 <stm32fxxx_dma1_stream7_cr_inic+0xb4>)
 8006446:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma1_stream7_cr.dir = STM32FXXXDMA1_stream7_cr_dir;
 8006448:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 800644a:	4a1a      	ldr	r2, [pc, #104]	@ (80064b4 <stm32fxxx_dma1_stream7_cr_inic+0xb8>)
 800644c:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma1_stream7_cr.pfctrl = STM32FXXXDMA1_stream7_cr_pfctrl;
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006450:	4a19      	ldr	r2, [pc, #100]	@ (80064b8 <stm32fxxx_dma1_stream7_cr_inic+0xbc>)
 8006452:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma1_stream7_cr.tcie = STM32FXXXDMA1_stream7_cr_tcie;
 8006454:	4b0a      	ldr	r3, [pc, #40]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006456:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <stm32fxxx_dma1_stream7_cr_inic+0xc0>)
 8006458:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma1_stream7_cr.htie = STM32FXXXDMA1_stream7_cr_htie;
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 800645c:	4a18      	ldr	r2, [pc, #96]	@ (80064c0 <stm32fxxx_dma1_stream7_cr_inic+0xc4>)
 800645e:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma1_stream7_cr.teie = STM32FXXXDMA1_stream7_cr_teie;
 8006460:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006462:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <stm32fxxx_dma1_stream7_cr_inic+0xc8>)
 8006464:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma1_stream7_cr.dmeie = STM32FXXXDMA1_stream7_cr_dmeie;
 8006466:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 8006468:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <stm32fxxx_dma1_stream7_cr_inic+0xcc>)
 800646a:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma1_stream7_cr.en = STM32FXXXDMA1_stream7_cr_en;
 800646c:	4b04      	ldr	r3, [pc, #16]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
 800646e:	4a17      	ldr	r2, [pc, #92]	@ (80064cc <stm32fxxx_dma1_stream7_cr_inic+0xd0>)
 8006470:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma1_stream7_cr;
 8006472:	4b03      	ldr	r3, [pc, #12]	@ (8006480 <stm32fxxx_dma1_stream7_cr_inic+0x84>)
}
 8006474:	4618      	mov	r0, r3
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	200004a4 	.word	0x200004a4
 8006484:	08006151 	.word	0x08006151
 8006488:	08006175 	.word	0x08006175
 800648c:	08006199 	.word	0x08006199
 8006490:	080061bd 	.word	0x080061bd
 8006494:	080061e1 	.word	0x080061e1
 8006498:	08006205 	.word	0x08006205
 800649c:	08006229 	.word	0x08006229
 80064a0:	0800624d 	.word	0x0800624d
 80064a4:	08006271 	.word	0x08006271
 80064a8:	08006295 	.word	0x08006295
 80064ac:	080062b9 	.word	0x080062b9
 80064b0:	080062dd 	.word	0x080062dd
 80064b4:	08006301 	.word	0x08006301
 80064b8:	08006325 	.word	0x08006325
 80064bc:	08006349 	.word	0x08006349
 80064c0:	0800636d 	.word	0x0800636d
 80064c4:	08006391 	.word	0x08006391
 80064c8:	080063b5 	.word	0x080063b5
 80064cc:	080063d9 	.word	0x080063d9

080064d0 <stm32fxxx_dma1_stream7_ndt>:
/*** Inic DMA1 STREAM7 Function ***/
void stm32fxxx_dma1_stream7_ndt(uint16_t value)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4603      	mov	r3, r0
 80064d8:	80fb      	strh	r3, [r7, #6]
	DMA1_Stream7->NDTR = value;
 80064da:	4a04      	ldr	r2, [pc, #16]	@ (80064ec <stm32fxxx_dma1_stream7_ndt+0x1c>)
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	6053      	str	r3, [r2, #4]
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	400260b8 	.word	0x400260b8

080064f0 <stm32fxxx_dma1_stream7_par>:
void stm32fxxx_dma1_stream7_par(volatile long unsigned int periferal_addr)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	DMA1_Stream7->PAR = periferal_addr;
 80064f8:	4a04      	ldr	r2, [pc, #16]	@ (800650c <stm32fxxx_dma1_stream7_par+0x1c>)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6093      	str	r3, [r2, #8]
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	400260b8 	.word	0x400260b8

08006510 <stm32fxxx_dma1_stream7_m0a>:
void stm32fxxx_dma1_stream7_m0a(volatile long unsigned int mem0_addr)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	DMA1_Stream7->M0AR = mem0_addr;
 8006518:	4a04      	ldr	r2, [pc, #16]	@ (800652c <stm32fxxx_dma1_stream7_m0a+0x1c>)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60d3      	str	r3, [r2, #12]
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	400260b8 	.word	0x400260b8

08006530 <stm32fxxx_dma1_stream7_m1a>:
void stm32fxxx_dma1_stream7_m1a(volatile long unsigned int mem1_addr)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
	DMA1_Stream7->M1AR = mem1_addr;
 8006538:	4a04      	ldr	r2, [pc, #16]	@ (800654c <stm32fxxx_dma1_stream7_m1a+0x1c>)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6113      	str	r3, [r2, #16]
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	400260b8 	.word	0x400260b8

08006550 <STM32FXXXDMA1_stream0_fcr_feie>:
// DMA1 STREAM0 FCR
void STM32FXXXDMA1_stream0_fcr_feie(uint8_t bool)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->FCR, 1, 7, bool);
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	2207      	movs	r2, #7
 800655e:	2101      	movs	r1, #1
 8006560:	4803      	ldr	r0, [pc, #12]	@ (8006570 <STM32FXXXDMA1_stream0_fcr_feie+0x20>)
 8006562:	f7fd f83b 	bl	80035dc <set_reg_block>
}
 8006566:	bf00      	nop
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	40026024 	.word	0x40026024

08006574 <STM32FXXXDMA1_stream0_fcr_fs>:
void STM32FXXXDMA1_stream0_fcr_fs(uint8_t value)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->FCR, 3, 3, value);
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	2203      	movs	r2, #3
 8006582:	2103      	movs	r1, #3
 8006584:	4803      	ldr	r0, [pc, #12]	@ (8006594 <STM32FXXXDMA1_stream0_fcr_fs+0x20>)
 8006586:	f7fd f829 	bl	80035dc <set_reg_block>
}
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40026024 	.word	0x40026024

08006598 <STM32FXXXDMA1_stream0_fcr_dmdis>:
void STM32FXXXDMA1_stream0_fcr_dmdis(uint8_t bool)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->FCR, 1, 2, bool);
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	2202      	movs	r2, #2
 80065a6:	2101      	movs	r1, #1
 80065a8:	4803      	ldr	r0, [pc, #12]	@ (80065b8 <STM32FXXXDMA1_stream0_fcr_dmdis+0x20>)
 80065aa:	f7fd f817 	bl	80035dc <set_reg_block>
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40026024 	.word	0x40026024

080065bc <STM32FXXXDMA1_stream0_fcr_fth>:
void STM32FXXXDMA1_stream0_fcr_fth(uint8_t value)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream0->FCR, 2, 0, value);
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	2200      	movs	r2, #0
 80065ca:	2102      	movs	r1, #2
 80065cc:	4803      	ldr	r0, [pc, #12]	@ (80065dc <STM32FXXXDMA1_stream0_fcr_fth+0x20>)
 80065ce:	f7fd f805 	bl	80035dc <set_reg_block>
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	40026024 	.word	0x40026024

080065e0 <stm32fxxx_dma1_stream0_fcr_inic>:
/*** Inic DMA1 STREAM0 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma1_stream0_fcr_inic(void)
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma1_stream0_fcr.feie = STM32FXXXDMA1_stream0_fcr_feie;
 80065e4:	4b08      	ldr	r3, [pc, #32]	@ (8006608 <stm32fxxx_dma1_stream0_fcr_inic+0x28>)
 80065e6:	4a09      	ldr	r2, [pc, #36]	@ (800660c <stm32fxxx_dma1_stream0_fcr_inic+0x2c>)
 80065e8:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream0_fcr.fs = STM32FXXXDMA1_stream0_fcr_fs;
 80065ea:	4b07      	ldr	r3, [pc, #28]	@ (8006608 <stm32fxxx_dma1_stream0_fcr_inic+0x28>)
 80065ec:	4a08      	ldr	r2, [pc, #32]	@ (8006610 <stm32fxxx_dma1_stream0_fcr_inic+0x30>)
 80065ee:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream0_fcr.dmdis = STM32FXXXDMA1_stream0_fcr_dmdis;
 80065f0:	4b05      	ldr	r3, [pc, #20]	@ (8006608 <stm32fxxx_dma1_stream0_fcr_inic+0x28>)
 80065f2:	4a08      	ldr	r2, [pc, #32]	@ (8006614 <stm32fxxx_dma1_stream0_fcr_inic+0x34>)
 80065f4:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream0_fcr.fth = STM32FXXXDMA1_stream0_fcr_fth;
 80065f6:	4b04      	ldr	r3, [pc, #16]	@ (8006608 <stm32fxxx_dma1_stream0_fcr_inic+0x28>)
 80065f8:	4a07      	ldr	r2, [pc, #28]	@ (8006618 <stm32fxxx_dma1_stream0_fcr_inic+0x38>)
 80065fa:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma1_stream0_fcr;
 80065fc:	4b02      	ldr	r3, [pc, #8]	@ (8006608 <stm32fxxx_dma1_stream0_fcr_inic+0x28>)
}
 80065fe:	4618      	mov	r0, r3
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	200004f0 	.word	0x200004f0
 800660c:	08006551 	.word	0x08006551
 8006610:	08006575 	.word	0x08006575
 8006614:	08006599 	.word	0x08006599
 8006618:	080065bd 	.word	0x080065bd

0800661c <STM32FXXXDMA1_stream1_fcr_feie>:
// DMA1 STREAM1 FCR
void STM32FXXXDMA1_stream1_fcr_feie(uint8_t bool)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->FCR, 1, 7, bool);
 8006626:	79fb      	ldrb	r3, [r7, #7]
 8006628:	2207      	movs	r2, #7
 800662a:	2101      	movs	r1, #1
 800662c:	4803      	ldr	r0, [pc, #12]	@ (800663c <STM32FXXXDMA1_stream1_fcr_feie+0x20>)
 800662e:	f7fc ffd5 	bl	80035dc <set_reg_block>
}
 8006632:	bf00      	nop
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	4002603c 	.word	0x4002603c

08006640 <STM32FXXXDMA1_stream1_fcr_fs>:
void STM32FXXXDMA1_stream1_fcr_fs(uint8_t value)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->FCR, 3, 3, value);
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	2203      	movs	r2, #3
 800664e:	2103      	movs	r1, #3
 8006650:	4803      	ldr	r0, [pc, #12]	@ (8006660 <STM32FXXXDMA1_stream1_fcr_fs+0x20>)
 8006652:	f7fc ffc3 	bl	80035dc <set_reg_block>
}
 8006656:	bf00      	nop
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	4002603c 	.word	0x4002603c

08006664 <STM32FXXXDMA1_stream1_fcr_dmdis>:
void STM32FXXXDMA1_stream1_fcr_dmdis(uint8_t bool)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	4603      	mov	r3, r0
 800666c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->FCR, 1, 2, bool);
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	2202      	movs	r2, #2
 8006672:	2101      	movs	r1, #1
 8006674:	4803      	ldr	r0, [pc, #12]	@ (8006684 <STM32FXXXDMA1_stream1_fcr_dmdis+0x20>)
 8006676:	f7fc ffb1 	bl	80035dc <set_reg_block>
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	4002603c 	.word	0x4002603c

08006688 <STM32FXXXDMA1_stream1_fcr_fth>:
void STM32FXXXDMA1_stream1_fcr_fth(uint8_t value)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream1->FCR, 2, 0, value);
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	2200      	movs	r2, #0
 8006696:	2102      	movs	r1, #2
 8006698:	4803      	ldr	r0, [pc, #12]	@ (80066a8 <STM32FXXXDMA1_stream1_fcr_fth+0x20>)
 800669a:	f7fc ff9f 	bl	80035dc <set_reg_block>
}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	4002603c 	.word	0x4002603c

080066ac <stm32fxxx_dma1_stream1_fcr_inic>:
/*** Inic DMA1 STREAM1 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma1_stream1_fcr_inic(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma1_stream1_fcr.feie = STM32FXXXDMA1_stream1_fcr_feie;
 80066b0:	4b08      	ldr	r3, [pc, #32]	@ (80066d4 <stm32fxxx_dma1_stream1_fcr_inic+0x28>)
 80066b2:	4a09      	ldr	r2, [pc, #36]	@ (80066d8 <stm32fxxx_dma1_stream1_fcr_inic+0x2c>)
 80066b4:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream1_fcr.fs = STM32FXXXDMA1_stream1_fcr_fs;
 80066b6:	4b07      	ldr	r3, [pc, #28]	@ (80066d4 <stm32fxxx_dma1_stream1_fcr_inic+0x28>)
 80066b8:	4a08      	ldr	r2, [pc, #32]	@ (80066dc <stm32fxxx_dma1_stream1_fcr_inic+0x30>)
 80066ba:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream1_fcr.dmdis = STM32FXXXDMA1_stream1_fcr_dmdis;
 80066bc:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <stm32fxxx_dma1_stream1_fcr_inic+0x28>)
 80066be:	4a08      	ldr	r2, [pc, #32]	@ (80066e0 <stm32fxxx_dma1_stream1_fcr_inic+0x34>)
 80066c0:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream1_fcr.fth = STM32FXXXDMA1_stream1_fcr_fth;
 80066c2:	4b04      	ldr	r3, [pc, #16]	@ (80066d4 <stm32fxxx_dma1_stream1_fcr_inic+0x28>)
 80066c4:	4a07      	ldr	r2, [pc, #28]	@ (80066e4 <stm32fxxx_dma1_stream1_fcr_inic+0x38>)
 80066c6:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma1_stream1_fcr;
 80066c8:	4b02      	ldr	r3, [pc, #8]	@ (80066d4 <stm32fxxx_dma1_stream1_fcr_inic+0x28>)
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	20000500 	.word	0x20000500
 80066d8:	0800661d 	.word	0x0800661d
 80066dc:	08006641 	.word	0x08006641
 80066e0:	08006665 	.word	0x08006665
 80066e4:	08006689 	.word	0x08006689

080066e8 <STM32FXXXDMA1_stream2_fcr_feie>:
// DMA1 STREAM2 FCR
void STM32FXXXDMA1_stream2_fcr_feie(uint8_t bool)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->FCR, 1, 7, bool);
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	2207      	movs	r2, #7
 80066f6:	2101      	movs	r1, #1
 80066f8:	4803      	ldr	r0, [pc, #12]	@ (8006708 <STM32FXXXDMA1_stream2_fcr_feie+0x20>)
 80066fa:	f7fc ff6f 	bl	80035dc <set_reg_block>
}
 80066fe:	bf00      	nop
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40026054 	.word	0x40026054

0800670c <STM32FXXXDMA1_stream2_fcr_fs>:
void STM32FXXXDMA1_stream2_fcr_fs(uint8_t value)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->FCR, 3, 3, value);
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	2203      	movs	r2, #3
 800671a:	2103      	movs	r1, #3
 800671c:	4803      	ldr	r0, [pc, #12]	@ (800672c <STM32FXXXDMA1_stream2_fcr_fs+0x20>)
 800671e:	f7fc ff5d 	bl	80035dc <set_reg_block>
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40026054 	.word	0x40026054

08006730 <STM32FXXXDMA1_stream2_fcr_dmdis>:
void STM32FXXXDMA1_stream2_fcr_dmdis(uint8_t bool)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	4603      	mov	r3, r0
 8006738:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->FCR, 1, 2, bool);
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	2202      	movs	r2, #2
 800673e:	2101      	movs	r1, #1
 8006740:	4803      	ldr	r0, [pc, #12]	@ (8006750 <STM32FXXXDMA1_stream2_fcr_dmdis+0x20>)
 8006742:	f7fc ff4b 	bl	80035dc <set_reg_block>
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40026054 	.word	0x40026054

08006754 <STM32FXXXDMA1_stream2_fcr_fth>:
void STM32FXXXDMA1_stream2_fcr_fth(uint8_t value)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream2->FCR, 2, 0, value);
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	2200      	movs	r2, #0
 8006762:	2102      	movs	r1, #2
 8006764:	4803      	ldr	r0, [pc, #12]	@ (8006774 <STM32FXXXDMA1_stream2_fcr_fth+0x20>)
 8006766:	f7fc ff39 	bl	80035dc <set_reg_block>
}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40026054 	.word	0x40026054

08006778 <stm32fxxx_dma1_stream2_fcr_inic>:
/*** Inic DMA1 STREAM2 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma1_stream2_fcr_inic(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma1_stream2_fcr.feie = STM32FXXXDMA1_stream2_fcr_feie;
 800677c:	4b08      	ldr	r3, [pc, #32]	@ (80067a0 <stm32fxxx_dma1_stream2_fcr_inic+0x28>)
 800677e:	4a09      	ldr	r2, [pc, #36]	@ (80067a4 <stm32fxxx_dma1_stream2_fcr_inic+0x2c>)
 8006780:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream2_fcr.fs = STM32FXXXDMA1_stream2_fcr_fs;
 8006782:	4b07      	ldr	r3, [pc, #28]	@ (80067a0 <stm32fxxx_dma1_stream2_fcr_inic+0x28>)
 8006784:	4a08      	ldr	r2, [pc, #32]	@ (80067a8 <stm32fxxx_dma1_stream2_fcr_inic+0x30>)
 8006786:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream2_fcr.dmdis = STM32FXXXDMA1_stream2_fcr_dmdis;
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <stm32fxxx_dma1_stream2_fcr_inic+0x28>)
 800678a:	4a08      	ldr	r2, [pc, #32]	@ (80067ac <stm32fxxx_dma1_stream2_fcr_inic+0x34>)
 800678c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream2_fcr.fth = STM32FXXXDMA1_stream2_fcr_fth;
 800678e:	4b04      	ldr	r3, [pc, #16]	@ (80067a0 <stm32fxxx_dma1_stream2_fcr_inic+0x28>)
 8006790:	4a07      	ldr	r2, [pc, #28]	@ (80067b0 <stm32fxxx_dma1_stream2_fcr_inic+0x38>)
 8006792:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma1_stream2_fcr;
 8006794:	4b02      	ldr	r3, [pc, #8]	@ (80067a0 <stm32fxxx_dma1_stream2_fcr_inic+0x28>)
}
 8006796:	4618      	mov	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	20000510 	.word	0x20000510
 80067a4:	080066e9 	.word	0x080066e9
 80067a8:	0800670d 	.word	0x0800670d
 80067ac:	08006731 	.word	0x08006731
 80067b0:	08006755 	.word	0x08006755

080067b4 <STM32FXXXDMA1_stream3_fcr_feie>:
// DMA1 STREAM3 FCR
void STM32FXXXDMA1_stream3_fcr_feie(uint8_t bool)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->FCR, 1, 7, bool);
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	2207      	movs	r2, #7
 80067c2:	2101      	movs	r1, #1
 80067c4:	4803      	ldr	r0, [pc, #12]	@ (80067d4 <STM32FXXXDMA1_stream3_fcr_feie+0x20>)
 80067c6:	f7fc ff09 	bl	80035dc <set_reg_block>
}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	4002606c 	.word	0x4002606c

080067d8 <STM32FXXXDMA1_stream3_fcr_fs>:
void STM32FXXXDMA1_stream3_fcr_fs(uint8_t value)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->FCR, 3, 3, value);
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	2203      	movs	r2, #3
 80067e6:	2103      	movs	r1, #3
 80067e8:	4803      	ldr	r0, [pc, #12]	@ (80067f8 <STM32FXXXDMA1_stream3_fcr_fs+0x20>)
 80067ea:	f7fc fef7 	bl	80035dc <set_reg_block>
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	4002606c 	.word	0x4002606c

080067fc <STM32FXXXDMA1_stream3_fcr_dmdis>:
void STM32FXXXDMA1_stream3_fcr_dmdis(uint8_t bool)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->FCR, 1, 2, bool);
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	2202      	movs	r2, #2
 800680a:	2101      	movs	r1, #1
 800680c:	4803      	ldr	r0, [pc, #12]	@ (800681c <STM32FXXXDMA1_stream3_fcr_dmdis+0x20>)
 800680e:	f7fc fee5 	bl	80035dc <set_reg_block>
}
 8006812:	bf00      	nop
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	4002606c 	.word	0x4002606c

08006820 <STM32FXXXDMA1_stream3_fcr_fth>:
void STM32FXXXDMA1_stream3_fcr_fth(uint8_t value)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream3->FCR, 2, 0, value);
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	2200      	movs	r2, #0
 800682e:	2102      	movs	r1, #2
 8006830:	4803      	ldr	r0, [pc, #12]	@ (8006840 <STM32FXXXDMA1_stream3_fcr_fth+0x20>)
 8006832:	f7fc fed3 	bl	80035dc <set_reg_block>
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	4002606c 	.word	0x4002606c

08006844 <stm32fxxx_dma1_stream3_fcr_inic>:
/*** Inic DMA1 STREAM3 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma1_stream3_fcr_inic(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma1_stream3_fcr.feie = STM32FXXXDMA1_stream3_fcr_feie;
 8006848:	4b08      	ldr	r3, [pc, #32]	@ (800686c <stm32fxxx_dma1_stream3_fcr_inic+0x28>)
 800684a:	4a09      	ldr	r2, [pc, #36]	@ (8006870 <stm32fxxx_dma1_stream3_fcr_inic+0x2c>)
 800684c:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream3_fcr.fs = STM32FXXXDMA1_stream3_fcr_fs;
 800684e:	4b07      	ldr	r3, [pc, #28]	@ (800686c <stm32fxxx_dma1_stream3_fcr_inic+0x28>)
 8006850:	4a08      	ldr	r2, [pc, #32]	@ (8006874 <stm32fxxx_dma1_stream3_fcr_inic+0x30>)
 8006852:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream3_fcr.dmdis = STM32FXXXDMA1_stream3_fcr_dmdis;
 8006854:	4b05      	ldr	r3, [pc, #20]	@ (800686c <stm32fxxx_dma1_stream3_fcr_inic+0x28>)
 8006856:	4a08      	ldr	r2, [pc, #32]	@ (8006878 <stm32fxxx_dma1_stream3_fcr_inic+0x34>)
 8006858:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream3_fcr.fth = STM32FXXXDMA1_stream3_fcr_fth;
 800685a:	4b04      	ldr	r3, [pc, #16]	@ (800686c <stm32fxxx_dma1_stream3_fcr_inic+0x28>)
 800685c:	4a07      	ldr	r2, [pc, #28]	@ (800687c <stm32fxxx_dma1_stream3_fcr_inic+0x38>)
 800685e:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma1_stream3_fcr;
 8006860:	4b02      	ldr	r3, [pc, #8]	@ (800686c <stm32fxxx_dma1_stream3_fcr_inic+0x28>)
}
 8006862:	4618      	mov	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	20000520 	.word	0x20000520
 8006870:	080067b5 	.word	0x080067b5
 8006874:	080067d9 	.word	0x080067d9
 8006878:	080067fd 	.word	0x080067fd
 800687c:	08006821 	.word	0x08006821

08006880 <STM32FXXXDMA1_stream4_fcr_feie>:
// DMA1 STREAM4 FCR
void STM32FXXXDMA1_stream4_fcr_feie(uint8_t bool)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->FCR, 1, 7, bool);
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	2207      	movs	r2, #7
 800688e:	2101      	movs	r1, #1
 8006890:	4803      	ldr	r0, [pc, #12]	@ (80068a0 <STM32FXXXDMA1_stream4_fcr_feie+0x20>)
 8006892:	f7fc fea3 	bl	80035dc <set_reg_block>
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40026084 	.word	0x40026084

080068a4 <STM32FXXXDMA1_stream4_fcr_fs>:
void STM32FXXXDMA1_stream4_fcr_fs(uint8_t value)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	4603      	mov	r3, r0
 80068ac:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->FCR, 3, 3, value);
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	2203      	movs	r2, #3
 80068b2:	2103      	movs	r1, #3
 80068b4:	4803      	ldr	r0, [pc, #12]	@ (80068c4 <STM32FXXXDMA1_stream4_fcr_fs+0x20>)
 80068b6:	f7fc fe91 	bl	80035dc <set_reg_block>
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40026084 	.word	0x40026084

080068c8 <STM32FXXXDMA1_stream4_fcr_dmdis>:
void STM32FXXXDMA1_stream4_fcr_dmdis(uint8_t bool)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->FCR, 1, 2, bool);
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	2202      	movs	r2, #2
 80068d6:	2101      	movs	r1, #1
 80068d8:	4803      	ldr	r0, [pc, #12]	@ (80068e8 <STM32FXXXDMA1_stream4_fcr_dmdis+0x20>)
 80068da:	f7fc fe7f 	bl	80035dc <set_reg_block>
}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40026084 	.word	0x40026084

080068ec <STM32FXXXDMA1_stream4_fcr_fth>:
void STM32FXXXDMA1_stream4_fcr_fth(uint8_t value)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream4->FCR, 2, 0, value);
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	2200      	movs	r2, #0
 80068fa:	2102      	movs	r1, #2
 80068fc:	4803      	ldr	r0, [pc, #12]	@ (800690c <STM32FXXXDMA1_stream4_fcr_fth+0x20>)
 80068fe:	f7fc fe6d 	bl	80035dc <set_reg_block>
}
 8006902:	bf00      	nop
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40026084 	.word	0x40026084

08006910 <stm32fxxx_dma1_stream4_fcr_inic>:
/*** Inic DMA1 STREAM4 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma1_stream4_fcr_inic(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma1_stream4_fcr.feie = STM32FXXXDMA1_stream4_fcr_feie;
 8006914:	4b08      	ldr	r3, [pc, #32]	@ (8006938 <stm32fxxx_dma1_stream4_fcr_inic+0x28>)
 8006916:	4a09      	ldr	r2, [pc, #36]	@ (800693c <stm32fxxx_dma1_stream4_fcr_inic+0x2c>)
 8006918:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream4_fcr.fs = STM32FXXXDMA1_stream4_fcr_fs;
 800691a:	4b07      	ldr	r3, [pc, #28]	@ (8006938 <stm32fxxx_dma1_stream4_fcr_inic+0x28>)
 800691c:	4a08      	ldr	r2, [pc, #32]	@ (8006940 <stm32fxxx_dma1_stream4_fcr_inic+0x30>)
 800691e:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream4_fcr.dmdis = STM32FXXXDMA1_stream4_fcr_dmdis;
 8006920:	4b05      	ldr	r3, [pc, #20]	@ (8006938 <stm32fxxx_dma1_stream4_fcr_inic+0x28>)
 8006922:	4a08      	ldr	r2, [pc, #32]	@ (8006944 <stm32fxxx_dma1_stream4_fcr_inic+0x34>)
 8006924:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream4_fcr.fth = STM32FXXXDMA1_stream4_fcr_fth;
 8006926:	4b04      	ldr	r3, [pc, #16]	@ (8006938 <stm32fxxx_dma1_stream4_fcr_inic+0x28>)
 8006928:	4a07      	ldr	r2, [pc, #28]	@ (8006948 <stm32fxxx_dma1_stream4_fcr_inic+0x38>)
 800692a:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma1_stream4_fcr;
 800692c:	4b02      	ldr	r3, [pc, #8]	@ (8006938 <stm32fxxx_dma1_stream4_fcr_inic+0x28>)
}
 800692e:	4618      	mov	r0, r3
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	20000530 	.word	0x20000530
 800693c:	08006881 	.word	0x08006881
 8006940:	080068a5 	.word	0x080068a5
 8006944:	080068c9 	.word	0x080068c9
 8006948:	080068ed 	.word	0x080068ed

0800694c <STM32FXXXDMA1_stream5_fcr_feie>:
// DMA1 STREAM5 FCR
void STM32FXXXDMA1_stream5_fcr_feie(uint8_t bool)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->FCR, 1, 7, bool);
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	2207      	movs	r2, #7
 800695a:	2101      	movs	r1, #1
 800695c:	4803      	ldr	r0, [pc, #12]	@ (800696c <STM32FXXXDMA1_stream5_fcr_feie+0x20>)
 800695e:	f7fc fe3d 	bl	80035dc <set_reg_block>
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	4002609c 	.word	0x4002609c

08006970 <STM32FXXXDMA1_stream5_fcr_fs>:
void STM32FXXXDMA1_stream5_fcr_fs(uint8_t value)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->FCR, 3, 3, value);
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	2203      	movs	r2, #3
 800697e:	2103      	movs	r1, #3
 8006980:	4803      	ldr	r0, [pc, #12]	@ (8006990 <STM32FXXXDMA1_stream5_fcr_fs+0x20>)
 8006982:	f7fc fe2b 	bl	80035dc <set_reg_block>
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	4002609c 	.word	0x4002609c

08006994 <STM32FXXXDMA1_stream5_fcr_dmdis>:
void STM32FXXXDMA1_stream5_fcr_dmdis(uint8_t bool)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->FCR, 1, 2, bool);
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	2202      	movs	r2, #2
 80069a2:	2101      	movs	r1, #1
 80069a4:	4803      	ldr	r0, [pc, #12]	@ (80069b4 <STM32FXXXDMA1_stream5_fcr_dmdis+0x20>)
 80069a6:	f7fc fe19 	bl	80035dc <set_reg_block>
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	4002609c 	.word	0x4002609c

080069b8 <STM32FXXXDMA1_stream5_fcr_fth>:
void STM32FXXXDMA1_stream5_fcr_fth(uint8_t value)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream5->FCR, 2, 0, value);
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2102      	movs	r1, #2
 80069c8:	4803      	ldr	r0, [pc, #12]	@ (80069d8 <STM32FXXXDMA1_stream5_fcr_fth+0x20>)
 80069ca:	f7fc fe07 	bl	80035dc <set_reg_block>
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	4002609c 	.word	0x4002609c

080069dc <stm32fxxx_dma1_stream5_fcr_inic>:
/*** Inic DMA1 STREAM5 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma1_stream5_fcr_inic(void)
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma1_stream5_fcr.feie = STM32FXXXDMA1_stream5_fcr_feie;
 80069e0:	4b08      	ldr	r3, [pc, #32]	@ (8006a04 <stm32fxxx_dma1_stream5_fcr_inic+0x28>)
 80069e2:	4a09      	ldr	r2, [pc, #36]	@ (8006a08 <stm32fxxx_dma1_stream5_fcr_inic+0x2c>)
 80069e4:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream5_fcr.fs = STM32FXXXDMA1_stream5_fcr_fs;
 80069e6:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <stm32fxxx_dma1_stream5_fcr_inic+0x28>)
 80069e8:	4a08      	ldr	r2, [pc, #32]	@ (8006a0c <stm32fxxx_dma1_stream5_fcr_inic+0x30>)
 80069ea:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream5_fcr.dmdis = STM32FXXXDMA1_stream5_fcr_dmdis;
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <stm32fxxx_dma1_stream5_fcr_inic+0x28>)
 80069ee:	4a08      	ldr	r2, [pc, #32]	@ (8006a10 <stm32fxxx_dma1_stream5_fcr_inic+0x34>)
 80069f0:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream5_fcr.fth = STM32FXXXDMA1_stream5_fcr_fth;
 80069f2:	4b04      	ldr	r3, [pc, #16]	@ (8006a04 <stm32fxxx_dma1_stream5_fcr_inic+0x28>)
 80069f4:	4a07      	ldr	r2, [pc, #28]	@ (8006a14 <stm32fxxx_dma1_stream5_fcr_inic+0x38>)
 80069f6:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma1_stream5_fcr;
 80069f8:	4b02      	ldr	r3, [pc, #8]	@ (8006a04 <stm32fxxx_dma1_stream5_fcr_inic+0x28>)
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	20000540 	.word	0x20000540
 8006a08:	0800694d 	.word	0x0800694d
 8006a0c:	08006971 	.word	0x08006971
 8006a10:	08006995 	.word	0x08006995
 8006a14:	080069b9 	.word	0x080069b9

08006a18 <STM32FXXXDMA1_stream6_fcr_feie>:
// DMA1 STREAM6 FCR
void STM32FXXXDMA1_stream6_fcr_feie(uint8_t bool)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->FCR, 1, 7, bool);
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	2207      	movs	r2, #7
 8006a26:	2101      	movs	r1, #1
 8006a28:	4803      	ldr	r0, [pc, #12]	@ (8006a38 <STM32FXXXDMA1_stream6_fcr_feie+0x20>)
 8006a2a:	f7fc fdd7 	bl	80035dc <set_reg_block>
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	400260b4 	.word	0x400260b4

08006a3c <STM32FXXXDMA1_stream6_fcr_fs>:
void STM32FXXXDMA1_stream6_fcr_fs(uint8_t value)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	4603      	mov	r3, r0
 8006a44:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->FCR, 3, 3, value);
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	2203      	movs	r2, #3
 8006a4a:	2103      	movs	r1, #3
 8006a4c:	4803      	ldr	r0, [pc, #12]	@ (8006a5c <STM32FXXXDMA1_stream6_fcr_fs+0x20>)
 8006a4e:	f7fc fdc5 	bl	80035dc <set_reg_block>
}
 8006a52:	bf00      	nop
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	400260b4 	.word	0x400260b4

08006a60 <STM32FXXXDMA1_stream6_fcr_dmdis>:
void STM32FXXXDMA1_stream6_fcr_dmdis(uint8_t bool)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	4603      	mov	r3, r0
 8006a68:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->FCR, 1, 2, bool);
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4803      	ldr	r0, [pc, #12]	@ (8006a80 <STM32FXXXDMA1_stream6_fcr_dmdis+0x20>)
 8006a72:	f7fc fdb3 	bl	80035dc <set_reg_block>
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	400260b4 	.word	0x400260b4

08006a84 <STM32FXXXDMA1_stream6_fcr_fth>:
void STM32FXXXDMA1_stream6_fcr_fth(uint8_t value)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream6->FCR, 2, 0, value);
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	2200      	movs	r2, #0
 8006a92:	2102      	movs	r1, #2
 8006a94:	4803      	ldr	r0, [pc, #12]	@ (8006aa4 <STM32FXXXDMA1_stream6_fcr_fth+0x20>)
 8006a96:	f7fc fda1 	bl	80035dc <set_reg_block>
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	400260b4 	.word	0x400260b4

08006aa8 <stm32fxxx_dma1_stream6_fcr_inic>:
/*** Inic DMA1 STREAM6 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma1_stream6_fcr_inic(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma1_stream6_fcr.feie = STM32FXXXDMA1_stream6_fcr_feie;
 8006aac:	4b08      	ldr	r3, [pc, #32]	@ (8006ad0 <stm32fxxx_dma1_stream6_fcr_inic+0x28>)
 8006aae:	4a09      	ldr	r2, [pc, #36]	@ (8006ad4 <stm32fxxx_dma1_stream6_fcr_inic+0x2c>)
 8006ab0:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream6_fcr.fs = STM32FXXXDMA1_stream6_fcr_fs;
 8006ab2:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <stm32fxxx_dma1_stream6_fcr_inic+0x28>)
 8006ab4:	4a08      	ldr	r2, [pc, #32]	@ (8006ad8 <stm32fxxx_dma1_stream6_fcr_inic+0x30>)
 8006ab6:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream6_fcr.dmdis = STM32FXXXDMA1_stream6_fcr_dmdis;
 8006ab8:	4b05      	ldr	r3, [pc, #20]	@ (8006ad0 <stm32fxxx_dma1_stream6_fcr_inic+0x28>)
 8006aba:	4a08      	ldr	r2, [pc, #32]	@ (8006adc <stm32fxxx_dma1_stream6_fcr_inic+0x34>)
 8006abc:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream6_fcr.fth = STM32FXXXDMA1_stream6_fcr_fth;
 8006abe:	4b04      	ldr	r3, [pc, #16]	@ (8006ad0 <stm32fxxx_dma1_stream6_fcr_inic+0x28>)
 8006ac0:	4a07      	ldr	r2, [pc, #28]	@ (8006ae0 <stm32fxxx_dma1_stream6_fcr_inic+0x38>)
 8006ac2:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma1_stream6_fcr;
 8006ac4:	4b02      	ldr	r3, [pc, #8]	@ (8006ad0 <stm32fxxx_dma1_stream6_fcr_inic+0x28>)
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	20000550 	.word	0x20000550
 8006ad4:	08006a19 	.word	0x08006a19
 8006ad8:	08006a3d 	.word	0x08006a3d
 8006adc:	08006a61 	.word	0x08006a61
 8006ae0:	08006a85 	.word	0x08006a85

08006ae4 <STM32FXXXDMA1_stream7_fcr_feie>:
// DMA1 STREAM0 FCR
void STM32FXXXDMA1_stream7_fcr_feie(uint8_t bool)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->FCR, 1, 7, bool);
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	2207      	movs	r2, #7
 8006af2:	2101      	movs	r1, #1
 8006af4:	4803      	ldr	r0, [pc, #12]	@ (8006b04 <STM32FXXXDMA1_stream7_fcr_feie+0x20>)
 8006af6:	f7fc fd71 	bl	80035dc <set_reg_block>
}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	400260cc 	.word	0x400260cc

08006b08 <STM32FXXXDMA1_stream7_fcr_fs>:
void STM32FXXXDMA1_stream7_fcr_fs(uint8_t value)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->FCR, 3, 3, value);
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	2203      	movs	r2, #3
 8006b16:	2103      	movs	r1, #3
 8006b18:	4803      	ldr	r0, [pc, #12]	@ (8006b28 <STM32FXXXDMA1_stream7_fcr_fs+0x20>)
 8006b1a:	f7fc fd5f 	bl	80035dc <set_reg_block>
}
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	400260cc 	.word	0x400260cc

08006b2c <STM32FXXXDMA1_stream7_fcr_dmdis>:
void STM32FXXXDMA1_stream7_fcr_dmdis(uint8_t bool)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->FCR, 1, 2, bool);
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	4803      	ldr	r0, [pc, #12]	@ (8006b4c <STM32FXXXDMA1_stream7_fcr_dmdis+0x20>)
 8006b3e:	f7fc fd4d 	bl	80035dc <set_reg_block>
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	400260cc 	.word	0x400260cc

08006b50 <STM32FXXXDMA1_stream7_fcr_fth>:
void STM32FXXXDMA1_stream7_fcr_fth(uint8_t value)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA1_Stream7->FCR, 2, 0, value);
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2102      	movs	r1, #2
 8006b60:	4803      	ldr	r0, [pc, #12]	@ (8006b70 <STM32FXXXDMA1_stream7_fcr_fth+0x20>)
 8006b62:	f7fc fd3b 	bl	80035dc <set_reg_block>
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	400260cc 	.word	0x400260cc

08006b74 <stm32fxxx_dma1_stream7_fcr_inic>:
/*** Inic DMA1 STREAM7 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma1_stream7_fcr_inic(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma1_stream7_fcr.feie = STM32FXXXDMA1_stream7_fcr_feie;
 8006b78:	4b08      	ldr	r3, [pc, #32]	@ (8006b9c <stm32fxxx_dma1_stream7_fcr_inic+0x28>)
 8006b7a:	4a09      	ldr	r2, [pc, #36]	@ (8006ba0 <stm32fxxx_dma1_stream7_fcr_inic+0x2c>)
 8006b7c:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma1_stream7_fcr.fs = STM32FXXXDMA1_stream7_fcr_fs;
 8006b7e:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <stm32fxxx_dma1_stream7_fcr_inic+0x28>)
 8006b80:	4a08      	ldr	r2, [pc, #32]	@ (8006ba4 <stm32fxxx_dma1_stream7_fcr_inic+0x30>)
 8006b82:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1_stream7_fcr.dmdis = STM32FXXXDMA1_stream7_fcr_dmdis;
 8006b84:	4b05      	ldr	r3, [pc, #20]	@ (8006b9c <stm32fxxx_dma1_stream7_fcr_inic+0x28>)
 8006b86:	4a08      	ldr	r2, [pc, #32]	@ (8006ba8 <stm32fxxx_dma1_stream7_fcr_inic+0x34>)
 8006b88:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1_stream7_fcr.fth = STM32FXXXDMA1_stream7_fcr_fth;
 8006b8a:	4b04      	ldr	r3, [pc, #16]	@ (8006b9c <stm32fxxx_dma1_stream7_fcr_inic+0x28>)
 8006b8c:	4a07      	ldr	r2, [pc, #28]	@ (8006bac <stm32fxxx_dma1_stream7_fcr_inic+0x38>)
 8006b8e:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma1_stream7_fcr;
 8006b90:	4b02      	ldr	r3, [pc, #8]	@ (8006b9c <stm32fxxx_dma1_stream7_fcr_inic+0x28>)
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	20000560 	.word	0x20000560
 8006ba0:	08006ae5 	.word	0x08006ae5
 8006ba4:	08006b09 	.word	0x08006b09
 8006ba8:	08006b2d 	.word	0x08006b2d
 8006bac:	08006b51 	.word	0x08006b51

08006bb0 <dma1_circ_cfg>:
/*** FUNC ***/
void dma1_circ_cfg(volatile long unsigned int* p_addr, volatile long unsigned int* m_addr, uint8_t stream_n, uint8_t channel_n, uint16_t quant_d, uint8_t p_size, uint8_t m_size, uint8_t priority, uint8_t dir)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	4611      	mov	r1, r2
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	71fb      	strb	r3, [r7, #7]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	71bb      	strb	r3, [r7, #6]
	set_reg_block(&RCC->AHB1ENR, 1, 22, 1);
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	2216      	movs	r2, #22
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4899      	ldr	r0, [pc, #612]	@ (8006e34 <dma1_circ_cfg+0x284>)
 8006bce:	f7fc fd05 	bl	80035dc <set_reg_block>
	// Filter to Default
	if(stream_n > 7){ stream_n = 0;}
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	2b07      	cmp	r3, #7
 8006bd6:	d901      	bls.n	8006bdc <dma1_circ_cfg+0x2c>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	71fb      	strb	r3, [r7, #7]
	if(channel_n > 7){ channel_n = 0;}
 8006bdc:	79bb      	ldrb	r3, [r7, #6]
 8006bde:	2b07      	cmp	r3, #7
 8006be0:	d901      	bls.n	8006be6 <dma1_circ_cfg+0x36>
 8006be2:	2300      	movs	r3, #0
 8006be4:	71bb      	strb	r3, [r7, #6]
	if(quant_d > 65535){ quant_d = 1;}
	if(p_size > 2){ p_size = 0;}
 8006be6:	7f3b      	ldrb	r3, [r7, #28]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <dma1_circ_cfg+0x40>
 8006bec:	2300      	movs	r3, #0
 8006bee:	773b      	strb	r3, [r7, #28]
	if(m_size > 2){ m_size = 0;}
 8006bf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d902      	bls.n	8006bfe <dma1_circ_cfg+0x4e>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 3020 	strb.w	r3, [r7, #32]
	if(priority > 3){ priority = 0;}
 8006bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d902      	bls.n	8006c0c <dma1_circ_cfg+0x5c>
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if( p_addr && m_addr ){
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 810b 	beq.w	8006e2a <dma1_circ_cfg+0x27a>
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8107 	beq.w	8006e2a <dma1_circ_cfg+0x27a>
		/*** Verify Ready for Parameter ***/
		set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 1, 0, 0);
 8006c1c:	79fa      	ldrb	r2, [r7, #7]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	4413      	add	r3, r2
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	461a      	mov	r2, r3
 8006c28:	4b83      	ldr	r3, [pc, #524]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006c2a:	4413      	add	r3, r2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2200      	movs	r2, #0
 8006c32:	2101      	movs	r1, #1
 8006c34:	f7fc fcd2 	bl	80035dc <set_reg_block>
		for(time_out = 200; get_reg_block((DMA1_Stream0 + stream_n)->CR, 1, 0) && time_out; time_out--);
 8006c38:	4b80      	ldr	r3, [pc, #512]	@ (8006e3c <dma1_circ_cfg+0x28c>)
 8006c3a:	22c8      	movs	r2, #200	@ 0xc8
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e004      	b.n	8006c4a <dma1_circ_cfg+0x9a>
 8006c40:	4b7e      	ldr	r3, [pc, #504]	@ (8006e3c <dma1_circ_cfg+0x28c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	4a7d      	ldr	r2, [pc, #500]	@ (8006e3c <dma1_circ_cfg+0x28c>)
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	79fa      	ldrb	r2, [r7, #7]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	4413      	add	r3, r2
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	461a      	mov	r2, r3
 8006c56:	4b78      	ldr	r3, [pc, #480]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006c58:	4413      	add	r3, r2
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fc fc56 	bl	8003512 <get_reg_block>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <dma1_circ_cfg+0xc4>
 8006c6c:	4b73      	ldr	r3, [pc, #460]	@ (8006e3c <dma1_circ_cfg+0x28c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e5      	bne.n	8006c40 <dma1_circ_cfg+0x90>
		/*** Parameter Configure ***/
		(DMA1_Stream0 + stream_n)->PAR = (volatile long unsigned int) p_addr;
 8006c74:	79fa      	ldrb	r2, [r7, #7]
 8006c76:	4613      	mov	r3, r2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4413      	add	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	4b6d      	ldr	r3, [pc, #436]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006c82:	4413      	add	r3, r2
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	609a      	str	r2, [r3, #8]
		(DMA1_Stream0 + stream_n)->M0AR = (volatile long unsigned int) m_addr;
 8006c88:	79fa      	ldrb	r2, [r7, #7]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4413      	add	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	461a      	mov	r2, r3
 8006c94:	4b68      	ldr	r3, [pc, #416]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006c96:	4413      	add	r3, r2
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	60da      	str	r2, [r3, #12]
		set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 1, 5, 0); // 0 -> dma, 1 -> peri
 8006c9c:	79fa      	ldrb	r2, [r7, #7]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4b63      	ldr	r3, [pc, #396]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006caa:	4413      	add	r3, r2
 8006cac:	4618      	mov	r0, r3
 8006cae:	2300      	movs	r3, #0
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	f7fc fc92 	bl	80035dc <set_reg_block>
		set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 3, 25, channel_n); // channel
 8006cb8:	79fa      	ldrb	r2, [r7, #7]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4413      	add	r3, r2
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006cc6:	4413      	add	r3, r2
 8006cc8:	4618      	mov	r0, r3
 8006cca:	79bb      	ldrb	r3, [r7, #6]
 8006ccc:	2219      	movs	r2, #25
 8006cce:	2103      	movs	r1, #3
 8006cd0:	f7fc fc84 	bl	80035dc <set_reg_block>
		(DMA1_Stream0 + stream_n)->NDTR = quant_d; //
 8006cd4:	79fa      	ldrb	r2, [r7, #7]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	4413      	add	r3, r2
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4b55      	ldr	r3, [pc, #340]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006ce2:	4413      	add	r3, r2
 8006ce4:	8b3a      	ldrh	r2, [r7, #24]
 8006ce6:	605a      	str	r2, [r3, #4]
		set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 2, 13, m_size); // msize 2 -> 32bit
 8006ce8:	79fa      	ldrb	r2, [r7, #7]
 8006cea:	4613      	mov	r3, r2
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	4413      	add	r3, r2
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4b50      	ldr	r3, [pc, #320]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006cf6:	4413      	add	r3, r2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006cfe:	220d      	movs	r2, #13
 8006d00:	2102      	movs	r1, #2
 8006d02:	f7fc fc6b 	bl	80035dc <set_reg_block>
		set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 2, 11, p_size); // psize 1 -> 16bit
 8006d06:	79fa      	ldrb	r2, [r7, #7]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	4413      	add	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	461a      	mov	r2, r3
 8006d12:	4b49      	ldr	r3, [pc, #292]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006d14:	4413      	add	r3, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	7f3b      	ldrb	r3, [r7, #28]
 8006d1a:	220b      	movs	r2, #11
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	f7fc fc5d 	bl	80035dc <set_reg_block>
		set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 2, 16, priority); // priority
 8006d22:	79fa      	ldrb	r2, [r7, #7]
 8006d24:	4613      	mov	r3, r2
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	4413      	add	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4b42      	ldr	r3, [pc, #264]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006d30:	4413      	add	r3, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d38:	2210      	movs	r2, #16
 8006d3a:	2102      	movs	r1, #2
 8006d3c:	f7fc fc4e 	bl	80035dc <set_reg_block>
		if(dir){
 8006d40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d02a      	beq.n	8006d9e <dma1_circ_cfg+0x1ee>
			set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 2, 6, 1); // DIR
 8006d48:	79fa      	ldrb	r2, [r7, #7]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	4413      	add	r3, r2
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	461a      	mov	r2, r3
 8006d54:	4b38      	ldr	r3, [pc, #224]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006d56:	4413      	add	r3, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	2206      	movs	r2, #6
 8006d5e:	2102      	movs	r1, #2
 8006d60:	f7fc fc3c 	bl	80035dc <set_reg_block>
			set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 1, 9, 1); // PINC
 8006d64:	79fa      	ldrb	r2, [r7, #7]
 8006d66:	4613      	mov	r3, r2
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	4413      	add	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	4b31      	ldr	r3, [pc, #196]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006d72:	4413      	add	r3, r2
 8006d74:	4618      	mov	r0, r3
 8006d76:	2301      	movs	r3, #1
 8006d78:	2209      	movs	r2, #9
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	f7fc fc2e 	bl	80035dc <set_reg_block>
			set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 1, 10, 0); // MINC
 8006d80:	79fa      	ldrb	r2, [r7, #7]
 8006d82:	4613      	mov	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006d8e:	4413      	add	r3, r2
 8006d90:	4618      	mov	r0, r3
 8006d92:	2300      	movs	r3, #0
 8006d94:	220a      	movs	r2, #10
 8006d96:	2101      	movs	r1, #1
 8006d98:	f7fc fc20 	bl	80035dc <set_reg_block>
 8006d9c:	e029      	b.n	8006df2 <dma1_circ_cfg+0x242>
		}else{
			set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 2, 6, 0); // DIR
 8006d9e:	79fa      	ldrb	r2, [r7, #7]
 8006da0:	4613      	mov	r3, r2
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	4413      	add	r3, r2
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	461a      	mov	r2, r3
 8006daa:	4b23      	ldr	r3, [pc, #140]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006dac:	4413      	add	r3, r2
 8006dae:	4618      	mov	r0, r3
 8006db0:	2300      	movs	r3, #0
 8006db2:	2206      	movs	r2, #6
 8006db4:	2102      	movs	r1, #2
 8006db6:	f7fc fc11 	bl	80035dc <set_reg_block>
			set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 1, 9, 0); // PINC
 8006dba:	79fa      	ldrb	r2, [r7, #7]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	4413      	add	r3, r2
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006dc8:	4413      	add	r3, r2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2209      	movs	r2, #9
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	f7fc fc03 	bl	80035dc <set_reg_block>
			set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 1, 10, 1); // MINC
 8006dd6:	79fa      	ldrb	r2, [r7, #7]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	4413      	add	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	461a      	mov	r2, r3
 8006de2:	4b15      	ldr	r3, [pc, #84]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006de4:	4413      	add	r3, r2
 8006de6:	4618      	mov	r0, r3
 8006de8:	2301      	movs	r3, #1
 8006dea:	220a      	movs	r2, #10
 8006dec:	2101      	movs	r1, #1
 8006dee:	f7fc fbf5 	bl	80035dc <set_reg_block>
		}
		set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 1, 8, 1); // CIRC
 8006df2:	79fa      	ldrb	r2, [r7, #7]
 8006df4:	4613      	mov	r3, r2
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	4413      	add	r3, r2
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006e00:	4413      	add	r3, r2
 8006e02:	4618      	mov	r0, r3
 8006e04:	2301      	movs	r3, #1
 8006e06:	2208      	movs	r2, #8
 8006e08:	2101      	movs	r1, #1
 8006e0a:	f7fc fbe7 	bl	80035dc <set_reg_block>
		set_reg_block(&(DMA1_Stream0 + stream_n)->CR, 1, 0, 1); // ENABLE
 8006e0e:	79fa      	ldrb	r2, [r7, #7]
 8006e10:	4613      	mov	r3, r2
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	4413      	add	r3, r2
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <dma1_circ_cfg+0x288>)
 8006e1c:	4413      	add	r3, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	2301      	movs	r3, #1
 8006e22:	2200      	movs	r2, #0
 8006e24:	2101      	movs	r1, #1
 8006e26:	f7fc fbd9 	bl	80035dc <set_reg_block>
	}
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40023830 	.word	0x40023830
 8006e38:	40026010 	.word	0x40026010
 8006e3c:	200008d8 	.word	0x200008d8

08006e40 <stm32fxxx_dma1_func_inic>:
/*** Inic FUNC ***/
STM32FXXXDMA_func* stm32fxxx_dma1_func_inic(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0

	stm32fxxx_dma1_func.circ_cfg = dma1_circ_cfg;
 8006e44:	4b04      	ldr	r3, [pc, #16]	@ (8006e58 <stm32fxxx_dma1_func_inic+0x18>)
 8006e46:	4a05      	ldr	r2, [pc, #20]	@ (8006e5c <stm32fxxx_dma1_func_inic+0x1c>)
 8006e48:	601a      	str	r2, [r3, #0]
	return &stm32fxxx_dma1_func;
 8006e4a:	4b03      	ldr	r3, [pc, #12]	@ (8006e58 <stm32fxxx_dma1_func_inic+0x18>)
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000570 	.word	0x20000570
 8006e5c:	08006bb1 	.word	0x08006bb1

08006e60 <dma1_enable>:
/****************************************************/
/**** DMA1 INIC Procedure & Function Definition *****/
/****************************************************/
STM32FXXXDMA1obj* dma1_enable(void)
{
 8006e60:	b598      	push	{r3, r4, r7, lr}
 8006e62:	af00      	add	r7, sp, #0

	/*** DMA1 Bit Mapping Link ***/
	stm32fxxx_dma1.sr = stm32fxxx_dma1_sr_inic();
 8006e64:	f7fd fb38 	bl	80044d8 <stm32fxxx_dma1_sr_inic>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	4a76      	ldr	r2, [pc, #472]	@ (8007044 <dma1_enable+0x1e4>)
 8006e6c:	6213      	str	r3, [r2, #32]

	stm32fxxx_dma1.stream[0]->cr = stm32fxxx_dma1_stream0_cr_inic();
 8006e6e:	4b75      	ldr	r3, [pc, #468]	@ (8007044 <dma1_enable+0x1e4>)
 8006e70:	681c      	ldr	r4, [r3, #0]
 8006e72:	f7fd fcc3 	bl	80047fc <stm32fxxx_dma1_stream0_cr_inic>
 8006e76:	4603      	mov	r3, r0
 8006e78:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma1.stream[0]->fcr = stm32fxxx_dma1_stream0_fcr_inic();
 8006e7a:	4b72      	ldr	r3, [pc, #456]	@ (8007044 <dma1_enable+0x1e4>)
 8006e7c:	681c      	ldr	r4, [r3, #0]
 8006e7e:	f7ff fbaf 	bl	80065e0 <stm32fxxx_dma1_stream0_fcr_inic>
 8006e82:	4603      	mov	r3, r0
 8006e84:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma1.stream[0]->ndt = stm32fxxx_dma1_stream0_ndt;
 8006e86:	4b6f      	ldr	r3, [pc, #444]	@ (8007044 <dma1_enable+0x1e4>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a6f      	ldr	r2, [pc, #444]	@ (8007048 <dma1_enable+0x1e8>)
 8006e8c:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1.stream[0]->par = stm32fxxx_dma1_stream0_par;
 8006e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8007044 <dma1_enable+0x1e4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a6e      	ldr	r2, [pc, #440]	@ (800704c <dma1_enable+0x1ec>)
 8006e94:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1.stream[0]->m0a = stm32fxxx_dma1_stream0_m0a;
 8006e96:	4b6b      	ldr	r3, [pc, #428]	@ (8007044 <dma1_enable+0x1e4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6d      	ldr	r2, [pc, #436]	@ (8007050 <dma1_enable+0x1f0>)
 8006e9c:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1.stream[0]->m1a = stm32fxxx_dma1_stream0_m1a;
 8006e9e:	4b69      	ldr	r3, [pc, #420]	@ (8007044 <dma1_enable+0x1e4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a6c      	ldr	r2, [pc, #432]	@ (8007054 <dma1_enable+0x1f4>)
 8006ea4:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma1.stream[1]->cr = stm32fxxx_dma1_stream1_cr_inic();
 8006ea6:	4b67      	ldr	r3, [pc, #412]	@ (8007044 <dma1_enable+0x1e4>)
 8006ea8:	685c      	ldr	r4, [r3, #4]
 8006eaa:	f7fd fea7 	bl	8004bfc <stm32fxxx_dma1_stream1_cr_inic>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma1.stream[1]->fcr = stm32fxxx_dma1_stream1_fcr_inic();
 8006eb2:	4b64      	ldr	r3, [pc, #400]	@ (8007044 <dma1_enable+0x1e4>)
 8006eb4:	685c      	ldr	r4, [r3, #4]
 8006eb6:	f7ff fbf9 	bl	80066ac <stm32fxxx_dma1_stream1_fcr_inic>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma1.stream[1]->ndt = stm32fxxx_dma1_stream1_ndt;
 8006ebe:	4b61      	ldr	r3, [pc, #388]	@ (8007044 <dma1_enable+0x1e4>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	4a65      	ldr	r2, [pc, #404]	@ (8007058 <dma1_enable+0x1f8>)
 8006ec4:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1.stream[1]->par = stm32fxxx_dma1_stream1_par;
 8006ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8007044 <dma1_enable+0x1e4>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	4a64      	ldr	r2, [pc, #400]	@ (800705c <dma1_enable+0x1fc>)
 8006ecc:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1.stream[1]->m0a = stm32fxxx_dma1_stream1_m0a;
 8006ece:	4b5d      	ldr	r3, [pc, #372]	@ (8007044 <dma1_enable+0x1e4>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4a63      	ldr	r2, [pc, #396]	@ (8007060 <dma1_enable+0x200>)
 8006ed4:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1.stream[1]->m1a = stm32fxxx_dma1_stream1_m1a;
 8006ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8007044 <dma1_enable+0x1e4>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	4a62      	ldr	r2, [pc, #392]	@ (8007064 <dma1_enable+0x204>)
 8006edc:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma1.stream[2]->cr = stm32fxxx_dma1_stream2_cr_inic();
 8006ede:	4b59      	ldr	r3, [pc, #356]	@ (8007044 <dma1_enable+0x1e4>)
 8006ee0:	689c      	ldr	r4, [r3, #8]
 8006ee2:	f7fe f88b 	bl	8004ffc <stm32fxxx_dma1_stream2_cr_inic>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma1.stream[2]->fcr = stm32fxxx_dma1_stream2_fcr_inic();
 8006eea:	4b56      	ldr	r3, [pc, #344]	@ (8007044 <dma1_enable+0x1e4>)
 8006eec:	689c      	ldr	r4, [r3, #8]
 8006eee:	f7ff fc43 	bl	8006778 <stm32fxxx_dma1_stream2_fcr_inic>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma1.stream[2]->ndt = stm32fxxx_dma1_stream2_ndt;
 8006ef6:	4b53      	ldr	r3, [pc, #332]	@ (8007044 <dma1_enable+0x1e4>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	4a5b      	ldr	r2, [pc, #364]	@ (8007068 <dma1_enable+0x208>)
 8006efc:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1.stream[2]->par = stm32fxxx_dma1_stream2_par;
 8006efe:	4b51      	ldr	r3, [pc, #324]	@ (8007044 <dma1_enable+0x1e4>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	4a5a      	ldr	r2, [pc, #360]	@ (800706c <dma1_enable+0x20c>)
 8006f04:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1.stream[2]->m0a = stm32fxxx_dma1_stream2_m0a;
 8006f06:	4b4f      	ldr	r3, [pc, #316]	@ (8007044 <dma1_enable+0x1e4>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	4a59      	ldr	r2, [pc, #356]	@ (8007070 <dma1_enable+0x210>)
 8006f0c:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1.stream[2]->m1a = stm32fxxx_dma1_stream2_m1a;
 8006f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8007044 <dma1_enable+0x1e4>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	4a58      	ldr	r2, [pc, #352]	@ (8007074 <dma1_enable+0x214>)
 8006f14:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma1.stream[3]->cr = stm32fxxx_dma1_stream3_cr_inic();
 8006f16:	4b4b      	ldr	r3, [pc, #300]	@ (8007044 <dma1_enable+0x1e4>)
 8006f18:	68dc      	ldr	r4, [r3, #12]
 8006f1a:	f7fe fa6f 	bl	80053fc <stm32fxxx_dma1_stream3_cr_inic>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma1.stream[3]->fcr = stm32fxxx_dma1_stream3_fcr_inic();
 8006f22:	4b48      	ldr	r3, [pc, #288]	@ (8007044 <dma1_enable+0x1e4>)
 8006f24:	68dc      	ldr	r4, [r3, #12]
 8006f26:	f7ff fc8d 	bl	8006844 <stm32fxxx_dma1_stream3_fcr_inic>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma1.stream[3]->ndt = stm32fxxx_dma1_stream3_ndt;
 8006f2e:	4b45      	ldr	r3, [pc, #276]	@ (8007044 <dma1_enable+0x1e4>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	4a51      	ldr	r2, [pc, #324]	@ (8007078 <dma1_enable+0x218>)
 8006f34:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1.stream[3]->par = stm32fxxx_dma1_stream3_par;
 8006f36:	4b43      	ldr	r3, [pc, #268]	@ (8007044 <dma1_enable+0x1e4>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	4a50      	ldr	r2, [pc, #320]	@ (800707c <dma1_enable+0x21c>)
 8006f3c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1.stream[3]->m0a = stm32fxxx_dma1_stream3_m0a;
 8006f3e:	4b41      	ldr	r3, [pc, #260]	@ (8007044 <dma1_enable+0x1e4>)
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	4a4f      	ldr	r2, [pc, #316]	@ (8007080 <dma1_enable+0x220>)
 8006f44:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1.stream[3]->m1a = stm32fxxx_dma1_stream3_m1a;
 8006f46:	4b3f      	ldr	r3, [pc, #252]	@ (8007044 <dma1_enable+0x1e4>)
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	4a4e      	ldr	r2, [pc, #312]	@ (8007084 <dma1_enable+0x224>)
 8006f4c:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma1.stream[4]->cr = stm32fxxx_dma1_stream4_cr_inic();
 8006f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8007044 <dma1_enable+0x1e4>)
 8006f50:	691c      	ldr	r4, [r3, #16]
 8006f52:	f7fe fc53 	bl	80057fc <stm32fxxx_dma1_stream4_cr_inic>
 8006f56:	4603      	mov	r3, r0
 8006f58:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma1.stream[4]->fcr = stm32fxxx_dma1_stream4_fcr_inic();
 8006f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8007044 <dma1_enable+0x1e4>)
 8006f5c:	691c      	ldr	r4, [r3, #16]
 8006f5e:	f7ff fcd7 	bl	8006910 <stm32fxxx_dma1_stream4_fcr_inic>
 8006f62:	4603      	mov	r3, r0
 8006f64:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma1.stream[4]->ndt = stm32fxxx_dma1_stream4_ndt;
 8006f66:	4b37      	ldr	r3, [pc, #220]	@ (8007044 <dma1_enable+0x1e4>)
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	4a47      	ldr	r2, [pc, #284]	@ (8007088 <dma1_enable+0x228>)
 8006f6c:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1.stream[4]->par = stm32fxxx_dma1_stream4_par;
 8006f6e:	4b35      	ldr	r3, [pc, #212]	@ (8007044 <dma1_enable+0x1e4>)
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	4a46      	ldr	r2, [pc, #280]	@ (800708c <dma1_enable+0x22c>)
 8006f74:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1.stream[4]->m0a = stm32fxxx_dma1_stream4_m0a;
 8006f76:	4b33      	ldr	r3, [pc, #204]	@ (8007044 <dma1_enable+0x1e4>)
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	4a45      	ldr	r2, [pc, #276]	@ (8007090 <dma1_enable+0x230>)
 8006f7c:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1.stream[4]->m1a = stm32fxxx_dma1_stream4_m1a;
 8006f7e:	4b31      	ldr	r3, [pc, #196]	@ (8007044 <dma1_enable+0x1e4>)
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	4a44      	ldr	r2, [pc, #272]	@ (8007094 <dma1_enable+0x234>)
 8006f84:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma1.stream[5]->cr = stm32fxxx_dma1_stream5_cr_inic();
 8006f86:	4b2f      	ldr	r3, [pc, #188]	@ (8007044 <dma1_enable+0x1e4>)
 8006f88:	695c      	ldr	r4, [r3, #20]
 8006f8a:	f7fe fe37 	bl	8005bfc <stm32fxxx_dma1_stream5_cr_inic>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma1.stream[5]->fcr = stm32fxxx_dma1_stream5_fcr_inic();
 8006f92:	4b2c      	ldr	r3, [pc, #176]	@ (8007044 <dma1_enable+0x1e4>)
 8006f94:	695c      	ldr	r4, [r3, #20]
 8006f96:	f7ff fd21 	bl	80069dc <stm32fxxx_dma1_stream5_fcr_inic>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma1.stream[5]->ndt = stm32fxxx_dma1_stream5_ndt;
 8006f9e:	4b29      	ldr	r3, [pc, #164]	@ (8007044 <dma1_enable+0x1e4>)
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8007098 <dma1_enable+0x238>)
 8006fa4:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1.stream[5]->par = stm32fxxx_dma1_stream5_par;
 8006fa6:	4b27      	ldr	r3, [pc, #156]	@ (8007044 <dma1_enable+0x1e4>)
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	4a3c      	ldr	r2, [pc, #240]	@ (800709c <dma1_enable+0x23c>)
 8006fac:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1.stream[5]->m0a = stm32fxxx_dma1_stream5_m0a;
 8006fae:	4b25      	ldr	r3, [pc, #148]	@ (8007044 <dma1_enable+0x1e4>)
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80070a0 <dma1_enable+0x240>)
 8006fb4:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1.stream[5]->m1a = stm32fxxx_dma1_stream5_m1a;
 8006fb6:	4b23      	ldr	r3, [pc, #140]	@ (8007044 <dma1_enable+0x1e4>)
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	4a3a      	ldr	r2, [pc, #232]	@ (80070a4 <dma1_enable+0x244>)
 8006fbc:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma1.stream[6]->cr = stm32fxxx_dma1_stream6_cr_inic();
 8006fbe:	4b21      	ldr	r3, [pc, #132]	@ (8007044 <dma1_enable+0x1e4>)
 8006fc0:	699c      	ldr	r4, [r3, #24]
 8006fc2:	f7ff f81b 	bl	8005ffc <stm32fxxx_dma1_stream6_cr_inic>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma1.stream[6]->fcr = stm32fxxx_dma1_stream6_fcr_inic();
 8006fca:	4b1e      	ldr	r3, [pc, #120]	@ (8007044 <dma1_enable+0x1e4>)
 8006fcc:	699c      	ldr	r4, [r3, #24]
 8006fce:	f7ff fd6b 	bl	8006aa8 <stm32fxxx_dma1_stream6_fcr_inic>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma1.stream[6]->ndt = stm32fxxx_dma1_stream6_ndt;
 8006fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8007044 <dma1_enable+0x1e4>)
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	4a33      	ldr	r2, [pc, #204]	@ (80070a8 <dma1_enable+0x248>)
 8006fdc:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1.stream[6]->par = stm32fxxx_dma1_stream6_par;
 8006fde:	4b19      	ldr	r3, [pc, #100]	@ (8007044 <dma1_enable+0x1e4>)
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	4a32      	ldr	r2, [pc, #200]	@ (80070ac <dma1_enable+0x24c>)
 8006fe4:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1.stream[6]->m0a = stm32fxxx_dma1_stream6_m0a;
 8006fe6:	4b17      	ldr	r3, [pc, #92]	@ (8007044 <dma1_enable+0x1e4>)
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	4a31      	ldr	r2, [pc, #196]	@ (80070b0 <dma1_enable+0x250>)
 8006fec:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1.stream[6]->m1a = stm32fxxx_dma1_stream6_m1a;
 8006fee:	4b15      	ldr	r3, [pc, #84]	@ (8007044 <dma1_enable+0x1e4>)
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	4a30      	ldr	r2, [pc, #192]	@ (80070b4 <dma1_enable+0x254>)
 8006ff4:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma1.stream[7]->cr = stm32fxxx_dma1_stream7_cr_inic();
 8006ff6:	4b13      	ldr	r3, [pc, #76]	@ (8007044 <dma1_enable+0x1e4>)
 8006ff8:	69dc      	ldr	r4, [r3, #28]
 8006ffa:	f7ff f9ff 	bl	80063fc <stm32fxxx_dma1_stream7_cr_inic>
 8006ffe:	4603      	mov	r3, r0
 8007000:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma1.stream[7]->fcr = stm32fxxx_dma1_stream7_fcr_inic();
 8007002:	4b10      	ldr	r3, [pc, #64]	@ (8007044 <dma1_enable+0x1e4>)
 8007004:	69dc      	ldr	r4, [r3, #28]
 8007006:	f7ff fdb5 	bl	8006b74 <stm32fxxx_dma1_stream7_fcr_inic>
 800700a:	4603      	mov	r3, r0
 800700c:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma1.stream[7]->ndt = stm32fxxx_dma1_stream7_ndt;
 800700e:	4b0d      	ldr	r3, [pc, #52]	@ (8007044 <dma1_enable+0x1e4>)
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	4a29      	ldr	r2, [pc, #164]	@ (80070b8 <dma1_enable+0x258>)
 8007014:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma1.stream[7]->par = stm32fxxx_dma1_stream7_par;
 8007016:	4b0b      	ldr	r3, [pc, #44]	@ (8007044 <dma1_enable+0x1e4>)
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	4a28      	ldr	r2, [pc, #160]	@ (80070bc <dma1_enable+0x25c>)
 800701c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma1.stream[7]->m0a = stm32fxxx_dma1_stream7_m0a;
 800701e:	4b09      	ldr	r3, [pc, #36]	@ (8007044 <dma1_enable+0x1e4>)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	4a27      	ldr	r2, [pc, #156]	@ (80070c0 <dma1_enable+0x260>)
 8007024:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma1.stream[7]->m1a = stm32fxxx_dma1_stream7_m1a;
 8007026:	4b07      	ldr	r3, [pc, #28]	@ (8007044 <dma1_enable+0x1e4>)
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	4a26      	ldr	r2, [pc, #152]	@ (80070c4 <dma1_enable+0x264>)
 800702c:	611a      	str	r2, [r3, #16]
	/*** Other ***/
	stm32fxxx_dma1.func = stm32fxxx_dma1_func_inic();
 800702e:	f7ff ff07 	bl	8006e40 <stm32fxxx_dma1_func_inic>
 8007032:	4603      	mov	r3, r0
 8007034:	4a03      	ldr	r2, [pc, #12]	@ (8007044 <dma1_enable+0x1e4>)
 8007036:	6293      	str	r3, [r2, #40]	@ 0x28
	stm32fxxx_dma1.clock = STM32FXXXDma1Clock;
 8007038:	4b02      	ldr	r3, [pc, #8]	@ (8007044 <dma1_enable+0x1e4>)
 800703a:	4a23      	ldr	r2, [pc, #140]	@ (80070c8 <dma1_enable+0x268>)
 800703c:	625a      	str	r2, [r3, #36]	@ 0x24
	return &stm32fxxx_dma1;
 800703e:	4b01      	ldr	r3, [pc, #4]	@ (8007044 <dma1_enable+0x1e4>)
}
 8007040:	4618      	mov	r0, r3
 8007042:	bd98      	pop	{r3, r4, r7, pc}
 8007044:	20000574 	.word	0x20000574
 8007048:	080048d1 	.word	0x080048d1
 800704c:	080048f1 	.word	0x080048f1
 8007050:	08004911 	.word	0x08004911
 8007054:	08004931 	.word	0x08004931
 8007058:	08004cd1 	.word	0x08004cd1
 800705c:	08004cf1 	.word	0x08004cf1
 8007060:	08004d11 	.word	0x08004d11
 8007064:	08004d31 	.word	0x08004d31
 8007068:	080050d1 	.word	0x080050d1
 800706c:	080050f1 	.word	0x080050f1
 8007070:	08005111 	.word	0x08005111
 8007074:	08005131 	.word	0x08005131
 8007078:	080054d1 	.word	0x080054d1
 800707c:	080054f1 	.word	0x080054f1
 8007080:	08005511 	.word	0x08005511
 8007084:	08005531 	.word	0x08005531
 8007088:	080058d1 	.word	0x080058d1
 800708c:	080058f1 	.word	0x080058f1
 8007090:	08005911 	.word	0x08005911
 8007094:	08005931 	.word	0x08005931
 8007098:	08005cd1 	.word	0x08005cd1
 800709c:	08005cf1 	.word	0x08005cf1
 80070a0:	08005d11 	.word	0x08005d11
 80070a4:	08005d31 	.word	0x08005d31
 80070a8:	080060d1 	.word	0x080060d1
 80070ac:	080060f1 	.word	0x080060f1
 80070b0:	08006111 	.word	0x08006111
 80070b4:	08006131 	.word	0x08006131
 80070b8:	080064d1 	.word	0x080064d1
 80070bc:	080064f1 	.word	0x080064f1
 80070c0:	08006511 	.word	0x08006511
 80070c4:	08006531 	.word	0x08006531
 80070c8:	08003c19 	.word	0x08003c19

080070cc <STM32FXXXDMA2_sr_tcif>:
/********************************************/
/************* DMA2 Bit Mapping *************/
/********************************************/
// SR
uint8_t STM32FXXXDMA2_sr_tcif(uint8_t stream_n)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
	switch(stream_n){
 80070da:	79fb      	ldrb	r3, [r7, #7]
 80070dc:	2b07      	cmp	r3, #7
 80070de:	d863      	bhi.n	80071a8 <STM32FXXXDMA2_sr_tcif+0xdc>
 80070e0:	a201      	add	r2, pc, #4	@ (adr r2, 80070e8 <STM32FXXXDMA2_sr_tcif+0x1c>)
 80070e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e6:	bf00      	nop
 80070e8:	08007109 	.word	0x08007109
 80070ec:	0800711d 	.word	0x0800711d
 80070f0:	08007131 	.word	0x08007131
 80070f4:	08007145 	.word	0x08007145
 80070f8:	08007159 	.word	0x08007159
 80070fc:	0800716d 	.word	0x0800716d
 8007100:	08007181 	.word	0x08007181
 8007104:	08007195 	.word	0x08007195
		case 0:
			value = get_reg_block(DMA2->LISR, 1, 5);
 8007108:	4b2a      	ldr	r3, [pc, #168]	@ (80071b4 <STM32FXXXDMA2_sr_tcif+0xe8>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2205      	movs	r2, #5
 800710e:	2101      	movs	r1, #1
 8007110:	4618      	mov	r0, r3
 8007112:	f7fc f9fe 	bl	8003512 <get_reg_block>
 8007116:	4603      	mov	r3, r0
 8007118:	73fb      	strb	r3, [r7, #15]
		break;
 800711a:	e046      	b.n	80071aa <STM32FXXXDMA2_sr_tcif+0xde>
		case 1:
			value = get_reg_block(DMA2->LISR, 1, 11);
 800711c:	4b25      	ldr	r3, [pc, #148]	@ (80071b4 <STM32FXXXDMA2_sr_tcif+0xe8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	220b      	movs	r2, #11
 8007122:	2101      	movs	r1, #1
 8007124:	4618      	mov	r0, r3
 8007126:	f7fc f9f4 	bl	8003512 <get_reg_block>
 800712a:	4603      	mov	r3, r0
 800712c:	73fb      	strb	r3, [r7, #15]
		break;
 800712e:	e03c      	b.n	80071aa <STM32FXXXDMA2_sr_tcif+0xde>
		case 2:
			value = get_reg_block(DMA2->LISR, 1, 21);
 8007130:	4b20      	ldr	r3, [pc, #128]	@ (80071b4 <STM32FXXXDMA2_sr_tcif+0xe8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2215      	movs	r2, #21
 8007136:	2101      	movs	r1, #1
 8007138:	4618      	mov	r0, r3
 800713a:	f7fc f9ea 	bl	8003512 <get_reg_block>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
		break;
 8007142:	e032      	b.n	80071aa <STM32FXXXDMA2_sr_tcif+0xde>
		case 3:
			value = get_reg_block(DMA2->LISR, 1, 27);
 8007144:	4b1b      	ldr	r3, [pc, #108]	@ (80071b4 <STM32FXXXDMA2_sr_tcif+0xe8>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	221b      	movs	r2, #27
 800714a:	2101      	movs	r1, #1
 800714c:	4618      	mov	r0, r3
 800714e:	f7fc f9e0 	bl	8003512 <get_reg_block>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
		break;
 8007156:	e028      	b.n	80071aa <STM32FXXXDMA2_sr_tcif+0xde>
		case 4:
			value = get_reg_block(DMA2->HISR, 1, 5);
 8007158:	4b16      	ldr	r3, [pc, #88]	@ (80071b4 <STM32FXXXDMA2_sr_tcif+0xe8>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2205      	movs	r2, #5
 800715e:	2101      	movs	r1, #1
 8007160:	4618      	mov	r0, r3
 8007162:	f7fc f9d6 	bl	8003512 <get_reg_block>
 8007166:	4603      	mov	r3, r0
 8007168:	73fb      	strb	r3, [r7, #15]
		break;
 800716a:	e01e      	b.n	80071aa <STM32FXXXDMA2_sr_tcif+0xde>
		case 5:
			value = get_reg_block(DMA2->HISR, 1, 11);
 800716c:	4b11      	ldr	r3, [pc, #68]	@ (80071b4 <STM32FXXXDMA2_sr_tcif+0xe8>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	220b      	movs	r2, #11
 8007172:	2101      	movs	r1, #1
 8007174:	4618      	mov	r0, r3
 8007176:	f7fc f9cc 	bl	8003512 <get_reg_block>
 800717a:	4603      	mov	r3, r0
 800717c:	73fb      	strb	r3, [r7, #15]
		break;
 800717e:	e014      	b.n	80071aa <STM32FXXXDMA2_sr_tcif+0xde>
		case 6:
			value = get_reg_block(DMA2->HISR, 1, 21);
 8007180:	4b0c      	ldr	r3, [pc, #48]	@ (80071b4 <STM32FXXXDMA2_sr_tcif+0xe8>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2215      	movs	r2, #21
 8007186:	2101      	movs	r1, #1
 8007188:	4618      	mov	r0, r3
 800718a:	f7fc f9c2 	bl	8003512 <get_reg_block>
 800718e:	4603      	mov	r3, r0
 8007190:	73fb      	strb	r3, [r7, #15]
		break;
 8007192:	e00a      	b.n	80071aa <STM32FXXXDMA2_sr_tcif+0xde>
		case 7:
			value = get_reg_block(DMA2->HISR, 1, 27);
 8007194:	4b07      	ldr	r3, [pc, #28]	@ (80071b4 <STM32FXXXDMA2_sr_tcif+0xe8>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	221b      	movs	r2, #27
 800719a:	2101      	movs	r1, #1
 800719c:	4618      	mov	r0, r3
 800719e:	f7fc f9b8 	bl	8003512 <get_reg_block>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73fb      	strb	r3, [r7, #15]
		break;
 80071a6:	e000      	b.n	80071aa <STM32FXXXDMA2_sr_tcif+0xde>
	default: break;
 80071a8:	bf00      	nop
	}
	return value;
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40026400 	.word	0x40026400

080071b8 <STM32FXXXDMA2_sr_clear_tcif>:
void STM32FXXXDMA2_sr_clear_tcif(uint8_t stream_n)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	71fb      	strb	r3, [r7, #7]
	switch(stream_n){
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	2b07      	cmp	r3, #7
 80071c6:	d84b      	bhi.n	8007260 <STM32FXXXDMA2_sr_clear_tcif+0xa8>
 80071c8:	a201      	add	r2, pc, #4	@ (adr r2, 80071d0 <STM32FXXXDMA2_sr_clear_tcif+0x18>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071f1 	.word	0x080071f1
 80071d4:	080071ff 	.word	0x080071ff
 80071d8:	0800720d 	.word	0x0800720d
 80071dc:	0800721b 	.word	0x0800721b
 80071e0:	08007229 	.word	0x08007229
 80071e4:	08007237 	.word	0x08007237
 80071e8:	08007245 	.word	0x08007245
 80071ec:	08007253 	.word	0x08007253
		case 0:
			set_reg_block(&DMA2->LIFCR, 1, 5, 1);
 80071f0:	2301      	movs	r3, #1
 80071f2:	2205      	movs	r2, #5
 80071f4:	2101      	movs	r1, #1
 80071f6:	481d      	ldr	r0, [pc, #116]	@ (800726c <STM32FXXXDMA2_sr_clear_tcif+0xb4>)
 80071f8:	f7fc f9f0 	bl	80035dc <set_reg_block>
		break;
 80071fc:	e031      	b.n	8007262 <STM32FXXXDMA2_sr_clear_tcif+0xaa>
		case 1:
			set_reg_block(&DMA2->LIFCR, 1, 11, 1);
 80071fe:	2301      	movs	r3, #1
 8007200:	220b      	movs	r2, #11
 8007202:	2101      	movs	r1, #1
 8007204:	4819      	ldr	r0, [pc, #100]	@ (800726c <STM32FXXXDMA2_sr_clear_tcif+0xb4>)
 8007206:	f7fc f9e9 	bl	80035dc <set_reg_block>
		break;
 800720a:	e02a      	b.n	8007262 <STM32FXXXDMA2_sr_clear_tcif+0xaa>
		case 2:
			set_reg_block(&DMA2->LIFCR, 1, 21, 1);
 800720c:	2301      	movs	r3, #1
 800720e:	2215      	movs	r2, #21
 8007210:	2101      	movs	r1, #1
 8007212:	4816      	ldr	r0, [pc, #88]	@ (800726c <STM32FXXXDMA2_sr_clear_tcif+0xb4>)
 8007214:	f7fc f9e2 	bl	80035dc <set_reg_block>
		break;
 8007218:	e023      	b.n	8007262 <STM32FXXXDMA2_sr_clear_tcif+0xaa>
		case 3:
			set_reg_block(&DMA2->LIFCR, 1, 27, 1);
 800721a:	2301      	movs	r3, #1
 800721c:	221b      	movs	r2, #27
 800721e:	2101      	movs	r1, #1
 8007220:	4812      	ldr	r0, [pc, #72]	@ (800726c <STM32FXXXDMA2_sr_clear_tcif+0xb4>)
 8007222:	f7fc f9db 	bl	80035dc <set_reg_block>
		break;
 8007226:	e01c      	b.n	8007262 <STM32FXXXDMA2_sr_clear_tcif+0xaa>
		case 4:
			set_reg_block(&DMA2->HIFCR, 1, 5, 1);
 8007228:	2301      	movs	r3, #1
 800722a:	2205      	movs	r2, #5
 800722c:	2101      	movs	r1, #1
 800722e:	4810      	ldr	r0, [pc, #64]	@ (8007270 <STM32FXXXDMA2_sr_clear_tcif+0xb8>)
 8007230:	f7fc f9d4 	bl	80035dc <set_reg_block>
		break;
 8007234:	e015      	b.n	8007262 <STM32FXXXDMA2_sr_clear_tcif+0xaa>
		case 5:
			set_reg_block(&DMA2->HIFCR, 1, 11, 1);
 8007236:	2301      	movs	r3, #1
 8007238:	220b      	movs	r2, #11
 800723a:	2101      	movs	r1, #1
 800723c:	480c      	ldr	r0, [pc, #48]	@ (8007270 <STM32FXXXDMA2_sr_clear_tcif+0xb8>)
 800723e:	f7fc f9cd 	bl	80035dc <set_reg_block>
		break;
 8007242:	e00e      	b.n	8007262 <STM32FXXXDMA2_sr_clear_tcif+0xaa>
		case 6:
			set_reg_block(&DMA2->HIFCR, 1, 21, 1);
 8007244:	2301      	movs	r3, #1
 8007246:	2215      	movs	r2, #21
 8007248:	2101      	movs	r1, #1
 800724a:	4809      	ldr	r0, [pc, #36]	@ (8007270 <STM32FXXXDMA2_sr_clear_tcif+0xb8>)
 800724c:	f7fc f9c6 	bl	80035dc <set_reg_block>
		break;
 8007250:	e007      	b.n	8007262 <STM32FXXXDMA2_sr_clear_tcif+0xaa>
		case 7:
			set_reg_block(&DMA2->HIFCR, 1, 27, 1);
 8007252:	2301      	movs	r3, #1
 8007254:	221b      	movs	r2, #27
 8007256:	2101      	movs	r1, #1
 8007258:	4805      	ldr	r0, [pc, #20]	@ (8007270 <STM32FXXXDMA2_sr_clear_tcif+0xb8>)
 800725a:	f7fc f9bf 	bl	80035dc <set_reg_block>
		break;
 800725e:	e000      	b.n	8007262 <STM32FXXXDMA2_sr_clear_tcif+0xaa>
		default: break;
 8007260:	bf00      	nop
	}
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40026408 	.word	0x40026408
 8007270:	4002640c 	.word	0x4002640c

08007274 <STM32FXXXDMA2_sr_htif>:
uint8_t STM32FXXXDMA2_sr_htif(uint8_t stream_n)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
	switch(stream_n){
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	2b07      	cmp	r3, #7
 8007286:	d863      	bhi.n	8007350 <STM32FXXXDMA2_sr_htif+0xdc>
 8007288:	a201      	add	r2, pc, #4	@ (adr r2, 8007290 <STM32FXXXDMA2_sr_htif+0x1c>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072b1 	.word	0x080072b1
 8007294:	080072c5 	.word	0x080072c5
 8007298:	080072d9 	.word	0x080072d9
 800729c:	080072ed 	.word	0x080072ed
 80072a0:	08007301 	.word	0x08007301
 80072a4:	08007315 	.word	0x08007315
 80072a8:	08007329 	.word	0x08007329
 80072ac:	0800733d 	.word	0x0800733d
		case 0:
			value = get_reg_block(DMA2->LISR, 1, 4);
 80072b0:	4b2a      	ldr	r3, [pc, #168]	@ (800735c <STM32FXXXDMA2_sr_htif+0xe8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2204      	movs	r2, #4
 80072b6:	2101      	movs	r1, #1
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fc f92a 	bl	8003512 <get_reg_block>
 80072be:	4603      	mov	r3, r0
 80072c0:	73fb      	strb	r3, [r7, #15]
		break;
 80072c2:	e046      	b.n	8007352 <STM32FXXXDMA2_sr_htif+0xde>
		case 1:
			value = get_reg_block(DMA2->LISR, 1, 10);
 80072c4:	4b25      	ldr	r3, [pc, #148]	@ (800735c <STM32FXXXDMA2_sr_htif+0xe8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	220a      	movs	r2, #10
 80072ca:	2101      	movs	r1, #1
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fc f920 	bl	8003512 <get_reg_block>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73fb      	strb	r3, [r7, #15]
		break;
 80072d6:	e03c      	b.n	8007352 <STM32FXXXDMA2_sr_htif+0xde>
		case 2:
			value = get_reg_block(DMA2->LISR, 1, 20);
 80072d8:	4b20      	ldr	r3, [pc, #128]	@ (800735c <STM32FXXXDMA2_sr_htif+0xe8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2214      	movs	r2, #20
 80072de:	2101      	movs	r1, #1
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fc f916 	bl	8003512 <get_reg_block>
 80072e6:	4603      	mov	r3, r0
 80072e8:	73fb      	strb	r3, [r7, #15]
		break;
 80072ea:	e032      	b.n	8007352 <STM32FXXXDMA2_sr_htif+0xde>
		case 3:
			value = get_reg_block(DMA2->LISR, 1, 26);
 80072ec:	4b1b      	ldr	r3, [pc, #108]	@ (800735c <STM32FXXXDMA2_sr_htif+0xe8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	221a      	movs	r2, #26
 80072f2:	2101      	movs	r1, #1
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fc f90c 	bl	8003512 <get_reg_block>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73fb      	strb	r3, [r7, #15]
		break;
 80072fe:	e028      	b.n	8007352 <STM32FXXXDMA2_sr_htif+0xde>
		case 4:
			value = get_reg_block(DMA2->HISR, 1, 4);
 8007300:	4b16      	ldr	r3, [pc, #88]	@ (800735c <STM32FXXXDMA2_sr_htif+0xe8>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	2204      	movs	r2, #4
 8007306:	2101      	movs	r1, #1
 8007308:	4618      	mov	r0, r3
 800730a:	f7fc f902 	bl	8003512 <get_reg_block>
 800730e:	4603      	mov	r3, r0
 8007310:	73fb      	strb	r3, [r7, #15]
		break;
 8007312:	e01e      	b.n	8007352 <STM32FXXXDMA2_sr_htif+0xde>
		case 5:
			value = get_reg_block(DMA2->HISR, 1, 10);
 8007314:	4b11      	ldr	r3, [pc, #68]	@ (800735c <STM32FXXXDMA2_sr_htif+0xe8>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	220a      	movs	r2, #10
 800731a:	2101      	movs	r1, #1
 800731c:	4618      	mov	r0, r3
 800731e:	f7fc f8f8 	bl	8003512 <get_reg_block>
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
		break;
 8007326:	e014      	b.n	8007352 <STM32FXXXDMA2_sr_htif+0xde>
		case 6:
			value = get_reg_block(DMA2->HISR, 1, 20);
 8007328:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <STM32FXXXDMA2_sr_htif+0xe8>)
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2214      	movs	r2, #20
 800732e:	2101      	movs	r1, #1
 8007330:	4618      	mov	r0, r3
 8007332:	f7fc f8ee 	bl	8003512 <get_reg_block>
 8007336:	4603      	mov	r3, r0
 8007338:	73fb      	strb	r3, [r7, #15]
		break;
 800733a:	e00a      	b.n	8007352 <STM32FXXXDMA2_sr_htif+0xde>
		case 7:
			value = get_reg_block(DMA2->HISR, 1, 26);
 800733c:	4b07      	ldr	r3, [pc, #28]	@ (800735c <STM32FXXXDMA2_sr_htif+0xe8>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	221a      	movs	r2, #26
 8007342:	2101      	movs	r1, #1
 8007344:	4618      	mov	r0, r3
 8007346:	f7fc f8e4 	bl	8003512 <get_reg_block>
 800734a:	4603      	mov	r3, r0
 800734c:	73fb      	strb	r3, [r7, #15]
		break;
 800734e:	e000      	b.n	8007352 <STM32FXXXDMA2_sr_htif+0xde>
	default: break;
 8007350:	bf00      	nop
	}
	return value;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40026400 	.word	0x40026400

08007360 <STM32FXXXDMA2_sr_clear_htif>:
void STM32FXXXDMA2_sr_clear_htif(uint8_t stream_n)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	71fb      	strb	r3, [r7, #7]
	switch(stream_n){
 800736a:	79fb      	ldrb	r3, [r7, #7]
 800736c:	2b07      	cmp	r3, #7
 800736e:	d84b      	bhi.n	8007408 <STM32FXXXDMA2_sr_clear_htif+0xa8>
 8007370:	a201      	add	r2, pc, #4	@ (adr r2, 8007378 <STM32FXXXDMA2_sr_clear_htif+0x18>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	08007399 	.word	0x08007399
 800737c:	080073a7 	.word	0x080073a7
 8007380:	080073b5 	.word	0x080073b5
 8007384:	080073c3 	.word	0x080073c3
 8007388:	080073d1 	.word	0x080073d1
 800738c:	080073df 	.word	0x080073df
 8007390:	080073ed 	.word	0x080073ed
 8007394:	080073fb 	.word	0x080073fb
		case 0:
			set_reg_block(&DMA2->LIFCR, 1, 4, 1);
 8007398:	2301      	movs	r3, #1
 800739a:	2204      	movs	r2, #4
 800739c:	2101      	movs	r1, #1
 800739e:	481d      	ldr	r0, [pc, #116]	@ (8007414 <STM32FXXXDMA2_sr_clear_htif+0xb4>)
 80073a0:	f7fc f91c 	bl	80035dc <set_reg_block>
		break;
 80073a4:	e031      	b.n	800740a <STM32FXXXDMA2_sr_clear_htif+0xaa>
		case 1:
			set_reg_block(&DMA2->LIFCR, 1, 10, 1);
 80073a6:	2301      	movs	r3, #1
 80073a8:	220a      	movs	r2, #10
 80073aa:	2101      	movs	r1, #1
 80073ac:	4819      	ldr	r0, [pc, #100]	@ (8007414 <STM32FXXXDMA2_sr_clear_htif+0xb4>)
 80073ae:	f7fc f915 	bl	80035dc <set_reg_block>
		break;
 80073b2:	e02a      	b.n	800740a <STM32FXXXDMA2_sr_clear_htif+0xaa>
		case 2:
			set_reg_block(&DMA2->LIFCR, 1, 20, 1);
 80073b4:	2301      	movs	r3, #1
 80073b6:	2214      	movs	r2, #20
 80073b8:	2101      	movs	r1, #1
 80073ba:	4816      	ldr	r0, [pc, #88]	@ (8007414 <STM32FXXXDMA2_sr_clear_htif+0xb4>)
 80073bc:	f7fc f90e 	bl	80035dc <set_reg_block>
		break;
 80073c0:	e023      	b.n	800740a <STM32FXXXDMA2_sr_clear_htif+0xaa>
		case 3:
			set_reg_block(&DMA2->LIFCR, 1, 26, 1);
 80073c2:	2301      	movs	r3, #1
 80073c4:	221a      	movs	r2, #26
 80073c6:	2101      	movs	r1, #1
 80073c8:	4812      	ldr	r0, [pc, #72]	@ (8007414 <STM32FXXXDMA2_sr_clear_htif+0xb4>)
 80073ca:	f7fc f907 	bl	80035dc <set_reg_block>
		break;
 80073ce:	e01c      	b.n	800740a <STM32FXXXDMA2_sr_clear_htif+0xaa>
		case 4:
			set_reg_block(&DMA2->HIFCR, 1, 4, 1);
 80073d0:	2301      	movs	r3, #1
 80073d2:	2204      	movs	r2, #4
 80073d4:	2101      	movs	r1, #1
 80073d6:	4810      	ldr	r0, [pc, #64]	@ (8007418 <STM32FXXXDMA2_sr_clear_htif+0xb8>)
 80073d8:	f7fc f900 	bl	80035dc <set_reg_block>
		break;
 80073dc:	e015      	b.n	800740a <STM32FXXXDMA2_sr_clear_htif+0xaa>
		case 5:
			set_reg_block(&DMA2->HIFCR, 1, 10, 1);
 80073de:	2301      	movs	r3, #1
 80073e0:	220a      	movs	r2, #10
 80073e2:	2101      	movs	r1, #1
 80073e4:	480c      	ldr	r0, [pc, #48]	@ (8007418 <STM32FXXXDMA2_sr_clear_htif+0xb8>)
 80073e6:	f7fc f8f9 	bl	80035dc <set_reg_block>
		break;
 80073ea:	e00e      	b.n	800740a <STM32FXXXDMA2_sr_clear_htif+0xaa>
		case 6:
			set_reg_block(&DMA2->HIFCR, 1, 20, 1);
 80073ec:	2301      	movs	r3, #1
 80073ee:	2214      	movs	r2, #20
 80073f0:	2101      	movs	r1, #1
 80073f2:	4809      	ldr	r0, [pc, #36]	@ (8007418 <STM32FXXXDMA2_sr_clear_htif+0xb8>)
 80073f4:	f7fc f8f2 	bl	80035dc <set_reg_block>
		break;
 80073f8:	e007      	b.n	800740a <STM32FXXXDMA2_sr_clear_htif+0xaa>
		case 7:
			set_reg_block(&DMA2->HIFCR, 1, 26, 1);
 80073fa:	2301      	movs	r3, #1
 80073fc:	221a      	movs	r2, #26
 80073fe:	2101      	movs	r1, #1
 8007400:	4805      	ldr	r0, [pc, #20]	@ (8007418 <STM32FXXXDMA2_sr_clear_htif+0xb8>)
 8007402:	f7fc f8eb 	bl	80035dc <set_reg_block>
		break;
 8007406:	e000      	b.n	800740a <STM32FXXXDMA2_sr_clear_htif+0xaa>
		default: break;
 8007408:	bf00      	nop
	}
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40026408 	.word	0x40026408
 8007418:	4002640c 	.word	0x4002640c

0800741c <STM32FXXXDMA2_sr_teif>:
uint8_t STM32FXXXDMA2_sr_teif(uint8_t stream_n)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]
	switch(stream_n){
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	2b07      	cmp	r3, #7
 800742e:	d863      	bhi.n	80074f8 <STM32FXXXDMA2_sr_teif+0xdc>
 8007430:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <STM32FXXXDMA2_sr_teif+0x1c>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	08007459 	.word	0x08007459
 800743c:	0800746d 	.word	0x0800746d
 8007440:	08007481 	.word	0x08007481
 8007444:	08007495 	.word	0x08007495
 8007448:	080074a9 	.word	0x080074a9
 800744c:	080074bd 	.word	0x080074bd
 8007450:	080074d1 	.word	0x080074d1
 8007454:	080074e5 	.word	0x080074e5
		case 0:
			value = get_reg_block(DMA2->LISR, 1, 3);
 8007458:	4b2a      	ldr	r3, [pc, #168]	@ (8007504 <STM32FXXXDMA2_sr_teif+0xe8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2203      	movs	r2, #3
 800745e:	2101      	movs	r1, #1
 8007460:	4618      	mov	r0, r3
 8007462:	f7fc f856 	bl	8003512 <get_reg_block>
 8007466:	4603      	mov	r3, r0
 8007468:	73fb      	strb	r3, [r7, #15]
		break;
 800746a:	e046      	b.n	80074fa <STM32FXXXDMA2_sr_teif+0xde>
		case 1:
			value = get_reg_block(DMA2->LISR, 1, 9);
 800746c:	4b25      	ldr	r3, [pc, #148]	@ (8007504 <STM32FXXXDMA2_sr_teif+0xe8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2209      	movs	r2, #9
 8007472:	2101      	movs	r1, #1
 8007474:	4618      	mov	r0, r3
 8007476:	f7fc f84c 	bl	8003512 <get_reg_block>
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]
		break;
 800747e:	e03c      	b.n	80074fa <STM32FXXXDMA2_sr_teif+0xde>
		case 2:
			value = get_reg_block(DMA2->LISR, 1, 19);
 8007480:	4b20      	ldr	r3, [pc, #128]	@ (8007504 <STM32FXXXDMA2_sr_teif+0xe8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2213      	movs	r2, #19
 8007486:	2101      	movs	r1, #1
 8007488:	4618      	mov	r0, r3
 800748a:	f7fc f842 	bl	8003512 <get_reg_block>
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]
		break;
 8007492:	e032      	b.n	80074fa <STM32FXXXDMA2_sr_teif+0xde>
		case 3:
			value = get_reg_block(DMA2->LISR, 1, 25);
 8007494:	4b1b      	ldr	r3, [pc, #108]	@ (8007504 <STM32FXXXDMA2_sr_teif+0xe8>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2219      	movs	r2, #25
 800749a:	2101      	movs	r1, #1
 800749c:	4618      	mov	r0, r3
 800749e:	f7fc f838 	bl	8003512 <get_reg_block>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]
		break;
 80074a6:	e028      	b.n	80074fa <STM32FXXXDMA2_sr_teif+0xde>
		case 4:
			value = get_reg_block(DMA2->HISR, 1, 3);
 80074a8:	4b16      	ldr	r3, [pc, #88]	@ (8007504 <STM32FXXXDMA2_sr_teif+0xe8>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2203      	movs	r2, #3
 80074ae:	2101      	movs	r1, #1
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fc f82e 	bl	8003512 <get_reg_block>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73fb      	strb	r3, [r7, #15]
		break;
 80074ba:	e01e      	b.n	80074fa <STM32FXXXDMA2_sr_teif+0xde>
		case 5:
			value = get_reg_block(DMA2->HISR, 1, 9);
 80074bc:	4b11      	ldr	r3, [pc, #68]	@ (8007504 <STM32FXXXDMA2_sr_teif+0xe8>)
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2209      	movs	r2, #9
 80074c2:	2101      	movs	r1, #1
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fc f824 	bl	8003512 <get_reg_block>
 80074ca:	4603      	mov	r3, r0
 80074cc:	73fb      	strb	r3, [r7, #15]
		break;
 80074ce:	e014      	b.n	80074fa <STM32FXXXDMA2_sr_teif+0xde>
		case 6:
			value = get_reg_block(DMA2->HISR, 1, 19);
 80074d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007504 <STM32FXXXDMA2_sr_teif+0xe8>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2213      	movs	r2, #19
 80074d6:	2101      	movs	r1, #1
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fc f81a 	bl	8003512 <get_reg_block>
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]
		break;
 80074e2:	e00a      	b.n	80074fa <STM32FXXXDMA2_sr_teif+0xde>
		case 7:
			value = get_reg_block(DMA2->HISR, 1, 25);
 80074e4:	4b07      	ldr	r3, [pc, #28]	@ (8007504 <STM32FXXXDMA2_sr_teif+0xe8>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2219      	movs	r2, #25
 80074ea:	2101      	movs	r1, #1
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fc f810 	bl	8003512 <get_reg_block>
 80074f2:	4603      	mov	r3, r0
 80074f4:	73fb      	strb	r3, [r7, #15]
		break;
 80074f6:	e000      	b.n	80074fa <STM32FXXXDMA2_sr_teif+0xde>
	default: break;
 80074f8:	bf00      	nop
	}
	return value;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	40026400 	.word	0x40026400

08007508 <STM32FXXXDMA2_sr_clear_teif>:
void STM32FXXXDMA2_sr_clear_teif(uint8_t stream_n)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	71fb      	strb	r3, [r7, #7]
	switch(stream_n){
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	2b07      	cmp	r3, #7
 8007516:	d84b      	bhi.n	80075b0 <STM32FXXXDMA2_sr_clear_teif+0xa8>
 8007518:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <STM32FXXXDMA2_sr_clear_teif+0x18>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007541 	.word	0x08007541
 8007524:	0800754f 	.word	0x0800754f
 8007528:	0800755d 	.word	0x0800755d
 800752c:	0800756b 	.word	0x0800756b
 8007530:	08007579 	.word	0x08007579
 8007534:	08007587 	.word	0x08007587
 8007538:	08007595 	.word	0x08007595
 800753c:	080075a3 	.word	0x080075a3
		case 0:
			set_reg_block(&DMA2->LIFCR, 1, 3, 1);
 8007540:	2301      	movs	r3, #1
 8007542:	2203      	movs	r2, #3
 8007544:	2101      	movs	r1, #1
 8007546:	481d      	ldr	r0, [pc, #116]	@ (80075bc <STM32FXXXDMA2_sr_clear_teif+0xb4>)
 8007548:	f7fc f848 	bl	80035dc <set_reg_block>
		break;
 800754c:	e031      	b.n	80075b2 <STM32FXXXDMA2_sr_clear_teif+0xaa>
		case 1:
			set_reg_block(&DMA2->LIFCR, 1, 9, 1);
 800754e:	2301      	movs	r3, #1
 8007550:	2209      	movs	r2, #9
 8007552:	2101      	movs	r1, #1
 8007554:	4819      	ldr	r0, [pc, #100]	@ (80075bc <STM32FXXXDMA2_sr_clear_teif+0xb4>)
 8007556:	f7fc f841 	bl	80035dc <set_reg_block>
		break;
 800755a:	e02a      	b.n	80075b2 <STM32FXXXDMA2_sr_clear_teif+0xaa>
		case 2:
			set_reg_block(&DMA2->LIFCR, 1, 19, 1);
 800755c:	2301      	movs	r3, #1
 800755e:	2213      	movs	r2, #19
 8007560:	2101      	movs	r1, #1
 8007562:	4816      	ldr	r0, [pc, #88]	@ (80075bc <STM32FXXXDMA2_sr_clear_teif+0xb4>)
 8007564:	f7fc f83a 	bl	80035dc <set_reg_block>
		break;
 8007568:	e023      	b.n	80075b2 <STM32FXXXDMA2_sr_clear_teif+0xaa>
		case 3:
			set_reg_block(&DMA2->LIFCR, 1, 25, 1);
 800756a:	2301      	movs	r3, #1
 800756c:	2219      	movs	r2, #25
 800756e:	2101      	movs	r1, #1
 8007570:	4812      	ldr	r0, [pc, #72]	@ (80075bc <STM32FXXXDMA2_sr_clear_teif+0xb4>)
 8007572:	f7fc f833 	bl	80035dc <set_reg_block>
		break;
 8007576:	e01c      	b.n	80075b2 <STM32FXXXDMA2_sr_clear_teif+0xaa>
		case 4:
			set_reg_block(&DMA2->HIFCR, 1, 3, 1);
 8007578:	2301      	movs	r3, #1
 800757a:	2203      	movs	r2, #3
 800757c:	2101      	movs	r1, #1
 800757e:	4810      	ldr	r0, [pc, #64]	@ (80075c0 <STM32FXXXDMA2_sr_clear_teif+0xb8>)
 8007580:	f7fc f82c 	bl	80035dc <set_reg_block>
		break;
 8007584:	e015      	b.n	80075b2 <STM32FXXXDMA2_sr_clear_teif+0xaa>
		case 5:
			set_reg_block(&DMA2->HIFCR, 1, 9, 1);
 8007586:	2301      	movs	r3, #1
 8007588:	2209      	movs	r2, #9
 800758a:	2101      	movs	r1, #1
 800758c:	480c      	ldr	r0, [pc, #48]	@ (80075c0 <STM32FXXXDMA2_sr_clear_teif+0xb8>)
 800758e:	f7fc f825 	bl	80035dc <set_reg_block>
		break;
 8007592:	e00e      	b.n	80075b2 <STM32FXXXDMA2_sr_clear_teif+0xaa>
		case 6:
			set_reg_block(&DMA2->HIFCR, 1, 19, 1);
 8007594:	2301      	movs	r3, #1
 8007596:	2213      	movs	r2, #19
 8007598:	2101      	movs	r1, #1
 800759a:	4809      	ldr	r0, [pc, #36]	@ (80075c0 <STM32FXXXDMA2_sr_clear_teif+0xb8>)
 800759c:	f7fc f81e 	bl	80035dc <set_reg_block>
		break;
 80075a0:	e007      	b.n	80075b2 <STM32FXXXDMA2_sr_clear_teif+0xaa>
		case 7:
			set_reg_block(&DMA2->HIFCR, 1, 25, 1);
 80075a2:	2301      	movs	r3, #1
 80075a4:	2219      	movs	r2, #25
 80075a6:	2101      	movs	r1, #1
 80075a8:	4805      	ldr	r0, [pc, #20]	@ (80075c0 <STM32FXXXDMA2_sr_clear_teif+0xb8>)
 80075aa:	f7fc f817 	bl	80035dc <set_reg_block>
		break;
 80075ae:	e000      	b.n	80075b2 <STM32FXXXDMA2_sr_clear_teif+0xaa>
		default: break;
 80075b0:	bf00      	nop
	}
}
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	40026408 	.word	0x40026408
 80075c0:	4002640c 	.word	0x4002640c

080075c4 <STM32FXXXDMA2_sr_dmeif>:
uint8_t STM32FXXXDMA2_sr_dmeif(uint8_t stream_n)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
	switch(stream_n){
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	2b07      	cmp	r3, #7
 80075d6:	d863      	bhi.n	80076a0 <STM32FXXXDMA2_sr_dmeif+0xdc>
 80075d8:	a201      	add	r2, pc, #4	@ (adr r2, 80075e0 <STM32FXXXDMA2_sr_dmeif+0x1c>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	08007601 	.word	0x08007601
 80075e4:	08007615 	.word	0x08007615
 80075e8:	08007629 	.word	0x08007629
 80075ec:	0800763d 	.word	0x0800763d
 80075f0:	08007651 	.word	0x08007651
 80075f4:	08007665 	.word	0x08007665
 80075f8:	08007679 	.word	0x08007679
 80075fc:	0800768d 	.word	0x0800768d
		case 0:
			value = get_reg_block(DMA2->LISR, 1, 2);
 8007600:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <STM32FXXXDMA2_sr_dmeif+0xe8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2202      	movs	r2, #2
 8007606:	2101      	movs	r1, #1
 8007608:	4618      	mov	r0, r3
 800760a:	f7fb ff82 	bl	8003512 <get_reg_block>
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]
		break;
 8007612:	e046      	b.n	80076a2 <STM32FXXXDMA2_sr_dmeif+0xde>
		case 1:
			value = get_reg_block(DMA2->LISR, 1, 8);
 8007614:	4b25      	ldr	r3, [pc, #148]	@ (80076ac <STM32FXXXDMA2_sr_dmeif+0xe8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2208      	movs	r2, #8
 800761a:	2101      	movs	r1, #1
 800761c:	4618      	mov	r0, r3
 800761e:	f7fb ff78 	bl	8003512 <get_reg_block>
 8007622:	4603      	mov	r3, r0
 8007624:	73fb      	strb	r3, [r7, #15]
		break;
 8007626:	e03c      	b.n	80076a2 <STM32FXXXDMA2_sr_dmeif+0xde>
		case 2:
			value = get_reg_block(DMA2->LISR, 1, 18);
 8007628:	4b20      	ldr	r3, [pc, #128]	@ (80076ac <STM32FXXXDMA2_sr_dmeif+0xe8>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2212      	movs	r2, #18
 800762e:	2101      	movs	r1, #1
 8007630:	4618      	mov	r0, r3
 8007632:	f7fb ff6e 	bl	8003512 <get_reg_block>
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]
		break;
 800763a:	e032      	b.n	80076a2 <STM32FXXXDMA2_sr_dmeif+0xde>
		case 3:
			value = get_reg_block(DMA2->LISR, 1, 24);
 800763c:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <STM32FXXXDMA2_sr_dmeif+0xe8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2218      	movs	r2, #24
 8007642:	2101      	movs	r1, #1
 8007644:	4618      	mov	r0, r3
 8007646:	f7fb ff64 	bl	8003512 <get_reg_block>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]
		break;
 800764e:	e028      	b.n	80076a2 <STM32FXXXDMA2_sr_dmeif+0xde>
		case 4:
			value = get_reg_block(DMA2->HISR, 1, 2);
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <STM32FXXXDMA2_sr_dmeif+0xe8>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2202      	movs	r2, #2
 8007656:	2101      	movs	r1, #1
 8007658:	4618      	mov	r0, r3
 800765a:	f7fb ff5a 	bl	8003512 <get_reg_block>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
		break;
 8007662:	e01e      	b.n	80076a2 <STM32FXXXDMA2_sr_dmeif+0xde>
		case 5:
			value = get_reg_block(DMA2->HISR, 1, 8);
 8007664:	4b11      	ldr	r3, [pc, #68]	@ (80076ac <STM32FXXXDMA2_sr_dmeif+0xe8>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2208      	movs	r2, #8
 800766a:	2101      	movs	r1, #1
 800766c:	4618      	mov	r0, r3
 800766e:	f7fb ff50 	bl	8003512 <get_reg_block>
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]
		break;
 8007676:	e014      	b.n	80076a2 <STM32FXXXDMA2_sr_dmeif+0xde>
		case 6:
			value = get_reg_block(DMA2->HISR, 1, 18);
 8007678:	4b0c      	ldr	r3, [pc, #48]	@ (80076ac <STM32FXXXDMA2_sr_dmeif+0xe8>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2212      	movs	r2, #18
 800767e:	2101      	movs	r1, #1
 8007680:	4618      	mov	r0, r3
 8007682:	f7fb ff46 	bl	8003512 <get_reg_block>
 8007686:	4603      	mov	r3, r0
 8007688:	73fb      	strb	r3, [r7, #15]
		break;
 800768a:	e00a      	b.n	80076a2 <STM32FXXXDMA2_sr_dmeif+0xde>
		case 7:
			value = get_reg_block(DMA2->HISR, 1, 24);
 800768c:	4b07      	ldr	r3, [pc, #28]	@ (80076ac <STM32FXXXDMA2_sr_dmeif+0xe8>)
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2218      	movs	r2, #24
 8007692:	2101      	movs	r1, #1
 8007694:	4618      	mov	r0, r3
 8007696:	f7fb ff3c 	bl	8003512 <get_reg_block>
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
		break;
 800769e:	e000      	b.n	80076a2 <STM32FXXXDMA2_sr_dmeif+0xde>
	default: break;
 80076a0:	bf00      	nop
	}
	return value;
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40026400 	.word	0x40026400

080076b0 <STM32FXXXDMA2_sr_clear_dmeif>:
void STM32FXXXDMA2_sr_clear_dmeif(uint8_t stream_n)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	71fb      	strb	r3, [r7, #7]
	switch(stream_n){
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	2b07      	cmp	r3, #7
 80076be:	d84b      	bhi.n	8007758 <STM32FXXXDMA2_sr_clear_dmeif+0xa8>
 80076c0:	a201      	add	r2, pc, #4	@ (adr r2, 80076c8 <STM32FXXXDMA2_sr_clear_dmeif+0x18>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	080076f7 	.word	0x080076f7
 80076d0:	08007705 	.word	0x08007705
 80076d4:	08007713 	.word	0x08007713
 80076d8:	08007721 	.word	0x08007721
 80076dc:	0800772f 	.word	0x0800772f
 80076e0:	0800773d 	.word	0x0800773d
 80076e4:	0800774b 	.word	0x0800774b
		case 0:
			set_reg_block(&DMA2->LIFCR, 1, 2, 1);
 80076e8:	2301      	movs	r3, #1
 80076ea:	2202      	movs	r2, #2
 80076ec:	2101      	movs	r1, #1
 80076ee:	481d      	ldr	r0, [pc, #116]	@ (8007764 <STM32FXXXDMA2_sr_clear_dmeif+0xb4>)
 80076f0:	f7fb ff74 	bl	80035dc <set_reg_block>
		break;
 80076f4:	e031      	b.n	800775a <STM32FXXXDMA2_sr_clear_dmeif+0xaa>
		case 1:
			set_reg_block(&DMA2->LIFCR, 1, 8, 1);
 80076f6:	2301      	movs	r3, #1
 80076f8:	2208      	movs	r2, #8
 80076fa:	2101      	movs	r1, #1
 80076fc:	4819      	ldr	r0, [pc, #100]	@ (8007764 <STM32FXXXDMA2_sr_clear_dmeif+0xb4>)
 80076fe:	f7fb ff6d 	bl	80035dc <set_reg_block>
		break;
 8007702:	e02a      	b.n	800775a <STM32FXXXDMA2_sr_clear_dmeif+0xaa>
		case 2:
			set_reg_block(&DMA2->LIFCR, 1, 18, 1);
 8007704:	2301      	movs	r3, #1
 8007706:	2212      	movs	r2, #18
 8007708:	2101      	movs	r1, #1
 800770a:	4816      	ldr	r0, [pc, #88]	@ (8007764 <STM32FXXXDMA2_sr_clear_dmeif+0xb4>)
 800770c:	f7fb ff66 	bl	80035dc <set_reg_block>
		break;
 8007710:	e023      	b.n	800775a <STM32FXXXDMA2_sr_clear_dmeif+0xaa>
		case 3:
			set_reg_block(&DMA2->LIFCR, 1, 24, 1);
 8007712:	2301      	movs	r3, #1
 8007714:	2218      	movs	r2, #24
 8007716:	2101      	movs	r1, #1
 8007718:	4812      	ldr	r0, [pc, #72]	@ (8007764 <STM32FXXXDMA2_sr_clear_dmeif+0xb4>)
 800771a:	f7fb ff5f 	bl	80035dc <set_reg_block>
		break;
 800771e:	e01c      	b.n	800775a <STM32FXXXDMA2_sr_clear_dmeif+0xaa>
		case 4:
			set_reg_block(&DMA2->HIFCR, 1, 2, 1);
 8007720:	2301      	movs	r3, #1
 8007722:	2202      	movs	r2, #2
 8007724:	2101      	movs	r1, #1
 8007726:	4810      	ldr	r0, [pc, #64]	@ (8007768 <STM32FXXXDMA2_sr_clear_dmeif+0xb8>)
 8007728:	f7fb ff58 	bl	80035dc <set_reg_block>
		break;
 800772c:	e015      	b.n	800775a <STM32FXXXDMA2_sr_clear_dmeif+0xaa>
		case 5:
			set_reg_block(&DMA2->HIFCR, 1, 8, 1);
 800772e:	2301      	movs	r3, #1
 8007730:	2208      	movs	r2, #8
 8007732:	2101      	movs	r1, #1
 8007734:	480c      	ldr	r0, [pc, #48]	@ (8007768 <STM32FXXXDMA2_sr_clear_dmeif+0xb8>)
 8007736:	f7fb ff51 	bl	80035dc <set_reg_block>
		break;
 800773a:	e00e      	b.n	800775a <STM32FXXXDMA2_sr_clear_dmeif+0xaa>
		case 6:
			set_reg_block(&DMA2->HIFCR, 1, 18, 1);
 800773c:	2301      	movs	r3, #1
 800773e:	2212      	movs	r2, #18
 8007740:	2101      	movs	r1, #1
 8007742:	4809      	ldr	r0, [pc, #36]	@ (8007768 <STM32FXXXDMA2_sr_clear_dmeif+0xb8>)
 8007744:	f7fb ff4a 	bl	80035dc <set_reg_block>
		break;
 8007748:	e007      	b.n	800775a <STM32FXXXDMA2_sr_clear_dmeif+0xaa>
		case 7:
			set_reg_block(&DMA2->HIFCR, 1, 24, 1);
 800774a:	2301      	movs	r3, #1
 800774c:	2218      	movs	r2, #24
 800774e:	2101      	movs	r1, #1
 8007750:	4805      	ldr	r0, [pc, #20]	@ (8007768 <STM32FXXXDMA2_sr_clear_dmeif+0xb8>)
 8007752:	f7fb ff43 	bl	80035dc <set_reg_block>
		break;
 8007756:	e000      	b.n	800775a <STM32FXXXDMA2_sr_clear_dmeif+0xaa>
		default: break;
 8007758:	bf00      	nop
	}
}
 800775a:	bf00      	nop
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	40026408 	.word	0x40026408
 8007768:	4002640c 	.word	0x4002640c

0800776c <STM32FXXXDMA2_sr_feif>:
uint8_t STM32FXXXDMA2_sr_feif(uint8_t stream_n)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
	switch(stream_n){
 800777a:	79fb      	ldrb	r3, [r7, #7]
 800777c:	2b07      	cmp	r3, #7
 800777e:	d863      	bhi.n	8007848 <STM32FXXXDMA2_sr_feif+0xdc>
 8007780:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <STM32FXXXDMA2_sr_feif+0x1c>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	080077a9 	.word	0x080077a9
 800778c:	080077bd 	.word	0x080077bd
 8007790:	080077d1 	.word	0x080077d1
 8007794:	080077e5 	.word	0x080077e5
 8007798:	080077f9 	.word	0x080077f9
 800779c:	0800780d 	.word	0x0800780d
 80077a0:	08007821 	.word	0x08007821
 80077a4:	08007835 	.word	0x08007835
		case 0:
			value = get_reg_block(DMA2->LISR, 1, 0);
 80077a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007854 <STM32FXXXDMA2_sr_feif+0xe8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2200      	movs	r2, #0
 80077ae:	2101      	movs	r1, #1
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fb feae 	bl	8003512 <get_reg_block>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]
		break;
 80077ba:	e046      	b.n	800784a <STM32FXXXDMA2_sr_feif+0xde>
		case 1:
			value = get_reg_block(DMA2->LISR, 1, 6);
 80077bc:	4b25      	ldr	r3, [pc, #148]	@ (8007854 <STM32FXXXDMA2_sr_feif+0xe8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2206      	movs	r2, #6
 80077c2:	2101      	movs	r1, #1
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fb fea4 	bl	8003512 <get_reg_block>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]
		break;
 80077ce:	e03c      	b.n	800784a <STM32FXXXDMA2_sr_feif+0xde>
		case 2:
			value = get_reg_block(DMA2->LISR, 1, 16);
 80077d0:	4b20      	ldr	r3, [pc, #128]	@ (8007854 <STM32FXXXDMA2_sr_feif+0xe8>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2210      	movs	r2, #16
 80077d6:	2101      	movs	r1, #1
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fb fe9a 	bl	8003512 <get_reg_block>
 80077de:	4603      	mov	r3, r0
 80077e0:	73fb      	strb	r3, [r7, #15]
		break;
 80077e2:	e032      	b.n	800784a <STM32FXXXDMA2_sr_feif+0xde>
		case 3:
			value = get_reg_block(DMA2->LISR, 1, 22);
 80077e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007854 <STM32FXXXDMA2_sr_feif+0xe8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2216      	movs	r2, #22
 80077ea:	2101      	movs	r1, #1
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fb fe90 	bl	8003512 <get_reg_block>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]
		break;
 80077f6:	e028      	b.n	800784a <STM32FXXXDMA2_sr_feif+0xde>
		case 4:
			value = get_reg_block(DMA2->HISR, 1, 0);
 80077f8:	4b16      	ldr	r3, [pc, #88]	@ (8007854 <STM32FXXXDMA2_sr_feif+0xe8>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	2101      	movs	r1, #1
 8007800:	4618      	mov	r0, r3
 8007802:	f7fb fe86 	bl	8003512 <get_reg_block>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
		break;
 800780a:	e01e      	b.n	800784a <STM32FXXXDMA2_sr_feif+0xde>
		case 5:
			value = get_reg_block(DMA2->HISR, 1, 6);
 800780c:	4b11      	ldr	r3, [pc, #68]	@ (8007854 <STM32FXXXDMA2_sr_feif+0xe8>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2206      	movs	r2, #6
 8007812:	2101      	movs	r1, #1
 8007814:	4618      	mov	r0, r3
 8007816:	f7fb fe7c 	bl	8003512 <get_reg_block>
 800781a:	4603      	mov	r3, r0
 800781c:	73fb      	strb	r3, [r7, #15]
		break;
 800781e:	e014      	b.n	800784a <STM32FXXXDMA2_sr_feif+0xde>
		case 6:
			value = get_reg_block(DMA2->HISR, 1, 16);
 8007820:	4b0c      	ldr	r3, [pc, #48]	@ (8007854 <STM32FXXXDMA2_sr_feif+0xe8>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2210      	movs	r2, #16
 8007826:	2101      	movs	r1, #1
 8007828:	4618      	mov	r0, r3
 800782a:	f7fb fe72 	bl	8003512 <get_reg_block>
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]
		break;
 8007832:	e00a      	b.n	800784a <STM32FXXXDMA2_sr_feif+0xde>
		case 7:
			value = get_reg_block(DMA2->HISR, 1, 22);
 8007834:	4b07      	ldr	r3, [pc, #28]	@ (8007854 <STM32FXXXDMA2_sr_feif+0xe8>)
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	2216      	movs	r2, #22
 800783a:	2101      	movs	r1, #1
 800783c:	4618      	mov	r0, r3
 800783e:	f7fb fe68 	bl	8003512 <get_reg_block>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
		break;
 8007846:	e000      	b.n	800784a <STM32FXXXDMA2_sr_feif+0xde>
	default: break;
 8007848:	bf00      	nop
	}
	return value;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40026400 	.word	0x40026400

08007858 <STM32FXXXDMA2_sr_clear_feif>:
void STM32FXXXDMA2_sr_clear_feif(uint8_t stream_n)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	71fb      	strb	r3, [r7, #7]
	switch(stream_n){
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	2b07      	cmp	r3, #7
 8007866:	d84b      	bhi.n	8007900 <STM32FXXXDMA2_sr_clear_feif+0xa8>
 8007868:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <STM32FXXXDMA2_sr_clear_feif+0x18>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	08007891 	.word	0x08007891
 8007874:	0800789f 	.word	0x0800789f
 8007878:	080078ad 	.word	0x080078ad
 800787c:	080078bb 	.word	0x080078bb
 8007880:	080078c9 	.word	0x080078c9
 8007884:	080078d7 	.word	0x080078d7
 8007888:	080078e5 	.word	0x080078e5
 800788c:	080078f3 	.word	0x080078f3
		case 0:
			set_reg_block(&DMA2->LIFCR, 1, 0, 1);
 8007890:	2301      	movs	r3, #1
 8007892:	2200      	movs	r2, #0
 8007894:	2101      	movs	r1, #1
 8007896:	481d      	ldr	r0, [pc, #116]	@ (800790c <STM32FXXXDMA2_sr_clear_feif+0xb4>)
 8007898:	f7fb fea0 	bl	80035dc <set_reg_block>
		break;
 800789c:	e031      	b.n	8007902 <STM32FXXXDMA2_sr_clear_feif+0xaa>
		case 1:
			set_reg_block(&DMA2->LIFCR, 1, 6, 1);
 800789e:	2301      	movs	r3, #1
 80078a0:	2206      	movs	r2, #6
 80078a2:	2101      	movs	r1, #1
 80078a4:	4819      	ldr	r0, [pc, #100]	@ (800790c <STM32FXXXDMA2_sr_clear_feif+0xb4>)
 80078a6:	f7fb fe99 	bl	80035dc <set_reg_block>
		break;
 80078aa:	e02a      	b.n	8007902 <STM32FXXXDMA2_sr_clear_feif+0xaa>
		case 2:
			set_reg_block(&DMA2->LIFCR, 1, 16, 1);
 80078ac:	2301      	movs	r3, #1
 80078ae:	2210      	movs	r2, #16
 80078b0:	2101      	movs	r1, #1
 80078b2:	4816      	ldr	r0, [pc, #88]	@ (800790c <STM32FXXXDMA2_sr_clear_feif+0xb4>)
 80078b4:	f7fb fe92 	bl	80035dc <set_reg_block>
		break;
 80078b8:	e023      	b.n	8007902 <STM32FXXXDMA2_sr_clear_feif+0xaa>
		case 3:
			set_reg_block(&DMA2->LIFCR, 1, 22, 1);
 80078ba:	2301      	movs	r3, #1
 80078bc:	2216      	movs	r2, #22
 80078be:	2101      	movs	r1, #1
 80078c0:	4812      	ldr	r0, [pc, #72]	@ (800790c <STM32FXXXDMA2_sr_clear_feif+0xb4>)
 80078c2:	f7fb fe8b 	bl	80035dc <set_reg_block>
		break;
 80078c6:	e01c      	b.n	8007902 <STM32FXXXDMA2_sr_clear_feif+0xaa>
		case 4:
			set_reg_block(&DMA2->HIFCR, 1, 0, 1);
 80078c8:	2301      	movs	r3, #1
 80078ca:	2200      	movs	r2, #0
 80078cc:	2101      	movs	r1, #1
 80078ce:	4810      	ldr	r0, [pc, #64]	@ (8007910 <STM32FXXXDMA2_sr_clear_feif+0xb8>)
 80078d0:	f7fb fe84 	bl	80035dc <set_reg_block>
		break;
 80078d4:	e015      	b.n	8007902 <STM32FXXXDMA2_sr_clear_feif+0xaa>
		case 5:
			set_reg_block(&DMA2->HIFCR, 1, 6, 1);
 80078d6:	2301      	movs	r3, #1
 80078d8:	2206      	movs	r2, #6
 80078da:	2101      	movs	r1, #1
 80078dc:	480c      	ldr	r0, [pc, #48]	@ (8007910 <STM32FXXXDMA2_sr_clear_feif+0xb8>)
 80078de:	f7fb fe7d 	bl	80035dc <set_reg_block>
		break;
 80078e2:	e00e      	b.n	8007902 <STM32FXXXDMA2_sr_clear_feif+0xaa>
		case 6:
			set_reg_block(&DMA2->HIFCR, 1, 16, 1);
 80078e4:	2301      	movs	r3, #1
 80078e6:	2210      	movs	r2, #16
 80078e8:	2101      	movs	r1, #1
 80078ea:	4809      	ldr	r0, [pc, #36]	@ (8007910 <STM32FXXXDMA2_sr_clear_feif+0xb8>)
 80078ec:	f7fb fe76 	bl	80035dc <set_reg_block>
		break;
 80078f0:	e007      	b.n	8007902 <STM32FXXXDMA2_sr_clear_feif+0xaa>
		case 7:
			set_reg_block(&DMA2->HIFCR, 1, 22, 1);
 80078f2:	2301      	movs	r3, #1
 80078f4:	2216      	movs	r2, #22
 80078f6:	2101      	movs	r1, #1
 80078f8:	4805      	ldr	r0, [pc, #20]	@ (8007910 <STM32FXXXDMA2_sr_clear_feif+0xb8>)
 80078fa:	f7fb fe6f 	bl	80035dc <set_reg_block>
		break;
 80078fe:	e000      	b.n	8007902 <STM32FXXXDMA2_sr_clear_feif+0xaa>
		default: break;
 8007900:	bf00      	nop
	}
}
 8007902:	bf00      	nop
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40026408 	.word	0x40026408
 8007910:	4002640c 	.word	0x4002640c

08007914 <stm32fxxx_dma2_sr_inic>:
/*** Inic SR ***/
STM32FXXXDMA_sr* stm32fxxx_dma2_sr_inic(void)
{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0

	// SR
	stm32fxxx_dma2_sr.tcif = STM32FXXXDMA2_sr_tcif;
 8007918:	4b11      	ldr	r3, [pc, #68]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
 800791a:	4a12      	ldr	r2, [pc, #72]	@ (8007964 <stm32fxxx_dma2_sr_inic+0x50>)
 800791c:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_sr.clear_tcif = STM32FXXXDMA2_sr_clear_tcif;
 800791e:	4b10      	ldr	r3, [pc, #64]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
 8007920:	4a11      	ldr	r2, [pc, #68]	@ (8007968 <stm32fxxx_dma2_sr_inic+0x54>)
 8007922:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_sr.htif = STM32FXXXDMA2_sr_htif;
 8007924:	4b0e      	ldr	r3, [pc, #56]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
 8007926:	4a11      	ldr	r2, [pc, #68]	@ (800796c <stm32fxxx_dma2_sr_inic+0x58>)
 8007928:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_sr.clear_htif = STM32FXXXDMA2_sr_clear_htif;
 800792a:	4b0d      	ldr	r3, [pc, #52]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
 800792c:	4a10      	ldr	r2, [pc, #64]	@ (8007970 <stm32fxxx_dma2_sr_inic+0x5c>)
 800792e:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2_sr.teif = STM32FXXXDMA2_sr_teif;
 8007930:	4b0b      	ldr	r3, [pc, #44]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
 8007932:	4a10      	ldr	r2, [pc, #64]	@ (8007974 <stm32fxxx_dma2_sr_inic+0x60>)
 8007934:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma2_sr.clear_teif = STM32FXXXDMA2_sr_clear_teif;
 8007936:	4b0a      	ldr	r3, [pc, #40]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
 8007938:	4a0f      	ldr	r2, [pc, #60]	@ (8007978 <stm32fxxx_dma2_sr_inic+0x64>)
 800793a:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma2_sr.dmeif = STM32FXXXDMA2_sr_dmeif;
 800793c:	4b08      	ldr	r3, [pc, #32]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
 800793e:	4a0f      	ldr	r2, [pc, #60]	@ (800797c <stm32fxxx_dma2_sr_inic+0x68>)
 8007940:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma2_sr.clear_dmeif = STM32FXXXDMA2_sr_clear_dmeif;
 8007942:	4b07      	ldr	r3, [pc, #28]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
 8007944:	4a0e      	ldr	r2, [pc, #56]	@ (8007980 <stm32fxxx_dma2_sr_inic+0x6c>)
 8007946:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma2_sr.feif = STM32FXXXDMA2_sr_feif;
 8007948:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
 800794a:	4a0e      	ldr	r2, [pc, #56]	@ (8007984 <stm32fxxx_dma2_sr_inic+0x70>)
 800794c:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma2_sr.clear_feif = STM32FXXXDMA2_sr_clear_feif;
 800794e:	4b04      	ldr	r3, [pc, #16]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
 8007950:	4a0d      	ldr	r2, [pc, #52]	@ (8007988 <stm32fxxx_dma2_sr_inic+0x74>)
 8007952:	625a      	str	r2, [r3, #36]	@ 0x24
	return &stm32fxxx_dma2_sr;
 8007954:	4b02      	ldr	r3, [pc, #8]	@ (8007960 <stm32fxxx_dma2_sr_inic+0x4c>)
}
 8007956:	4618      	mov	r0, r3
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	200005a0 	.word	0x200005a0
 8007964:	080070cd 	.word	0x080070cd
 8007968:	080071b9 	.word	0x080071b9
 800796c:	08007275 	.word	0x08007275
 8007970:	08007361 	.word	0x08007361
 8007974:	0800741d 	.word	0x0800741d
 8007978:	08007509 	.word	0x08007509
 800797c:	080075c5 	.word	0x080075c5
 8007980:	080076b1 	.word	0x080076b1
 8007984:	0800776d 	.word	0x0800776d
 8007988:	08007859 	.word	0x08007859

0800798c <STM32FXXXDMA2_stream0_cr_chsel>:
// DMA2 STREAM0 CR
void STM32FXXXDMA2_stream0_cr_chsel(uint8_t value)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 3, 25, value);
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	2219      	movs	r2, #25
 800799a:	2103      	movs	r1, #3
 800799c:	4803      	ldr	r0, [pc, #12]	@ (80079ac <STM32FXXXDMA2_stream0_cr_chsel+0x20>)
 800799e:	f7fb fe1d 	bl	80035dc <set_reg_block>
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	40026410 	.word	0x40026410

080079b0 <STM32FXXXDMA2_stream0_cr_mburst>:
void STM32FXXXDMA2_stream0_cr_mburst(uint8_t value)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 2, 23, value);
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	2217      	movs	r2, #23
 80079be:	2102      	movs	r1, #2
 80079c0:	4803      	ldr	r0, [pc, #12]	@ (80079d0 <STM32FXXXDMA2_stream0_cr_mburst+0x20>)
 80079c2:	f7fb fe0b 	bl	80035dc <set_reg_block>
}
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	40026410 	.word	0x40026410

080079d4 <STM32FXXXDMA2_stream0_cr_pburst>:
void STM32FXXXDMA2_stream0_cr_pburst(uint8_t value)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	4603      	mov	r3, r0
 80079dc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 2, 21, value);
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	2215      	movs	r2, #21
 80079e2:	2102      	movs	r1, #2
 80079e4:	4803      	ldr	r0, [pc, #12]	@ (80079f4 <STM32FXXXDMA2_stream0_cr_pburst+0x20>)
 80079e6:	f7fb fdf9 	bl	80035dc <set_reg_block>
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	40026410 	.word	0x40026410

080079f8 <STM32FXXXDMA2_stream0_cr_ct>:
void STM32FXXXDMA2_stream0_cr_ct(uint8_t bool)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 19, bool);
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	2213      	movs	r2, #19
 8007a06:	2101      	movs	r1, #1
 8007a08:	4803      	ldr	r0, [pc, #12]	@ (8007a18 <STM32FXXXDMA2_stream0_cr_ct+0x20>)
 8007a0a:	f7fb fde7 	bl	80035dc <set_reg_block>
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	40026410 	.word	0x40026410

08007a1c <STM32FXXXDMA2_stream0_cr_dbm>:
void STM32FXXXDMA2_stream0_cr_dbm(uint8_t bool)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 18, bool);
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	2212      	movs	r2, #18
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4803      	ldr	r0, [pc, #12]	@ (8007a3c <STM32FXXXDMA2_stream0_cr_dbm+0x20>)
 8007a2e:	f7fb fdd5 	bl	80035dc <set_reg_block>
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40026410 	.word	0x40026410

08007a40 <STM32FXXXDMA2_stream0_cr_pl>:
void STM32FXXXDMA2_stream0_cr_pl(uint8_t value)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 2, 16, value);
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	2102      	movs	r1, #2
 8007a50:	4803      	ldr	r0, [pc, #12]	@ (8007a60 <STM32FXXXDMA2_stream0_cr_pl+0x20>)
 8007a52:	f7fb fdc3 	bl	80035dc <set_reg_block>
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40026410 	.word	0x40026410

08007a64 <STM32FXXXDMA2_stream0_cr_pincos>:
void STM32FXXXDMA2_stream0_cr_pincos(uint8_t bool)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 15, bool);
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	220f      	movs	r2, #15
 8007a72:	2101      	movs	r1, #1
 8007a74:	4803      	ldr	r0, [pc, #12]	@ (8007a84 <STM32FXXXDMA2_stream0_cr_pincos+0x20>)
 8007a76:	f7fb fdb1 	bl	80035dc <set_reg_block>
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	40026410 	.word	0x40026410

08007a88 <STM32FXXXDMA2_stream0_cr_msize>:
void STM32FXXXDMA2_stream0_cr_msize(uint8_t value)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 2, 13, value);
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	220d      	movs	r2, #13
 8007a96:	2102      	movs	r1, #2
 8007a98:	4803      	ldr	r0, [pc, #12]	@ (8007aa8 <STM32FXXXDMA2_stream0_cr_msize+0x20>)
 8007a9a:	f7fb fd9f 	bl	80035dc <set_reg_block>
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40026410 	.word	0x40026410

08007aac <STM32FXXXDMA2_stream0_cr_psize>:
void STM32FXXXDMA2_stream0_cr_psize(uint8_t value)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 2, 11, value);
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	220b      	movs	r2, #11
 8007aba:	2102      	movs	r1, #2
 8007abc:	4803      	ldr	r0, [pc, #12]	@ (8007acc <STM32FXXXDMA2_stream0_cr_psize+0x20>)
 8007abe:	f7fb fd8d 	bl	80035dc <set_reg_block>
}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40026410 	.word	0x40026410

08007ad0 <STM32FXXXDMA2_stream0_cr_minc>:
void STM32FXXXDMA2_stream0_cr_minc(uint8_t bool)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 10, bool);
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	220a      	movs	r2, #10
 8007ade:	2101      	movs	r1, #1
 8007ae0:	4803      	ldr	r0, [pc, #12]	@ (8007af0 <STM32FXXXDMA2_stream0_cr_minc+0x20>)
 8007ae2:	f7fb fd7b 	bl	80035dc <set_reg_block>
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	40026410 	.word	0x40026410

08007af4 <STM32FXXXDMA2_stream0_cr_pinc>:
void STM32FXXXDMA2_stream0_cr_pinc(uint8_t bool)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 9, bool);
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	2209      	movs	r2, #9
 8007b02:	2101      	movs	r1, #1
 8007b04:	4803      	ldr	r0, [pc, #12]	@ (8007b14 <STM32FXXXDMA2_stream0_cr_pinc+0x20>)
 8007b06:	f7fb fd69 	bl	80035dc <set_reg_block>
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40026410 	.word	0x40026410

08007b18 <STM32FXXXDMA2_stream0_cr_circ>:
void STM32FXXXDMA2_stream0_cr_circ(uint8_t bool)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 8, bool);
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	2208      	movs	r2, #8
 8007b26:	2101      	movs	r1, #1
 8007b28:	4803      	ldr	r0, [pc, #12]	@ (8007b38 <STM32FXXXDMA2_stream0_cr_circ+0x20>)
 8007b2a:	f7fb fd57 	bl	80035dc <set_reg_block>
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40026410 	.word	0x40026410

08007b3c <STM32FXXXDMA2_stream0_cr_dir>:
void STM32FXXXDMA2_stream0_cr_dir(uint8_t value)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 2, 7, value);
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	2207      	movs	r2, #7
 8007b4a:	2102      	movs	r1, #2
 8007b4c:	4803      	ldr	r0, [pc, #12]	@ (8007b5c <STM32FXXXDMA2_stream0_cr_dir+0x20>)
 8007b4e:	f7fb fd45 	bl	80035dc <set_reg_block>
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40026410 	.word	0x40026410

08007b60 <STM32FXXXDMA2_stream0_cr_pfctrl>:
void STM32FXXXDMA2_stream0_cr_pfctrl(uint8_t bool)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 5, bool);
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	2205      	movs	r2, #5
 8007b6e:	2101      	movs	r1, #1
 8007b70:	4803      	ldr	r0, [pc, #12]	@ (8007b80 <STM32FXXXDMA2_stream0_cr_pfctrl+0x20>)
 8007b72:	f7fb fd33 	bl	80035dc <set_reg_block>
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40026410 	.word	0x40026410

08007b84 <STM32FXXXDMA2_stream0_cr_tcie>:
void STM32FXXXDMA2_stream0_cr_tcie(uint8_t bool)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 4, bool);
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	2204      	movs	r2, #4
 8007b92:	2101      	movs	r1, #1
 8007b94:	4803      	ldr	r0, [pc, #12]	@ (8007ba4 <STM32FXXXDMA2_stream0_cr_tcie+0x20>)
 8007b96:	f7fb fd21 	bl	80035dc <set_reg_block>
}
 8007b9a:	bf00      	nop
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	40026410 	.word	0x40026410

08007ba8 <STM32FXXXDMA2_stream0_cr_htie>:
void STM32FXXXDMA2_stream0_cr_htie(uint8_t bool)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 3, bool);
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	4803      	ldr	r0, [pc, #12]	@ (8007bc8 <STM32FXXXDMA2_stream0_cr_htie+0x20>)
 8007bba:	f7fb fd0f 	bl	80035dc <set_reg_block>
}
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	40026410 	.word	0x40026410

08007bcc <STM32FXXXDMA2_stream0_cr_teie>:
void STM32FXXXDMA2_stream0_cr_teie(uint8_t bool)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 2, bool);
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	2101      	movs	r1, #1
 8007bdc:	4803      	ldr	r0, [pc, #12]	@ (8007bec <STM32FXXXDMA2_stream0_cr_teie+0x20>)
 8007bde:	f7fb fcfd 	bl	80035dc <set_reg_block>
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	40026410 	.word	0x40026410

08007bf0 <STM32FXXXDMA2_stream0_cr_dmeie>:
void STM32FXXXDMA2_stream0_cr_dmeie(uint8_t bool)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 1, bool);
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	2101      	movs	r1, #1
 8007c00:	4803      	ldr	r0, [pc, #12]	@ (8007c10 <STM32FXXXDMA2_stream0_cr_dmeie+0x20>)
 8007c02:	f7fb fceb 	bl	80035dc <set_reg_block>
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	40026410 	.word	0x40026410

08007c14 <STM32FXXXDMA2_stream0_cr_en>:
void STM32FXXXDMA2_stream0_cr_en(uint8_t bool)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->CR, 1, 0, bool);
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	2200      	movs	r2, #0
 8007c22:	2101      	movs	r1, #1
 8007c24:	4803      	ldr	r0, [pc, #12]	@ (8007c34 <STM32FXXXDMA2_stream0_cr_en+0x20>)
 8007c26:	f7fb fcd9 	bl	80035dc <set_reg_block>
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40026410 	.word	0x40026410

08007c38 <stm32fxxx_dma2_stream0_cr_inic>:
/*** Inic DMA2 STREAM0 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma2_stream0_cr_inic(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma2_stream0_cr.chsel = STM32FXXXDMA2_stream0_cr_chsel;
 8007c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c3e:	4a20      	ldr	r2, [pc, #128]	@ (8007cc0 <stm32fxxx_dma2_stream0_cr_inic+0x88>)
 8007c40:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream0_cr.mburst = STM32FXXXDMA2_stream0_cr_mburst;
 8007c42:	4b1e      	ldr	r3, [pc, #120]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c44:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc4 <stm32fxxx_dma2_stream0_cr_inic+0x8c>)
 8007c46:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream0_cr.pburst = STM32FXXXDMA2_stream0_cr_pburst;
 8007c48:	4b1c      	ldr	r3, [pc, #112]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc8 <stm32fxxx_dma2_stream0_cr_inic+0x90>)
 8007c4c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream0_cr.ct = STM32FXXXDMA2_stream0_cr_ct;
 8007c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c50:	4a1e      	ldr	r2, [pc, #120]	@ (8007ccc <stm32fxxx_dma2_stream0_cr_inic+0x94>)
 8007c52:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2_stream0_cr.dbm = STM32FXXXDMA2_stream0_cr_dbm;
 8007c54:	4b19      	ldr	r3, [pc, #100]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c56:	4a1e      	ldr	r2, [pc, #120]	@ (8007cd0 <stm32fxxx_dma2_stream0_cr_inic+0x98>)
 8007c58:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma2_stream0_cr.pl = STM32FXXXDMA2_stream0_cr_pl;
 8007c5a:	4b18      	ldr	r3, [pc, #96]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd4 <stm32fxxx_dma2_stream0_cr_inic+0x9c>)
 8007c5e:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma2_stream0_cr.pincos = STM32FXXXDMA2_stream0_cr_pincos;
 8007c60:	4b16      	ldr	r3, [pc, #88]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c62:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd8 <stm32fxxx_dma2_stream0_cr_inic+0xa0>)
 8007c64:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma2_stream0_cr.msize = STM32FXXXDMA2_stream0_cr_msize;
 8007c66:	4b15      	ldr	r3, [pc, #84]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c68:	4a1c      	ldr	r2, [pc, #112]	@ (8007cdc <stm32fxxx_dma2_stream0_cr_inic+0xa4>)
 8007c6a:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma2_stream0_cr.psize = STM32FXXXDMA2_stream0_cr_psize;
 8007c6c:	4b13      	ldr	r3, [pc, #76]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce0 <stm32fxxx_dma2_stream0_cr_inic+0xa8>)
 8007c70:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma2_stream0_cr.minc = STM32FXXXDMA2_stream0_cr_minc;
 8007c72:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c74:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce4 <stm32fxxx_dma2_stream0_cr_inic+0xac>)
 8007c76:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma2_stream0_cr.pinc = STM32FXXXDMA2_stream0_cr_pinc;
 8007c78:	4b10      	ldr	r3, [pc, #64]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce8 <stm32fxxx_dma2_stream0_cr_inic+0xb0>)
 8007c7c:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma2_stream0_cr.circ = STM32FXXXDMA2_stream0_cr_circ;
 8007c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c80:	4a1a      	ldr	r2, [pc, #104]	@ (8007cec <stm32fxxx_dma2_stream0_cr_inic+0xb4>)
 8007c82:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma2_stream0_cr.dir = STM32FXXXDMA2_stream0_cr_dir;
 8007c84:	4b0d      	ldr	r3, [pc, #52]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c86:	4a1a      	ldr	r2, [pc, #104]	@ (8007cf0 <stm32fxxx_dma2_stream0_cr_inic+0xb8>)
 8007c88:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma2_stream0_cr.pfctrl = STM32FXXXDMA2_stream0_cr_pfctrl;
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c8c:	4a19      	ldr	r2, [pc, #100]	@ (8007cf4 <stm32fxxx_dma2_stream0_cr_inic+0xbc>)
 8007c8e:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma2_stream0_cr.tcie = STM32FXXXDMA2_stream0_cr_tcie;
 8007c90:	4b0a      	ldr	r3, [pc, #40]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c92:	4a19      	ldr	r2, [pc, #100]	@ (8007cf8 <stm32fxxx_dma2_stream0_cr_inic+0xc0>)
 8007c94:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma2_stream0_cr.htie = STM32FXXXDMA2_stream0_cr_htie;
 8007c96:	4b09      	ldr	r3, [pc, #36]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c98:	4a18      	ldr	r2, [pc, #96]	@ (8007cfc <stm32fxxx_dma2_stream0_cr_inic+0xc4>)
 8007c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma2_stream0_cr.teie = STM32FXXXDMA2_stream0_cr_teie;
 8007c9c:	4b07      	ldr	r3, [pc, #28]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007c9e:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <stm32fxxx_dma2_stream0_cr_inic+0xc8>)
 8007ca0:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma2_stream0_cr.dmeie = STM32FXXXDMA2_stream0_cr_dmeie;
 8007ca2:	4b06      	ldr	r3, [pc, #24]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007ca4:	4a17      	ldr	r2, [pc, #92]	@ (8007d04 <stm32fxxx_dma2_stream0_cr_inic+0xcc>)
 8007ca6:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma2_stream0_cr.en = STM32FXXXDMA2_stream0_cr_en;
 8007ca8:	4b04      	ldr	r3, [pc, #16]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
 8007caa:	4a17      	ldr	r2, [pc, #92]	@ (8007d08 <stm32fxxx_dma2_stream0_cr_inic+0xd0>)
 8007cac:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma2_stream0_cr;
 8007cae:	4b03      	ldr	r3, [pc, #12]	@ (8007cbc <stm32fxxx_dma2_stream0_cr_inic+0x84>)
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	200005c8 	.word	0x200005c8
 8007cc0:	0800798d 	.word	0x0800798d
 8007cc4:	080079b1 	.word	0x080079b1
 8007cc8:	080079d5 	.word	0x080079d5
 8007ccc:	080079f9 	.word	0x080079f9
 8007cd0:	08007a1d 	.word	0x08007a1d
 8007cd4:	08007a41 	.word	0x08007a41
 8007cd8:	08007a65 	.word	0x08007a65
 8007cdc:	08007a89 	.word	0x08007a89
 8007ce0:	08007aad 	.word	0x08007aad
 8007ce4:	08007ad1 	.word	0x08007ad1
 8007ce8:	08007af5 	.word	0x08007af5
 8007cec:	08007b19 	.word	0x08007b19
 8007cf0:	08007b3d 	.word	0x08007b3d
 8007cf4:	08007b61 	.word	0x08007b61
 8007cf8:	08007b85 	.word	0x08007b85
 8007cfc:	08007ba9 	.word	0x08007ba9
 8007d00:	08007bcd 	.word	0x08007bcd
 8007d04:	08007bf1 	.word	0x08007bf1
 8007d08:	08007c15 	.word	0x08007c15

08007d0c <stm32fxxx_dma2_stream0_ndt>:
/*** Inic DMA2 STREAM0 Function ***/
void stm32fxxx_dma2_stream0_ndt(uint16_t value)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	80fb      	strh	r3, [r7, #6]
	DMA2_Stream0->NDTR = value;
 8007d16:	4a04      	ldr	r2, [pc, #16]	@ (8007d28 <stm32fxxx_dma2_stream0_ndt+0x1c>)
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	6053      	str	r3, [r2, #4]
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	40026410 	.word	0x40026410

08007d2c <stm32fxxx_dma2_stream0_par>:
void stm32fxxx_dma2_stream0_par(volatile long unsigned int periferal_addr)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	DMA2_Stream0->PAR = periferal_addr;
 8007d34:	4a04      	ldr	r2, [pc, #16]	@ (8007d48 <stm32fxxx_dma2_stream0_par+0x1c>)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6093      	str	r3, [r2, #8]
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	40026410 	.word	0x40026410

08007d4c <stm32fxxx_dma2_stream0_m0a>:
void stm32fxxx_dma2_stream0_m0a(volatile long unsigned int mem0_addr)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
	DMA2_Stream0->M0AR = mem0_addr;
 8007d54:	4a04      	ldr	r2, [pc, #16]	@ (8007d68 <stm32fxxx_dma2_stream0_m0a+0x1c>)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60d3      	str	r3, [r2, #12]
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40026410 	.word	0x40026410

08007d6c <stm32fxxx_dma2_stream0_m1a>:
void stm32fxxx_dma2_stream0_m1a(volatile long unsigned int mem1_addr)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	DMA2_Stream0->M1AR = mem1_addr;
 8007d74:	4a04      	ldr	r2, [pc, #16]	@ (8007d88 <stm32fxxx_dma2_stream0_m1a+0x1c>)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6113      	str	r3, [r2, #16]
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40026410 	.word	0x40026410

08007d8c <STM32FXXXDMA2_stream1_cr_chsel>:
// DMA2 STREAM1 CR
void STM32FXXXDMA2_stream1_cr_chsel(uint8_t value)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 3, 25, value);
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	2219      	movs	r2, #25
 8007d9a:	2103      	movs	r1, #3
 8007d9c:	4803      	ldr	r0, [pc, #12]	@ (8007dac <STM32FXXXDMA2_stream1_cr_chsel+0x20>)
 8007d9e:	f7fb fc1d 	bl	80035dc <set_reg_block>
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	40026428 	.word	0x40026428

08007db0 <STM32FXXXDMA2_stream1_cr_mburst>:
void STM32FXXXDMA2_stream1_cr_mburst(uint8_t value)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 2, 23, value);
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	2217      	movs	r2, #23
 8007dbe:	2102      	movs	r1, #2
 8007dc0:	4803      	ldr	r0, [pc, #12]	@ (8007dd0 <STM32FXXXDMA2_stream1_cr_mburst+0x20>)
 8007dc2:	f7fb fc0b 	bl	80035dc <set_reg_block>
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	40026428 	.word	0x40026428

08007dd4 <STM32FXXXDMA2_stream1_cr_pburst>:
void STM32FXXXDMA2_stream1_cr_pburst(uint8_t value)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 2, 21, value);
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	2215      	movs	r2, #21
 8007de2:	2102      	movs	r1, #2
 8007de4:	4803      	ldr	r0, [pc, #12]	@ (8007df4 <STM32FXXXDMA2_stream1_cr_pburst+0x20>)
 8007de6:	f7fb fbf9 	bl	80035dc <set_reg_block>
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40026428 	.word	0x40026428

08007df8 <STM32FXXXDMA2_stream1_cr_ct>:
void STM32FXXXDMA2_stream1_cr_ct(uint8_t bool)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 19, bool);
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	2213      	movs	r2, #19
 8007e06:	2101      	movs	r1, #1
 8007e08:	4803      	ldr	r0, [pc, #12]	@ (8007e18 <STM32FXXXDMA2_stream1_cr_ct+0x20>)
 8007e0a:	f7fb fbe7 	bl	80035dc <set_reg_block>
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	40026428 	.word	0x40026428

08007e1c <STM32FXXXDMA2_stream1_cr_dbm>:
void STM32FXXXDMA2_stream1_cr_dbm(uint8_t bool)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 18, bool);
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	2212      	movs	r2, #18
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	4803      	ldr	r0, [pc, #12]	@ (8007e3c <STM32FXXXDMA2_stream1_cr_dbm+0x20>)
 8007e2e:	f7fb fbd5 	bl	80035dc <set_reg_block>
}
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	40026428 	.word	0x40026428

08007e40 <STM32FXXXDMA2_stream1_cr_pl>:
void STM32FXXXDMA2_stream1_cr_pl(uint8_t value)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 2, 16, value);
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	2210      	movs	r2, #16
 8007e4e:	2102      	movs	r1, #2
 8007e50:	4803      	ldr	r0, [pc, #12]	@ (8007e60 <STM32FXXXDMA2_stream1_cr_pl+0x20>)
 8007e52:	f7fb fbc3 	bl	80035dc <set_reg_block>
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	40026428 	.word	0x40026428

08007e64 <STM32FXXXDMA2_stream1_cr_pincos>:
void STM32FXXXDMA2_stream1_cr_pincos(uint8_t bool)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 15, bool);
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	220f      	movs	r2, #15
 8007e72:	2101      	movs	r1, #1
 8007e74:	4803      	ldr	r0, [pc, #12]	@ (8007e84 <STM32FXXXDMA2_stream1_cr_pincos+0x20>)
 8007e76:	f7fb fbb1 	bl	80035dc <set_reg_block>
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	40026428 	.word	0x40026428

08007e88 <STM32FXXXDMA2_stream1_cr_msize>:
void STM32FXXXDMA2_stream1_cr_msize(uint8_t value)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 2, 13, value);
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	220d      	movs	r2, #13
 8007e96:	2102      	movs	r1, #2
 8007e98:	4803      	ldr	r0, [pc, #12]	@ (8007ea8 <STM32FXXXDMA2_stream1_cr_msize+0x20>)
 8007e9a:	f7fb fb9f 	bl	80035dc <set_reg_block>
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	40026428 	.word	0x40026428

08007eac <STM32FXXXDMA2_stream1_cr_psize>:
void STM32FXXXDMA2_stream1_cr_psize(uint8_t value)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 2, 11, value);
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	220b      	movs	r2, #11
 8007eba:	2102      	movs	r1, #2
 8007ebc:	4803      	ldr	r0, [pc, #12]	@ (8007ecc <STM32FXXXDMA2_stream1_cr_psize+0x20>)
 8007ebe:	f7fb fb8d 	bl	80035dc <set_reg_block>
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	40026428 	.word	0x40026428

08007ed0 <STM32FXXXDMA2_stream1_cr_minc>:
void STM32FXXXDMA2_stream1_cr_minc(uint8_t bool)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 10, bool);
 8007eda:	79fb      	ldrb	r3, [r7, #7]
 8007edc:	220a      	movs	r2, #10
 8007ede:	2101      	movs	r1, #1
 8007ee0:	4803      	ldr	r0, [pc, #12]	@ (8007ef0 <STM32FXXXDMA2_stream1_cr_minc+0x20>)
 8007ee2:	f7fb fb7b 	bl	80035dc <set_reg_block>
}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	40026428 	.word	0x40026428

08007ef4 <STM32FXXXDMA2_stream1_cr_pinc>:
void STM32FXXXDMA2_stream1_cr_pinc(uint8_t bool)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 9, bool);
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	2209      	movs	r2, #9
 8007f02:	2101      	movs	r1, #1
 8007f04:	4803      	ldr	r0, [pc, #12]	@ (8007f14 <STM32FXXXDMA2_stream1_cr_pinc+0x20>)
 8007f06:	f7fb fb69 	bl	80035dc <set_reg_block>
}
 8007f0a:	bf00      	nop
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	40026428 	.word	0x40026428

08007f18 <STM32FXXXDMA2_stream1_cr_circ>:
void STM32FXXXDMA2_stream1_cr_circ(uint8_t bool)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 8, bool);
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	2208      	movs	r2, #8
 8007f26:	2101      	movs	r1, #1
 8007f28:	4803      	ldr	r0, [pc, #12]	@ (8007f38 <STM32FXXXDMA2_stream1_cr_circ+0x20>)
 8007f2a:	f7fb fb57 	bl	80035dc <set_reg_block>
}
 8007f2e:	bf00      	nop
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	40026428 	.word	0x40026428

08007f3c <STM32FXXXDMA2_stream1_cr_dir>:
void STM32FXXXDMA2_stream1_cr_dir(uint8_t value)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 2, 7, value);
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	2207      	movs	r2, #7
 8007f4a:	2102      	movs	r1, #2
 8007f4c:	4803      	ldr	r0, [pc, #12]	@ (8007f5c <STM32FXXXDMA2_stream1_cr_dir+0x20>)
 8007f4e:	f7fb fb45 	bl	80035dc <set_reg_block>
}
 8007f52:	bf00      	nop
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	40026428 	.word	0x40026428

08007f60 <STM32FXXXDMA2_stream1_cr_pfctrl>:
void STM32FXXXDMA2_stream1_cr_pfctrl(uint8_t bool)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 5, bool);
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	2205      	movs	r2, #5
 8007f6e:	2101      	movs	r1, #1
 8007f70:	4803      	ldr	r0, [pc, #12]	@ (8007f80 <STM32FXXXDMA2_stream1_cr_pfctrl+0x20>)
 8007f72:	f7fb fb33 	bl	80035dc <set_reg_block>
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	40026428 	.word	0x40026428

08007f84 <STM32FXXXDMA2_stream1_cr_tcie>:
void STM32FXXXDMA2_stream1_cr_tcie(uint8_t bool)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 4, bool);
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	2204      	movs	r2, #4
 8007f92:	2101      	movs	r1, #1
 8007f94:	4803      	ldr	r0, [pc, #12]	@ (8007fa4 <STM32FXXXDMA2_stream1_cr_tcie+0x20>)
 8007f96:	f7fb fb21 	bl	80035dc <set_reg_block>
}
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40026428 	.word	0x40026428

08007fa8 <STM32FXXXDMA2_stream1_cr_htie>:
void STM32FXXXDMA2_stream1_cr_htie(uint8_t bool)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 3, bool);
 8007fb2:	79fb      	ldrb	r3, [r7, #7]
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	4803      	ldr	r0, [pc, #12]	@ (8007fc8 <STM32FXXXDMA2_stream1_cr_htie+0x20>)
 8007fba:	f7fb fb0f 	bl	80035dc <set_reg_block>
}
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	40026428 	.word	0x40026428

08007fcc <STM32FXXXDMA2_stream1_cr_teie>:
void STM32FXXXDMA2_stream1_cr_teie(uint8_t bool)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 2, bool);
 8007fd6:	79fb      	ldrb	r3, [r7, #7]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	2101      	movs	r1, #1
 8007fdc:	4803      	ldr	r0, [pc, #12]	@ (8007fec <STM32FXXXDMA2_stream1_cr_teie+0x20>)
 8007fde:	f7fb fafd 	bl	80035dc <set_reg_block>
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	40026428 	.word	0x40026428

08007ff0 <STM32FXXXDMA2_stream1_cr_dmeie>:
void STM32FXXXDMA2_stream1_cr_dmeie(uint8_t bool)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 1, bool);
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	2101      	movs	r1, #1
 8008000:	4803      	ldr	r0, [pc, #12]	@ (8008010 <STM32FXXXDMA2_stream1_cr_dmeie+0x20>)
 8008002:	f7fb faeb 	bl	80035dc <set_reg_block>
}
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	40026428 	.word	0x40026428

08008014 <STM32FXXXDMA2_stream1_cr_en>:
void STM32FXXXDMA2_stream1_cr_en(uint8_t bool)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	4603      	mov	r3, r0
 800801c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->CR, 1, 0, bool);
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	2200      	movs	r2, #0
 8008022:	2101      	movs	r1, #1
 8008024:	4803      	ldr	r0, [pc, #12]	@ (8008034 <STM32FXXXDMA2_stream1_cr_en+0x20>)
 8008026:	f7fb fad9 	bl	80035dc <set_reg_block>
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	40026428 	.word	0x40026428

08008038 <stm32fxxx_dma2_stream1_cr_inic>:
/*** Inic DMA2 STREAM1 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma2_stream1_cr_inic(void)
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma2_stream1_cr.chsel = STM32FXXXDMA2_stream1_cr_chsel;
 800803c:	4b1f      	ldr	r3, [pc, #124]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 800803e:	4a20      	ldr	r2, [pc, #128]	@ (80080c0 <stm32fxxx_dma2_stream1_cr_inic+0x88>)
 8008040:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream1_cr.mburst = STM32FXXXDMA2_stream1_cr_mburst;
 8008042:	4b1e      	ldr	r3, [pc, #120]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 8008044:	4a1f      	ldr	r2, [pc, #124]	@ (80080c4 <stm32fxxx_dma2_stream1_cr_inic+0x8c>)
 8008046:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream1_cr.pburst = STM32FXXXDMA2_stream1_cr_pburst;
 8008048:	4b1c      	ldr	r3, [pc, #112]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 800804a:	4a1f      	ldr	r2, [pc, #124]	@ (80080c8 <stm32fxxx_dma2_stream1_cr_inic+0x90>)
 800804c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream1_cr.ct = STM32FXXXDMA2_stream1_cr_ct;
 800804e:	4b1b      	ldr	r3, [pc, #108]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 8008050:	4a1e      	ldr	r2, [pc, #120]	@ (80080cc <stm32fxxx_dma2_stream1_cr_inic+0x94>)
 8008052:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2_stream1_cr.dbm = STM32FXXXDMA2_stream1_cr_dbm;
 8008054:	4b19      	ldr	r3, [pc, #100]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 8008056:	4a1e      	ldr	r2, [pc, #120]	@ (80080d0 <stm32fxxx_dma2_stream1_cr_inic+0x98>)
 8008058:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma2_stream1_cr.pl = STM32FXXXDMA2_stream1_cr_pl;
 800805a:	4b18      	ldr	r3, [pc, #96]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 800805c:	4a1d      	ldr	r2, [pc, #116]	@ (80080d4 <stm32fxxx_dma2_stream1_cr_inic+0x9c>)
 800805e:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma2_stream1_cr.pincos = STM32FXXXDMA2_stream1_cr_pincos;
 8008060:	4b16      	ldr	r3, [pc, #88]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 8008062:	4a1d      	ldr	r2, [pc, #116]	@ (80080d8 <stm32fxxx_dma2_stream1_cr_inic+0xa0>)
 8008064:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma2_stream1_cr.msize = STM32FXXXDMA2_stream1_cr_msize;
 8008066:	4b15      	ldr	r3, [pc, #84]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 8008068:	4a1c      	ldr	r2, [pc, #112]	@ (80080dc <stm32fxxx_dma2_stream1_cr_inic+0xa4>)
 800806a:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma2_stream1_cr.psize = STM32FXXXDMA2_stream1_cr_psize;
 800806c:	4b13      	ldr	r3, [pc, #76]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 800806e:	4a1c      	ldr	r2, [pc, #112]	@ (80080e0 <stm32fxxx_dma2_stream1_cr_inic+0xa8>)
 8008070:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma2_stream1_cr.minc = STM32FXXXDMA2_stream1_cr_minc;
 8008072:	4b12      	ldr	r3, [pc, #72]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 8008074:	4a1b      	ldr	r2, [pc, #108]	@ (80080e4 <stm32fxxx_dma2_stream1_cr_inic+0xac>)
 8008076:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma2_stream1_cr.pinc = STM32FXXXDMA2_stream1_cr_pinc;
 8008078:	4b10      	ldr	r3, [pc, #64]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 800807a:	4a1b      	ldr	r2, [pc, #108]	@ (80080e8 <stm32fxxx_dma2_stream1_cr_inic+0xb0>)
 800807c:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma2_stream1_cr.circ = STM32FXXXDMA2_stream1_cr_circ;
 800807e:	4b0f      	ldr	r3, [pc, #60]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 8008080:	4a1a      	ldr	r2, [pc, #104]	@ (80080ec <stm32fxxx_dma2_stream1_cr_inic+0xb4>)
 8008082:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma2_stream1_cr.dir = STM32FXXXDMA2_stream1_cr_dir;
 8008084:	4b0d      	ldr	r3, [pc, #52]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 8008086:	4a1a      	ldr	r2, [pc, #104]	@ (80080f0 <stm32fxxx_dma2_stream1_cr_inic+0xb8>)
 8008088:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma2_stream1_cr.pfctrl = STM32FXXXDMA2_stream1_cr_pfctrl;
 800808a:	4b0c      	ldr	r3, [pc, #48]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 800808c:	4a19      	ldr	r2, [pc, #100]	@ (80080f4 <stm32fxxx_dma2_stream1_cr_inic+0xbc>)
 800808e:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma2_stream1_cr.tcie = STM32FXXXDMA2_stream1_cr_tcie;
 8008090:	4b0a      	ldr	r3, [pc, #40]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 8008092:	4a19      	ldr	r2, [pc, #100]	@ (80080f8 <stm32fxxx_dma2_stream1_cr_inic+0xc0>)
 8008094:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma2_stream1_cr.htie = STM32FXXXDMA2_stream1_cr_htie;
 8008096:	4b09      	ldr	r3, [pc, #36]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 8008098:	4a18      	ldr	r2, [pc, #96]	@ (80080fc <stm32fxxx_dma2_stream1_cr_inic+0xc4>)
 800809a:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma2_stream1_cr.teie = STM32FXXXDMA2_stream1_cr_teie;
 800809c:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 800809e:	4a18      	ldr	r2, [pc, #96]	@ (8008100 <stm32fxxx_dma2_stream1_cr_inic+0xc8>)
 80080a0:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma2_stream1_cr.dmeie = STM32FXXXDMA2_stream1_cr_dmeie;
 80080a2:	4b06      	ldr	r3, [pc, #24]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 80080a4:	4a17      	ldr	r2, [pc, #92]	@ (8008104 <stm32fxxx_dma2_stream1_cr_inic+0xcc>)
 80080a6:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma2_stream1_cr.en = STM32FXXXDMA2_stream1_cr_en;
 80080a8:	4b04      	ldr	r3, [pc, #16]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
 80080aa:	4a17      	ldr	r2, [pc, #92]	@ (8008108 <stm32fxxx_dma2_stream1_cr_inic+0xd0>)
 80080ac:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma2_stream1_cr;
 80080ae:	4b03      	ldr	r3, [pc, #12]	@ (80080bc <stm32fxxx_dma2_stream1_cr_inic+0x84>)
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20000614 	.word	0x20000614
 80080c0:	08007d8d 	.word	0x08007d8d
 80080c4:	08007db1 	.word	0x08007db1
 80080c8:	08007dd5 	.word	0x08007dd5
 80080cc:	08007df9 	.word	0x08007df9
 80080d0:	08007e1d 	.word	0x08007e1d
 80080d4:	08007e41 	.word	0x08007e41
 80080d8:	08007e65 	.word	0x08007e65
 80080dc:	08007e89 	.word	0x08007e89
 80080e0:	08007ead 	.word	0x08007ead
 80080e4:	08007ed1 	.word	0x08007ed1
 80080e8:	08007ef5 	.word	0x08007ef5
 80080ec:	08007f19 	.word	0x08007f19
 80080f0:	08007f3d 	.word	0x08007f3d
 80080f4:	08007f61 	.word	0x08007f61
 80080f8:	08007f85 	.word	0x08007f85
 80080fc:	08007fa9 	.word	0x08007fa9
 8008100:	08007fcd 	.word	0x08007fcd
 8008104:	08007ff1 	.word	0x08007ff1
 8008108:	08008015 	.word	0x08008015

0800810c <stm32fxxx_dma2_stream1_ndt>:
/*** Inic DMA2 STREAM1 Function ***/
void stm32fxxx_dma2_stream1_ndt(uint16_t value)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	80fb      	strh	r3, [r7, #6]
	DMA2_Stream1->NDTR = value;
 8008116:	4a04      	ldr	r2, [pc, #16]	@ (8008128 <stm32fxxx_dma2_stream1_ndt+0x1c>)
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	6053      	str	r3, [r2, #4]
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	40026428 	.word	0x40026428

0800812c <stm32fxxx_dma2_stream1_par>:
void stm32fxxx_dma2_stream1_par(volatile long unsigned int periferal_addr)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	DMA2_Stream1->PAR = periferal_addr;
 8008134:	4a04      	ldr	r2, [pc, #16]	@ (8008148 <stm32fxxx_dma2_stream1_par+0x1c>)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6093      	str	r3, [r2, #8]
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	40026428 	.word	0x40026428

0800814c <stm32fxxx_dma2_stream1_m0a>:
void stm32fxxx_dma2_stream1_m0a(volatile long unsigned int mem0_addr)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	DMA2_Stream1->M0AR = mem0_addr;
 8008154:	4a04      	ldr	r2, [pc, #16]	@ (8008168 <stm32fxxx_dma2_stream1_m0a+0x1c>)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	60d3      	str	r3, [r2, #12]
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	40026428 	.word	0x40026428

0800816c <stm32fxxx_dma2_stream1_m1a>:
void stm32fxxx_dma2_stream1_m1a(volatile long unsigned int mem1_addr)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	DMA2_Stream1->M1AR = mem1_addr;
 8008174:	4a04      	ldr	r2, [pc, #16]	@ (8008188 <stm32fxxx_dma2_stream1_m1a+0x1c>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6113      	str	r3, [r2, #16]
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	40026428 	.word	0x40026428

0800818c <STM32FXXXDMA2_stream2_cr_chsel>:
// DMA2 STREAM2 CR
void STM32FXXXDMA2_stream2_cr_chsel(uint8_t value)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 3, 25, value);
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	2219      	movs	r2, #25
 800819a:	2103      	movs	r1, #3
 800819c:	4803      	ldr	r0, [pc, #12]	@ (80081ac <STM32FXXXDMA2_stream2_cr_chsel+0x20>)
 800819e:	f7fb fa1d 	bl	80035dc <set_reg_block>
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	40026440 	.word	0x40026440

080081b0 <STM32FXXXDMA2_stream2_cr_mburst>:
void STM32FXXXDMA2_stream2_cr_mburst(uint8_t value)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 2, 23, value);
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	2217      	movs	r2, #23
 80081be:	2102      	movs	r1, #2
 80081c0:	4803      	ldr	r0, [pc, #12]	@ (80081d0 <STM32FXXXDMA2_stream2_cr_mburst+0x20>)
 80081c2:	f7fb fa0b 	bl	80035dc <set_reg_block>
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	40026440 	.word	0x40026440

080081d4 <STM32FXXXDMA2_stream2_cr_pburst>:
void STM32FXXXDMA2_stream2_cr_pburst(uint8_t value)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 2, 21, value);
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	2215      	movs	r2, #21
 80081e2:	2102      	movs	r1, #2
 80081e4:	4803      	ldr	r0, [pc, #12]	@ (80081f4 <STM32FXXXDMA2_stream2_cr_pburst+0x20>)
 80081e6:	f7fb f9f9 	bl	80035dc <set_reg_block>
}
 80081ea:	bf00      	nop
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	40026440 	.word	0x40026440

080081f8 <STM32FXXXDMA2_stream2_cr_ct>:
void STM32FXXXDMA2_stream2_cr_ct(uint8_t bool)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 19, bool);
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	2213      	movs	r2, #19
 8008206:	2101      	movs	r1, #1
 8008208:	4803      	ldr	r0, [pc, #12]	@ (8008218 <STM32FXXXDMA2_stream2_cr_ct+0x20>)
 800820a:	f7fb f9e7 	bl	80035dc <set_reg_block>
}
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	40026440 	.word	0x40026440

0800821c <STM32FXXXDMA2_stream2_cr_dbm>:
void STM32FXXXDMA2_stream2_cr_dbm(uint8_t bool)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 18, bool);
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	2212      	movs	r2, #18
 800822a:	2101      	movs	r1, #1
 800822c:	4803      	ldr	r0, [pc, #12]	@ (800823c <STM32FXXXDMA2_stream2_cr_dbm+0x20>)
 800822e:	f7fb f9d5 	bl	80035dc <set_reg_block>
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	40026440 	.word	0x40026440

08008240 <STM32FXXXDMA2_stream2_cr_pl>:
void STM32FXXXDMA2_stream2_cr_pl(uint8_t value)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 2, 16, value);
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	2210      	movs	r2, #16
 800824e:	2102      	movs	r1, #2
 8008250:	4803      	ldr	r0, [pc, #12]	@ (8008260 <STM32FXXXDMA2_stream2_cr_pl+0x20>)
 8008252:	f7fb f9c3 	bl	80035dc <set_reg_block>
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40026440 	.word	0x40026440

08008264 <STM32FXXXDMA2_stream2_cr_pincos>:
void STM32FXXXDMA2_stream2_cr_pincos(uint8_t bool)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 15, bool);
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	220f      	movs	r2, #15
 8008272:	2101      	movs	r1, #1
 8008274:	4803      	ldr	r0, [pc, #12]	@ (8008284 <STM32FXXXDMA2_stream2_cr_pincos+0x20>)
 8008276:	f7fb f9b1 	bl	80035dc <set_reg_block>
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	40026440 	.word	0x40026440

08008288 <STM32FXXXDMA2_stream2_cr_msize>:
void STM32FXXXDMA2_stream2_cr_msize(uint8_t value)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 2, 13, value);
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	220d      	movs	r2, #13
 8008296:	2102      	movs	r1, #2
 8008298:	4803      	ldr	r0, [pc, #12]	@ (80082a8 <STM32FXXXDMA2_stream2_cr_msize+0x20>)
 800829a:	f7fb f99f 	bl	80035dc <set_reg_block>
}
 800829e:	bf00      	nop
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	40026440 	.word	0x40026440

080082ac <STM32FXXXDMA2_stream2_cr_psize>:
void STM32FXXXDMA2_stream2_cr_psize(uint8_t value)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 2, 11, value);
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	220b      	movs	r2, #11
 80082ba:	2102      	movs	r1, #2
 80082bc:	4803      	ldr	r0, [pc, #12]	@ (80082cc <STM32FXXXDMA2_stream2_cr_psize+0x20>)
 80082be:	f7fb f98d 	bl	80035dc <set_reg_block>
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	40026440 	.word	0x40026440

080082d0 <STM32FXXXDMA2_stream2_cr_minc>:
void STM32FXXXDMA2_stream2_cr_minc(uint8_t bool)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 10, bool);
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	220a      	movs	r2, #10
 80082de:	2101      	movs	r1, #1
 80082e0:	4803      	ldr	r0, [pc, #12]	@ (80082f0 <STM32FXXXDMA2_stream2_cr_minc+0x20>)
 80082e2:	f7fb f97b 	bl	80035dc <set_reg_block>
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40026440 	.word	0x40026440

080082f4 <STM32FXXXDMA2_stream2_cr_pinc>:
void STM32FXXXDMA2_stream2_cr_pinc(uint8_t bool)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 9, bool);
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	2209      	movs	r2, #9
 8008302:	2101      	movs	r1, #1
 8008304:	4803      	ldr	r0, [pc, #12]	@ (8008314 <STM32FXXXDMA2_stream2_cr_pinc+0x20>)
 8008306:	f7fb f969 	bl	80035dc <set_reg_block>
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	40026440 	.word	0x40026440

08008318 <STM32FXXXDMA2_stream2_cr_circ>:
void STM32FXXXDMA2_stream2_cr_circ(uint8_t bool)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 8, bool);
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	2208      	movs	r2, #8
 8008326:	2101      	movs	r1, #1
 8008328:	4803      	ldr	r0, [pc, #12]	@ (8008338 <STM32FXXXDMA2_stream2_cr_circ+0x20>)
 800832a:	f7fb f957 	bl	80035dc <set_reg_block>
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40026440 	.word	0x40026440

0800833c <STM32FXXXDMA2_stream2_cr_dir>:
void STM32FXXXDMA2_stream2_cr_dir(uint8_t value)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 2, 7, value);
 8008346:	79fb      	ldrb	r3, [r7, #7]
 8008348:	2207      	movs	r2, #7
 800834a:	2102      	movs	r1, #2
 800834c:	4803      	ldr	r0, [pc, #12]	@ (800835c <STM32FXXXDMA2_stream2_cr_dir+0x20>)
 800834e:	f7fb f945 	bl	80035dc <set_reg_block>
}
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	40026440 	.word	0x40026440

08008360 <STM32FXXXDMA2_stream2_cr_pfctrl>:
void STM32FXXXDMA2_stream2_cr_pfctrl(uint8_t bool)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 5, bool);
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	2205      	movs	r2, #5
 800836e:	2101      	movs	r1, #1
 8008370:	4803      	ldr	r0, [pc, #12]	@ (8008380 <STM32FXXXDMA2_stream2_cr_pfctrl+0x20>)
 8008372:	f7fb f933 	bl	80035dc <set_reg_block>
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	40026440 	.word	0x40026440

08008384 <STM32FXXXDMA2_stream2_cr_tcie>:
void STM32FXXXDMA2_stream2_cr_tcie(uint8_t bool)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 4, bool);
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	2204      	movs	r2, #4
 8008392:	2101      	movs	r1, #1
 8008394:	4803      	ldr	r0, [pc, #12]	@ (80083a4 <STM32FXXXDMA2_stream2_cr_tcie+0x20>)
 8008396:	f7fb f921 	bl	80035dc <set_reg_block>
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40026440 	.word	0x40026440

080083a8 <STM32FXXXDMA2_stream2_cr_htie>:
void STM32FXXXDMA2_stream2_cr_htie(uint8_t bool)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 3, bool);
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	2203      	movs	r2, #3
 80083b6:	2101      	movs	r1, #1
 80083b8:	4803      	ldr	r0, [pc, #12]	@ (80083c8 <STM32FXXXDMA2_stream2_cr_htie+0x20>)
 80083ba:	f7fb f90f 	bl	80035dc <set_reg_block>
}
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	40026440 	.word	0x40026440

080083cc <STM32FXXXDMA2_stream2_cr_teie>:
void STM32FXXXDMA2_stream2_cr_teie(uint8_t bool)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 2, bool);
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	2202      	movs	r2, #2
 80083da:	2101      	movs	r1, #1
 80083dc:	4803      	ldr	r0, [pc, #12]	@ (80083ec <STM32FXXXDMA2_stream2_cr_teie+0x20>)
 80083de:	f7fb f8fd 	bl	80035dc <set_reg_block>
}
 80083e2:	bf00      	nop
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40026440 	.word	0x40026440

080083f0 <STM32FXXXDMA2_stream2_cr_dmeie>:
void STM32FXXXDMA2_stream2_cr_dmeie(uint8_t bool)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 1, bool);
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	2201      	movs	r2, #1
 80083fe:	2101      	movs	r1, #1
 8008400:	4803      	ldr	r0, [pc, #12]	@ (8008410 <STM32FXXXDMA2_stream2_cr_dmeie+0x20>)
 8008402:	f7fb f8eb 	bl	80035dc <set_reg_block>
}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40026440 	.word	0x40026440

08008414 <STM32FXXXDMA2_stream2_cr_en>:
void STM32FXXXDMA2_stream2_cr_en(uint8_t bool)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->CR, 1, 0, bool);
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	2200      	movs	r2, #0
 8008422:	2101      	movs	r1, #1
 8008424:	4803      	ldr	r0, [pc, #12]	@ (8008434 <STM32FXXXDMA2_stream2_cr_en+0x20>)
 8008426:	f7fb f8d9 	bl	80035dc <set_reg_block>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	40026440 	.word	0x40026440

08008438 <stm32fxxx_dma2_stream2_cr_inic>:
/*** Inic DMA2 STREAM2 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma2_stream2_cr_inic(void)
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma2_stream2_cr.chsel = STM32FXXXDMA2_stream2_cr_chsel;
 800843c:	4b1f      	ldr	r3, [pc, #124]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 800843e:	4a20      	ldr	r2, [pc, #128]	@ (80084c0 <stm32fxxx_dma2_stream2_cr_inic+0x88>)
 8008440:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream2_cr.mburst = STM32FXXXDMA2_stream2_cr_mburst;
 8008442:	4b1e      	ldr	r3, [pc, #120]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 8008444:	4a1f      	ldr	r2, [pc, #124]	@ (80084c4 <stm32fxxx_dma2_stream2_cr_inic+0x8c>)
 8008446:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream2_cr.pburst = STM32FXXXDMA2_stream2_cr_pburst;
 8008448:	4b1c      	ldr	r3, [pc, #112]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 800844a:	4a1f      	ldr	r2, [pc, #124]	@ (80084c8 <stm32fxxx_dma2_stream2_cr_inic+0x90>)
 800844c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream2_cr.ct = STM32FXXXDMA2_stream2_cr_ct;
 800844e:	4b1b      	ldr	r3, [pc, #108]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 8008450:	4a1e      	ldr	r2, [pc, #120]	@ (80084cc <stm32fxxx_dma2_stream2_cr_inic+0x94>)
 8008452:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2_stream2_cr.dbm = STM32FXXXDMA2_stream2_cr_dbm;
 8008454:	4b19      	ldr	r3, [pc, #100]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 8008456:	4a1e      	ldr	r2, [pc, #120]	@ (80084d0 <stm32fxxx_dma2_stream2_cr_inic+0x98>)
 8008458:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma2_stream2_cr.pl = STM32FXXXDMA2_stream2_cr_pl;
 800845a:	4b18      	ldr	r3, [pc, #96]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 800845c:	4a1d      	ldr	r2, [pc, #116]	@ (80084d4 <stm32fxxx_dma2_stream2_cr_inic+0x9c>)
 800845e:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma2_stream2_cr.pincos = STM32FXXXDMA2_stream2_cr_pincos;
 8008460:	4b16      	ldr	r3, [pc, #88]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 8008462:	4a1d      	ldr	r2, [pc, #116]	@ (80084d8 <stm32fxxx_dma2_stream2_cr_inic+0xa0>)
 8008464:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma2_stream2_cr.msize = STM32FXXXDMA2_stream2_cr_msize;
 8008466:	4b15      	ldr	r3, [pc, #84]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 8008468:	4a1c      	ldr	r2, [pc, #112]	@ (80084dc <stm32fxxx_dma2_stream2_cr_inic+0xa4>)
 800846a:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma2_stream2_cr.psize = STM32FXXXDMA2_stream2_cr_psize;
 800846c:	4b13      	ldr	r3, [pc, #76]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 800846e:	4a1c      	ldr	r2, [pc, #112]	@ (80084e0 <stm32fxxx_dma2_stream2_cr_inic+0xa8>)
 8008470:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma2_stream2_cr.minc = STM32FXXXDMA2_stream2_cr_minc;
 8008472:	4b12      	ldr	r3, [pc, #72]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 8008474:	4a1b      	ldr	r2, [pc, #108]	@ (80084e4 <stm32fxxx_dma2_stream2_cr_inic+0xac>)
 8008476:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma2_stream2_cr.pinc = STM32FXXXDMA2_stream2_cr_pinc;
 8008478:	4b10      	ldr	r3, [pc, #64]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 800847a:	4a1b      	ldr	r2, [pc, #108]	@ (80084e8 <stm32fxxx_dma2_stream2_cr_inic+0xb0>)
 800847c:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma2_stream2_cr.circ = STM32FXXXDMA2_stream2_cr_circ;
 800847e:	4b0f      	ldr	r3, [pc, #60]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 8008480:	4a1a      	ldr	r2, [pc, #104]	@ (80084ec <stm32fxxx_dma2_stream2_cr_inic+0xb4>)
 8008482:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma2_stream2_cr.dir = STM32FXXXDMA2_stream2_cr_dir;
 8008484:	4b0d      	ldr	r3, [pc, #52]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 8008486:	4a1a      	ldr	r2, [pc, #104]	@ (80084f0 <stm32fxxx_dma2_stream2_cr_inic+0xb8>)
 8008488:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma2_stream2_cr.pfctrl = STM32FXXXDMA2_stream2_cr_pfctrl;
 800848a:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 800848c:	4a19      	ldr	r2, [pc, #100]	@ (80084f4 <stm32fxxx_dma2_stream2_cr_inic+0xbc>)
 800848e:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma2_stream2_cr.tcie = STM32FXXXDMA2_stream2_cr_tcie;
 8008490:	4b0a      	ldr	r3, [pc, #40]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 8008492:	4a19      	ldr	r2, [pc, #100]	@ (80084f8 <stm32fxxx_dma2_stream2_cr_inic+0xc0>)
 8008494:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma2_stream2_cr.htie = STM32FXXXDMA2_stream2_cr_htie;
 8008496:	4b09      	ldr	r3, [pc, #36]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 8008498:	4a18      	ldr	r2, [pc, #96]	@ (80084fc <stm32fxxx_dma2_stream2_cr_inic+0xc4>)
 800849a:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma2_stream2_cr.teie = STM32FXXXDMA2_stream2_cr_teie;
 800849c:	4b07      	ldr	r3, [pc, #28]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 800849e:	4a18      	ldr	r2, [pc, #96]	@ (8008500 <stm32fxxx_dma2_stream2_cr_inic+0xc8>)
 80084a0:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma2_stream2_cr.dmeie = STM32FXXXDMA2_stream2_cr_dmeie;
 80084a2:	4b06      	ldr	r3, [pc, #24]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 80084a4:	4a17      	ldr	r2, [pc, #92]	@ (8008504 <stm32fxxx_dma2_stream2_cr_inic+0xcc>)
 80084a6:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma2_stream2_cr.en = STM32FXXXDMA2_stream2_cr_en;
 80084a8:	4b04      	ldr	r3, [pc, #16]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
 80084aa:	4a17      	ldr	r2, [pc, #92]	@ (8008508 <stm32fxxx_dma2_stream2_cr_inic+0xd0>)
 80084ac:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma2_stream2_cr;
 80084ae:	4b03      	ldr	r3, [pc, #12]	@ (80084bc <stm32fxxx_dma2_stream2_cr_inic+0x84>)
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	20000660 	.word	0x20000660
 80084c0:	0800818d 	.word	0x0800818d
 80084c4:	080081b1 	.word	0x080081b1
 80084c8:	080081d5 	.word	0x080081d5
 80084cc:	080081f9 	.word	0x080081f9
 80084d0:	0800821d 	.word	0x0800821d
 80084d4:	08008241 	.word	0x08008241
 80084d8:	08008265 	.word	0x08008265
 80084dc:	08008289 	.word	0x08008289
 80084e0:	080082ad 	.word	0x080082ad
 80084e4:	080082d1 	.word	0x080082d1
 80084e8:	080082f5 	.word	0x080082f5
 80084ec:	08008319 	.word	0x08008319
 80084f0:	0800833d 	.word	0x0800833d
 80084f4:	08008361 	.word	0x08008361
 80084f8:	08008385 	.word	0x08008385
 80084fc:	080083a9 	.word	0x080083a9
 8008500:	080083cd 	.word	0x080083cd
 8008504:	080083f1 	.word	0x080083f1
 8008508:	08008415 	.word	0x08008415

0800850c <stm32fxxx_dma2_stream2_ndt>:
/*** Inic DMA2 STREAM2 Function ***/
void stm32fxxx_dma2_stream2_ndt(uint16_t value)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	80fb      	strh	r3, [r7, #6]
	DMA2_Stream2->NDTR = value;
 8008516:	4a04      	ldr	r2, [pc, #16]	@ (8008528 <stm32fxxx_dma2_stream2_ndt+0x1c>)
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	6053      	str	r3, [r2, #4]
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	40026440 	.word	0x40026440

0800852c <stm32fxxx_dma2_stream2_par>:
void stm32fxxx_dma2_stream2_par(volatile long unsigned int periferal_addr)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
	DMA2_Stream2->PAR = periferal_addr;
 8008534:	4a04      	ldr	r2, [pc, #16]	@ (8008548 <stm32fxxx_dma2_stream2_par+0x1c>)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6093      	str	r3, [r2, #8]
}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	40026440 	.word	0x40026440

0800854c <stm32fxxx_dma2_stream2_m0a>:
void stm32fxxx_dma2_stream2_m0a(volatile long unsigned int mem0_addr)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	DMA2_Stream2->M0AR = mem0_addr;
 8008554:	4a04      	ldr	r2, [pc, #16]	@ (8008568 <stm32fxxx_dma2_stream2_m0a+0x1c>)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60d3      	str	r3, [r2, #12]
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	40026440 	.word	0x40026440

0800856c <stm32fxxx_dma2_stream2_m1a>:
void stm32fxxx_dma2_stream2_m1a(volatile long unsigned int mem1_addr)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
	DMA2_Stream2->M1AR = mem1_addr;
 8008574:	4a04      	ldr	r2, [pc, #16]	@ (8008588 <stm32fxxx_dma2_stream2_m1a+0x1c>)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6113      	str	r3, [r2, #16]
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40026440 	.word	0x40026440

0800858c <STM32FXXXDMA2_stream3_cr_chsel>:
// DMA2 STREAM3 CR
void STM32FXXXDMA2_stream3_cr_chsel(uint8_t value)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 3, 25, value);
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	2219      	movs	r2, #25
 800859a:	2103      	movs	r1, #3
 800859c:	4803      	ldr	r0, [pc, #12]	@ (80085ac <STM32FXXXDMA2_stream3_cr_chsel+0x20>)
 800859e:	f7fb f81d 	bl	80035dc <set_reg_block>
}
 80085a2:	bf00      	nop
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40026458 	.word	0x40026458

080085b0 <STM32FXXXDMA2_stream3_cr_mburst>:
void STM32FXXXDMA2_stream3_cr_mburst(uint8_t value)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 2, 23, value);
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	2217      	movs	r2, #23
 80085be:	2102      	movs	r1, #2
 80085c0:	4803      	ldr	r0, [pc, #12]	@ (80085d0 <STM32FXXXDMA2_stream3_cr_mburst+0x20>)
 80085c2:	f7fb f80b 	bl	80035dc <set_reg_block>
}
 80085c6:	bf00      	nop
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40026458 	.word	0x40026458

080085d4 <STM32FXXXDMA2_stream3_cr_pburst>:
void STM32FXXXDMA2_stream3_cr_pburst(uint8_t value)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 2, 21, value);
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	2215      	movs	r2, #21
 80085e2:	2102      	movs	r1, #2
 80085e4:	4803      	ldr	r0, [pc, #12]	@ (80085f4 <STM32FXXXDMA2_stream3_cr_pburst+0x20>)
 80085e6:	f7fa fff9 	bl	80035dc <set_reg_block>
}
 80085ea:	bf00      	nop
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	40026458 	.word	0x40026458

080085f8 <STM32FXXXDMA2_stream3_cr_ct>:
void STM32FXXXDMA2_stream3_cr_ct(uint8_t bool)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 19, bool);
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	2213      	movs	r2, #19
 8008606:	2101      	movs	r1, #1
 8008608:	4803      	ldr	r0, [pc, #12]	@ (8008618 <STM32FXXXDMA2_stream3_cr_ct+0x20>)
 800860a:	f7fa ffe7 	bl	80035dc <set_reg_block>
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	40026458 	.word	0x40026458

0800861c <STM32FXXXDMA2_stream3_cr_dbm>:
void STM32FXXXDMA2_stream3_cr_dbm(uint8_t bool)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 18, bool);
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	2212      	movs	r2, #18
 800862a:	2101      	movs	r1, #1
 800862c:	4803      	ldr	r0, [pc, #12]	@ (800863c <STM32FXXXDMA2_stream3_cr_dbm+0x20>)
 800862e:	f7fa ffd5 	bl	80035dc <set_reg_block>
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	40026458 	.word	0x40026458

08008640 <STM32FXXXDMA2_stream3_cr_pl>:
void STM32FXXXDMA2_stream3_cr_pl(uint8_t value)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 2, 16, value);
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	2210      	movs	r2, #16
 800864e:	2102      	movs	r1, #2
 8008650:	4803      	ldr	r0, [pc, #12]	@ (8008660 <STM32FXXXDMA2_stream3_cr_pl+0x20>)
 8008652:	f7fa ffc3 	bl	80035dc <set_reg_block>
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	40026458 	.word	0x40026458

08008664 <STM32FXXXDMA2_stream3_cr_pincos>:
void STM32FXXXDMA2_stream3_cr_pincos(uint8_t bool)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 15, bool);
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	220f      	movs	r2, #15
 8008672:	2101      	movs	r1, #1
 8008674:	4803      	ldr	r0, [pc, #12]	@ (8008684 <STM32FXXXDMA2_stream3_cr_pincos+0x20>)
 8008676:	f7fa ffb1 	bl	80035dc <set_reg_block>
}
 800867a:	bf00      	nop
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40026458 	.word	0x40026458

08008688 <STM32FXXXDMA2_stream3_cr_msize>:
void STM32FXXXDMA2_stream3_cr_msize(uint8_t value)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 2, 13, value);
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	220d      	movs	r2, #13
 8008696:	2102      	movs	r1, #2
 8008698:	4803      	ldr	r0, [pc, #12]	@ (80086a8 <STM32FXXXDMA2_stream3_cr_msize+0x20>)
 800869a:	f7fa ff9f 	bl	80035dc <set_reg_block>
}
 800869e:	bf00      	nop
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	40026458 	.word	0x40026458

080086ac <STM32FXXXDMA2_stream3_cr_psize>:
void STM32FXXXDMA2_stream3_cr_psize(uint8_t value)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	4603      	mov	r3, r0
 80086b4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 2, 11, value);
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	220b      	movs	r2, #11
 80086ba:	2102      	movs	r1, #2
 80086bc:	4803      	ldr	r0, [pc, #12]	@ (80086cc <STM32FXXXDMA2_stream3_cr_psize+0x20>)
 80086be:	f7fa ff8d 	bl	80035dc <set_reg_block>
}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	40026458 	.word	0x40026458

080086d0 <STM32FXXXDMA2_stream3_cr_minc>:
void STM32FXXXDMA2_stream3_cr_minc(uint8_t bool)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 10, bool);
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	220a      	movs	r2, #10
 80086de:	2101      	movs	r1, #1
 80086e0:	4803      	ldr	r0, [pc, #12]	@ (80086f0 <STM32FXXXDMA2_stream3_cr_minc+0x20>)
 80086e2:	f7fa ff7b 	bl	80035dc <set_reg_block>
}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	40026458 	.word	0x40026458

080086f4 <STM32FXXXDMA2_stream3_cr_pinc>:
void STM32FXXXDMA2_stream3_cr_pinc(uint8_t bool)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 9, bool);
 80086fe:	79fb      	ldrb	r3, [r7, #7]
 8008700:	2209      	movs	r2, #9
 8008702:	2101      	movs	r1, #1
 8008704:	4803      	ldr	r0, [pc, #12]	@ (8008714 <STM32FXXXDMA2_stream3_cr_pinc+0x20>)
 8008706:	f7fa ff69 	bl	80035dc <set_reg_block>
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	40026458 	.word	0x40026458

08008718 <STM32FXXXDMA2_stream3_cr_circ>:
void STM32FXXXDMA2_stream3_cr_circ(uint8_t bool)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 8, bool);
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	2208      	movs	r2, #8
 8008726:	2101      	movs	r1, #1
 8008728:	4803      	ldr	r0, [pc, #12]	@ (8008738 <STM32FXXXDMA2_stream3_cr_circ+0x20>)
 800872a:	f7fa ff57 	bl	80035dc <set_reg_block>
}
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	40026458 	.word	0x40026458

0800873c <STM32FXXXDMA2_stream3_cr_dir>:
void STM32FXXXDMA2_stream3_cr_dir(uint8_t value)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 2, 7, value);
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	2207      	movs	r2, #7
 800874a:	2102      	movs	r1, #2
 800874c:	4803      	ldr	r0, [pc, #12]	@ (800875c <STM32FXXXDMA2_stream3_cr_dir+0x20>)
 800874e:	f7fa ff45 	bl	80035dc <set_reg_block>
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	40026458 	.word	0x40026458

08008760 <STM32FXXXDMA2_stream3_cr_pfctrl>:
void STM32FXXXDMA2_stream3_cr_pfctrl(uint8_t bool)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 5, bool);
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	2205      	movs	r2, #5
 800876e:	2101      	movs	r1, #1
 8008770:	4803      	ldr	r0, [pc, #12]	@ (8008780 <STM32FXXXDMA2_stream3_cr_pfctrl+0x20>)
 8008772:	f7fa ff33 	bl	80035dc <set_reg_block>
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	40026458 	.word	0x40026458

08008784 <STM32FXXXDMA2_stream3_cr_tcie>:
void STM32FXXXDMA2_stream3_cr_tcie(uint8_t bool)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	4603      	mov	r3, r0
 800878c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 4, bool);
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	2204      	movs	r2, #4
 8008792:	2101      	movs	r1, #1
 8008794:	4803      	ldr	r0, [pc, #12]	@ (80087a4 <STM32FXXXDMA2_stream3_cr_tcie+0x20>)
 8008796:	f7fa ff21 	bl	80035dc <set_reg_block>
}
 800879a:	bf00      	nop
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	40026458 	.word	0x40026458

080087a8 <STM32FXXXDMA2_stream3_cr_htie>:
void STM32FXXXDMA2_stream3_cr_htie(uint8_t bool)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 3, bool);
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	2203      	movs	r2, #3
 80087b6:	2101      	movs	r1, #1
 80087b8:	4803      	ldr	r0, [pc, #12]	@ (80087c8 <STM32FXXXDMA2_stream3_cr_htie+0x20>)
 80087ba:	f7fa ff0f 	bl	80035dc <set_reg_block>
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	40026458 	.word	0x40026458

080087cc <STM32FXXXDMA2_stream3_cr_teie>:
void STM32FXXXDMA2_stream3_cr_teie(uint8_t bool)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 2, bool);
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	2202      	movs	r2, #2
 80087da:	2101      	movs	r1, #1
 80087dc:	4803      	ldr	r0, [pc, #12]	@ (80087ec <STM32FXXXDMA2_stream3_cr_teie+0x20>)
 80087de:	f7fa fefd 	bl	80035dc <set_reg_block>
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40026458 	.word	0x40026458

080087f0 <STM32FXXXDMA2_stream3_cr_dmeie>:
void STM32FXXXDMA2_stream3_cr_dmeie(uint8_t bool)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 1, bool);
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	2201      	movs	r2, #1
 80087fe:	2101      	movs	r1, #1
 8008800:	4803      	ldr	r0, [pc, #12]	@ (8008810 <STM32FXXXDMA2_stream3_cr_dmeie+0x20>)
 8008802:	f7fa feeb 	bl	80035dc <set_reg_block>
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	40026458 	.word	0x40026458

08008814 <STM32FXXXDMA2_stream3_cr_en>:
void STM32FXXXDMA2_stream3_cr_en(uint8_t bool)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->CR, 1, 0, bool);
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	2200      	movs	r2, #0
 8008822:	2101      	movs	r1, #1
 8008824:	4803      	ldr	r0, [pc, #12]	@ (8008834 <STM32FXXXDMA2_stream3_cr_en+0x20>)
 8008826:	f7fa fed9 	bl	80035dc <set_reg_block>
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40026458 	.word	0x40026458

08008838 <stm32fxxx_dma2_stream3_cr_inic>:
/*** Inic DMA2 STREAM3 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma2_stream3_cr_inic(void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma2_stream3_cr.chsel = STM32FXXXDMA2_stream3_cr_chsel;
 800883c:	4b1f      	ldr	r3, [pc, #124]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 800883e:	4a20      	ldr	r2, [pc, #128]	@ (80088c0 <stm32fxxx_dma2_stream3_cr_inic+0x88>)
 8008840:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream3_cr.mburst = STM32FXXXDMA2_stream3_cr_mburst;
 8008842:	4b1e      	ldr	r3, [pc, #120]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 8008844:	4a1f      	ldr	r2, [pc, #124]	@ (80088c4 <stm32fxxx_dma2_stream3_cr_inic+0x8c>)
 8008846:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream3_cr.pburst = STM32FXXXDMA2_stream3_cr_pburst;
 8008848:	4b1c      	ldr	r3, [pc, #112]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 800884a:	4a1f      	ldr	r2, [pc, #124]	@ (80088c8 <stm32fxxx_dma2_stream3_cr_inic+0x90>)
 800884c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream3_cr.ct = STM32FXXXDMA2_stream3_cr_ct;
 800884e:	4b1b      	ldr	r3, [pc, #108]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 8008850:	4a1e      	ldr	r2, [pc, #120]	@ (80088cc <stm32fxxx_dma2_stream3_cr_inic+0x94>)
 8008852:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2_stream3_cr.dbm = STM32FXXXDMA2_stream3_cr_dbm;
 8008854:	4b19      	ldr	r3, [pc, #100]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 8008856:	4a1e      	ldr	r2, [pc, #120]	@ (80088d0 <stm32fxxx_dma2_stream3_cr_inic+0x98>)
 8008858:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma2_stream3_cr.pl = STM32FXXXDMA2_stream3_cr_pl;
 800885a:	4b18      	ldr	r3, [pc, #96]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 800885c:	4a1d      	ldr	r2, [pc, #116]	@ (80088d4 <stm32fxxx_dma2_stream3_cr_inic+0x9c>)
 800885e:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma2_stream3_cr.pincos = STM32FXXXDMA2_stream3_cr_pincos;
 8008860:	4b16      	ldr	r3, [pc, #88]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 8008862:	4a1d      	ldr	r2, [pc, #116]	@ (80088d8 <stm32fxxx_dma2_stream3_cr_inic+0xa0>)
 8008864:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma2_stream3_cr.msize = STM32FXXXDMA2_stream3_cr_msize;
 8008866:	4b15      	ldr	r3, [pc, #84]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 8008868:	4a1c      	ldr	r2, [pc, #112]	@ (80088dc <stm32fxxx_dma2_stream3_cr_inic+0xa4>)
 800886a:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma2_stream3_cr.psize = STM32FXXXDMA2_stream3_cr_psize;
 800886c:	4b13      	ldr	r3, [pc, #76]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 800886e:	4a1c      	ldr	r2, [pc, #112]	@ (80088e0 <stm32fxxx_dma2_stream3_cr_inic+0xa8>)
 8008870:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma2_stream3_cr.minc = STM32FXXXDMA2_stream3_cr_minc;
 8008872:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 8008874:	4a1b      	ldr	r2, [pc, #108]	@ (80088e4 <stm32fxxx_dma2_stream3_cr_inic+0xac>)
 8008876:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma2_stream3_cr.pinc = STM32FXXXDMA2_stream3_cr_pinc;
 8008878:	4b10      	ldr	r3, [pc, #64]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 800887a:	4a1b      	ldr	r2, [pc, #108]	@ (80088e8 <stm32fxxx_dma2_stream3_cr_inic+0xb0>)
 800887c:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma2_stream3_cr.circ = STM32FXXXDMA2_stream3_cr_circ;
 800887e:	4b0f      	ldr	r3, [pc, #60]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 8008880:	4a1a      	ldr	r2, [pc, #104]	@ (80088ec <stm32fxxx_dma2_stream3_cr_inic+0xb4>)
 8008882:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma2_stream3_cr.dir = STM32FXXXDMA2_stream3_cr_dir;
 8008884:	4b0d      	ldr	r3, [pc, #52]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 8008886:	4a1a      	ldr	r2, [pc, #104]	@ (80088f0 <stm32fxxx_dma2_stream3_cr_inic+0xb8>)
 8008888:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma2_stream3_cr.pfctrl = STM32FXXXDMA2_stream3_cr_pfctrl;
 800888a:	4b0c      	ldr	r3, [pc, #48]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 800888c:	4a19      	ldr	r2, [pc, #100]	@ (80088f4 <stm32fxxx_dma2_stream3_cr_inic+0xbc>)
 800888e:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma2_stream3_cr.tcie = STM32FXXXDMA2_stream3_cr_tcie;
 8008890:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 8008892:	4a19      	ldr	r2, [pc, #100]	@ (80088f8 <stm32fxxx_dma2_stream3_cr_inic+0xc0>)
 8008894:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma2_stream3_cr.htie = STM32FXXXDMA2_stream3_cr_htie;
 8008896:	4b09      	ldr	r3, [pc, #36]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 8008898:	4a18      	ldr	r2, [pc, #96]	@ (80088fc <stm32fxxx_dma2_stream3_cr_inic+0xc4>)
 800889a:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma2_stream3_cr.teie = STM32FXXXDMA2_stream3_cr_teie;
 800889c:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 800889e:	4a18      	ldr	r2, [pc, #96]	@ (8008900 <stm32fxxx_dma2_stream3_cr_inic+0xc8>)
 80088a0:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma2_stream3_cr.dmeie = STM32FXXXDMA2_stream3_cr_dmeie;
 80088a2:	4b06      	ldr	r3, [pc, #24]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 80088a4:	4a17      	ldr	r2, [pc, #92]	@ (8008904 <stm32fxxx_dma2_stream3_cr_inic+0xcc>)
 80088a6:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma2_stream3_cr.en = STM32FXXXDMA2_stream3_cr_en;
 80088a8:	4b04      	ldr	r3, [pc, #16]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
 80088aa:	4a17      	ldr	r2, [pc, #92]	@ (8008908 <stm32fxxx_dma2_stream3_cr_inic+0xd0>)
 80088ac:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma2_stream3_cr;
 80088ae:	4b03      	ldr	r3, [pc, #12]	@ (80088bc <stm32fxxx_dma2_stream3_cr_inic+0x84>)
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	200006ac 	.word	0x200006ac
 80088c0:	0800858d 	.word	0x0800858d
 80088c4:	080085b1 	.word	0x080085b1
 80088c8:	080085d5 	.word	0x080085d5
 80088cc:	080085f9 	.word	0x080085f9
 80088d0:	0800861d 	.word	0x0800861d
 80088d4:	08008641 	.word	0x08008641
 80088d8:	08008665 	.word	0x08008665
 80088dc:	08008689 	.word	0x08008689
 80088e0:	080086ad 	.word	0x080086ad
 80088e4:	080086d1 	.word	0x080086d1
 80088e8:	080086f5 	.word	0x080086f5
 80088ec:	08008719 	.word	0x08008719
 80088f0:	0800873d 	.word	0x0800873d
 80088f4:	08008761 	.word	0x08008761
 80088f8:	08008785 	.word	0x08008785
 80088fc:	080087a9 	.word	0x080087a9
 8008900:	080087cd 	.word	0x080087cd
 8008904:	080087f1 	.word	0x080087f1
 8008908:	08008815 	.word	0x08008815

0800890c <stm32fxxx_dma2_stream3_ndt>:
/*** Inic DMA2 STREAM3 Function ***/
void stm32fxxx_dma2_stream3_ndt(uint16_t value)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	80fb      	strh	r3, [r7, #6]
	DMA2_Stream3->NDTR = value;
 8008916:	4a04      	ldr	r2, [pc, #16]	@ (8008928 <stm32fxxx_dma2_stream3_ndt+0x1c>)
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	6053      	str	r3, [r2, #4]
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	40026458 	.word	0x40026458

0800892c <stm32fxxx_dma2_stream3_par>:
void stm32fxxx_dma2_stream3_par(volatile long unsigned int periferal_addr)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
	DMA2_Stream3->PAR = periferal_addr;
 8008934:	4a04      	ldr	r2, [pc, #16]	@ (8008948 <stm32fxxx_dma2_stream3_par+0x1c>)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6093      	str	r3, [r2, #8]
}
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40026458 	.word	0x40026458

0800894c <stm32fxxx_dma2_stream3_m0a>:
void stm32fxxx_dma2_stream3_m0a(volatile long unsigned int mem0_addr)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
	DMA2_Stream3->M0AR = mem0_addr;
 8008954:	4a04      	ldr	r2, [pc, #16]	@ (8008968 <stm32fxxx_dma2_stream3_m0a+0x1c>)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60d3      	str	r3, [r2, #12]
}
 800895a:	bf00      	nop
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	40026458 	.word	0x40026458

0800896c <stm32fxxx_dma2_stream3_m1a>:
void stm32fxxx_dma2_stream3_m1a(volatile long unsigned int mem1_addr)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
	DMA2_Stream3->M1AR = mem1_addr;
 8008974:	4a04      	ldr	r2, [pc, #16]	@ (8008988 <stm32fxxx_dma2_stream3_m1a+0x1c>)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6113      	str	r3, [r2, #16]
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	40026458 	.word	0x40026458

0800898c <STM32FXXXDMA2_stream4_cr_chsel>:
// DMA2 STREAM4 CR
void STM32FXXXDMA2_stream4_cr_chsel(uint8_t value)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 3, 25, value);
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	2219      	movs	r2, #25
 800899a:	2103      	movs	r1, #3
 800899c:	4803      	ldr	r0, [pc, #12]	@ (80089ac <STM32FXXXDMA2_stream4_cr_chsel+0x20>)
 800899e:	f7fa fe1d 	bl	80035dc <set_reg_block>
}
 80089a2:	bf00      	nop
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	40026470 	.word	0x40026470

080089b0 <STM32FXXXDMA2_stream4_cr_mburst>:
void STM32FXXXDMA2_stream4_cr_mburst(uint8_t value)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 2, 23, value);
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	2217      	movs	r2, #23
 80089be:	2102      	movs	r1, #2
 80089c0:	4803      	ldr	r0, [pc, #12]	@ (80089d0 <STM32FXXXDMA2_stream4_cr_mburst+0x20>)
 80089c2:	f7fa fe0b 	bl	80035dc <set_reg_block>
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	40026470 	.word	0x40026470

080089d4 <STM32FXXXDMA2_stream4_cr_pburst>:
void STM32FXXXDMA2_stream4_cr_pburst(uint8_t value)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 2, 21, value);
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	2215      	movs	r2, #21
 80089e2:	2102      	movs	r1, #2
 80089e4:	4803      	ldr	r0, [pc, #12]	@ (80089f4 <STM32FXXXDMA2_stream4_cr_pburst+0x20>)
 80089e6:	f7fa fdf9 	bl	80035dc <set_reg_block>
}
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	40026470 	.word	0x40026470

080089f8 <STM32FXXXDMA2_stream4_cr_ct>:
void STM32FXXXDMA2_stream4_cr_ct(uint8_t bool)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 19, bool);
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	2213      	movs	r2, #19
 8008a06:	2101      	movs	r1, #1
 8008a08:	4803      	ldr	r0, [pc, #12]	@ (8008a18 <STM32FXXXDMA2_stream4_cr_ct+0x20>)
 8008a0a:	f7fa fde7 	bl	80035dc <set_reg_block>
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40026470 	.word	0x40026470

08008a1c <STM32FXXXDMA2_stream4_cr_dbm>:
void STM32FXXXDMA2_stream4_cr_dbm(uint8_t bool)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 18, bool);
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	2212      	movs	r2, #18
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	4803      	ldr	r0, [pc, #12]	@ (8008a3c <STM32FXXXDMA2_stream4_cr_dbm+0x20>)
 8008a2e:	f7fa fdd5 	bl	80035dc <set_reg_block>
}
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40026470 	.word	0x40026470

08008a40 <STM32FXXXDMA2_stream4_cr_pl>:
void STM32FXXXDMA2_stream4_cr_pl(uint8_t value)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 2, 16, value);
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	2210      	movs	r2, #16
 8008a4e:	2102      	movs	r1, #2
 8008a50:	4803      	ldr	r0, [pc, #12]	@ (8008a60 <STM32FXXXDMA2_stream4_cr_pl+0x20>)
 8008a52:	f7fa fdc3 	bl	80035dc <set_reg_block>
}
 8008a56:	bf00      	nop
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	40026470 	.word	0x40026470

08008a64 <STM32FXXXDMA2_stream4_cr_pincos>:
void STM32FXXXDMA2_stream4_cr_pincos(uint8_t bool)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 15, bool);
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
 8008a70:	220f      	movs	r2, #15
 8008a72:	2101      	movs	r1, #1
 8008a74:	4803      	ldr	r0, [pc, #12]	@ (8008a84 <STM32FXXXDMA2_stream4_cr_pincos+0x20>)
 8008a76:	f7fa fdb1 	bl	80035dc <set_reg_block>
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	40026470 	.word	0x40026470

08008a88 <STM32FXXXDMA2_stream4_cr_msize>:
void STM32FXXXDMA2_stream4_cr_msize(uint8_t value)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 2, 13, value);
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	220d      	movs	r2, #13
 8008a96:	2102      	movs	r1, #2
 8008a98:	4803      	ldr	r0, [pc, #12]	@ (8008aa8 <STM32FXXXDMA2_stream4_cr_msize+0x20>)
 8008a9a:	f7fa fd9f 	bl	80035dc <set_reg_block>
}
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	40026470 	.word	0x40026470

08008aac <STM32FXXXDMA2_stream4_cr_psize>:
void STM32FXXXDMA2_stream4_cr_psize(uint8_t value)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 2, 11, value);
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	220b      	movs	r2, #11
 8008aba:	2102      	movs	r1, #2
 8008abc:	4803      	ldr	r0, [pc, #12]	@ (8008acc <STM32FXXXDMA2_stream4_cr_psize+0x20>)
 8008abe:	f7fa fd8d 	bl	80035dc <set_reg_block>
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	40026470 	.word	0x40026470

08008ad0 <STM32FXXXDMA2_stream4_cr_minc>:
void STM32FXXXDMA2_stream4_cr_minc(uint8_t bool)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 10, bool);
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	220a      	movs	r2, #10
 8008ade:	2101      	movs	r1, #1
 8008ae0:	4803      	ldr	r0, [pc, #12]	@ (8008af0 <STM32FXXXDMA2_stream4_cr_minc+0x20>)
 8008ae2:	f7fa fd7b 	bl	80035dc <set_reg_block>
}
 8008ae6:	bf00      	nop
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	40026470 	.word	0x40026470

08008af4 <STM32FXXXDMA2_stream4_cr_pinc>:
void STM32FXXXDMA2_stream4_cr_pinc(uint8_t bool)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 9, bool);
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	2209      	movs	r2, #9
 8008b02:	2101      	movs	r1, #1
 8008b04:	4803      	ldr	r0, [pc, #12]	@ (8008b14 <STM32FXXXDMA2_stream4_cr_pinc+0x20>)
 8008b06:	f7fa fd69 	bl	80035dc <set_reg_block>
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	40026470 	.word	0x40026470

08008b18 <STM32FXXXDMA2_stream4_cr_circ>:
void STM32FXXXDMA2_stream4_cr_circ(uint8_t bool)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 8, bool);
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	2208      	movs	r2, #8
 8008b26:	2101      	movs	r1, #1
 8008b28:	4803      	ldr	r0, [pc, #12]	@ (8008b38 <STM32FXXXDMA2_stream4_cr_circ+0x20>)
 8008b2a:	f7fa fd57 	bl	80035dc <set_reg_block>
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40026470 	.word	0x40026470

08008b3c <STM32FXXXDMA2_stream4_cr_dir>:
void STM32FXXXDMA2_stream4_cr_dir(uint8_t value)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4603      	mov	r3, r0
 8008b44:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 2, 7, value);
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	2207      	movs	r2, #7
 8008b4a:	2102      	movs	r1, #2
 8008b4c:	4803      	ldr	r0, [pc, #12]	@ (8008b5c <STM32FXXXDMA2_stream4_cr_dir+0x20>)
 8008b4e:	f7fa fd45 	bl	80035dc <set_reg_block>
}
 8008b52:	bf00      	nop
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	40026470 	.word	0x40026470

08008b60 <STM32FXXXDMA2_stream4_cr_pfctrl>:
void STM32FXXXDMA2_stream4_cr_pfctrl(uint8_t bool)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 5, bool);
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	2205      	movs	r2, #5
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4803      	ldr	r0, [pc, #12]	@ (8008b80 <STM32FXXXDMA2_stream4_cr_pfctrl+0x20>)
 8008b72:	f7fa fd33 	bl	80035dc <set_reg_block>
}
 8008b76:	bf00      	nop
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	40026470 	.word	0x40026470

08008b84 <STM32FXXXDMA2_stream4_cr_tcie>:
void STM32FXXXDMA2_stream4_cr_tcie(uint8_t bool)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 4, bool);
 8008b8e:	79fb      	ldrb	r3, [r7, #7]
 8008b90:	2204      	movs	r2, #4
 8008b92:	2101      	movs	r1, #1
 8008b94:	4803      	ldr	r0, [pc, #12]	@ (8008ba4 <STM32FXXXDMA2_stream4_cr_tcie+0x20>)
 8008b96:	f7fa fd21 	bl	80035dc <set_reg_block>
}
 8008b9a:	bf00      	nop
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	40026470 	.word	0x40026470

08008ba8 <STM32FXXXDMA2_stream4_cr_htie>:
void STM32FXXXDMA2_stream4_cr_htie(uint8_t bool)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 3, bool);
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	2203      	movs	r2, #3
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	4803      	ldr	r0, [pc, #12]	@ (8008bc8 <STM32FXXXDMA2_stream4_cr_htie+0x20>)
 8008bba:	f7fa fd0f 	bl	80035dc <set_reg_block>
}
 8008bbe:	bf00      	nop
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40026470 	.word	0x40026470

08008bcc <STM32FXXXDMA2_stream4_cr_teie>:
void STM32FXXXDMA2_stream4_cr_teie(uint8_t bool)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 2, bool);
 8008bd6:	79fb      	ldrb	r3, [r7, #7]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	2101      	movs	r1, #1
 8008bdc:	4803      	ldr	r0, [pc, #12]	@ (8008bec <STM32FXXXDMA2_stream4_cr_teie+0x20>)
 8008bde:	f7fa fcfd 	bl	80035dc <set_reg_block>
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	40026470 	.word	0x40026470

08008bf0 <STM32FXXXDMA2_stream4_cr_dmeie>:
void STM32FXXXDMA2_stream4_cr_dmeie(uint8_t bool)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 1, bool);
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	2101      	movs	r1, #1
 8008c00:	4803      	ldr	r0, [pc, #12]	@ (8008c10 <STM32FXXXDMA2_stream4_cr_dmeie+0x20>)
 8008c02:	f7fa fceb 	bl	80035dc <set_reg_block>
}
 8008c06:	bf00      	nop
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	40026470 	.word	0x40026470

08008c14 <STM32FXXXDMA2_stream4_cr_en>:
void STM32FXXXDMA2_stream4_cr_en(uint8_t bool)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->CR, 1, 0, bool);
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	2200      	movs	r2, #0
 8008c22:	2101      	movs	r1, #1
 8008c24:	4803      	ldr	r0, [pc, #12]	@ (8008c34 <STM32FXXXDMA2_stream4_cr_en+0x20>)
 8008c26:	f7fa fcd9 	bl	80035dc <set_reg_block>
}
 8008c2a:	bf00      	nop
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	40026470 	.word	0x40026470

08008c38 <stm32fxxx_dma2_stream4_cr_inic>:
/*** Inic DMA2 STREAM4 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma2_stream4_cr_inic(void)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma2_stream4_cr.chsel = STM32FXXXDMA2_stream4_cr_chsel;
 8008c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c3e:	4a20      	ldr	r2, [pc, #128]	@ (8008cc0 <stm32fxxx_dma2_stream4_cr_inic+0x88>)
 8008c40:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream4_cr.mburst = STM32FXXXDMA2_stream4_cr_mburst;
 8008c42:	4b1e      	ldr	r3, [pc, #120]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c44:	4a1f      	ldr	r2, [pc, #124]	@ (8008cc4 <stm32fxxx_dma2_stream4_cr_inic+0x8c>)
 8008c46:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream4_cr.pburst = STM32FXXXDMA2_stream4_cr_pburst;
 8008c48:	4b1c      	ldr	r3, [pc, #112]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8008cc8 <stm32fxxx_dma2_stream4_cr_inic+0x90>)
 8008c4c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream4_cr.ct = STM32FXXXDMA2_stream4_cr_ct;
 8008c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c50:	4a1e      	ldr	r2, [pc, #120]	@ (8008ccc <stm32fxxx_dma2_stream4_cr_inic+0x94>)
 8008c52:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2_stream4_cr.dbm = STM32FXXXDMA2_stream4_cr_dbm;
 8008c54:	4b19      	ldr	r3, [pc, #100]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c56:	4a1e      	ldr	r2, [pc, #120]	@ (8008cd0 <stm32fxxx_dma2_stream4_cr_inic+0x98>)
 8008c58:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma2_stream4_cr.pl = STM32FXXXDMA2_stream4_cr_pl;
 8008c5a:	4b18      	ldr	r3, [pc, #96]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd4 <stm32fxxx_dma2_stream4_cr_inic+0x9c>)
 8008c5e:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma2_stream4_cr.pincos = STM32FXXXDMA2_stream4_cr_pincos;
 8008c60:	4b16      	ldr	r3, [pc, #88]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c62:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd8 <stm32fxxx_dma2_stream4_cr_inic+0xa0>)
 8008c64:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma2_stream4_cr.msize = STM32FXXXDMA2_stream4_cr_msize;
 8008c66:	4b15      	ldr	r3, [pc, #84]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c68:	4a1c      	ldr	r2, [pc, #112]	@ (8008cdc <stm32fxxx_dma2_stream4_cr_inic+0xa4>)
 8008c6a:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma2_stream4_cr.psize = STM32FXXXDMA2_stream4_cr_psize;
 8008c6c:	4b13      	ldr	r3, [pc, #76]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ce0 <stm32fxxx_dma2_stream4_cr_inic+0xa8>)
 8008c70:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma2_stream4_cr.minc = STM32FXXXDMA2_stream4_cr_minc;
 8008c72:	4b12      	ldr	r3, [pc, #72]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c74:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce4 <stm32fxxx_dma2_stream4_cr_inic+0xac>)
 8008c76:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma2_stream4_cr.pinc = STM32FXXXDMA2_stream4_cr_pinc;
 8008c78:	4b10      	ldr	r3, [pc, #64]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce8 <stm32fxxx_dma2_stream4_cr_inic+0xb0>)
 8008c7c:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma2_stream4_cr.circ = STM32FXXXDMA2_stream4_cr_circ;
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c80:	4a1a      	ldr	r2, [pc, #104]	@ (8008cec <stm32fxxx_dma2_stream4_cr_inic+0xb4>)
 8008c82:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma2_stream4_cr.dir = STM32FXXXDMA2_stream4_cr_dir;
 8008c84:	4b0d      	ldr	r3, [pc, #52]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c86:	4a1a      	ldr	r2, [pc, #104]	@ (8008cf0 <stm32fxxx_dma2_stream4_cr_inic+0xb8>)
 8008c88:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma2_stream4_cr.pfctrl = STM32FXXXDMA2_stream4_cr_pfctrl;
 8008c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c8c:	4a19      	ldr	r2, [pc, #100]	@ (8008cf4 <stm32fxxx_dma2_stream4_cr_inic+0xbc>)
 8008c8e:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma2_stream4_cr.tcie = STM32FXXXDMA2_stream4_cr_tcie;
 8008c90:	4b0a      	ldr	r3, [pc, #40]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c92:	4a19      	ldr	r2, [pc, #100]	@ (8008cf8 <stm32fxxx_dma2_stream4_cr_inic+0xc0>)
 8008c94:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma2_stream4_cr.htie = STM32FXXXDMA2_stream4_cr_htie;
 8008c96:	4b09      	ldr	r3, [pc, #36]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c98:	4a18      	ldr	r2, [pc, #96]	@ (8008cfc <stm32fxxx_dma2_stream4_cr_inic+0xc4>)
 8008c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma2_stream4_cr.teie = STM32FXXXDMA2_stream4_cr_teie;
 8008c9c:	4b07      	ldr	r3, [pc, #28]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008c9e:	4a18      	ldr	r2, [pc, #96]	@ (8008d00 <stm32fxxx_dma2_stream4_cr_inic+0xc8>)
 8008ca0:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma2_stream4_cr.dmeie = STM32FXXXDMA2_stream4_cr_dmeie;
 8008ca2:	4b06      	ldr	r3, [pc, #24]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008ca4:	4a17      	ldr	r2, [pc, #92]	@ (8008d04 <stm32fxxx_dma2_stream4_cr_inic+0xcc>)
 8008ca6:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma2_stream4_cr.en = STM32FXXXDMA2_stream4_cr_en;
 8008ca8:	4b04      	ldr	r3, [pc, #16]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
 8008caa:	4a17      	ldr	r2, [pc, #92]	@ (8008d08 <stm32fxxx_dma2_stream4_cr_inic+0xd0>)
 8008cac:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma2_stream4_cr;
 8008cae:	4b03      	ldr	r3, [pc, #12]	@ (8008cbc <stm32fxxx_dma2_stream4_cr_inic+0x84>)
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	200006f8 	.word	0x200006f8
 8008cc0:	0800898d 	.word	0x0800898d
 8008cc4:	080089b1 	.word	0x080089b1
 8008cc8:	080089d5 	.word	0x080089d5
 8008ccc:	080089f9 	.word	0x080089f9
 8008cd0:	08008a1d 	.word	0x08008a1d
 8008cd4:	08008a41 	.word	0x08008a41
 8008cd8:	08008a65 	.word	0x08008a65
 8008cdc:	08008a89 	.word	0x08008a89
 8008ce0:	08008aad 	.word	0x08008aad
 8008ce4:	08008ad1 	.word	0x08008ad1
 8008ce8:	08008af5 	.word	0x08008af5
 8008cec:	08008b19 	.word	0x08008b19
 8008cf0:	08008b3d 	.word	0x08008b3d
 8008cf4:	08008b61 	.word	0x08008b61
 8008cf8:	08008b85 	.word	0x08008b85
 8008cfc:	08008ba9 	.word	0x08008ba9
 8008d00:	08008bcd 	.word	0x08008bcd
 8008d04:	08008bf1 	.word	0x08008bf1
 8008d08:	08008c15 	.word	0x08008c15

08008d0c <stm32fxxx_dma2_stream4_ndt>:
/*** Inic DMA2 STREAM4 Function ***/
void stm32fxxx_dma2_stream4_ndt(uint16_t value)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	80fb      	strh	r3, [r7, #6]
	DMA2_Stream4->NDTR = value;
 8008d16:	4a04      	ldr	r2, [pc, #16]	@ (8008d28 <stm32fxxx_dma2_stream4_ndt+0x1c>)
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	6053      	str	r3, [r2, #4]
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40026470 	.word	0x40026470

08008d2c <stm32fxxx_dma2_stream4_par>:
void stm32fxxx_dma2_stream4_par(volatile long unsigned int periferal_addr)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
	DMA2_Stream4->PAR = periferal_addr;
 8008d34:	4a04      	ldr	r2, [pc, #16]	@ (8008d48 <stm32fxxx_dma2_stream4_par+0x1c>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6093      	str	r3, [r2, #8]
}
 8008d3a:	bf00      	nop
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	40026470 	.word	0x40026470

08008d4c <stm32fxxx_dma2_stream4_m0a>:
void stm32fxxx_dma2_stream4_m0a(volatile long unsigned int mem0_addr)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
	DMA2_Stream4->M0AR = mem0_addr;
 8008d54:	4a04      	ldr	r2, [pc, #16]	@ (8008d68 <stm32fxxx_dma2_stream4_m0a+0x1c>)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	60d3      	str	r3, [r2, #12]
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	40026470 	.word	0x40026470

08008d6c <stm32fxxx_dma2_stream4_m1a>:
void stm32fxxx_dma2_stream4_m1a(volatile long unsigned int mem1_addr)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	DMA2_Stream4->M1AR = mem1_addr;
 8008d74:	4a04      	ldr	r2, [pc, #16]	@ (8008d88 <stm32fxxx_dma2_stream4_m1a+0x1c>)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6113      	str	r3, [r2, #16]
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	40026470 	.word	0x40026470

08008d8c <STM32FXXXDMA2_stream5_cr_chsel>:
// DMA2 STREAM5 CR
void STM32FXXXDMA2_stream5_cr_chsel(uint8_t value)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 3, 25, value);
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	2219      	movs	r2, #25
 8008d9a:	2103      	movs	r1, #3
 8008d9c:	4803      	ldr	r0, [pc, #12]	@ (8008dac <STM32FXXXDMA2_stream5_cr_chsel+0x20>)
 8008d9e:	f7fa fc1d 	bl	80035dc <set_reg_block>
}
 8008da2:	bf00      	nop
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	40026488 	.word	0x40026488

08008db0 <STM32FXXXDMA2_stream5_cr_mburst>:
void STM32FXXXDMA2_stream5_cr_mburst(uint8_t value)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 2, 23, value);
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	2217      	movs	r2, #23
 8008dbe:	2102      	movs	r1, #2
 8008dc0:	4803      	ldr	r0, [pc, #12]	@ (8008dd0 <STM32FXXXDMA2_stream5_cr_mburst+0x20>)
 8008dc2:	f7fa fc0b 	bl	80035dc <set_reg_block>
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	40026488 	.word	0x40026488

08008dd4 <STM32FXXXDMA2_stream5_cr_pburst>:
void STM32FXXXDMA2_stream5_cr_pburst(uint8_t value)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 2, 21, value);
 8008dde:	79fb      	ldrb	r3, [r7, #7]
 8008de0:	2215      	movs	r2, #21
 8008de2:	2102      	movs	r1, #2
 8008de4:	4803      	ldr	r0, [pc, #12]	@ (8008df4 <STM32FXXXDMA2_stream5_cr_pburst+0x20>)
 8008de6:	f7fa fbf9 	bl	80035dc <set_reg_block>
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	40026488 	.word	0x40026488

08008df8 <STM32FXXXDMA2_stream5_cr_ct>:
void STM32FXXXDMA2_stream5_cr_ct(uint8_t bool)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 19, bool);
 8008e02:	79fb      	ldrb	r3, [r7, #7]
 8008e04:	2213      	movs	r2, #19
 8008e06:	2101      	movs	r1, #1
 8008e08:	4803      	ldr	r0, [pc, #12]	@ (8008e18 <STM32FXXXDMA2_stream5_cr_ct+0x20>)
 8008e0a:	f7fa fbe7 	bl	80035dc <set_reg_block>
}
 8008e0e:	bf00      	nop
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	40026488 	.word	0x40026488

08008e1c <STM32FXXXDMA2_stream5_cr_dbm>:
void STM32FXXXDMA2_stream5_cr_dbm(uint8_t bool)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 18, bool);
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	2212      	movs	r2, #18
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	4803      	ldr	r0, [pc, #12]	@ (8008e3c <STM32FXXXDMA2_stream5_cr_dbm+0x20>)
 8008e2e:	f7fa fbd5 	bl	80035dc <set_reg_block>
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	40026488 	.word	0x40026488

08008e40 <STM32FXXXDMA2_stream5_cr_pl>:
void STM32FXXXDMA2_stream5_cr_pl(uint8_t value)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 2, 16, value);
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	2210      	movs	r2, #16
 8008e4e:	2102      	movs	r1, #2
 8008e50:	4803      	ldr	r0, [pc, #12]	@ (8008e60 <STM32FXXXDMA2_stream5_cr_pl+0x20>)
 8008e52:	f7fa fbc3 	bl	80035dc <set_reg_block>
}
 8008e56:	bf00      	nop
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	40026488 	.word	0x40026488

08008e64 <STM32FXXXDMA2_stream5_cr_pincos>:
void STM32FXXXDMA2_stream5_cr_pincos(uint8_t bool)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 15, bool);
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	220f      	movs	r2, #15
 8008e72:	2101      	movs	r1, #1
 8008e74:	4803      	ldr	r0, [pc, #12]	@ (8008e84 <STM32FXXXDMA2_stream5_cr_pincos+0x20>)
 8008e76:	f7fa fbb1 	bl	80035dc <set_reg_block>
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	40026488 	.word	0x40026488

08008e88 <STM32FXXXDMA2_stream5_cr_msize>:
void STM32FXXXDMA2_stream5_cr_msize(uint8_t value)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 2, 13, value);
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	220d      	movs	r2, #13
 8008e96:	2102      	movs	r1, #2
 8008e98:	4803      	ldr	r0, [pc, #12]	@ (8008ea8 <STM32FXXXDMA2_stream5_cr_msize+0x20>)
 8008e9a:	f7fa fb9f 	bl	80035dc <set_reg_block>
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	40026488 	.word	0x40026488

08008eac <STM32FXXXDMA2_stream5_cr_psize>:
void STM32FXXXDMA2_stream5_cr_psize(uint8_t value)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 2, 11, value);
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	220b      	movs	r2, #11
 8008eba:	2102      	movs	r1, #2
 8008ebc:	4803      	ldr	r0, [pc, #12]	@ (8008ecc <STM32FXXXDMA2_stream5_cr_psize+0x20>)
 8008ebe:	f7fa fb8d 	bl	80035dc <set_reg_block>
}
 8008ec2:	bf00      	nop
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	40026488 	.word	0x40026488

08008ed0 <STM32FXXXDMA2_stream5_cr_minc>:
void STM32FXXXDMA2_stream5_cr_minc(uint8_t bool)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 10, bool);
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	220a      	movs	r2, #10
 8008ede:	2101      	movs	r1, #1
 8008ee0:	4803      	ldr	r0, [pc, #12]	@ (8008ef0 <STM32FXXXDMA2_stream5_cr_minc+0x20>)
 8008ee2:	f7fa fb7b 	bl	80035dc <set_reg_block>
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	40026488 	.word	0x40026488

08008ef4 <STM32FXXXDMA2_stream5_cr_pinc>:
void STM32FXXXDMA2_stream5_cr_pinc(uint8_t bool)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 9, bool);
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	2209      	movs	r2, #9
 8008f02:	2101      	movs	r1, #1
 8008f04:	4803      	ldr	r0, [pc, #12]	@ (8008f14 <STM32FXXXDMA2_stream5_cr_pinc+0x20>)
 8008f06:	f7fa fb69 	bl	80035dc <set_reg_block>
}
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	40026488 	.word	0x40026488

08008f18 <STM32FXXXDMA2_stream5_cr_circ>:
void STM32FXXXDMA2_stream5_cr_circ(uint8_t bool)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 8, bool);
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	2208      	movs	r2, #8
 8008f26:	2101      	movs	r1, #1
 8008f28:	4803      	ldr	r0, [pc, #12]	@ (8008f38 <STM32FXXXDMA2_stream5_cr_circ+0x20>)
 8008f2a:	f7fa fb57 	bl	80035dc <set_reg_block>
}
 8008f2e:	bf00      	nop
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	40026488 	.word	0x40026488

08008f3c <STM32FXXXDMA2_stream5_cr_dir>:
void STM32FXXXDMA2_stream5_cr_dir(uint8_t value)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 2, 7, value);
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	2207      	movs	r2, #7
 8008f4a:	2102      	movs	r1, #2
 8008f4c:	4803      	ldr	r0, [pc, #12]	@ (8008f5c <STM32FXXXDMA2_stream5_cr_dir+0x20>)
 8008f4e:	f7fa fb45 	bl	80035dc <set_reg_block>
}
 8008f52:	bf00      	nop
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	40026488 	.word	0x40026488

08008f60 <STM32FXXXDMA2_stream5_cr_pfctrl>:
void STM32FXXXDMA2_stream5_cr_pfctrl(uint8_t bool)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 5, bool);
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	2205      	movs	r2, #5
 8008f6e:	2101      	movs	r1, #1
 8008f70:	4803      	ldr	r0, [pc, #12]	@ (8008f80 <STM32FXXXDMA2_stream5_cr_pfctrl+0x20>)
 8008f72:	f7fa fb33 	bl	80035dc <set_reg_block>
}
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	40026488 	.word	0x40026488

08008f84 <STM32FXXXDMA2_stream5_cr_tcie>:
void STM32FXXXDMA2_stream5_cr_tcie(uint8_t bool)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 4, bool);
 8008f8e:	79fb      	ldrb	r3, [r7, #7]
 8008f90:	2204      	movs	r2, #4
 8008f92:	2101      	movs	r1, #1
 8008f94:	4803      	ldr	r0, [pc, #12]	@ (8008fa4 <STM32FXXXDMA2_stream5_cr_tcie+0x20>)
 8008f96:	f7fa fb21 	bl	80035dc <set_reg_block>
}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40026488 	.word	0x40026488

08008fa8 <STM32FXXXDMA2_stream5_cr_htie>:
void STM32FXXXDMA2_stream5_cr_htie(uint8_t bool)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 3, bool);
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
 8008fb4:	2203      	movs	r2, #3
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	4803      	ldr	r0, [pc, #12]	@ (8008fc8 <STM32FXXXDMA2_stream5_cr_htie+0x20>)
 8008fba:	f7fa fb0f 	bl	80035dc <set_reg_block>
}
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	40026488 	.word	0x40026488

08008fcc <STM32FXXXDMA2_stream5_cr_teie>:
void STM32FXXXDMA2_stream5_cr_teie(uint8_t bool)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 2, bool);
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	2202      	movs	r2, #2
 8008fda:	2101      	movs	r1, #1
 8008fdc:	4803      	ldr	r0, [pc, #12]	@ (8008fec <STM32FXXXDMA2_stream5_cr_teie+0x20>)
 8008fde:	f7fa fafd 	bl	80035dc <set_reg_block>
}
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	40026488 	.word	0x40026488

08008ff0 <STM32FXXXDMA2_stream5_cr_dmeie>:
void STM32FXXXDMA2_stream5_cr_dmeie(uint8_t bool)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 1, bool);
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	2101      	movs	r1, #1
 8009000:	4803      	ldr	r0, [pc, #12]	@ (8009010 <STM32FXXXDMA2_stream5_cr_dmeie+0x20>)
 8009002:	f7fa faeb 	bl	80035dc <set_reg_block>
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	40026488 	.word	0x40026488

08009014 <STM32FXXXDMA2_stream5_cr_en>:
void STM32FXXXDMA2_stream5_cr_en(uint8_t bool)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->CR, 1, 0, bool);
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	2200      	movs	r2, #0
 8009022:	2101      	movs	r1, #1
 8009024:	4803      	ldr	r0, [pc, #12]	@ (8009034 <STM32FXXXDMA2_stream5_cr_en+0x20>)
 8009026:	f7fa fad9 	bl	80035dc <set_reg_block>
}
 800902a:	bf00      	nop
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	40026488 	.word	0x40026488

08009038 <stm32fxxx_dma2_stream5_cr_inic>:
/*** Inic DMA2 STREAM5 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma2_stream5_cr_inic(void)
{
 8009038:	b480      	push	{r7}
 800903a:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma2_stream5_cr.chsel = STM32FXXXDMA2_stream5_cr_chsel;
 800903c:	4b1f      	ldr	r3, [pc, #124]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 800903e:	4a20      	ldr	r2, [pc, #128]	@ (80090c0 <stm32fxxx_dma2_stream5_cr_inic+0x88>)
 8009040:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream5_cr.mburst = STM32FXXXDMA2_stream5_cr_mburst;
 8009042:	4b1e      	ldr	r3, [pc, #120]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 8009044:	4a1f      	ldr	r2, [pc, #124]	@ (80090c4 <stm32fxxx_dma2_stream5_cr_inic+0x8c>)
 8009046:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream5_cr.pburst = STM32FXXXDMA2_stream5_cr_pburst;
 8009048:	4b1c      	ldr	r3, [pc, #112]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 800904a:	4a1f      	ldr	r2, [pc, #124]	@ (80090c8 <stm32fxxx_dma2_stream5_cr_inic+0x90>)
 800904c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream5_cr.ct = STM32FXXXDMA2_stream5_cr_ct;
 800904e:	4b1b      	ldr	r3, [pc, #108]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 8009050:	4a1e      	ldr	r2, [pc, #120]	@ (80090cc <stm32fxxx_dma2_stream5_cr_inic+0x94>)
 8009052:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2_stream5_cr.dbm = STM32FXXXDMA2_stream5_cr_dbm;
 8009054:	4b19      	ldr	r3, [pc, #100]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 8009056:	4a1e      	ldr	r2, [pc, #120]	@ (80090d0 <stm32fxxx_dma2_stream5_cr_inic+0x98>)
 8009058:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma2_stream5_cr.pl = STM32FXXXDMA2_stream5_cr_pl;
 800905a:	4b18      	ldr	r3, [pc, #96]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 800905c:	4a1d      	ldr	r2, [pc, #116]	@ (80090d4 <stm32fxxx_dma2_stream5_cr_inic+0x9c>)
 800905e:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma2_stream5_cr.pincos = STM32FXXXDMA2_stream5_cr_pincos;
 8009060:	4b16      	ldr	r3, [pc, #88]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 8009062:	4a1d      	ldr	r2, [pc, #116]	@ (80090d8 <stm32fxxx_dma2_stream5_cr_inic+0xa0>)
 8009064:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma2_stream5_cr.msize = STM32FXXXDMA2_stream5_cr_msize;
 8009066:	4b15      	ldr	r3, [pc, #84]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 8009068:	4a1c      	ldr	r2, [pc, #112]	@ (80090dc <stm32fxxx_dma2_stream5_cr_inic+0xa4>)
 800906a:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma2_stream5_cr.psize = STM32FXXXDMA2_stream5_cr_psize;
 800906c:	4b13      	ldr	r3, [pc, #76]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 800906e:	4a1c      	ldr	r2, [pc, #112]	@ (80090e0 <stm32fxxx_dma2_stream5_cr_inic+0xa8>)
 8009070:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma2_stream5_cr.minc = STM32FXXXDMA2_stream5_cr_minc;
 8009072:	4b12      	ldr	r3, [pc, #72]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 8009074:	4a1b      	ldr	r2, [pc, #108]	@ (80090e4 <stm32fxxx_dma2_stream5_cr_inic+0xac>)
 8009076:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma2_stream5_cr.pinc = STM32FXXXDMA2_stream5_cr_pinc;
 8009078:	4b10      	ldr	r3, [pc, #64]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 800907a:	4a1b      	ldr	r2, [pc, #108]	@ (80090e8 <stm32fxxx_dma2_stream5_cr_inic+0xb0>)
 800907c:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma2_stream5_cr.circ = STM32FXXXDMA2_stream5_cr_circ;
 800907e:	4b0f      	ldr	r3, [pc, #60]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 8009080:	4a1a      	ldr	r2, [pc, #104]	@ (80090ec <stm32fxxx_dma2_stream5_cr_inic+0xb4>)
 8009082:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma2_stream5_cr.dir = STM32FXXXDMA2_stream5_cr_dir;
 8009084:	4b0d      	ldr	r3, [pc, #52]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 8009086:	4a1a      	ldr	r2, [pc, #104]	@ (80090f0 <stm32fxxx_dma2_stream5_cr_inic+0xb8>)
 8009088:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma2_stream5_cr.pfctrl = STM32FXXXDMA2_stream5_cr_pfctrl;
 800908a:	4b0c      	ldr	r3, [pc, #48]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 800908c:	4a19      	ldr	r2, [pc, #100]	@ (80090f4 <stm32fxxx_dma2_stream5_cr_inic+0xbc>)
 800908e:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma2_stream5_cr.tcie = STM32FXXXDMA2_stream5_cr_tcie;
 8009090:	4b0a      	ldr	r3, [pc, #40]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 8009092:	4a19      	ldr	r2, [pc, #100]	@ (80090f8 <stm32fxxx_dma2_stream5_cr_inic+0xc0>)
 8009094:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma2_stream5_cr.htie = STM32FXXXDMA2_stream5_cr_htie;
 8009096:	4b09      	ldr	r3, [pc, #36]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 8009098:	4a18      	ldr	r2, [pc, #96]	@ (80090fc <stm32fxxx_dma2_stream5_cr_inic+0xc4>)
 800909a:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma2_stream5_cr.teie = STM32FXXXDMA2_stream5_cr_teie;
 800909c:	4b07      	ldr	r3, [pc, #28]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 800909e:	4a18      	ldr	r2, [pc, #96]	@ (8009100 <stm32fxxx_dma2_stream5_cr_inic+0xc8>)
 80090a0:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma2_stream5_cr.dmeie = STM32FXXXDMA2_stream5_cr_dmeie;
 80090a2:	4b06      	ldr	r3, [pc, #24]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 80090a4:	4a17      	ldr	r2, [pc, #92]	@ (8009104 <stm32fxxx_dma2_stream5_cr_inic+0xcc>)
 80090a6:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma2_stream5_cr.en = STM32FXXXDMA2_stream5_cr_en;
 80090a8:	4b04      	ldr	r3, [pc, #16]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
 80090aa:	4a17      	ldr	r2, [pc, #92]	@ (8009108 <stm32fxxx_dma2_stream5_cr_inic+0xd0>)
 80090ac:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma2_stream5_cr;
 80090ae:	4b03      	ldr	r3, [pc, #12]	@ (80090bc <stm32fxxx_dma2_stream5_cr_inic+0x84>)
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	20000744 	.word	0x20000744
 80090c0:	08008d8d 	.word	0x08008d8d
 80090c4:	08008db1 	.word	0x08008db1
 80090c8:	08008dd5 	.word	0x08008dd5
 80090cc:	08008df9 	.word	0x08008df9
 80090d0:	08008e1d 	.word	0x08008e1d
 80090d4:	08008e41 	.word	0x08008e41
 80090d8:	08008e65 	.word	0x08008e65
 80090dc:	08008e89 	.word	0x08008e89
 80090e0:	08008ead 	.word	0x08008ead
 80090e4:	08008ed1 	.word	0x08008ed1
 80090e8:	08008ef5 	.word	0x08008ef5
 80090ec:	08008f19 	.word	0x08008f19
 80090f0:	08008f3d 	.word	0x08008f3d
 80090f4:	08008f61 	.word	0x08008f61
 80090f8:	08008f85 	.word	0x08008f85
 80090fc:	08008fa9 	.word	0x08008fa9
 8009100:	08008fcd 	.word	0x08008fcd
 8009104:	08008ff1 	.word	0x08008ff1
 8009108:	08009015 	.word	0x08009015

0800910c <stm32fxxx_dma2_stream5_ndt>:
/*** Inic DMA2 STREAM5 Function ***/
void stm32fxxx_dma2_stream5_ndt(uint16_t value)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	80fb      	strh	r3, [r7, #6]
	DMA2_Stream5->NDTR = value;
 8009116:	4a04      	ldr	r2, [pc, #16]	@ (8009128 <stm32fxxx_dma2_stream5_ndt+0x1c>)
 8009118:	88fb      	ldrh	r3, [r7, #6]
 800911a:	6053      	str	r3, [r2, #4]
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	40026488 	.word	0x40026488

0800912c <stm32fxxx_dma2_stream5_par>:
void stm32fxxx_dma2_stream5_par(volatile long unsigned int periferal_addr)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
	DMA2_Stream5->PAR = periferal_addr;
 8009134:	4a04      	ldr	r2, [pc, #16]	@ (8009148 <stm32fxxx_dma2_stream5_par+0x1c>)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6093      	str	r3, [r2, #8]
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	40026488 	.word	0x40026488

0800914c <stm32fxxx_dma2_stream5_m0a>:
void stm32fxxx_dma2_stream5_m0a(volatile long unsigned int mem0_addr)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	DMA2_Stream5->M0AR = mem0_addr;
 8009154:	4a04      	ldr	r2, [pc, #16]	@ (8009168 <stm32fxxx_dma2_stream5_m0a+0x1c>)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60d3      	str	r3, [r2, #12]
}
 800915a:	bf00      	nop
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	40026488 	.word	0x40026488

0800916c <stm32fxxx_dma2_stream5_m1a>:
void stm32fxxx_dma2_stream5_m1a(volatile long unsigned int mem1_addr)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
	DMA2_Stream5->M1AR = mem1_addr;
 8009174:	4a04      	ldr	r2, [pc, #16]	@ (8009188 <stm32fxxx_dma2_stream5_m1a+0x1c>)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6113      	str	r3, [r2, #16]
}
 800917a:	bf00      	nop
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	40026488 	.word	0x40026488

0800918c <STM32FXXXDMA2_stream6_cr_chsel>:
// DMA2 STREAM6 CR
void STM32FXXXDMA2_stream6_cr_chsel(uint8_t value)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 3, 25, value);
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	2219      	movs	r2, #25
 800919a:	2103      	movs	r1, #3
 800919c:	4803      	ldr	r0, [pc, #12]	@ (80091ac <STM32FXXXDMA2_stream6_cr_chsel+0x20>)
 800919e:	f7fa fa1d 	bl	80035dc <set_reg_block>
}
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	400264a0 	.word	0x400264a0

080091b0 <STM32FXXXDMA2_stream6_cr_mburst>:
void STM32FXXXDMA2_stream6_cr_mburst(uint8_t value)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 2, 23, value);
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	2217      	movs	r2, #23
 80091be:	2102      	movs	r1, #2
 80091c0:	4803      	ldr	r0, [pc, #12]	@ (80091d0 <STM32FXXXDMA2_stream6_cr_mburst+0x20>)
 80091c2:	f7fa fa0b 	bl	80035dc <set_reg_block>
}
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	400264a0 	.word	0x400264a0

080091d4 <STM32FXXXDMA2_stream6_cr_pburst>:
void STM32FXXXDMA2_stream6_cr_pburst(uint8_t value)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 2, 21, value);
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	2215      	movs	r2, #21
 80091e2:	2102      	movs	r1, #2
 80091e4:	4803      	ldr	r0, [pc, #12]	@ (80091f4 <STM32FXXXDMA2_stream6_cr_pburst+0x20>)
 80091e6:	f7fa f9f9 	bl	80035dc <set_reg_block>
}
 80091ea:	bf00      	nop
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	400264a0 	.word	0x400264a0

080091f8 <STM32FXXXDMA2_stream6_cr_ct>:
void STM32FXXXDMA2_stream6_cr_ct(uint8_t bool)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 19, bool);
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	2213      	movs	r2, #19
 8009206:	2101      	movs	r1, #1
 8009208:	4803      	ldr	r0, [pc, #12]	@ (8009218 <STM32FXXXDMA2_stream6_cr_ct+0x20>)
 800920a:	f7fa f9e7 	bl	80035dc <set_reg_block>
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	400264a0 	.word	0x400264a0

0800921c <STM32FXXXDMA2_stream6_cr_dbm>:
void STM32FXXXDMA2_stream6_cr_dbm(uint8_t bool)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 18, bool);
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	2212      	movs	r2, #18
 800922a:	2101      	movs	r1, #1
 800922c:	4803      	ldr	r0, [pc, #12]	@ (800923c <STM32FXXXDMA2_stream6_cr_dbm+0x20>)
 800922e:	f7fa f9d5 	bl	80035dc <set_reg_block>
}
 8009232:	bf00      	nop
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	400264a0 	.word	0x400264a0

08009240 <STM32FXXXDMA2_stream6_cr_pl>:
void STM32FXXXDMA2_stream6_cr_pl(uint8_t value)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 2, 16, value);
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	2210      	movs	r2, #16
 800924e:	2102      	movs	r1, #2
 8009250:	4803      	ldr	r0, [pc, #12]	@ (8009260 <STM32FXXXDMA2_stream6_cr_pl+0x20>)
 8009252:	f7fa f9c3 	bl	80035dc <set_reg_block>
}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	400264a0 	.word	0x400264a0

08009264 <STM32FXXXDMA2_stream6_cr_pincos>:
void STM32FXXXDMA2_stream6_cr_pincos(uint8_t bool)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 15, bool);
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	220f      	movs	r2, #15
 8009272:	2101      	movs	r1, #1
 8009274:	4803      	ldr	r0, [pc, #12]	@ (8009284 <STM32FXXXDMA2_stream6_cr_pincos+0x20>)
 8009276:	f7fa f9b1 	bl	80035dc <set_reg_block>
}
 800927a:	bf00      	nop
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	400264a0 	.word	0x400264a0

08009288 <STM32FXXXDMA2_stream6_cr_msize>:
void STM32FXXXDMA2_stream6_cr_msize(uint8_t value)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 2, 13, value);
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	220d      	movs	r2, #13
 8009296:	2102      	movs	r1, #2
 8009298:	4803      	ldr	r0, [pc, #12]	@ (80092a8 <STM32FXXXDMA2_stream6_cr_msize+0x20>)
 800929a:	f7fa f99f 	bl	80035dc <set_reg_block>
}
 800929e:	bf00      	nop
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	400264a0 	.word	0x400264a0

080092ac <STM32FXXXDMA2_stream6_cr_psize>:
void STM32FXXXDMA2_stream6_cr_psize(uint8_t value)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 2, 11, value);
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	220b      	movs	r2, #11
 80092ba:	2102      	movs	r1, #2
 80092bc:	4803      	ldr	r0, [pc, #12]	@ (80092cc <STM32FXXXDMA2_stream6_cr_psize+0x20>)
 80092be:	f7fa f98d 	bl	80035dc <set_reg_block>
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	400264a0 	.word	0x400264a0

080092d0 <STM32FXXXDMA2_stream6_cr_minc>:
void STM32FXXXDMA2_stream6_cr_minc(uint8_t bool)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 10, bool);
 80092da:	79fb      	ldrb	r3, [r7, #7]
 80092dc:	220a      	movs	r2, #10
 80092de:	2101      	movs	r1, #1
 80092e0:	4803      	ldr	r0, [pc, #12]	@ (80092f0 <STM32FXXXDMA2_stream6_cr_minc+0x20>)
 80092e2:	f7fa f97b 	bl	80035dc <set_reg_block>
}
 80092e6:	bf00      	nop
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	400264a0 	.word	0x400264a0

080092f4 <STM32FXXXDMA2_stream6_cr_pinc>:
void STM32FXXXDMA2_stream6_cr_pinc(uint8_t bool)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 9, bool);
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	2209      	movs	r2, #9
 8009302:	2101      	movs	r1, #1
 8009304:	4803      	ldr	r0, [pc, #12]	@ (8009314 <STM32FXXXDMA2_stream6_cr_pinc+0x20>)
 8009306:	f7fa f969 	bl	80035dc <set_reg_block>
}
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	400264a0 	.word	0x400264a0

08009318 <STM32FXXXDMA2_stream6_cr_circ>:
void STM32FXXXDMA2_stream6_cr_circ(uint8_t bool)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 8, bool);
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	2208      	movs	r2, #8
 8009326:	2101      	movs	r1, #1
 8009328:	4803      	ldr	r0, [pc, #12]	@ (8009338 <STM32FXXXDMA2_stream6_cr_circ+0x20>)
 800932a:	f7fa f957 	bl	80035dc <set_reg_block>
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	400264a0 	.word	0x400264a0

0800933c <STM32FXXXDMA2_stream6_cr_dir>:
void STM32FXXXDMA2_stream6_cr_dir(uint8_t value)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 2, 7, value);
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	2207      	movs	r2, #7
 800934a:	2102      	movs	r1, #2
 800934c:	4803      	ldr	r0, [pc, #12]	@ (800935c <STM32FXXXDMA2_stream6_cr_dir+0x20>)
 800934e:	f7fa f945 	bl	80035dc <set_reg_block>
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	400264a0 	.word	0x400264a0

08009360 <STM32FXXXDMA2_stream6_cr_pfctrl>:
void STM32FXXXDMA2_stream6_cr_pfctrl(uint8_t bool)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 5, bool);
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	2205      	movs	r2, #5
 800936e:	2101      	movs	r1, #1
 8009370:	4803      	ldr	r0, [pc, #12]	@ (8009380 <STM32FXXXDMA2_stream6_cr_pfctrl+0x20>)
 8009372:	f7fa f933 	bl	80035dc <set_reg_block>
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	400264a0 	.word	0x400264a0

08009384 <STM32FXXXDMA2_stream6_cr_tcie>:
void STM32FXXXDMA2_stream6_cr_tcie(uint8_t bool)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 4, bool);
 800938e:	79fb      	ldrb	r3, [r7, #7]
 8009390:	2204      	movs	r2, #4
 8009392:	2101      	movs	r1, #1
 8009394:	4803      	ldr	r0, [pc, #12]	@ (80093a4 <STM32FXXXDMA2_stream6_cr_tcie+0x20>)
 8009396:	f7fa f921 	bl	80035dc <set_reg_block>
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	400264a0 	.word	0x400264a0

080093a8 <STM32FXXXDMA2_stream6_cr_htie>:
void STM32FXXXDMA2_stream6_cr_htie(uint8_t bool)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 3, bool);
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	2203      	movs	r2, #3
 80093b6:	2101      	movs	r1, #1
 80093b8:	4803      	ldr	r0, [pc, #12]	@ (80093c8 <STM32FXXXDMA2_stream6_cr_htie+0x20>)
 80093ba:	f7fa f90f 	bl	80035dc <set_reg_block>
}
 80093be:	bf00      	nop
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	400264a0 	.word	0x400264a0

080093cc <STM32FXXXDMA2_stream6_cr_teie>:
void STM32FXXXDMA2_stream6_cr_teie(uint8_t bool)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 2, bool);
 80093d6:	79fb      	ldrb	r3, [r7, #7]
 80093d8:	2202      	movs	r2, #2
 80093da:	2101      	movs	r1, #1
 80093dc:	4803      	ldr	r0, [pc, #12]	@ (80093ec <STM32FXXXDMA2_stream6_cr_teie+0x20>)
 80093de:	f7fa f8fd 	bl	80035dc <set_reg_block>
}
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	400264a0 	.word	0x400264a0

080093f0 <STM32FXXXDMA2_stream6_cr_dmeie>:
void STM32FXXXDMA2_stream6_cr_dmeie(uint8_t bool)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	4603      	mov	r3, r0
 80093f8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 1, bool);
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	2201      	movs	r2, #1
 80093fe:	2101      	movs	r1, #1
 8009400:	4803      	ldr	r0, [pc, #12]	@ (8009410 <STM32FXXXDMA2_stream6_cr_dmeie+0x20>)
 8009402:	f7fa f8eb 	bl	80035dc <set_reg_block>
}
 8009406:	bf00      	nop
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	400264a0 	.word	0x400264a0

08009414 <STM32FXXXDMA2_stream6_cr_en>:
void STM32FXXXDMA2_stream6_cr_en(uint8_t bool)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->CR, 1, 0, bool);
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	2200      	movs	r2, #0
 8009422:	2101      	movs	r1, #1
 8009424:	4803      	ldr	r0, [pc, #12]	@ (8009434 <STM32FXXXDMA2_stream6_cr_en+0x20>)
 8009426:	f7fa f8d9 	bl	80035dc <set_reg_block>
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	400264a0 	.word	0x400264a0

08009438 <stm32fxxx_dma2_stream6_cr_inic>:
/*** Inic DMA2 STREAM6 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma2_stream6_cr_inic(void)
{
 8009438:	b480      	push	{r7}
 800943a:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma2_stream6_cr.chsel = STM32FXXXDMA2_stream6_cr_chsel;
 800943c:	4b1f      	ldr	r3, [pc, #124]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 800943e:	4a20      	ldr	r2, [pc, #128]	@ (80094c0 <stm32fxxx_dma2_stream6_cr_inic+0x88>)
 8009440:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream6_cr.mburst = STM32FXXXDMA2_stream6_cr_mburst;
 8009442:	4b1e      	ldr	r3, [pc, #120]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 8009444:	4a1f      	ldr	r2, [pc, #124]	@ (80094c4 <stm32fxxx_dma2_stream6_cr_inic+0x8c>)
 8009446:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream6_cr.pburst = STM32FXXXDMA2_stream6_cr_pburst;
 8009448:	4b1c      	ldr	r3, [pc, #112]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 800944a:	4a1f      	ldr	r2, [pc, #124]	@ (80094c8 <stm32fxxx_dma2_stream6_cr_inic+0x90>)
 800944c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream6_cr.ct = STM32FXXXDMA2_stream6_cr_ct;
 800944e:	4b1b      	ldr	r3, [pc, #108]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 8009450:	4a1e      	ldr	r2, [pc, #120]	@ (80094cc <stm32fxxx_dma2_stream6_cr_inic+0x94>)
 8009452:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2_stream6_cr.dbm = STM32FXXXDMA2_stream6_cr_dbm;
 8009454:	4b19      	ldr	r3, [pc, #100]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 8009456:	4a1e      	ldr	r2, [pc, #120]	@ (80094d0 <stm32fxxx_dma2_stream6_cr_inic+0x98>)
 8009458:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma2_stream6_cr.pl = STM32FXXXDMA2_stream6_cr_pl;
 800945a:	4b18      	ldr	r3, [pc, #96]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 800945c:	4a1d      	ldr	r2, [pc, #116]	@ (80094d4 <stm32fxxx_dma2_stream6_cr_inic+0x9c>)
 800945e:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma2_stream6_cr.pincos = STM32FXXXDMA2_stream6_cr_pincos;
 8009460:	4b16      	ldr	r3, [pc, #88]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 8009462:	4a1d      	ldr	r2, [pc, #116]	@ (80094d8 <stm32fxxx_dma2_stream6_cr_inic+0xa0>)
 8009464:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma2_stream6_cr.msize = STM32FXXXDMA2_stream6_cr_msize;
 8009466:	4b15      	ldr	r3, [pc, #84]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 8009468:	4a1c      	ldr	r2, [pc, #112]	@ (80094dc <stm32fxxx_dma2_stream6_cr_inic+0xa4>)
 800946a:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma2_stream6_cr.psize = STM32FXXXDMA2_stream6_cr_psize;
 800946c:	4b13      	ldr	r3, [pc, #76]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 800946e:	4a1c      	ldr	r2, [pc, #112]	@ (80094e0 <stm32fxxx_dma2_stream6_cr_inic+0xa8>)
 8009470:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma2_stream6_cr.minc = STM32FXXXDMA2_stream6_cr_minc;
 8009472:	4b12      	ldr	r3, [pc, #72]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 8009474:	4a1b      	ldr	r2, [pc, #108]	@ (80094e4 <stm32fxxx_dma2_stream6_cr_inic+0xac>)
 8009476:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma2_stream6_cr.pinc = STM32FXXXDMA2_stream6_cr_pinc;
 8009478:	4b10      	ldr	r3, [pc, #64]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 800947a:	4a1b      	ldr	r2, [pc, #108]	@ (80094e8 <stm32fxxx_dma2_stream6_cr_inic+0xb0>)
 800947c:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma2_stream6_cr.circ = STM32FXXXDMA2_stream6_cr_circ;
 800947e:	4b0f      	ldr	r3, [pc, #60]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 8009480:	4a1a      	ldr	r2, [pc, #104]	@ (80094ec <stm32fxxx_dma2_stream6_cr_inic+0xb4>)
 8009482:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma2_stream6_cr.dir = STM32FXXXDMA2_stream6_cr_dir;
 8009484:	4b0d      	ldr	r3, [pc, #52]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 8009486:	4a1a      	ldr	r2, [pc, #104]	@ (80094f0 <stm32fxxx_dma2_stream6_cr_inic+0xb8>)
 8009488:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma2_stream6_cr.pfctrl = STM32FXXXDMA2_stream6_cr_pfctrl;
 800948a:	4b0c      	ldr	r3, [pc, #48]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 800948c:	4a19      	ldr	r2, [pc, #100]	@ (80094f4 <stm32fxxx_dma2_stream6_cr_inic+0xbc>)
 800948e:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma2_stream6_cr.tcie = STM32FXXXDMA2_stream6_cr_tcie;
 8009490:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 8009492:	4a19      	ldr	r2, [pc, #100]	@ (80094f8 <stm32fxxx_dma2_stream6_cr_inic+0xc0>)
 8009494:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma2_stream6_cr.htie = STM32FXXXDMA2_stream6_cr_htie;
 8009496:	4b09      	ldr	r3, [pc, #36]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 8009498:	4a18      	ldr	r2, [pc, #96]	@ (80094fc <stm32fxxx_dma2_stream6_cr_inic+0xc4>)
 800949a:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma2_stream6_cr.teie = STM32FXXXDMA2_stream6_cr_teie;
 800949c:	4b07      	ldr	r3, [pc, #28]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 800949e:	4a18      	ldr	r2, [pc, #96]	@ (8009500 <stm32fxxx_dma2_stream6_cr_inic+0xc8>)
 80094a0:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma2_stream6_cr.dmeie = STM32FXXXDMA2_stream6_cr_dmeie;
 80094a2:	4b06      	ldr	r3, [pc, #24]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 80094a4:	4a17      	ldr	r2, [pc, #92]	@ (8009504 <stm32fxxx_dma2_stream6_cr_inic+0xcc>)
 80094a6:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma2_stream6_cr.en = STM32FXXXDMA2_stream6_cr_en;
 80094a8:	4b04      	ldr	r3, [pc, #16]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
 80094aa:	4a17      	ldr	r2, [pc, #92]	@ (8009508 <stm32fxxx_dma2_stream6_cr_inic+0xd0>)
 80094ac:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma2_stream6_cr;
 80094ae:	4b03      	ldr	r3, [pc, #12]	@ (80094bc <stm32fxxx_dma2_stream6_cr_inic+0x84>)
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20000790 	.word	0x20000790
 80094c0:	0800918d 	.word	0x0800918d
 80094c4:	080091b1 	.word	0x080091b1
 80094c8:	080091d5 	.word	0x080091d5
 80094cc:	080091f9 	.word	0x080091f9
 80094d0:	0800921d 	.word	0x0800921d
 80094d4:	08009241 	.word	0x08009241
 80094d8:	08009265 	.word	0x08009265
 80094dc:	08009289 	.word	0x08009289
 80094e0:	080092ad 	.word	0x080092ad
 80094e4:	080092d1 	.word	0x080092d1
 80094e8:	080092f5 	.word	0x080092f5
 80094ec:	08009319 	.word	0x08009319
 80094f0:	0800933d 	.word	0x0800933d
 80094f4:	08009361 	.word	0x08009361
 80094f8:	08009385 	.word	0x08009385
 80094fc:	080093a9 	.word	0x080093a9
 8009500:	080093cd 	.word	0x080093cd
 8009504:	080093f1 	.word	0x080093f1
 8009508:	08009415 	.word	0x08009415

0800950c <stm32fxxx_dma2_stream6_ndt>:
/*** Inic DMA2 STREAM6 Function ***/
void stm32fxxx_dma2_stream6_ndt(uint16_t value)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	80fb      	strh	r3, [r7, #6]
	DMA2_Stream6->NDTR = value;
 8009516:	4a04      	ldr	r2, [pc, #16]	@ (8009528 <stm32fxxx_dma2_stream6_ndt+0x1c>)
 8009518:	88fb      	ldrh	r3, [r7, #6]
 800951a:	6053      	str	r3, [r2, #4]
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	400264a0 	.word	0x400264a0

0800952c <stm32fxxx_dma2_stream6_par>:
void stm32fxxx_dma2_stream6_par(volatile long unsigned int periferal_addr)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
	DMA2_Stream6->PAR = periferal_addr;
 8009534:	4a04      	ldr	r2, [pc, #16]	@ (8009548 <stm32fxxx_dma2_stream6_par+0x1c>)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6093      	str	r3, [r2, #8]
}
 800953a:	bf00      	nop
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	400264a0 	.word	0x400264a0

0800954c <stm32fxxx_dma2_stream6_m0a>:
void stm32fxxx_dma2_stream6_m0a(volatile long unsigned int mem0_addr)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	DMA2_Stream6->M0AR = mem0_addr;
 8009554:	4a04      	ldr	r2, [pc, #16]	@ (8009568 <stm32fxxx_dma2_stream6_m0a+0x1c>)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	60d3      	str	r3, [r2, #12]
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	400264a0 	.word	0x400264a0

0800956c <stm32fxxx_dma2_stream6_m1a>:
void stm32fxxx_dma2_stream6_m1a(volatile long unsigned int mem1_addr)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
	DMA2_Stream6->M1AR = mem1_addr;
 8009574:	4a04      	ldr	r2, [pc, #16]	@ (8009588 <stm32fxxx_dma2_stream6_m1a+0x1c>)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6113      	str	r3, [r2, #16]
}
 800957a:	bf00      	nop
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	400264a0 	.word	0x400264a0

0800958c <STM32FXXXDMA2_stream7_cr_chsel>:
// DMA2 STREAM7 CR
void STM32FXXXDMA2_stream7_cr_chsel(uint8_t value)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 3, 25, value);
 8009596:	79fb      	ldrb	r3, [r7, #7]
 8009598:	2219      	movs	r2, #25
 800959a:	2103      	movs	r1, #3
 800959c:	4803      	ldr	r0, [pc, #12]	@ (80095ac <STM32FXXXDMA2_stream7_cr_chsel+0x20>)
 800959e:	f7fa f81d 	bl	80035dc <set_reg_block>
}
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	400264b8 	.word	0x400264b8

080095b0 <STM32FXXXDMA2_stream7_cr_mburst>:
void STM32FXXXDMA2_stream7_cr_mburst(uint8_t value)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 2, 23, value);
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	2217      	movs	r2, #23
 80095be:	2102      	movs	r1, #2
 80095c0:	4803      	ldr	r0, [pc, #12]	@ (80095d0 <STM32FXXXDMA2_stream7_cr_mburst+0x20>)
 80095c2:	f7fa f80b 	bl	80035dc <set_reg_block>
}
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	400264b8 	.word	0x400264b8

080095d4 <STM32FXXXDMA2_stream7_cr_pburst>:
void STM32FXXXDMA2_stream7_cr_pburst(uint8_t value)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 2, 21, value);
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	2215      	movs	r2, #21
 80095e2:	2102      	movs	r1, #2
 80095e4:	4803      	ldr	r0, [pc, #12]	@ (80095f4 <STM32FXXXDMA2_stream7_cr_pburst+0x20>)
 80095e6:	f7f9 fff9 	bl	80035dc <set_reg_block>
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	400264b8 	.word	0x400264b8

080095f8 <STM32FXXXDMA2_stream7_cr_ct>:
void STM32FXXXDMA2_stream7_cr_ct(uint8_t bool)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 19, bool);
 8009602:	79fb      	ldrb	r3, [r7, #7]
 8009604:	2213      	movs	r2, #19
 8009606:	2101      	movs	r1, #1
 8009608:	4803      	ldr	r0, [pc, #12]	@ (8009618 <STM32FXXXDMA2_stream7_cr_ct+0x20>)
 800960a:	f7f9 ffe7 	bl	80035dc <set_reg_block>
}
 800960e:	bf00      	nop
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	400264b8 	.word	0x400264b8

0800961c <STM32FXXXDMA2_stream7_cr_dbm>:
void STM32FXXXDMA2_stream7_cr_dbm(uint8_t bool)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 18, bool);
 8009626:	79fb      	ldrb	r3, [r7, #7]
 8009628:	2212      	movs	r2, #18
 800962a:	2101      	movs	r1, #1
 800962c:	4803      	ldr	r0, [pc, #12]	@ (800963c <STM32FXXXDMA2_stream7_cr_dbm+0x20>)
 800962e:	f7f9 ffd5 	bl	80035dc <set_reg_block>
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	400264b8 	.word	0x400264b8

08009640 <STM32FXXXDMA2_stream7_cr_pl>:
void STM32FXXXDMA2_stream7_cr_pl(uint8_t value)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 2, 16, value);
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	2210      	movs	r2, #16
 800964e:	2102      	movs	r1, #2
 8009650:	4803      	ldr	r0, [pc, #12]	@ (8009660 <STM32FXXXDMA2_stream7_cr_pl+0x20>)
 8009652:	f7f9 ffc3 	bl	80035dc <set_reg_block>
}
 8009656:	bf00      	nop
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	400264b8 	.word	0x400264b8

08009664 <STM32FXXXDMA2_stream7_cr_pincos>:
void STM32FXXXDMA2_stream7_cr_pincos(uint8_t bool)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 15, bool);
 800966e:	79fb      	ldrb	r3, [r7, #7]
 8009670:	220f      	movs	r2, #15
 8009672:	2101      	movs	r1, #1
 8009674:	4803      	ldr	r0, [pc, #12]	@ (8009684 <STM32FXXXDMA2_stream7_cr_pincos+0x20>)
 8009676:	f7f9 ffb1 	bl	80035dc <set_reg_block>
}
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	400264b8 	.word	0x400264b8

08009688 <STM32FXXXDMA2_stream7_cr_msize>:
void STM32FXXXDMA2_stream7_cr_msize(uint8_t value)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 2, 13, value);
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	220d      	movs	r2, #13
 8009696:	2102      	movs	r1, #2
 8009698:	4803      	ldr	r0, [pc, #12]	@ (80096a8 <STM32FXXXDMA2_stream7_cr_msize+0x20>)
 800969a:	f7f9 ff9f 	bl	80035dc <set_reg_block>
}
 800969e:	bf00      	nop
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	400264b8 	.word	0x400264b8

080096ac <STM32FXXXDMA2_stream7_cr_psize>:
void STM32FXXXDMA2_stream7_cr_psize(uint8_t value)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 2, 11, value);
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	220b      	movs	r2, #11
 80096ba:	2102      	movs	r1, #2
 80096bc:	4803      	ldr	r0, [pc, #12]	@ (80096cc <STM32FXXXDMA2_stream7_cr_psize+0x20>)
 80096be:	f7f9 ff8d 	bl	80035dc <set_reg_block>
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	400264b8 	.word	0x400264b8

080096d0 <STM32FXXXDMA2_stream7_cr_minc>:
void STM32FXXXDMA2_stream7_cr_minc(uint8_t bool)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 10, bool);
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	220a      	movs	r2, #10
 80096de:	2101      	movs	r1, #1
 80096e0:	4803      	ldr	r0, [pc, #12]	@ (80096f0 <STM32FXXXDMA2_stream7_cr_minc+0x20>)
 80096e2:	f7f9 ff7b 	bl	80035dc <set_reg_block>
}
 80096e6:	bf00      	nop
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	400264b8 	.word	0x400264b8

080096f4 <STM32FXXXDMA2_stream7_cr_pinc>:
void STM32FXXXDMA2_stream7_cr_pinc(uint8_t bool)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 9, bool);
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	2209      	movs	r2, #9
 8009702:	2101      	movs	r1, #1
 8009704:	4803      	ldr	r0, [pc, #12]	@ (8009714 <STM32FXXXDMA2_stream7_cr_pinc+0x20>)
 8009706:	f7f9 ff69 	bl	80035dc <set_reg_block>
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	400264b8 	.word	0x400264b8

08009718 <STM32FXXXDMA2_stream7_cr_circ>:
void STM32FXXXDMA2_stream7_cr_circ(uint8_t bool)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 8, bool);
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	2208      	movs	r2, #8
 8009726:	2101      	movs	r1, #1
 8009728:	4803      	ldr	r0, [pc, #12]	@ (8009738 <STM32FXXXDMA2_stream7_cr_circ+0x20>)
 800972a:	f7f9 ff57 	bl	80035dc <set_reg_block>
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	400264b8 	.word	0x400264b8

0800973c <STM32FXXXDMA2_stream7_cr_dir>:
void STM32FXXXDMA2_stream7_cr_dir(uint8_t value)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 2, 7, value);
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	2207      	movs	r2, #7
 800974a:	2102      	movs	r1, #2
 800974c:	4803      	ldr	r0, [pc, #12]	@ (800975c <STM32FXXXDMA2_stream7_cr_dir+0x20>)
 800974e:	f7f9 ff45 	bl	80035dc <set_reg_block>
}
 8009752:	bf00      	nop
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	400264b8 	.word	0x400264b8

08009760 <STM32FXXXDMA2_stream7_cr_pfctrl>:
void STM32FXXXDMA2_stream7_cr_pfctrl(uint8_t bool)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 5, bool);
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	2205      	movs	r2, #5
 800976e:	2101      	movs	r1, #1
 8009770:	4803      	ldr	r0, [pc, #12]	@ (8009780 <STM32FXXXDMA2_stream7_cr_pfctrl+0x20>)
 8009772:	f7f9 ff33 	bl	80035dc <set_reg_block>
}
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	400264b8 	.word	0x400264b8

08009784 <STM32FXXXDMA2_stream7_cr_tcie>:
void STM32FXXXDMA2_stream7_cr_tcie(uint8_t bool)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	4603      	mov	r3, r0
 800978c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 4, bool);
 800978e:	79fb      	ldrb	r3, [r7, #7]
 8009790:	2204      	movs	r2, #4
 8009792:	2101      	movs	r1, #1
 8009794:	4803      	ldr	r0, [pc, #12]	@ (80097a4 <STM32FXXXDMA2_stream7_cr_tcie+0x20>)
 8009796:	f7f9 ff21 	bl	80035dc <set_reg_block>
}
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	400264b8 	.word	0x400264b8

080097a8 <STM32FXXXDMA2_stream7_cr_htie>:
void STM32FXXXDMA2_stream7_cr_htie(uint8_t bool)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 3, bool);
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	2203      	movs	r2, #3
 80097b6:	2101      	movs	r1, #1
 80097b8:	4803      	ldr	r0, [pc, #12]	@ (80097c8 <STM32FXXXDMA2_stream7_cr_htie+0x20>)
 80097ba:	f7f9 ff0f 	bl	80035dc <set_reg_block>
}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	400264b8 	.word	0x400264b8

080097cc <STM32FXXXDMA2_stream7_cr_teie>:
void STM32FXXXDMA2_stream7_cr_teie(uint8_t bool)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 2, bool);
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	2202      	movs	r2, #2
 80097da:	2101      	movs	r1, #1
 80097dc:	4803      	ldr	r0, [pc, #12]	@ (80097ec <STM32FXXXDMA2_stream7_cr_teie+0x20>)
 80097de:	f7f9 fefd 	bl	80035dc <set_reg_block>
}
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	400264b8 	.word	0x400264b8

080097f0 <STM32FXXXDMA2_stream7_cr_dmeie>:
void STM32FXXXDMA2_stream7_cr_dmeie(uint8_t bool)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 1, bool);
 80097fa:	79fb      	ldrb	r3, [r7, #7]
 80097fc:	2201      	movs	r2, #1
 80097fe:	2101      	movs	r1, #1
 8009800:	4803      	ldr	r0, [pc, #12]	@ (8009810 <STM32FXXXDMA2_stream7_cr_dmeie+0x20>)
 8009802:	f7f9 feeb 	bl	80035dc <set_reg_block>
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	400264b8 	.word	0x400264b8

08009814 <STM32FXXXDMA2_stream7_cr_en>:
void STM32FXXXDMA2_stream7_cr_en(uint8_t bool)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->CR, 1, 0, bool);
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	2200      	movs	r2, #0
 8009822:	2101      	movs	r1, #1
 8009824:	4803      	ldr	r0, [pc, #12]	@ (8009834 <STM32FXXXDMA2_stream7_cr_en+0x20>)
 8009826:	f7f9 fed9 	bl	80035dc <set_reg_block>
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	400264b8 	.word	0x400264b8

08009838 <stm32fxxx_dma2_stream7_cr_inic>:
/*** Inic DMA2 STREAM7 CR ***/
STM32FXXXDMA_STREAM_cr* stm32fxxx_dma2_stream7_cr_inic(void)
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_dma2_stream7_cr.chsel = STM32FXXXDMA2_stream7_cr_chsel;
 800983c:	4b1f      	ldr	r3, [pc, #124]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 800983e:	4a20      	ldr	r2, [pc, #128]	@ (80098c0 <stm32fxxx_dma2_stream7_cr_inic+0x88>)
 8009840:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream7_cr.mburst = STM32FXXXDMA2_stream7_cr_mburst;
 8009842:	4b1e      	ldr	r3, [pc, #120]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 8009844:	4a1f      	ldr	r2, [pc, #124]	@ (80098c4 <stm32fxxx_dma2_stream7_cr_inic+0x8c>)
 8009846:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream7_cr.pburst = STM32FXXXDMA2_stream7_cr_pburst;
 8009848:	4b1c      	ldr	r3, [pc, #112]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 800984a:	4a1f      	ldr	r2, [pc, #124]	@ (80098c8 <stm32fxxx_dma2_stream7_cr_inic+0x90>)
 800984c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream7_cr.ct = STM32FXXXDMA2_stream7_cr_ct;
 800984e:	4b1b      	ldr	r3, [pc, #108]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 8009850:	4a1e      	ldr	r2, [pc, #120]	@ (80098cc <stm32fxxx_dma2_stream7_cr_inic+0x94>)
 8009852:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2_stream7_cr.dbm = STM32FXXXDMA2_stream7_cr_dbm;
 8009854:	4b19      	ldr	r3, [pc, #100]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 8009856:	4a1e      	ldr	r2, [pc, #120]	@ (80098d0 <stm32fxxx_dma2_stream7_cr_inic+0x98>)
 8009858:	611a      	str	r2, [r3, #16]
	stm32fxxx_dma2_stream7_cr.pl = STM32FXXXDMA2_stream7_cr_pl;
 800985a:	4b18      	ldr	r3, [pc, #96]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 800985c:	4a1d      	ldr	r2, [pc, #116]	@ (80098d4 <stm32fxxx_dma2_stream7_cr_inic+0x9c>)
 800985e:	615a      	str	r2, [r3, #20]
	stm32fxxx_dma2_stream7_cr.pincos = STM32FXXXDMA2_stream7_cr_pincos;
 8009860:	4b16      	ldr	r3, [pc, #88]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 8009862:	4a1d      	ldr	r2, [pc, #116]	@ (80098d8 <stm32fxxx_dma2_stream7_cr_inic+0xa0>)
 8009864:	619a      	str	r2, [r3, #24]
	stm32fxxx_dma2_stream7_cr.msize = STM32FXXXDMA2_stream7_cr_msize;
 8009866:	4b15      	ldr	r3, [pc, #84]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 8009868:	4a1c      	ldr	r2, [pc, #112]	@ (80098dc <stm32fxxx_dma2_stream7_cr_inic+0xa4>)
 800986a:	61da      	str	r2, [r3, #28]
	stm32fxxx_dma2_stream7_cr.psize = STM32FXXXDMA2_stream7_cr_psize;
 800986c:	4b13      	ldr	r3, [pc, #76]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 800986e:	4a1c      	ldr	r2, [pc, #112]	@ (80098e0 <stm32fxxx_dma2_stream7_cr_inic+0xa8>)
 8009870:	621a      	str	r2, [r3, #32]
	stm32fxxx_dma2_stream7_cr.minc = STM32FXXXDMA2_stream7_cr_minc;
 8009872:	4b12      	ldr	r3, [pc, #72]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 8009874:	4a1b      	ldr	r2, [pc, #108]	@ (80098e4 <stm32fxxx_dma2_stream7_cr_inic+0xac>)
 8009876:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_dma2_stream7_cr.pinc = STM32FXXXDMA2_stream7_cr_pinc;
 8009878:	4b10      	ldr	r3, [pc, #64]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 800987a:	4a1b      	ldr	r2, [pc, #108]	@ (80098e8 <stm32fxxx_dma2_stream7_cr_inic+0xb0>)
 800987c:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_dma2_stream7_cr.circ = STM32FXXXDMA2_stream7_cr_circ;
 800987e:	4b0f      	ldr	r3, [pc, #60]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 8009880:	4a1a      	ldr	r2, [pc, #104]	@ (80098ec <stm32fxxx_dma2_stream7_cr_inic+0xb4>)
 8009882:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_dma2_stream7_cr.dir = STM32FXXXDMA2_stream7_cr_dir;
 8009884:	4b0d      	ldr	r3, [pc, #52]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 8009886:	4a1a      	ldr	r2, [pc, #104]	@ (80098f0 <stm32fxxx_dma2_stream7_cr_inic+0xb8>)
 8009888:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_dma2_stream7_cr.pfctrl = STM32FXXXDMA2_stream7_cr_pfctrl;
 800988a:	4b0c      	ldr	r3, [pc, #48]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 800988c:	4a19      	ldr	r2, [pc, #100]	@ (80098f4 <stm32fxxx_dma2_stream7_cr_inic+0xbc>)
 800988e:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_dma2_stream7_cr.tcie = STM32FXXXDMA2_stream7_cr_tcie;
 8009890:	4b0a      	ldr	r3, [pc, #40]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 8009892:	4a19      	ldr	r2, [pc, #100]	@ (80098f8 <stm32fxxx_dma2_stream7_cr_inic+0xc0>)
 8009894:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_dma2_stream7_cr.htie = STM32FXXXDMA2_stream7_cr_htie;
 8009896:	4b09      	ldr	r3, [pc, #36]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 8009898:	4a18      	ldr	r2, [pc, #96]	@ (80098fc <stm32fxxx_dma2_stream7_cr_inic+0xc4>)
 800989a:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_dma2_stream7_cr.teie = STM32FXXXDMA2_stream7_cr_teie;
 800989c:	4b07      	ldr	r3, [pc, #28]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 800989e:	4a18      	ldr	r2, [pc, #96]	@ (8009900 <stm32fxxx_dma2_stream7_cr_inic+0xc8>)
 80098a0:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_dma2_stream7_cr.dmeie = STM32FXXXDMA2_stream7_cr_dmeie;
 80098a2:	4b06      	ldr	r3, [pc, #24]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 80098a4:	4a17      	ldr	r2, [pc, #92]	@ (8009904 <stm32fxxx_dma2_stream7_cr_inic+0xcc>)
 80098a6:	645a      	str	r2, [r3, #68]	@ 0x44
	stm32fxxx_dma2_stream7_cr.en = STM32FXXXDMA2_stream7_cr_en;
 80098a8:	4b04      	ldr	r3, [pc, #16]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
 80098aa:	4a17      	ldr	r2, [pc, #92]	@ (8009908 <stm32fxxx_dma2_stream7_cr_inic+0xd0>)
 80098ac:	649a      	str	r2, [r3, #72]	@ 0x48
	return &stm32fxxx_dma2_stream7_cr;
 80098ae:	4b03      	ldr	r3, [pc, #12]	@ (80098bc <stm32fxxx_dma2_stream7_cr_inic+0x84>)
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	200007dc 	.word	0x200007dc
 80098c0:	0800958d 	.word	0x0800958d
 80098c4:	080095b1 	.word	0x080095b1
 80098c8:	080095d5 	.word	0x080095d5
 80098cc:	080095f9 	.word	0x080095f9
 80098d0:	0800961d 	.word	0x0800961d
 80098d4:	08009641 	.word	0x08009641
 80098d8:	08009665 	.word	0x08009665
 80098dc:	08009689 	.word	0x08009689
 80098e0:	080096ad 	.word	0x080096ad
 80098e4:	080096d1 	.word	0x080096d1
 80098e8:	080096f5 	.word	0x080096f5
 80098ec:	08009719 	.word	0x08009719
 80098f0:	0800973d 	.word	0x0800973d
 80098f4:	08009761 	.word	0x08009761
 80098f8:	08009785 	.word	0x08009785
 80098fc:	080097a9 	.word	0x080097a9
 8009900:	080097cd 	.word	0x080097cd
 8009904:	080097f1 	.word	0x080097f1
 8009908:	08009815 	.word	0x08009815

0800990c <stm32fxxx_dma2_stream7_ndt>:
/*** Inic DMA2 STREAM7 Function ***/
void stm32fxxx_dma2_stream7_ndt(uint16_t value)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	80fb      	strh	r3, [r7, #6]
	DMA2_Stream7->NDTR = value;
 8009916:	4a04      	ldr	r2, [pc, #16]	@ (8009928 <stm32fxxx_dma2_stream7_ndt+0x1c>)
 8009918:	88fb      	ldrh	r3, [r7, #6]
 800991a:	6053      	str	r3, [r2, #4]
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	400264b8 	.word	0x400264b8

0800992c <stm32fxxx_dma2_stream7_par>:
void stm32fxxx_dma2_stream7_par(volatile long unsigned int periferal_addr)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
	DMA2_Stream7->PAR = periferal_addr;
 8009934:	4a04      	ldr	r2, [pc, #16]	@ (8009948 <stm32fxxx_dma2_stream7_par+0x1c>)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6093      	str	r3, [r2, #8]
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	400264b8 	.word	0x400264b8

0800994c <stm32fxxx_dma2_stream7_m0a>:
void stm32fxxx_dma2_stream7_m0a(volatile long unsigned int mem0_addr)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
	DMA2_Stream7->M0AR = mem0_addr;
 8009954:	4a04      	ldr	r2, [pc, #16]	@ (8009968 <stm32fxxx_dma2_stream7_m0a+0x1c>)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60d3      	str	r3, [r2, #12]
}
 800995a:	bf00      	nop
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	400264b8 	.word	0x400264b8

0800996c <stm32fxxx_dma2_stream7_m1a>:
void stm32fxxx_dma2_stream7_m1a(volatile long unsigned int mem1_addr)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	DMA2_Stream7->M1AR = mem1_addr;
 8009974:	4a04      	ldr	r2, [pc, #16]	@ (8009988 <stm32fxxx_dma2_stream7_m1a+0x1c>)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6113      	str	r3, [r2, #16]
}
 800997a:	bf00      	nop
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	400264b8 	.word	0x400264b8

0800998c <STM32FXXXDMA2_stream0_fcr_feie>:
// DMA2 STREAM0 FCR
void STM32FXXXDMA2_stream0_fcr_feie(uint8_t bool)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->FCR, 1, 7, bool);
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	2207      	movs	r2, #7
 800999a:	2101      	movs	r1, #1
 800999c:	4803      	ldr	r0, [pc, #12]	@ (80099ac <STM32FXXXDMA2_stream0_fcr_feie+0x20>)
 800999e:	f7f9 fe1d 	bl	80035dc <set_reg_block>
}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	40026424 	.word	0x40026424

080099b0 <STM32FXXXDMA2_stream0_fcr_fs>:
void STM32FXXXDMA2_stream0_fcr_fs(uint8_t value)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->FCR, 3, 3, value);
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	2203      	movs	r2, #3
 80099be:	2103      	movs	r1, #3
 80099c0:	4803      	ldr	r0, [pc, #12]	@ (80099d0 <STM32FXXXDMA2_stream0_fcr_fs+0x20>)
 80099c2:	f7f9 fe0b 	bl	80035dc <set_reg_block>
}
 80099c6:	bf00      	nop
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	40026424 	.word	0x40026424

080099d4 <STM32FXXXDMA2_stream0_fcr_dmdis>:
void STM32FXXXDMA2_stream0_fcr_dmdis(uint8_t bool)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4603      	mov	r3, r0
 80099dc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->FCR, 1, 2, bool);
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	2202      	movs	r2, #2
 80099e2:	2101      	movs	r1, #1
 80099e4:	4803      	ldr	r0, [pc, #12]	@ (80099f4 <STM32FXXXDMA2_stream0_fcr_dmdis+0x20>)
 80099e6:	f7f9 fdf9 	bl	80035dc <set_reg_block>
}
 80099ea:	bf00      	nop
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	40026424 	.word	0x40026424

080099f8 <STM32FXXXDMA2_stream0_fcr_fth>:
void STM32FXXXDMA2_stream0_fcr_fth(uint8_t value)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream0->FCR, 2, 0, value);
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	2200      	movs	r2, #0
 8009a06:	2102      	movs	r1, #2
 8009a08:	4803      	ldr	r0, [pc, #12]	@ (8009a18 <STM32FXXXDMA2_stream0_fcr_fth+0x20>)
 8009a0a:	f7f9 fde7 	bl	80035dc <set_reg_block>
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	40026424 	.word	0x40026424

08009a1c <stm32fxxx_dma2_stream0_fcr_inic>:
/*** Inic DMA2 STREAM0 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma2_stream0_fcr_inic(void)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma2_stream0_fcr.feie = STM32FXXXDMA2_stream0_fcr_feie;
 8009a20:	4b08      	ldr	r3, [pc, #32]	@ (8009a44 <stm32fxxx_dma2_stream0_fcr_inic+0x28>)
 8009a22:	4a09      	ldr	r2, [pc, #36]	@ (8009a48 <stm32fxxx_dma2_stream0_fcr_inic+0x2c>)
 8009a24:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream0_fcr.fs = STM32FXXXDMA2_stream0_fcr_fs;
 8009a26:	4b07      	ldr	r3, [pc, #28]	@ (8009a44 <stm32fxxx_dma2_stream0_fcr_inic+0x28>)
 8009a28:	4a08      	ldr	r2, [pc, #32]	@ (8009a4c <stm32fxxx_dma2_stream0_fcr_inic+0x30>)
 8009a2a:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream0_fcr.dmdis = STM32FXXXDMA2_stream0_fcr_dmdis;
 8009a2c:	4b05      	ldr	r3, [pc, #20]	@ (8009a44 <stm32fxxx_dma2_stream0_fcr_inic+0x28>)
 8009a2e:	4a08      	ldr	r2, [pc, #32]	@ (8009a50 <stm32fxxx_dma2_stream0_fcr_inic+0x34>)
 8009a30:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream0_fcr.fth = STM32FXXXDMA2_stream0_fcr_fth;
 8009a32:	4b04      	ldr	r3, [pc, #16]	@ (8009a44 <stm32fxxx_dma2_stream0_fcr_inic+0x28>)
 8009a34:	4a07      	ldr	r2, [pc, #28]	@ (8009a54 <stm32fxxx_dma2_stream0_fcr_inic+0x38>)
 8009a36:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma2_stream0_fcr;
 8009a38:	4b02      	ldr	r3, [pc, #8]	@ (8009a44 <stm32fxxx_dma2_stream0_fcr_inic+0x28>)
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	20000828 	.word	0x20000828
 8009a48:	0800998d 	.word	0x0800998d
 8009a4c:	080099b1 	.word	0x080099b1
 8009a50:	080099d5 	.word	0x080099d5
 8009a54:	080099f9 	.word	0x080099f9

08009a58 <STM32FXXXDMA2_stream1_fcr_feie>:
// DMA2 STREAM1 FCR
void STM32FXXXDMA2_stream1_fcr_feie(uint8_t bool)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->FCR, 1, 7, bool);
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	2207      	movs	r2, #7
 8009a66:	2101      	movs	r1, #1
 8009a68:	4803      	ldr	r0, [pc, #12]	@ (8009a78 <STM32FXXXDMA2_stream1_fcr_feie+0x20>)
 8009a6a:	f7f9 fdb7 	bl	80035dc <set_reg_block>
}
 8009a6e:	bf00      	nop
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	4002643c 	.word	0x4002643c

08009a7c <STM32FXXXDMA2_stream1_fcr_fs>:
void STM32FXXXDMA2_stream1_fcr_fs(uint8_t value)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->FCR, 3, 3, value);
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	2203      	movs	r2, #3
 8009a8a:	2103      	movs	r1, #3
 8009a8c:	4803      	ldr	r0, [pc, #12]	@ (8009a9c <STM32FXXXDMA2_stream1_fcr_fs+0x20>)
 8009a8e:	f7f9 fda5 	bl	80035dc <set_reg_block>
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	4002643c 	.word	0x4002643c

08009aa0 <STM32FXXXDMA2_stream1_fcr_dmdis>:
void STM32FXXXDMA2_stream1_fcr_dmdis(uint8_t bool)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->FCR, 1, 2, bool);
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	2202      	movs	r2, #2
 8009aae:	2101      	movs	r1, #1
 8009ab0:	4803      	ldr	r0, [pc, #12]	@ (8009ac0 <STM32FXXXDMA2_stream1_fcr_dmdis+0x20>)
 8009ab2:	f7f9 fd93 	bl	80035dc <set_reg_block>
}
 8009ab6:	bf00      	nop
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	4002643c 	.word	0x4002643c

08009ac4 <STM32FXXXDMA2_stream1_fcr_fth>:
void STM32FXXXDMA2_stream1_fcr_fth(uint8_t value)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream1->FCR, 2, 0, value);
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2102      	movs	r1, #2
 8009ad4:	4803      	ldr	r0, [pc, #12]	@ (8009ae4 <STM32FXXXDMA2_stream1_fcr_fth+0x20>)
 8009ad6:	f7f9 fd81 	bl	80035dc <set_reg_block>
}
 8009ada:	bf00      	nop
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	4002643c 	.word	0x4002643c

08009ae8 <stm32fxxx_dma2_stream1_fcr_inic>:
/*** Inic DMA2 STREAM1 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma2_stream1_fcr_inic(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma2_stream1_fcr.feie = STM32FXXXDMA2_stream1_fcr_feie;
 8009aec:	4b08      	ldr	r3, [pc, #32]	@ (8009b10 <stm32fxxx_dma2_stream1_fcr_inic+0x28>)
 8009aee:	4a09      	ldr	r2, [pc, #36]	@ (8009b14 <stm32fxxx_dma2_stream1_fcr_inic+0x2c>)
 8009af0:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream1_fcr.fs = STM32FXXXDMA2_stream1_fcr_fs;
 8009af2:	4b07      	ldr	r3, [pc, #28]	@ (8009b10 <stm32fxxx_dma2_stream1_fcr_inic+0x28>)
 8009af4:	4a08      	ldr	r2, [pc, #32]	@ (8009b18 <stm32fxxx_dma2_stream1_fcr_inic+0x30>)
 8009af6:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream1_fcr.dmdis = STM32FXXXDMA2_stream1_fcr_dmdis;
 8009af8:	4b05      	ldr	r3, [pc, #20]	@ (8009b10 <stm32fxxx_dma2_stream1_fcr_inic+0x28>)
 8009afa:	4a08      	ldr	r2, [pc, #32]	@ (8009b1c <stm32fxxx_dma2_stream1_fcr_inic+0x34>)
 8009afc:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream1_fcr.fth = STM32FXXXDMA2_stream1_fcr_fth;
 8009afe:	4b04      	ldr	r3, [pc, #16]	@ (8009b10 <stm32fxxx_dma2_stream1_fcr_inic+0x28>)
 8009b00:	4a07      	ldr	r2, [pc, #28]	@ (8009b20 <stm32fxxx_dma2_stream1_fcr_inic+0x38>)
 8009b02:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma2_stream1_fcr;
 8009b04:	4b02      	ldr	r3, [pc, #8]	@ (8009b10 <stm32fxxx_dma2_stream1_fcr_inic+0x28>)
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	20000838 	.word	0x20000838
 8009b14:	08009a59 	.word	0x08009a59
 8009b18:	08009a7d 	.word	0x08009a7d
 8009b1c:	08009aa1 	.word	0x08009aa1
 8009b20:	08009ac5 	.word	0x08009ac5

08009b24 <STM32FXXXDMA2_stream2_fcr_feie>:
// DMA2 STREAM2 FCR
void STM32FXXXDMA2_stream2_fcr_feie(uint8_t bool)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->FCR, 1, 7, bool);
 8009b2e:	79fb      	ldrb	r3, [r7, #7]
 8009b30:	2207      	movs	r2, #7
 8009b32:	2101      	movs	r1, #1
 8009b34:	4803      	ldr	r0, [pc, #12]	@ (8009b44 <STM32FXXXDMA2_stream2_fcr_feie+0x20>)
 8009b36:	f7f9 fd51 	bl	80035dc <set_reg_block>
}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	40026454 	.word	0x40026454

08009b48 <STM32FXXXDMA2_stream2_fcr_fs>:
void STM32FXXXDMA2_stream2_fcr_fs(uint8_t value)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->FCR, 3, 3, value);
 8009b52:	79fb      	ldrb	r3, [r7, #7]
 8009b54:	2203      	movs	r2, #3
 8009b56:	2103      	movs	r1, #3
 8009b58:	4803      	ldr	r0, [pc, #12]	@ (8009b68 <STM32FXXXDMA2_stream2_fcr_fs+0x20>)
 8009b5a:	f7f9 fd3f 	bl	80035dc <set_reg_block>
}
 8009b5e:	bf00      	nop
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	40026454 	.word	0x40026454

08009b6c <STM32FXXXDMA2_stream2_fcr_dmdis>:
void STM32FXXXDMA2_stream2_fcr_dmdis(uint8_t bool)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->FCR, 1, 2, bool);
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	4803      	ldr	r0, [pc, #12]	@ (8009b8c <STM32FXXXDMA2_stream2_fcr_dmdis+0x20>)
 8009b7e:	f7f9 fd2d 	bl	80035dc <set_reg_block>
}
 8009b82:	bf00      	nop
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	40026454 	.word	0x40026454

08009b90 <STM32FXXXDMA2_stream2_fcr_fth>:
void STM32FXXXDMA2_stream2_fcr_fth(uint8_t value)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream2->FCR, 2, 0, value);
 8009b9a:	79fb      	ldrb	r3, [r7, #7]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2102      	movs	r1, #2
 8009ba0:	4803      	ldr	r0, [pc, #12]	@ (8009bb0 <STM32FXXXDMA2_stream2_fcr_fth+0x20>)
 8009ba2:	f7f9 fd1b 	bl	80035dc <set_reg_block>
}
 8009ba6:	bf00      	nop
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	40026454 	.word	0x40026454

08009bb4 <stm32fxxx_dma2_stream2_fcr_inic>:
/*** Inic DMA2 STREAM2 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma2_stream2_fcr_inic(void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma2_stream2_fcr.feie = STM32FXXXDMA2_stream2_fcr_feie;
 8009bb8:	4b08      	ldr	r3, [pc, #32]	@ (8009bdc <stm32fxxx_dma2_stream2_fcr_inic+0x28>)
 8009bba:	4a09      	ldr	r2, [pc, #36]	@ (8009be0 <stm32fxxx_dma2_stream2_fcr_inic+0x2c>)
 8009bbc:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream2_fcr.fs = STM32FXXXDMA2_stream2_fcr_fs;
 8009bbe:	4b07      	ldr	r3, [pc, #28]	@ (8009bdc <stm32fxxx_dma2_stream2_fcr_inic+0x28>)
 8009bc0:	4a08      	ldr	r2, [pc, #32]	@ (8009be4 <stm32fxxx_dma2_stream2_fcr_inic+0x30>)
 8009bc2:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream2_fcr.dmdis = STM32FXXXDMA2_stream2_fcr_dmdis;
 8009bc4:	4b05      	ldr	r3, [pc, #20]	@ (8009bdc <stm32fxxx_dma2_stream2_fcr_inic+0x28>)
 8009bc6:	4a08      	ldr	r2, [pc, #32]	@ (8009be8 <stm32fxxx_dma2_stream2_fcr_inic+0x34>)
 8009bc8:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream2_fcr.fth = STM32FXXXDMA2_stream2_fcr_fth;
 8009bca:	4b04      	ldr	r3, [pc, #16]	@ (8009bdc <stm32fxxx_dma2_stream2_fcr_inic+0x28>)
 8009bcc:	4a07      	ldr	r2, [pc, #28]	@ (8009bec <stm32fxxx_dma2_stream2_fcr_inic+0x38>)
 8009bce:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma2_stream2_fcr;
 8009bd0:	4b02      	ldr	r3, [pc, #8]	@ (8009bdc <stm32fxxx_dma2_stream2_fcr_inic+0x28>)
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	20000848 	.word	0x20000848
 8009be0:	08009b25 	.word	0x08009b25
 8009be4:	08009b49 	.word	0x08009b49
 8009be8:	08009b6d 	.word	0x08009b6d
 8009bec:	08009b91 	.word	0x08009b91

08009bf0 <STM32FXXXDMA2_stream3_fcr_feie>:
// DMA2 STREAM3 FCR
void STM32FXXXDMA2_stream3_fcr_feie(uint8_t bool)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->FCR, 1, 7, bool);
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
 8009bfc:	2207      	movs	r2, #7
 8009bfe:	2101      	movs	r1, #1
 8009c00:	4803      	ldr	r0, [pc, #12]	@ (8009c10 <STM32FXXXDMA2_stream3_fcr_feie+0x20>)
 8009c02:	f7f9 fceb 	bl	80035dc <set_reg_block>
}
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	4002646c 	.word	0x4002646c

08009c14 <STM32FXXXDMA2_stream3_fcr_fs>:
void STM32FXXXDMA2_stream3_fcr_fs(uint8_t value)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->FCR, 3, 3, value);
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	2203      	movs	r2, #3
 8009c22:	2103      	movs	r1, #3
 8009c24:	4803      	ldr	r0, [pc, #12]	@ (8009c34 <STM32FXXXDMA2_stream3_fcr_fs+0x20>)
 8009c26:	f7f9 fcd9 	bl	80035dc <set_reg_block>
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	4002646c 	.word	0x4002646c

08009c38 <STM32FXXXDMA2_stream3_fcr_dmdis>:
void STM32FXXXDMA2_stream3_fcr_dmdis(uint8_t bool)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->FCR, 1, 2, bool);
 8009c42:	79fb      	ldrb	r3, [r7, #7]
 8009c44:	2202      	movs	r2, #2
 8009c46:	2101      	movs	r1, #1
 8009c48:	4803      	ldr	r0, [pc, #12]	@ (8009c58 <STM32FXXXDMA2_stream3_fcr_dmdis+0x20>)
 8009c4a:	f7f9 fcc7 	bl	80035dc <set_reg_block>
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	4002646c 	.word	0x4002646c

08009c5c <STM32FXXXDMA2_stream3_fcr_fth>:
void STM32FXXXDMA2_stream3_fcr_fth(uint8_t value)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream3->FCR, 2, 0, value);
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2102      	movs	r1, #2
 8009c6c:	4803      	ldr	r0, [pc, #12]	@ (8009c7c <STM32FXXXDMA2_stream3_fcr_fth+0x20>)
 8009c6e:	f7f9 fcb5 	bl	80035dc <set_reg_block>
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	4002646c 	.word	0x4002646c

08009c80 <stm32fxxx_dma2_stream3_fcr_inic>:
/*** Inic DMA2 STREAM3 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma2_stream3_fcr_inic(void)
{
 8009c80:	b480      	push	{r7}
 8009c82:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma2_stream3_fcr.feie = STM32FXXXDMA2_stream3_fcr_feie;
 8009c84:	4b08      	ldr	r3, [pc, #32]	@ (8009ca8 <stm32fxxx_dma2_stream3_fcr_inic+0x28>)
 8009c86:	4a09      	ldr	r2, [pc, #36]	@ (8009cac <stm32fxxx_dma2_stream3_fcr_inic+0x2c>)
 8009c88:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream3_fcr.fs = STM32FXXXDMA2_stream3_fcr_fs;
 8009c8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ca8 <stm32fxxx_dma2_stream3_fcr_inic+0x28>)
 8009c8c:	4a08      	ldr	r2, [pc, #32]	@ (8009cb0 <stm32fxxx_dma2_stream3_fcr_inic+0x30>)
 8009c8e:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream3_fcr.dmdis = STM32FXXXDMA2_stream3_fcr_dmdis;
 8009c90:	4b05      	ldr	r3, [pc, #20]	@ (8009ca8 <stm32fxxx_dma2_stream3_fcr_inic+0x28>)
 8009c92:	4a08      	ldr	r2, [pc, #32]	@ (8009cb4 <stm32fxxx_dma2_stream3_fcr_inic+0x34>)
 8009c94:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream3_fcr.fth = STM32FXXXDMA2_stream3_fcr_fth;
 8009c96:	4b04      	ldr	r3, [pc, #16]	@ (8009ca8 <stm32fxxx_dma2_stream3_fcr_inic+0x28>)
 8009c98:	4a07      	ldr	r2, [pc, #28]	@ (8009cb8 <stm32fxxx_dma2_stream3_fcr_inic+0x38>)
 8009c9a:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma2_stream3_fcr;
 8009c9c:	4b02      	ldr	r3, [pc, #8]	@ (8009ca8 <stm32fxxx_dma2_stream3_fcr_inic+0x28>)
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	20000858 	.word	0x20000858
 8009cac:	08009bf1 	.word	0x08009bf1
 8009cb0:	08009c15 	.word	0x08009c15
 8009cb4:	08009c39 	.word	0x08009c39
 8009cb8:	08009c5d 	.word	0x08009c5d

08009cbc <STM32FXXXDMA2_stream4_fcr_feie>:
// DMA1 STREAM4 FCR
void STM32FXXXDMA2_stream4_fcr_feie(uint8_t bool)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->FCR, 1, 7, bool);
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	2207      	movs	r2, #7
 8009cca:	2101      	movs	r1, #1
 8009ccc:	4803      	ldr	r0, [pc, #12]	@ (8009cdc <STM32FXXXDMA2_stream4_fcr_feie+0x20>)
 8009cce:	f7f9 fc85 	bl	80035dc <set_reg_block>
}
 8009cd2:	bf00      	nop
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	40026484 	.word	0x40026484

08009ce0 <STM32FXXXDMA2_stream4_fcr_fs>:
void STM32FXXXDMA2_stream4_fcr_fs(uint8_t value)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->FCR, 3, 3, value);
 8009cea:	79fb      	ldrb	r3, [r7, #7]
 8009cec:	2203      	movs	r2, #3
 8009cee:	2103      	movs	r1, #3
 8009cf0:	4803      	ldr	r0, [pc, #12]	@ (8009d00 <STM32FXXXDMA2_stream4_fcr_fs+0x20>)
 8009cf2:	f7f9 fc73 	bl	80035dc <set_reg_block>
}
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	40026484 	.word	0x40026484

08009d04 <STM32FXXXDMA2_stream4_fcr_dmdis>:
void STM32FXXXDMA2_stream4_fcr_dmdis(uint8_t bool)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->FCR, 1, 2, bool);
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	2202      	movs	r2, #2
 8009d12:	2101      	movs	r1, #1
 8009d14:	4803      	ldr	r0, [pc, #12]	@ (8009d24 <STM32FXXXDMA2_stream4_fcr_dmdis+0x20>)
 8009d16:	f7f9 fc61 	bl	80035dc <set_reg_block>
}
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	40026484 	.word	0x40026484

08009d28 <STM32FXXXDMA2_stream4_fcr_fth>:
void STM32FXXXDMA2_stream4_fcr_fth(uint8_t value)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream4->FCR, 2, 0, value);
 8009d32:	79fb      	ldrb	r3, [r7, #7]
 8009d34:	2200      	movs	r2, #0
 8009d36:	2102      	movs	r1, #2
 8009d38:	4803      	ldr	r0, [pc, #12]	@ (8009d48 <STM32FXXXDMA2_stream4_fcr_fth+0x20>)
 8009d3a:	f7f9 fc4f 	bl	80035dc <set_reg_block>
}
 8009d3e:	bf00      	nop
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	40026484 	.word	0x40026484

08009d4c <stm32fxxx_dma2_stream4_fcr_inic>:
/*** Inic DMA2 STREAM4 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma2_stream4_fcr_inic(void)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma2_stream4_fcr.feie = STM32FXXXDMA2_stream4_fcr_feie;
 8009d50:	4b08      	ldr	r3, [pc, #32]	@ (8009d74 <stm32fxxx_dma2_stream4_fcr_inic+0x28>)
 8009d52:	4a09      	ldr	r2, [pc, #36]	@ (8009d78 <stm32fxxx_dma2_stream4_fcr_inic+0x2c>)
 8009d54:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream4_fcr.fs = STM32FXXXDMA2_stream4_fcr_fs;
 8009d56:	4b07      	ldr	r3, [pc, #28]	@ (8009d74 <stm32fxxx_dma2_stream4_fcr_inic+0x28>)
 8009d58:	4a08      	ldr	r2, [pc, #32]	@ (8009d7c <stm32fxxx_dma2_stream4_fcr_inic+0x30>)
 8009d5a:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream4_fcr.dmdis = STM32FXXXDMA2_stream4_fcr_dmdis;
 8009d5c:	4b05      	ldr	r3, [pc, #20]	@ (8009d74 <stm32fxxx_dma2_stream4_fcr_inic+0x28>)
 8009d5e:	4a08      	ldr	r2, [pc, #32]	@ (8009d80 <stm32fxxx_dma2_stream4_fcr_inic+0x34>)
 8009d60:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream4_fcr.fth = STM32FXXXDMA2_stream4_fcr_fth;
 8009d62:	4b04      	ldr	r3, [pc, #16]	@ (8009d74 <stm32fxxx_dma2_stream4_fcr_inic+0x28>)
 8009d64:	4a07      	ldr	r2, [pc, #28]	@ (8009d84 <stm32fxxx_dma2_stream4_fcr_inic+0x38>)
 8009d66:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma2_stream4_fcr;
 8009d68:	4b02      	ldr	r3, [pc, #8]	@ (8009d74 <stm32fxxx_dma2_stream4_fcr_inic+0x28>)
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	20000868 	.word	0x20000868
 8009d78:	08009cbd 	.word	0x08009cbd
 8009d7c:	08009ce1 	.word	0x08009ce1
 8009d80:	08009d05 	.word	0x08009d05
 8009d84:	08009d29 	.word	0x08009d29

08009d88 <STM32FXXXDMA2_stream5_fcr_feie>:
// DMA1 STREAM5 FCR
void STM32FXXXDMA2_stream5_fcr_feie(uint8_t bool)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->FCR, 1, 7, bool);
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	2207      	movs	r2, #7
 8009d96:	2101      	movs	r1, #1
 8009d98:	4803      	ldr	r0, [pc, #12]	@ (8009da8 <STM32FXXXDMA2_stream5_fcr_feie+0x20>)
 8009d9a:	f7f9 fc1f 	bl	80035dc <set_reg_block>
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	4002649c 	.word	0x4002649c

08009dac <STM32FXXXDMA2_stream5_fcr_fs>:
void STM32FXXXDMA2_stream5_fcr_fs(uint8_t value)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->FCR, 3, 3, value);
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	2203      	movs	r2, #3
 8009dba:	2103      	movs	r1, #3
 8009dbc:	4803      	ldr	r0, [pc, #12]	@ (8009dcc <STM32FXXXDMA2_stream5_fcr_fs+0x20>)
 8009dbe:	f7f9 fc0d 	bl	80035dc <set_reg_block>
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	4002649c 	.word	0x4002649c

08009dd0 <STM32FXXXDMA2_stream5_fcr_dmdis>:
void STM32FXXXDMA2_stream5_fcr_dmdis(uint8_t bool)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->FCR, 1, 2, bool);
 8009dda:	79fb      	ldrb	r3, [r7, #7]
 8009ddc:	2202      	movs	r2, #2
 8009dde:	2101      	movs	r1, #1
 8009de0:	4803      	ldr	r0, [pc, #12]	@ (8009df0 <STM32FXXXDMA2_stream5_fcr_dmdis+0x20>)
 8009de2:	f7f9 fbfb 	bl	80035dc <set_reg_block>
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	4002649c 	.word	0x4002649c

08009df4 <STM32FXXXDMA2_stream5_fcr_fth>:
void STM32FXXXDMA2_stream5_fcr_fth(uint8_t value)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream5->FCR, 2, 0, value);
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	2200      	movs	r2, #0
 8009e02:	2102      	movs	r1, #2
 8009e04:	4803      	ldr	r0, [pc, #12]	@ (8009e14 <STM32FXXXDMA2_stream5_fcr_fth+0x20>)
 8009e06:	f7f9 fbe9 	bl	80035dc <set_reg_block>
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	4002649c 	.word	0x4002649c

08009e18 <stm32fxxx_dma2_stream5_fcr_inic>:
/*** Inic DMA2 STREAM5 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma2_stream5_fcr_inic(void)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma2_stream5_fcr.feie = STM32FXXXDMA2_stream5_fcr_feie;
 8009e1c:	4b08      	ldr	r3, [pc, #32]	@ (8009e40 <stm32fxxx_dma2_stream5_fcr_inic+0x28>)
 8009e1e:	4a09      	ldr	r2, [pc, #36]	@ (8009e44 <stm32fxxx_dma2_stream5_fcr_inic+0x2c>)
 8009e20:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream5_fcr.fs = STM32FXXXDMA2_stream5_fcr_fs;
 8009e22:	4b07      	ldr	r3, [pc, #28]	@ (8009e40 <stm32fxxx_dma2_stream5_fcr_inic+0x28>)
 8009e24:	4a08      	ldr	r2, [pc, #32]	@ (8009e48 <stm32fxxx_dma2_stream5_fcr_inic+0x30>)
 8009e26:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream5_fcr.dmdis = STM32FXXXDMA2_stream5_fcr_dmdis;
 8009e28:	4b05      	ldr	r3, [pc, #20]	@ (8009e40 <stm32fxxx_dma2_stream5_fcr_inic+0x28>)
 8009e2a:	4a08      	ldr	r2, [pc, #32]	@ (8009e4c <stm32fxxx_dma2_stream5_fcr_inic+0x34>)
 8009e2c:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream5_fcr.fth = STM32FXXXDMA2_stream5_fcr_fth;
 8009e2e:	4b04      	ldr	r3, [pc, #16]	@ (8009e40 <stm32fxxx_dma2_stream5_fcr_inic+0x28>)
 8009e30:	4a07      	ldr	r2, [pc, #28]	@ (8009e50 <stm32fxxx_dma2_stream5_fcr_inic+0x38>)
 8009e32:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma2_stream5_fcr;
 8009e34:	4b02      	ldr	r3, [pc, #8]	@ (8009e40 <stm32fxxx_dma2_stream5_fcr_inic+0x28>)
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	20000878 	.word	0x20000878
 8009e44:	08009d89 	.word	0x08009d89
 8009e48:	08009dad 	.word	0x08009dad
 8009e4c:	08009dd1 	.word	0x08009dd1
 8009e50:	08009df5 	.word	0x08009df5

08009e54 <STM32FXXXDMA2_stream6_fcr_feie>:
// DMA1 STREAM6 FCR
void STM32FXXXDMA2_stream6_fcr_feie(uint8_t bool)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->FCR, 1, 7, bool);
 8009e5e:	79fb      	ldrb	r3, [r7, #7]
 8009e60:	2207      	movs	r2, #7
 8009e62:	2101      	movs	r1, #1
 8009e64:	4803      	ldr	r0, [pc, #12]	@ (8009e74 <STM32FXXXDMA2_stream6_fcr_feie+0x20>)
 8009e66:	f7f9 fbb9 	bl	80035dc <set_reg_block>
}
 8009e6a:	bf00      	nop
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	400264b4 	.word	0x400264b4

08009e78 <STM32FXXXDMA2_stream6_fcr_fs>:
void STM32FXXXDMA2_stream6_fcr_fs(uint8_t value)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->FCR, 3, 3, value);
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	2203      	movs	r2, #3
 8009e86:	2103      	movs	r1, #3
 8009e88:	4803      	ldr	r0, [pc, #12]	@ (8009e98 <STM32FXXXDMA2_stream6_fcr_fs+0x20>)
 8009e8a:	f7f9 fba7 	bl	80035dc <set_reg_block>
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	400264b4 	.word	0x400264b4

08009e9c <STM32FXXXDMA2_stream6_fcr_dmdis>:
void STM32FXXXDMA2_stream6_fcr_dmdis(uint8_t bool)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->FCR, 1, 2, bool);
 8009ea6:	79fb      	ldrb	r3, [r7, #7]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	2101      	movs	r1, #1
 8009eac:	4803      	ldr	r0, [pc, #12]	@ (8009ebc <STM32FXXXDMA2_stream6_fcr_dmdis+0x20>)
 8009eae:	f7f9 fb95 	bl	80035dc <set_reg_block>
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	400264b4 	.word	0x400264b4

08009ec0 <STM32FXXXDMA2_stream6_fcr_fth>:
void STM32FXXXDMA2_stream6_fcr_fth(uint8_t value)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream6->FCR, 2, 0, value);
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	2102      	movs	r1, #2
 8009ed0:	4803      	ldr	r0, [pc, #12]	@ (8009ee0 <STM32FXXXDMA2_stream6_fcr_fth+0x20>)
 8009ed2:	f7f9 fb83 	bl	80035dc <set_reg_block>
}
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	400264b4 	.word	0x400264b4

08009ee4 <stm32fxxx_dma2_stream6_fcr_inic>:
/*** Inic DMA2 STREAM6 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma2_stream6_fcr_inic(void)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma2_stream6_fcr.feie = STM32FXXXDMA2_stream6_fcr_feie;
 8009ee8:	4b08      	ldr	r3, [pc, #32]	@ (8009f0c <stm32fxxx_dma2_stream6_fcr_inic+0x28>)
 8009eea:	4a09      	ldr	r2, [pc, #36]	@ (8009f10 <stm32fxxx_dma2_stream6_fcr_inic+0x2c>)
 8009eec:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream6_fcr.fs = STM32FXXXDMA2_stream6_fcr_fs;
 8009eee:	4b07      	ldr	r3, [pc, #28]	@ (8009f0c <stm32fxxx_dma2_stream6_fcr_inic+0x28>)
 8009ef0:	4a08      	ldr	r2, [pc, #32]	@ (8009f14 <stm32fxxx_dma2_stream6_fcr_inic+0x30>)
 8009ef2:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream6_fcr.dmdis = STM32FXXXDMA2_stream6_fcr_dmdis;
 8009ef4:	4b05      	ldr	r3, [pc, #20]	@ (8009f0c <stm32fxxx_dma2_stream6_fcr_inic+0x28>)
 8009ef6:	4a08      	ldr	r2, [pc, #32]	@ (8009f18 <stm32fxxx_dma2_stream6_fcr_inic+0x34>)
 8009ef8:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream6_fcr.fth = STM32FXXXDMA2_stream6_fcr_fth;
 8009efa:	4b04      	ldr	r3, [pc, #16]	@ (8009f0c <stm32fxxx_dma2_stream6_fcr_inic+0x28>)
 8009efc:	4a07      	ldr	r2, [pc, #28]	@ (8009f1c <stm32fxxx_dma2_stream6_fcr_inic+0x38>)
 8009efe:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma2_stream6_fcr;
 8009f00:	4b02      	ldr	r3, [pc, #8]	@ (8009f0c <stm32fxxx_dma2_stream6_fcr_inic+0x28>)
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	20000888 	.word	0x20000888
 8009f10:	08009e55 	.word	0x08009e55
 8009f14:	08009e79 	.word	0x08009e79
 8009f18:	08009e9d 	.word	0x08009e9d
 8009f1c:	08009ec1 	.word	0x08009ec1

08009f20 <STM32FXXXDMA2_stream7_fcr_feie>:
// DMA2 STREAM0 FCR
void STM32FXXXDMA2_stream7_fcr_feie(uint8_t bool)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->FCR, 1, 7, bool);
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	2207      	movs	r2, #7
 8009f2e:	2101      	movs	r1, #1
 8009f30:	4803      	ldr	r0, [pc, #12]	@ (8009f40 <STM32FXXXDMA2_stream7_fcr_feie+0x20>)
 8009f32:	f7f9 fb53 	bl	80035dc <set_reg_block>
}
 8009f36:	bf00      	nop
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	400264cc 	.word	0x400264cc

08009f44 <STM32FXXXDMA2_stream7_fcr_fs>:
void STM32FXXXDMA2_stream7_fcr_fs(uint8_t value)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->FCR, 3, 3, value);
 8009f4e:	79fb      	ldrb	r3, [r7, #7]
 8009f50:	2203      	movs	r2, #3
 8009f52:	2103      	movs	r1, #3
 8009f54:	4803      	ldr	r0, [pc, #12]	@ (8009f64 <STM32FXXXDMA2_stream7_fcr_fs+0x20>)
 8009f56:	f7f9 fb41 	bl	80035dc <set_reg_block>
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	400264cc 	.word	0x400264cc

08009f68 <STM32FXXXDMA2_stream7_fcr_dmdis>:
void STM32FXXXDMA2_stream7_fcr_dmdis(uint8_t bool)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->FCR, 1, 2, bool);
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	2202      	movs	r2, #2
 8009f76:	2101      	movs	r1, #1
 8009f78:	4803      	ldr	r0, [pc, #12]	@ (8009f88 <STM32FXXXDMA2_stream7_fcr_dmdis+0x20>)
 8009f7a:	f7f9 fb2f 	bl	80035dc <set_reg_block>
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	400264cc 	.word	0x400264cc

08009f8c <STM32FXXXDMA2_stream7_fcr_fth>:
void STM32FXXXDMA2_stream7_fcr_fth(uint8_t value)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&DMA2_Stream7->FCR, 2, 0, value);
 8009f96:	79fb      	ldrb	r3, [r7, #7]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	2102      	movs	r1, #2
 8009f9c:	4803      	ldr	r0, [pc, #12]	@ (8009fac <STM32FXXXDMA2_stream7_fcr_fth+0x20>)
 8009f9e:	f7f9 fb1d 	bl	80035dc <set_reg_block>
}
 8009fa2:	bf00      	nop
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	400264cc 	.word	0x400264cc

08009fb0 <stm32fxxx_dma2_stream7_fcr_inic>:
/*** Inic DMA2 STREAM7 FCR ***/
STM32FXXXDMA_STREAM_fcr* stm32fxxx_dma2_stream7_fcr_inic(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0

	// FCR
	stm32fxxx_dma2_stream7_fcr.feie = STM32FXXXDMA2_stream7_fcr_feie;
 8009fb4:	4b08      	ldr	r3, [pc, #32]	@ (8009fd8 <stm32fxxx_dma2_stream7_fcr_inic+0x28>)
 8009fb6:	4a09      	ldr	r2, [pc, #36]	@ (8009fdc <stm32fxxx_dma2_stream7_fcr_inic+0x2c>)
 8009fb8:	601a      	str	r2, [r3, #0]
	stm32fxxx_dma2_stream7_fcr.fs = STM32FXXXDMA2_stream7_fcr_fs;
 8009fba:	4b07      	ldr	r3, [pc, #28]	@ (8009fd8 <stm32fxxx_dma2_stream7_fcr_inic+0x28>)
 8009fbc:	4a08      	ldr	r2, [pc, #32]	@ (8009fe0 <stm32fxxx_dma2_stream7_fcr_inic+0x30>)
 8009fbe:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2_stream7_fcr.dmdis = STM32FXXXDMA2_stream7_fcr_dmdis;
 8009fc0:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <stm32fxxx_dma2_stream7_fcr_inic+0x28>)
 8009fc2:	4a08      	ldr	r2, [pc, #32]	@ (8009fe4 <stm32fxxx_dma2_stream7_fcr_inic+0x34>)
 8009fc4:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2_stream7_fcr.fth = STM32FXXXDMA2_stream7_fcr_fth;
 8009fc6:	4b04      	ldr	r3, [pc, #16]	@ (8009fd8 <stm32fxxx_dma2_stream7_fcr_inic+0x28>)
 8009fc8:	4a07      	ldr	r2, [pc, #28]	@ (8009fe8 <stm32fxxx_dma2_stream7_fcr_inic+0x38>)
 8009fca:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_dma2_stream7_fcr;
 8009fcc:	4b02      	ldr	r3, [pc, #8]	@ (8009fd8 <stm32fxxx_dma2_stream7_fcr_inic+0x28>)
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	20000898 	.word	0x20000898
 8009fdc:	08009f21 	.word	0x08009f21
 8009fe0:	08009f45 	.word	0x08009f45
 8009fe4:	08009f69 	.word	0x08009f69
 8009fe8:	08009f8d 	.word	0x08009f8d

08009fec <dma2_circ_cfg>:
/*** FUNC ***/
void dma2_circ_cfg(volatile long unsigned int* p_addr, volatile long unsigned int* m_addr, uint8_t stream_n, uint8_t channel_n, uint16_t quant_d, uint8_t p_size, uint8_t m_size, uint8_t priority, uint8_t dir)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	71fb      	strb	r3, [r7, #7]
 8009ffe:	4613      	mov	r3, r2
 800a000:	71bb      	strb	r3, [r7, #6]
	// Filter to Default
	if(stream_n > 7){ stream_n = 0;}
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	2b07      	cmp	r3, #7
 800a006:	d901      	bls.n	800a00c <dma2_circ_cfg+0x20>
 800a008:	2300      	movs	r3, #0
 800a00a:	71fb      	strb	r3, [r7, #7]
	if(channel_n > 7){ channel_n = 0;}
 800a00c:	79bb      	ldrb	r3, [r7, #6]
 800a00e:	2b07      	cmp	r3, #7
 800a010:	d901      	bls.n	800a016 <dma2_circ_cfg+0x2a>
 800a012:	2300      	movs	r3, #0
 800a014:	71bb      	strb	r3, [r7, #6]
	if(quant_d > 65535){ quant_d = 1;}
	if(p_size > 2){ p_size = 0;}
 800a016:	7f3b      	ldrb	r3, [r7, #28]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d901      	bls.n	800a020 <dma2_circ_cfg+0x34>
 800a01c:	2300      	movs	r3, #0
 800a01e:	773b      	strb	r3, [r7, #28]
	if(m_size > 2){ m_size = 0;}
 800a020:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d902      	bls.n	800a02e <dma2_circ_cfg+0x42>
 800a028:	2300      	movs	r3, #0
 800a02a:	f887 3020 	strb.w	r3, [r7, #32]
	if(priority > 3){ priority = 0;}
 800a02e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a032:	2b03      	cmp	r3, #3
 800a034:	d902      	bls.n	800a03c <dma2_circ_cfg+0x50>
 800a036:	2300      	movs	r3, #0
 800a038:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if( p_addr && m_addr ){
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 810b 	beq.w	800a25a <dma2_circ_cfg+0x26e>
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f000 8107 	beq.w	800a25a <dma2_circ_cfg+0x26e>
		/*** Verify Ready for Parameter ***/
		set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 1, 0, 0);
 800a04c:	79fa      	ldrb	r2, [r7, #7]
 800a04e:	4613      	mov	r3, r2
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	4413      	add	r3, r2
 800a054:	00db      	lsls	r3, r3, #3
 800a056:	461a      	mov	r2, r3
 800a058:	4b82      	ldr	r3, [pc, #520]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a05a:	4413      	add	r3, r2
 800a05c:	4618      	mov	r0, r3
 800a05e:	2300      	movs	r3, #0
 800a060:	2200      	movs	r2, #0
 800a062:	2101      	movs	r1, #1
 800a064:	f7f9 faba 	bl	80035dc <set_reg_block>
		for(time_out = 200; get_reg_block((DMA2_Stream0 + stream_n)->CR, 1, 0) && time_out; time_out--);
 800a068:	4b7f      	ldr	r3, [pc, #508]	@ (800a268 <dma2_circ_cfg+0x27c>)
 800a06a:	22c8      	movs	r2, #200	@ 0xc8
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	e004      	b.n	800a07a <dma2_circ_cfg+0x8e>
 800a070:	4b7d      	ldr	r3, [pc, #500]	@ (800a268 <dma2_circ_cfg+0x27c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3b01      	subs	r3, #1
 800a076:	4a7c      	ldr	r2, [pc, #496]	@ (800a268 <dma2_circ_cfg+0x27c>)
 800a078:	6013      	str	r3, [r2, #0]
 800a07a:	79fa      	ldrb	r2, [r7, #7]
 800a07c:	4613      	mov	r3, r2
 800a07e:	005b      	lsls	r3, r3, #1
 800a080:	4413      	add	r3, r2
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	461a      	mov	r2, r3
 800a086:	4b77      	ldr	r3, [pc, #476]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a088:	4413      	add	r3, r2
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2200      	movs	r2, #0
 800a08e:	2101      	movs	r1, #1
 800a090:	4618      	mov	r0, r3
 800a092:	f7f9 fa3e 	bl	8003512 <get_reg_block>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <dma2_circ_cfg+0xb8>
 800a09c:	4b72      	ldr	r3, [pc, #456]	@ (800a268 <dma2_circ_cfg+0x27c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e5      	bne.n	800a070 <dma2_circ_cfg+0x84>
		/*** Parameter Configure ***/
		(DMA2_Stream0 + stream_n)->PAR = (volatile long unsigned int) p_addr;
 800a0a4:	79fa      	ldrb	r2, [r7, #7]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	4413      	add	r3, r2
 800a0ac:	00db      	lsls	r3, r3, #3
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	4b6c      	ldr	r3, [pc, #432]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a0b2:	4413      	add	r3, r2
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	609a      	str	r2, [r3, #8]
		(DMA2_Stream0 + stream_n)->M0AR = (volatile long unsigned int) m_addr;
 800a0b8:	79fa      	ldrb	r2, [r7, #7]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	4413      	add	r3, r2
 800a0c0:	00db      	lsls	r3, r3, #3
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	4b67      	ldr	r3, [pc, #412]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a0c6:	4413      	add	r3, r2
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	60da      	str	r2, [r3, #12]
		set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 1, 5, 0); // 0 -> dma, 1 -> peri
 800a0cc:	79fa      	ldrb	r2, [r7, #7]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	005b      	lsls	r3, r3, #1
 800a0d2:	4413      	add	r3, r2
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	4b62      	ldr	r3, [pc, #392]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a0da:	4413      	add	r3, r2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	2300      	movs	r3, #0
 800a0e0:	2205      	movs	r2, #5
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	f7f9 fa7a 	bl	80035dc <set_reg_block>
		set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 3, 25, channel_n); // channel
 800a0e8:	79fa      	ldrb	r2, [r7, #7]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	4413      	add	r3, r2
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	4b5b      	ldr	r3, [pc, #364]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a0f6:	4413      	add	r3, r2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	79bb      	ldrb	r3, [r7, #6]
 800a0fc:	2219      	movs	r2, #25
 800a0fe:	2103      	movs	r1, #3
 800a100:	f7f9 fa6c 	bl	80035dc <set_reg_block>
		(DMA2_Stream0 + stream_n)->NDTR = quant_d; //
 800a104:	79fa      	ldrb	r2, [r7, #7]
 800a106:	4613      	mov	r3, r2
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	4413      	add	r3, r2
 800a10c:	00db      	lsls	r3, r3, #3
 800a10e:	461a      	mov	r2, r3
 800a110:	4b54      	ldr	r3, [pc, #336]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a112:	4413      	add	r3, r2
 800a114:	8b3a      	ldrh	r2, [r7, #24]
 800a116:	605a      	str	r2, [r3, #4]
		set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 2, 13, m_size); // msize 2 -> 32bit
 800a118:	79fa      	ldrb	r2, [r7, #7]
 800a11a:	4613      	mov	r3, r2
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	4413      	add	r3, r2
 800a120:	00db      	lsls	r3, r3, #3
 800a122:	461a      	mov	r2, r3
 800a124:	4b4f      	ldr	r3, [pc, #316]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a126:	4413      	add	r3, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a12e:	220d      	movs	r2, #13
 800a130:	2102      	movs	r1, #2
 800a132:	f7f9 fa53 	bl	80035dc <set_reg_block>
		set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 2, 11, p_size); // psize 1 -> 16bit
 800a136:	79fa      	ldrb	r2, [r7, #7]
 800a138:	4613      	mov	r3, r2
 800a13a:	005b      	lsls	r3, r3, #1
 800a13c:	4413      	add	r3, r2
 800a13e:	00db      	lsls	r3, r3, #3
 800a140:	461a      	mov	r2, r3
 800a142:	4b48      	ldr	r3, [pc, #288]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a144:	4413      	add	r3, r2
 800a146:	4618      	mov	r0, r3
 800a148:	7f3b      	ldrb	r3, [r7, #28]
 800a14a:	220b      	movs	r2, #11
 800a14c:	2102      	movs	r1, #2
 800a14e:	f7f9 fa45 	bl	80035dc <set_reg_block>
		set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 2, 16, priority); // priority
 800a152:	79fa      	ldrb	r2, [r7, #7]
 800a154:	4613      	mov	r3, r2
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	4413      	add	r3, r2
 800a15a:	00db      	lsls	r3, r3, #3
 800a15c:	461a      	mov	r2, r3
 800a15e:	4b41      	ldr	r3, [pc, #260]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a160:	4413      	add	r3, r2
 800a162:	4618      	mov	r0, r3
 800a164:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a168:	2210      	movs	r2, #16
 800a16a:	2102      	movs	r1, #2
 800a16c:	f7f9 fa36 	bl	80035dc <set_reg_block>
		if(dir){
 800a170:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a174:	2b00      	cmp	r3, #0
 800a176:	d02a      	beq.n	800a1ce <dma2_circ_cfg+0x1e2>
			set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 2, 6, 1); // DIR
 800a178:	79fa      	ldrb	r2, [r7, #7]
 800a17a:	4613      	mov	r3, r2
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	4413      	add	r3, r2
 800a180:	00db      	lsls	r3, r3, #3
 800a182:	461a      	mov	r2, r3
 800a184:	4b37      	ldr	r3, [pc, #220]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a186:	4413      	add	r3, r2
 800a188:	4618      	mov	r0, r3
 800a18a:	2301      	movs	r3, #1
 800a18c:	2206      	movs	r2, #6
 800a18e:	2102      	movs	r1, #2
 800a190:	f7f9 fa24 	bl	80035dc <set_reg_block>
			set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 1, 9, 1); // PINC
 800a194:	79fa      	ldrb	r2, [r7, #7]
 800a196:	4613      	mov	r3, r2
 800a198:	005b      	lsls	r3, r3, #1
 800a19a:	4413      	add	r3, r2
 800a19c:	00db      	lsls	r3, r3, #3
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4b30      	ldr	r3, [pc, #192]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a1a2:	4413      	add	r3, r2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	2209      	movs	r2, #9
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	f7f9 fa16 	bl	80035dc <set_reg_block>
			set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 1, 10, 0); // MINC
 800a1b0:	79fa      	ldrb	r2, [r7, #7]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4413      	add	r3, r2
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	4b29      	ldr	r3, [pc, #164]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a1be:	4413      	add	r3, r2
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	220a      	movs	r2, #10
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	f7f9 fa08 	bl	80035dc <set_reg_block>
 800a1cc:	e029      	b.n	800a222 <dma2_circ_cfg+0x236>
		}else{
			set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 2, 6, 0); // DIR
 800a1ce:	79fa      	ldrb	r2, [r7, #7]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	4413      	add	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4b22      	ldr	r3, [pc, #136]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a1dc:	4413      	add	r3, r2
 800a1de:	4618      	mov	r0, r3
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	2206      	movs	r2, #6
 800a1e4:	2102      	movs	r1, #2
 800a1e6:	f7f9 f9f9 	bl	80035dc <set_reg_block>
			set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 1, 9, 0); // PINC
 800a1ea:	79fa      	ldrb	r2, [r7, #7]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	005b      	lsls	r3, r3, #1
 800a1f0:	4413      	add	r3, r2
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a1f8:	4413      	add	r3, r2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	2209      	movs	r2, #9
 800a200:	2101      	movs	r1, #1
 800a202:	f7f9 f9eb 	bl	80035dc <set_reg_block>
			set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 1, 10, 1); // MINC
 800a206:	79fa      	ldrb	r2, [r7, #7]
 800a208:	4613      	mov	r3, r2
 800a20a:	005b      	lsls	r3, r3, #1
 800a20c:	4413      	add	r3, r2
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	461a      	mov	r2, r3
 800a212:	4b14      	ldr	r3, [pc, #80]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a214:	4413      	add	r3, r2
 800a216:	4618      	mov	r0, r3
 800a218:	2301      	movs	r3, #1
 800a21a:	220a      	movs	r2, #10
 800a21c:	2101      	movs	r1, #1
 800a21e:	f7f9 f9dd 	bl	80035dc <set_reg_block>
		}
		set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 1, 8, 1); // CIRC
 800a222:	79fa      	ldrb	r2, [r7, #7]
 800a224:	4613      	mov	r3, r2
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	4413      	add	r3, r2
 800a22a:	00db      	lsls	r3, r3, #3
 800a22c:	461a      	mov	r2, r3
 800a22e:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a230:	4413      	add	r3, r2
 800a232:	4618      	mov	r0, r3
 800a234:	2301      	movs	r3, #1
 800a236:	2208      	movs	r2, #8
 800a238:	2101      	movs	r1, #1
 800a23a:	f7f9 f9cf 	bl	80035dc <set_reg_block>
		set_reg_block(&(DMA2_Stream0 + stream_n)->CR, 1, 0, 1); // ENABLE
 800a23e:	79fa      	ldrb	r2, [r7, #7]
 800a240:	4613      	mov	r3, r2
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	4413      	add	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	461a      	mov	r2, r3
 800a24a:	4b06      	ldr	r3, [pc, #24]	@ (800a264 <dma2_circ_cfg+0x278>)
 800a24c:	4413      	add	r3, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	2301      	movs	r3, #1
 800a252:	2200      	movs	r2, #0
 800a254:	2101      	movs	r1, #1
 800a256:	f7f9 f9c1 	bl	80035dc <set_reg_block>
	}
}
 800a25a:	bf00      	nop
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	40026410 	.word	0x40026410
 800a268:	200008d8 	.word	0x200008d8

0800a26c <stm32fxxx_dma2_func_inic>:
/*** Inic FUNC ***/
STM32FXXXDMA_func* stm32fxxx_dma2_func_inic(void)
{
 800a26c:	b480      	push	{r7}
 800a26e:	af00      	add	r7, sp, #0

	stm32fxxx_dma2_func.circ_cfg = dma2_circ_cfg;
 800a270:	4b04      	ldr	r3, [pc, #16]	@ (800a284 <stm32fxxx_dma2_func_inic+0x18>)
 800a272:	4a05      	ldr	r2, [pc, #20]	@ (800a288 <stm32fxxx_dma2_func_inic+0x1c>)
 800a274:	601a      	str	r2, [r3, #0]
	return &stm32fxxx_dma2_func;
 800a276:	4b03      	ldr	r3, [pc, #12]	@ (800a284 <stm32fxxx_dma2_func_inic+0x18>)
}
 800a278:	4618      	mov	r0, r3
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	200008a8 	.word	0x200008a8
 800a288:	08009fed 	.word	0x08009fed

0800a28c <dma2_enable>:
/****************************************************/
/**** DMA2 INIC Procedure & Function Definition *****/
/****************************************************/
STM32FXXXDMA2obj* dma2_enable(void)
{
 800a28c:	b598      	push	{r3, r4, r7, lr}
 800a28e:	af00      	add	r7, sp, #0

	/*** DMA2 Bit Mapping Link ***/
	stm32fxxx_dma2.sr = stm32fxxx_dma2_sr_inic();
 800a290:	f7fd fb40 	bl	8007914 <stm32fxxx_dma2_sr_inic>
 800a294:	4603      	mov	r3, r0
 800a296:	4a76      	ldr	r2, [pc, #472]	@ (800a470 <dma2_enable+0x1e4>)
 800a298:	6213      	str	r3, [r2, #32]

	stm32fxxx_dma2.stream[0]->cr = stm32fxxx_dma2_stream0_cr_inic();
 800a29a:	4b75      	ldr	r3, [pc, #468]	@ (800a470 <dma2_enable+0x1e4>)
 800a29c:	681c      	ldr	r4, [r3, #0]
 800a29e:	f7fd fccb 	bl	8007c38 <stm32fxxx_dma2_stream0_cr_inic>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma2.stream[0]->fcr = stm32fxxx_dma2_stream0_fcr_inic();
 800a2a6:	4b72      	ldr	r3, [pc, #456]	@ (800a470 <dma2_enable+0x1e4>)
 800a2a8:	681c      	ldr	r4, [r3, #0]
 800a2aa:	f7ff fbb7 	bl	8009a1c <stm32fxxx_dma2_stream0_fcr_inic>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma2.stream[0]->ndt = stm32fxxx_dma2_stream0_ndt;
 800a2b2:	4b6f      	ldr	r3, [pc, #444]	@ (800a470 <dma2_enable+0x1e4>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a6f      	ldr	r2, [pc, #444]	@ (800a474 <dma2_enable+0x1e8>)
 800a2b8:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2.stream[0]->par = stm32fxxx_dma2_stream0_par;
 800a2ba:	4b6d      	ldr	r3, [pc, #436]	@ (800a470 <dma2_enable+0x1e4>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a6e      	ldr	r2, [pc, #440]	@ (800a478 <dma2_enable+0x1ec>)
 800a2c0:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2.stream[0]->m0a = stm32fxxx_dma2_stream0_m0a;
 800a2c2:	4b6b      	ldr	r3, [pc, #428]	@ (800a470 <dma2_enable+0x1e4>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a6d      	ldr	r2, [pc, #436]	@ (800a47c <dma2_enable+0x1f0>)
 800a2c8:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2.stream[0]->m1a = stm32fxxx_dma2_stream0_m1a;
 800a2ca:	4b69      	ldr	r3, [pc, #420]	@ (800a470 <dma2_enable+0x1e4>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a6c      	ldr	r2, [pc, #432]	@ (800a480 <dma2_enable+0x1f4>)
 800a2d0:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma2.stream[1]->cr = stm32fxxx_dma2_stream1_cr_inic();
 800a2d2:	4b67      	ldr	r3, [pc, #412]	@ (800a470 <dma2_enable+0x1e4>)
 800a2d4:	685c      	ldr	r4, [r3, #4]
 800a2d6:	f7fd feaf 	bl	8008038 <stm32fxxx_dma2_stream1_cr_inic>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma2.stream[1]->fcr = stm32fxxx_dma2_stream1_fcr_inic();
 800a2de:	4b64      	ldr	r3, [pc, #400]	@ (800a470 <dma2_enable+0x1e4>)
 800a2e0:	685c      	ldr	r4, [r3, #4]
 800a2e2:	f7ff fc01 	bl	8009ae8 <stm32fxxx_dma2_stream1_fcr_inic>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma2.stream[1]->ndt = stm32fxxx_dma2_stream1_ndt;
 800a2ea:	4b61      	ldr	r3, [pc, #388]	@ (800a470 <dma2_enable+0x1e4>)
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	4a65      	ldr	r2, [pc, #404]	@ (800a484 <dma2_enable+0x1f8>)
 800a2f0:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2.stream[1]->par = stm32fxxx_dma2_stream1_par;
 800a2f2:	4b5f      	ldr	r3, [pc, #380]	@ (800a470 <dma2_enable+0x1e4>)
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	4a64      	ldr	r2, [pc, #400]	@ (800a488 <dma2_enable+0x1fc>)
 800a2f8:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2.stream[1]->m0a = stm32fxxx_dma2_stream1_m0a;
 800a2fa:	4b5d      	ldr	r3, [pc, #372]	@ (800a470 <dma2_enable+0x1e4>)
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	4a63      	ldr	r2, [pc, #396]	@ (800a48c <dma2_enable+0x200>)
 800a300:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2.stream[1]->m1a = stm32fxxx_dma2_stream1_m1a;
 800a302:	4b5b      	ldr	r3, [pc, #364]	@ (800a470 <dma2_enable+0x1e4>)
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	4a62      	ldr	r2, [pc, #392]	@ (800a490 <dma2_enable+0x204>)
 800a308:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma2.stream[2]->cr = stm32fxxx_dma2_stream2_cr_inic();
 800a30a:	4b59      	ldr	r3, [pc, #356]	@ (800a470 <dma2_enable+0x1e4>)
 800a30c:	689c      	ldr	r4, [r3, #8]
 800a30e:	f7fe f893 	bl	8008438 <stm32fxxx_dma2_stream2_cr_inic>
 800a312:	4603      	mov	r3, r0
 800a314:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma2.stream[2]->fcr = stm32fxxx_dma2_stream2_fcr_inic();
 800a316:	4b56      	ldr	r3, [pc, #344]	@ (800a470 <dma2_enable+0x1e4>)
 800a318:	689c      	ldr	r4, [r3, #8]
 800a31a:	f7ff fc4b 	bl	8009bb4 <stm32fxxx_dma2_stream2_fcr_inic>
 800a31e:	4603      	mov	r3, r0
 800a320:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma2.stream[2]->ndt = stm32fxxx_dma2_stream2_ndt;
 800a322:	4b53      	ldr	r3, [pc, #332]	@ (800a470 <dma2_enable+0x1e4>)
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	4a5b      	ldr	r2, [pc, #364]	@ (800a494 <dma2_enable+0x208>)
 800a328:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2.stream[2]->par = stm32fxxx_dma2_stream2_par;
 800a32a:	4b51      	ldr	r3, [pc, #324]	@ (800a470 <dma2_enable+0x1e4>)
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	4a5a      	ldr	r2, [pc, #360]	@ (800a498 <dma2_enable+0x20c>)
 800a330:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2.stream[2]->m0a = stm32fxxx_dma2_stream2_m0a;
 800a332:	4b4f      	ldr	r3, [pc, #316]	@ (800a470 <dma2_enable+0x1e4>)
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	4a59      	ldr	r2, [pc, #356]	@ (800a49c <dma2_enable+0x210>)
 800a338:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2.stream[2]->m1a = stm32fxxx_dma2_stream2_m1a;
 800a33a:	4b4d      	ldr	r3, [pc, #308]	@ (800a470 <dma2_enable+0x1e4>)
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	4a58      	ldr	r2, [pc, #352]	@ (800a4a0 <dma2_enable+0x214>)
 800a340:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma2.stream[3]->cr = stm32fxxx_dma2_stream3_cr_inic();
 800a342:	4b4b      	ldr	r3, [pc, #300]	@ (800a470 <dma2_enable+0x1e4>)
 800a344:	68dc      	ldr	r4, [r3, #12]
 800a346:	f7fe fa77 	bl	8008838 <stm32fxxx_dma2_stream3_cr_inic>
 800a34a:	4603      	mov	r3, r0
 800a34c:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma2.stream[3]->fcr = stm32fxxx_dma2_stream3_fcr_inic();
 800a34e:	4b48      	ldr	r3, [pc, #288]	@ (800a470 <dma2_enable+0x1e4>)
 800a350:	68dc      	ldr	r4, [r3, #12]
 800a352:	f7ff fc95 	bl	8009c80 <stm32fxxx_dma2_stream3_fcr_inic>
 800a356:	4603      	mov	r3, r0
 800a358:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma2.stream[3]->ndt = stm32fxxx_dma2_stream3_ndt;
 800a35a:	4b45      	ldr	r3, [pc, #276]	@ (800a470 <dma2_enable+0x1e4>)
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	4a51      	ldr	r2, [pc, #324]	@ (800a4a4 <dma2_enable+0x218>)
 800a360:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2.stream[3]->par = stm32fxxx_dma2_stream3_par;
 800a362:	4b43      	ldr	r3, [pc, #268]	@ (800a470 <dma2_enable+0x1e4>)
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	4a50      	ldr	r2, [pc, #320]	@ (800a4a8 <dma2_enable+0x21c>)
 800a368:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2.stream[3]->m0a = stm32fxxx_dma2_stream3_m0a;
 800a36a:	4b41      	ldr	r3, [pc, #260]	@ (800a470 <dma2_enable+0x1e4>)
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	4a4f      	ldr	r2, [pc, #316]	@ (800a4ac <dma2_enable+0x220>)
 800a370:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2.stream[3]->m1a = stm32fxxx_dma2_stream3_m1a;
 800a372:	4b3f      	ldr	r3, [pc, #252]	@ (800a470 <dma2_enable+0x1e4>)
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	4a4e      	ldr	r2, [pc, #312]	@ (800a4b0 <dma2_enable+0x224>)
 800a378:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma2.stream[4]->cr = stm32fxxx_dma2_stream4_cr_inic();
 800a37a:	4b3d      	ldr	r3, [pc, #244]	@ (800a470 <dma2_enable+0x1e4>)
 800a37c:	691c      	ldr	r4, [r3, #16]
 800a37e:	f7fe fc5b 	bl	8008c38 <stm32fxxx_dma2_stream4_cr_inic>
 800a382:	4603      	mov	r3, r0
 800a384:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma2.stream[4]->fcr = stm32fxxx_dma2_stream4_fcr_inic();
 800a386:	4b3a      	ldr	r3, [pc, #232]	@ (800a470 <dma2_enable+0x1e4>)
 800a388:	691c      	ldr	r4, [r3, #16]
 800a38a:	f7ff fcdf 	bl	8009d4c <stm32fxxx_dma2_stream4_fcr_inic>
 800a38e:	4603      	mov	r3, r0
 800a390:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma2.stream[4]->ndt = stm32fxxx_dma2_stream4_ndt;
 800a392:	4b37      	ldr	r3, [pc, #220]	@ (800a470 <dma2_enable+0x1e4>)
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	4a47      	ldr	r2, [pc, #284]	@ (800a4b4 <dma2_enable+0x228>)
 800a398:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2.stream[4]->par = stm32fxxx_dma2_stream4_par;
 800a39a:	4b35      	ldr	r3, [pc, #212]	@ (800a470 <dma2_enable+0x1e4>)
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	4a46      	ldr	r2, [pc, #280]	@ (800a4b8 <dma2_enable+0x22c>)
 800a3a0:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2.stream[4]->m0a = stm32fxxx_dma2_stream4_m0a;
 800a3a2:	4b33      	ldr	r3, [pc, #204]	@ (800a470 <dma2_enable+0x1e4>)
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	4a45      	ldr	r2, [pc, #276]	@ (800a4bc <dma2_enable+0x230>)
 800a3a8:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2.stream[4]->m1a = stm32fxxx_dma2_stream4_m1a;
 800a3aa:	4b31      	ldr	r3, [pc, #196]	@ (800a470 <dma2_enable+0x1e4>)
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	4a44      	ldr	r2, [pc, #272]	@ (800a4c0 <dma2_enable+0x234>)
 800a3b0:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma2.stream[5]->cr = stm32fxxx_dma2_stream5_cr_inic();
 800a3b2:	4b2f      	ldr	r3, [pc, #188]	@ (800a470 <dma2_enable+0x1e4>)
 800a3b4:	695c      	ldr	r4, [r3, #20]
 800a3b6:	f7fe fe3f 	bl	8009038 <stm32fxxx_dma2_stream5_cr_inic>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma2.stream[5]->fcr = stm32fxxx_dma2_stream5_fcr_inic();
 800a3be:	4b2c      	ldr	r3, [pc, #176]	@ (800a470 <dma2_enable+0x1e4>)
 800a3c0:	695c      	ldr	r4, [r3, #20]
 800a3c2:	f7ff fd29 	bl	8009e18 <stm32fxxx_dma2_stream5_fcr_inic>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma2.stream[5]->ndt = stm32fxxx_dma2_stream5_ndt;
 800a3ca:	4b29      	ldr	r3, [pc, #164]	@ (800a470 <dma2_enable+0x1e4>)
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	4a3d      	ldr	r2, [pc, #244]	@ (800a4c4 <dma2_enable+0x238>)
 800a3d0:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2.stream[5]->par = stm32fxxx_dma2_stream5_par;
 800a3d2:	4b27      	ldr	r3, [pc, #156]	@ (800a470 <dma2_enable+0x1e4>)
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	4a3c      	ldr	r2, [pc, #240]	@ (800a4c8 <dma2_enable+0x23c>)
 800a3d8:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2.stream[5]->m0a = stm32fxxx_dma2_stream5_m0a;
 800a3da:	4b25      	ldr	r3, [pc, #148]	@ (800a470 <dma2_enable+0x1e4>)
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	4a3b      	ldr	r2, [pc, #236]	@ (800a4cc <dma2_enable+0x240>)
 800a3e0:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2.stream[5]->m1a = stm32fxxx_dma2_stream5_m1a;
 800a3e2:	4b23      	ldr	r3, [pc, #140]	@ (800a470 <dma2_enable+0x1e4>)
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	4a3a      	ldr	r2, [pc, #232]	@ (800a4d0 <dma2_enable+0x244>)
 800a3e8:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma2.stream[6]->cr = stm32fxxx_dma2_stream6_cr_inic();
 800a3ea:	4b21      	ldr	r3, [pc, #132]	@ (800a470 <dma2_enable+0x1e4>)
 800a3ec:	699c      	ldr	r4, [r3, #24]
 800a3ee:	f7ff f823 	bl	8009438 <stm32fxxx_dma2_stream6_cr_inic>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma2.stream[6]->fcr = stm32fxxx_dma2_stream6_fcr_inic();
 800a3f6:	4b1e      	ldr	r3, [pc, #120]	@ (800a470 <dma2_enable+0x1e4>)
 800a3f8:	699c      	ldr	r4, [r3, #24]
 800a3fa:	f7ff fd73 	bl	8009ee4 <stm32fxxx_dma2_stream6_fcr_inic>
 800a3fe:	4603      	mov	r3, r0
 800a400:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma2.stream[6]->ndt = stm32fxxx_dma2_stream6_ndt;
 800a402:	4b1b      	ldr	r3, [pc, #108]	@ (800a470 <dma2_enable+0x1e4>)
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	4a33      	ldr	r2, [pc, #204]	@ (800a4d4 <dma2_enable+0x248>)
 800a408:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2.stream[6]->par = stm32fxxx_dma2_stream6_par;
 800a40a:	4b19      	ldr	r3, [pc, #100]	@ (800a470 <dma2_enable+0x1e4>)
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	4a32      	ldr	r2, [pc, #200]	@ (800a4d8 <dma2_enable+0x24c>)
 800a410:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2.stream[6]->m0a = stm32fxxx_dma2_stream6_m0a;
 800a412:	4b17      	ldr	r3, [pc, #92]	@ (800a470 <dma2_enable+0x1e4>)
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	4a31      	ldr	r2, [pc, #196]	@ (800a4dc <dma2_enable+0x250>)
 800a418:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2.stream[6]->m1a = stm32fxxx_dma2_stream6_m1a;
 800a41a:	4b15      	ldr	r3, [pc, #84]	@ (800a470 <dma2_enable+0x1e4>)
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	4a30      	ldr	r2, [pc, #192]	@ (800a4e0 <dma2_enable+0x254>)
 800a420:	611a      	str	r2, [r3, #16]

	stm32fxxx_dma2.stream[7]->cr = stm32fxxx_dma2_stream7_cr_inic();
 800a422:	4b13      	ldr	r3, [pc, #76]	@ (800a470 <dma2_enable+0x1e4>)
 800a424:	69dc      	ldr	r4, [r3, #28]
 800a426:	f7ff fa07 	bl	8009838 <stm32fxxx_dma2_stream7_cr_inic>
 800a42a:	4603      	mov	r3, r0
 800a42c:	6023      	str	r3, [r4, #0]
	stm32fxxx_dma2.stream[7]->fcr = stm32fxxx_dma2_stream7_fcr_inic();
 800a42e:	4b10      	ldr	r3, [pc, #64]	@ (800a470 <dma2_enable+0x1e4>)
 800a430:	69dc      	ldr	r4, [r3, #28]
 800a432:	f7ff fdbd 	bl	8009fb0 <stm32fxxx_dma2_stream7_fcr_inic>
 800a436:	4603      	mov	r3, r0
 800a438:	6163      	str	r3, [r4, #20]
	stm32fxxx_dma2.stream[7]->ndt = stm32fxxx_dma2_stream7_ndt;
 800a43a:	4b0d      	ldr	r3, [pc, #52]	@ (800a470 <dma2_enable+0x1e4>)
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	4a29      	ldr	r2, [pc, #164]	@ (800a4e4 <dma2_enable+0x258>)
 800a440:	605a      	str	r2, [r3, #4]
	stm32fxxx_dma2.stream[7]->par = stm32fxxx_dma2_stream7_par;
 800a442:	4b0b      	ldr	r3, [pc, #44]	@ (800a470 <dma2_enable+0x1e4>)
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	4a28      	ldr	r2, [pc, #160]	@ (800a4e8 <dma2_enable+0x25c>)
 800a448:	609a      	str	r2, [r3, #8]
	stm32fxxx_dma2.stream[7]->m0a = stm32fxxx_dma2_stream7_m0a;
 800a44a:	4b09      	ldr	r3, [pc, #36]	@ (800a470 <dma2_enable+0x1e4>)
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	4a27      	ldr	r2, [pc, #156]	@ (800a4ec <dma2_enable+0x260>)
 800a450:	60da      	str	r2, [r3, #12]
	stm32fxxx_dma2.stream[7]->m1a = stm32fxxx_dma2_stream7_m1a;
 800a452:	4b07      	ldr	r3, [pc, #28]	@ (800a470 <dma2_enable+0x1e4>)
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	4a26      	ldr	r2, [pc, #152]	@ (800a4f0 <dma2_enable+0x264>)
 800a458:	611a      	str	r2, [r3, #16]
	/*** Other ***/
	stm32fxxx_dma2.func = stm32fxxx_dma2_func_inic();
 800a45a:	f7ff ff07 	bl	800a26c <stm32fxxx_dma2_func_inic>
 800a45e:	4603      	mov	r3, r0
 800a460:	4a03      	ldr	r2, [pc, #12]	@ (800a470 <dma2_enable+0x1e4>)
 800a462:	6293      	str	r3, [r2, #40]	@ 0x28
	stm32fxxx_dma2.clock = STM32FXXXDma2Clock;
 800a464:	4b02      	ldr	r3, [pc, #8]	@ (800a470 <dma2_enable+0x1e4>)
 800a466:	4a23      	ldr	r2, [pc, #140]	@ (800a4f4 <dma2_enable+0x268>)
 800a468:	625a      	str	r2, [r3, #36]	@ 0x24
	return &stm32fxxx_dma2;
 800a46a:	4b01      	ldr	r3, [pc, #4]	@ (800a470 <dma2_enable+0x1e4>)
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	bd98      	pop	{r3, r4, r7, pc}
 800a470:	200008ac 	.word	0x200008ac
 800a474:	08007d0d 	.word	0x08007d0d
 800a478:	08007d2d 	.word	0x08007d2d
 800a47c:	08007d4d 	.word	0x08007d4d
 800a480:	08007d6d 	.word	0x08007d6d
 800a484:	0800810d 	.word	0x0800810d
 800a488:	0800812d 	.word	0x0800812d
 800a48c:	0800814d 	.word	0x0800814d
 800a490:	0800816d 	.word	0x0800816d
 800a494:	0800850d 	.word	0x0800850d
 800a498:	0800852d 	.word	0x0800852d
 800a49c:	0800854d 	.word	0x0800854d
 800a4a0:	0800856d 	.word	0x0800856d
 800a4a4:	0800890d 	.word	0x0800890d
 800a4a8:	0800892d 	.word	0x0800892d
 800a4ac:	0800894d 	.word	0x0800894d
 800a4b0:	0800896d 	.word	0x0800896d
 800a4b4:	08008d0d 	.word	0x08008d0d
 800a4b8:	08008d2d 	.word	0x08008d2d
 800a4bc:	08008d4d 	.word	0x08008d4d
 800a4c0:	08008d6d 	.word	0x08008d6d
 800a4c4:	0800910d 	.word	0x0800910d
 800a4c8:	0800912d 	.word	0x0800912d
 800a4cc:	0800914d 	.word	0x0800914d
 800a4d0:	0800916d 	.word	0x0800916d
 800a4d4:	0800950d 	.word	0x0800950d
 800a4d8:	0800952d 	.word	0x0800952d
 800a4dc:	0800954d 	.word	0x0800954d
 800a4e0:	0800956d 	.word	0x0800956d
 800a4e4:	0800990d 	.word	0x0800990d
 800a4e8:	0800992d 	.word	0x0800992d
 800a4ec:	0800994d 	.word	0x0800994d
 800a4f0:	0800996d 	.word	0x0800996d
 800a4f4:	08003c55 	.word	0x08003c55

0800a4f8 <STM32FXXXFLASH_acr_dcrst>:
STM32FXXXFLASH_cr* stm32fxxx_flash_cr_inic(void);
STM32FXXXFLASH_optcr* stm32fxxx_flash_optcr_inic(void);
/*** FLASH Bit Mapping ***/
// ACR
void STM32FXXXFLASH_acr_dcrst(uint8_t bool)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	4603      	mov	r3, r0
 800a500:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->ACR, 1, 12, bool);
 800a502:	79fb      	ldrb	r3, [r7, #7]
 800a504:	220c      	movs	r2, #12
 800a506:	2101      	movs	r1, #1
 800a508:	4803      	ldr	r0, [pc, #12]	@ (800a518 <STM32FXXXFLASH_acr_dcrst+0x20>)
 800a50a:	f7f9 f867 	bl	80035dc <set_reg_block>
}
 800a50e:	bf00      	nop
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	40023c00 	.word	0x40023c00

0800a51c <STM32FXXXFLASH_acr_icrst>:
void STM32FXXXFLASH_acr_icrst(uint8_t bool)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->ACR, 1, 11, bool);
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	220b      	movs	r2, #11
 800a52a:	2101      	movs	r1, #1
 800a52c:	4803      	ldr	r0, [pc, #12]	@ (800a53c <STM32FXXXFLASH_acr_icrst+0x20>)
 800a52e:	f7f9 f855 	bl	80035dc <set_reg_block>
}
 800a532:	bf00      	nop
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	40023c00 	.word	0x40023c00

0800a540 <STM32FXXXFLASH_acr_dcen>:
void STM32FXXXFLASH_acr_dcen(uint8_t bool)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	4603      	mov	r3, r0
 800a548:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->ACR, 1, 10, bool);
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	220a      	movs	r2, #10
 800a54e:	2101      	movs	r1, #1
 800a550:	4803      	ldr	r0, [pc, #12]	@ (800a560 <STM32FXXXFLASH_acr_dcen+0x20>)
 800a552:	f7f9 f843 	bl	80035dc <set_reg_block>
}
 800a556:	bf00      	nop
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	40023c00 	.word	0x40023c00

0800a564 <STM32FXXXFLASH_acr_icen>:
void STM32FXXXFLASH_acr_icen(uint8_t bool)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->ACR, 1, 9, bool);
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	2209      	movs	r2, #9
 800a572:	2101      	movs	r1, #1
 800a574:	4803      	ldr	r0, [pc, #12]	@ (800a584 <STM32FXXXFLASH_acr_icen+0x20>)
 800a576:	f7f9 f831 	bl	80035dc <set_reg_block>
}
 800a57a:	bf00      	nop
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	40023c00 	.word	0x40023c00

0800a588 <STM32FXXXFLASH_acr_prften>:
void STM32FXXXFLASH_acr_prften(uint8_t bool)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->ACR, 1, 8, bool);
 800a592:	79fb      	ldrb	r3, [r7, #7]
 800a594:	2208      	movs	r2, #8
 800a596:	2101      	movs	r1, #1
 800a598:	4803      	ldr	r0, [pc, #12]	@ (800a5a8 <STM32FXXXFLASH_acr_prften+0x20>)
 800a59a:	f7f9 f81f 	bl	80035dc <set_reg_block>
}
 800a59e:	bf00      	nop
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	40023c00 	.word	0x40023c00

0800a5ac <STM32FXXXFLASH_acr_latency>:
void STM32FXXXFLASH_acr_latency(uint8_t value)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->ACR, 4, 0, value);
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	2104      	movs	r1, #4
 800a5bc:	4803      	ldr	r0, [pc, #12]	@ (800a5cc <STM32FXXXFLASH_acr_latency+0x20>)
 800a5be:	f7f9 f80d 	bl	80035dc <set_reg_block>
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	40023c00 	.word	0x40023c00

0800a5d0 <STM32FXXXFLASH_keyr_key>:
// KEYR
void STM32FXXXFLASH_keyr_key(uint32_t value)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
	FLASH->KEYR = value;
 800a5d8:	4a04      	ldr	r2, [pc, #16]	@ (800a5ec <STM32FXXXFLASH_keyr_key+0x1c>)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6053      	str	r3, [r2, #4]
}
 800a5de:	bf00      	nop
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	40023c00 	.word	0x40023c00

0800a5f0 <STM32FXXXFLASH_optkeyr_optkey>:
// OPTKEYR
void STM32FXXXFLASH_optkeyr_optkey(uint32_t value)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
	FLASH->OPTKEYR = value;
 800a5f8:	4a04      	ldr	r2, [pc, #16]	@ (800a60c <STM32FXXXFLASH_optkeyr_optkey+0x1c>)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6093      	str	r3, [r2, #8]
}
 800a5fe:	bf00      	nop
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	40023c00 	.word	0x40023c00

0800a610 <STM32FXXXFLASH_sr_bsy>:
// SR
uint8_t STM32FXXXFLASH_sr_bsy(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
	return get_reg_block(FLASH->SR, 1, 16);
 800a614:	4b05      	ldr	r3, [pc, #20]	@ (800a62c <STM32FXXXFLASH_sr_bsy+0x1c>)
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	2210      	movs	r2, #16
 800a61a:	2101      	movs	r1, #1
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7f8 ff78 	bl	8003512 <get_reg_block>
 800a622:	4603      	mov	r3, r0
 800a624:	b2db      	uxtb	r3, r3
}
 800a626:	4618      	mov	r0, r3
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	40023c00 	.word	0x40023c00

0800a630 <STM32FXXXFLASH_sr_rderr>:
uint8_t STM32FXXXFLASH_sr_rderr(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
	return get_reg_block(FLASH->SR, 1, 8);
 800a634:	4b05      	ldr	r3, [pc, #20]	@ (800a64c <STM32FXXXFLASH_sr_rderr+0x1c>)
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	2208      	movs	r2, #8
 800a63a:	2101      	movs	r1, #1
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7f8 ff68 	bl	8003512 <get_reg_block>
 800a642:	4603      	mov	r3, r0
 800a644:	b2db      	uxtb	r3, r3
}
 800a646:	4618      	mov	r0, r3
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	40023c00 	.word	0x40023c00

0800a650 <STM32FXXXFLASH_sr_clear_rderr>:
void STM32FXXXFLASH_sr_clear_rderr(void)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
	set_reg_block(&FLASH->SR, 1, 8, 1);
 800a654:	2301      	movs	r3, #1
 800a656:	2208      	movs	r2, #8
 800a658:	2101      	movs	r1, #1
 800a65a:	4802      	ldr	r0, [pc, #8]	@ (800a664 <STM32FXXXFLASH_sr_clear_rderr+0x14>)
 800a65c:	f7f8 ffbe 	bl	80035dc <set_reg_block>
}
 800a660:	bf00      	nop
 800a662:	bd80      	pop	{r7, pc}
 800a664:	40023c0c 	.word	0x40023c0c

0800a668 <STM32FXXXFLASH_sr_pgserr>:
uint8_t STM32FXXXFLASH_sr_pgserr(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	af00      	add	r7, sp, #0
	return get_reg_block(FLASH->SR, 1, 7);
 800a66c:	4b05      	ldr	r3, [pc, #20]	@ (800a684 <STM32FXXXFLASH_sr_pgserr+0x1c>)
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	2207      	movs	r2, #7
 800a672:	2101      	movs	r1, #1
 800a674:	4618      	mov	r0, r3
 800a676:	f7f8 ff4c 	bl	8003512 <get_reg_block>
 800a67a:	4603      	mov	r3, r0
 800a67c:	b2db      	uxtb	r3, r3
}
 800a67e:	4618      	mov	r0, r3
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	40023c00 	.word	0x40023c00

0800a688 <STM32FXXXFLASH_sr_clear_pgserr>:
void STM32FXXXFLASH_sr_clear_pgserr(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
	set_reg_block(&FLASH->SR, 1, 7, 1);
 800a68c:	2301      	movs	r3, #1
 800a68e:	2207      	movs	r2, #7
 800a690:	2101      	movs	r1, #1
 800a692:	4802      	ldr	r0, [pc, #8]	@ (800a69c <STM32FXXXFLASH_sr_clear_pgserr+0x14>)
 800a694:	f7f8 ffa2 	bl	80035dc <set_reg_block>
}
 800a698:	bf00      	nop
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	40023c0c 	.word	0x40023c0c

0800a6a0 <STM32FXXXFLASH_sr_pgperr>:
uint8_t STM32FXXXFLASH_sr_pgperr(void)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	af00      	add	r7, sp, #0
	return get_reg_block(FLASH->SR, 1, 6);
 800a6a4:	4b05      	ldr	r3, [pc, #20]	@ (800a6bc <STM32FXXXFLASH_sr_pgperr+0x1c>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	2206      	movs	r2, #6
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7f8 ff30 	bl	8003512 <get_reg_block>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	b2db      	uxtb	r3, r3
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	40023c00 	.word	0x40023c00

0800a6c0 <STM32FXXXFLASH_sr_clear_pgperr>:
void STM32FXXXFLASH_sr_clear_pgperr(void)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	af00      	add	r7, sp, #0
	set_reg_block(&FLASH->SR, 1, 6, 1);
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	2206      	movs	r2, #6
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	4802      	ldr	r0, [pc, #8]	@ (800a6d4 <STM32FXXXFLASH_sr_clear_pgperr+0x14>)
 800a6cc:	f7f8 ff86 	bl	80035dc <set_reg_block>
}
 800a6d0:	bf00      	nop
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	40023c0c 	.word	0x40023c0c

0800a6d8 <STM32FXXXFLASH_sr_pgaerr>:
uint8_t STM32FXXXFLASH_sr_pgaerr(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
	return get_reg_block(FLASH->SR, 1, 5);
 800a6dc:	4b05      	ldr	r3, [pc, #20]	@ (800a6f4 <STM32FXXXFLASH_sr_pgaerr+0x1c>)
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	2205      	movs	r2, #5
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7f8 ff14 	bl	8003512 <get_reg_block>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	b2db      	uxtb	r3, r3
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	40023c00 	.word	0x40023c00

0800a6f8 <STM32FXXXFLASH_sr_clear_pgaerr>:
void STM32FXXXFLASH_sr_clear_pgaerr(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
	set_reg_block(&FLASH->SR, 1, 5, 1);
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	2205      	movs	r2, #5
 800a700:	2101      	movs	r1, #1
 800a702:	4802      	ldr	r0, [pc, #8]	@ (800a70c <STM32FXXXFLASH_sr_clear_pgaerr+0x14>)
 800a704:	f7f8 ff6a 	bl	80035dc <set_reg_block>
}
 800a708:	bf00      	nop
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	40023c0c 	.word	0x40023c0c

0800a710 <STM32FXXXFLASH_sr_wrperr>:
uint8_t STM32FXXXFLASH_sr_wrperr(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	af00      	add	r7, sp, #0
	return get_reg_block(FLASH->SR, 1, 4);
 800a714:	4b05      	ldr	r3, [pc, #20]	@ (800a72c <STM32FXXXFLASH_sr_wrperr+0x1c>)
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	2204      	movs	r2, #4
 800a71a:	2101      	movs	r1, #1
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7f8 fef8 	bl	8003512 <get_reg_block>
 800a722:	4603      	mov	r3, r0
 800a724:	b2db      	uxtb	r3, r3
}
 800a726:	4618      	mov	r0, r3
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	40023c00 	.word	0x40023c00

0800a730 <STM32FXXXFLASH_sr_clear_wrperr>:
void STM32FXXXFLASH_sr_clear_wrperr(void)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	af00      	add	r7, sp, #0
	set_reg_block(&FLASH->SR, 1, 4, 1);
 800a734:	2301      	movs	r3, #1
 800a736:	2204      	movs	r2, #4
 800a738:	2101      	movs	r1, #1
 800a73a:	4802      	ldr	r0, [pc, #8]	@ (800a744 <STM32FXXXFLASH_sr_clear_wrperr+0x14>)
 800a73c:	f7f8 ff4e 	bl	80035dc <set_reg_block>
}
 800a740:	bf00      	nop
 800a742:	bd80      	pop	{r7, pc}
 800a744:	40023c0c 	.word	0x40023c0c

0800a748 <STM32FXXXFLASH_sr_operr>:
uint8_t STM32FXXXFLASH_sr_operr(void)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	af00      	add	r7, sp, #0
	return get_reg_block(FLASH->SR, 1, 1);
 800a74c:	4b05      	ldr	r3, [pc, #20]	@ (800a764 <STM32FXXXFLASH_sr_operr+0x1c>)
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	2201      	movs	r2, #1
 800a752:	2101      	movs	r1, #1
 800a754:	4618      	mov	r0, r3
 800a756:	f7f8 fedc 	bl	8003512 <get_reg_block>
 800a75a:	4603      	mov	r3, r0
 800a75c:	b2db      	uxtb	r3, r3
}
 800a75e:	4618      	mov	r0, r3
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	40023c00 	.word	0x40023c00

0800a768 <STM32FXXXFLASH_sr_clear_operr>:
void STM32FXXXFLASH_sr_clear_operr(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	af00      	add	r7, sp, #0
	set_reg_block(&FLASH->SR, 1, 1, 1);
 800a76c:	2301      	movs	r3, #1
 800a76e:	2201      	movs	r2, #1
 800a770:	2101      	movs	r1, #1
 800a772:	4802      	ldr	r0, [pc, #8]	@ (800a77c <STM32FXXXFLASH_sr_clear_operr+0x14>)
 800a774:	f7f8 ff32 	bl	80035dc <set_reg_block>
}
 800a778:	bf00      	nop
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	40023c0c 	.word	0x40023c0c

0800a780 <STM32FXXXFLASH_sr_eop>:
uint8_t STM32FXXXFLASH_sr_eop(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
	return get_reg_block(FLASH->SR, 1, 0);
 800a784:	4b05      	ldr	r3, [pc, #20]	@ (800a79c <STM32FXXXFLASH_sr_eop+0x1c>)
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	2101      	movs	r1, #1
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f8 fec0 	bl	8003512 <get_reg_block>
 800a792:	4603      	mov	r3, r0
 800a794:	b2db      	uxtb	r3, r3
}
 800a796:	4618      	mov	r0, r3
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	40023c00 	.word	0x40023c00

0800a7a0 <STM32FXXXFLASH_sr_clear_eop>:
void STM32FXXXFLASH_sr_clear_eop(void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	af00      	add	r7, sp, #0
	set_reg_block(&FLASH->SR, 1, 0, 1);
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	4802      	ldr	r0, [pc, #8]	@ (800a7b4 <STM32FXXXFLASH_sr_clear_eop+0x14>)
 800a7ac:	f7f8 ff16 	bl	80035dc <set_reg_block>
}
 800a7b0:	bf00      	nop
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	40023c0c 	.word	0x40023c0c

0800a7b8 <STM32FXXXFLASH_cr_lock>:
// CR
void STM32FXXXFLASH_cr_lock(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	af00      	add	r7, sp, #0
	set_reg_block(&FLASH->CR, 1, 31, 1);
 800a7bc:	2301      	movs	r3, #1
 800a7be:	221f      	movs	r2, #31
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	4802      	ldr	r0, [pc, #8]	@ (800a7cc <STM32FXXXFLASH_cr_lock+0x14>)
 800a7c4:	f7f8 ff0a 	bl	80035dc <set_reg_block>
}
 800a7c8:	bf00      	nop
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	40023c10 	.word	0x40023c10

0800a7d0 <STM32FXXXFLASH_cr_errie>:
void STM32FXXXFLASH_cr_errie(uint8_t bool)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->CR, 1, 25, bool);
 800a7da:	79fb      	ldrb	r3, [r7, #7]
 800a7dc:	2219      	movs	r2, #25
 800a7de:	2101      	movs	r1, #1
 800a7e0:	4803      	ldr	r0, [pc, #12]	@ (800a7f0 <STM32FXXXFLASH_cr_errie+0x20>)
 800a7e2:	f7f8 fefb 	bl	80035dc <set_reg_block>
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	40023c10 	.word	0x40023c10

0800a7f4 <STM32FXXXFLASH_cr_eopie>:
void STM32FXXXFLASH_cr_eopie(uint8_t bool)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->CR, 1, 24, bool);
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	2218      	movs	r2, #24
 800a802:	2101      	movs	r1, #1
 800a804:	4803      	ldr	r0, [pc, #12]	@ (800a814 <STM32FXXXFLASH_cr_eopie+0x20>)
 800a806:	f7f8 fee9 	bl	80035dc <set_reg_block>
}
 800a80a:	bf00      	nop
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	40023c10 	.word	0x40023c10

0800a818 <STM32FXXXFLASH_cr_strt>:
void STM32FXXXFLASH_cr_strt(void)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	af00      	add	r7, sp, #0
	set_reg_block(&FLASH->CR, 1, 16, 1);
 800a81c:	2301      	movs	r3, #1
 800a81e:	2210      	movs	r2, #16
 800a820:	2101      	movs	r1, #1
 800a822:	4802      	ldr	r0, [pc, #8]	@ (800a82c <STM32FXXXFLASH_cr_strt+0x14>)
 800a824:	f7f8 feda 	bl	80035dc <set_reg_block>
}
 800a828:	bf00      	nop
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	40023c10 	.word	0x40023c10

0800a830 <STM32FXXXFLASH_cr_psize>:
void STM32FXXXFLASH_cr_psize(uint8_t value)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->CR, 2, 8, value);
 800a83a:	79fb      	ldrb	r3, [r7, #7]
 800a83c:	2208      	movs	r2, #8
 800a83e:	2102      	movs	r1, #2
 800a840:	4803      	ldr	r0, [pc, #12]	@ (800a850 <STM32FXXXFLASH_cr_psize+0x20>)
 800a842:	f7f8 fecb 	bl	80035dc <set_reg_block>
}
 800a846:	bf00      	nop
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	40023c10 	.word	0x40023c10

0800a854 <STM32FXXXFLASH_cr_snb>:
void STM32FXXXFLASH_cr_snb(uint8_t value)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	4603      	mov	r3, r0
 800a85c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->CR, 4, 3, value);
 800a85e:	79fb      	ldrb	r3, [r7, #7]
 800a860:	2203      	movs	r2, #3
 800a862:	2104      	movs	r1, #4
 800a864:	4803      	ldr	r0, [pc, #12]	@ (800a874 <STM32FXXXFLASH_cr_snb+0x20>)
 800a866:	f7f8 feb9 	bl	80035dc <set_reg_block>
}
 800a86a:	bf00      	nop
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	40023c10 	.word	0x40023c10

0800a878 <STM32FXXXFLASH_cr_mer>:
void STM32FXXXFLASH_cr_mer(uint8_t bool)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->CR, 1, 2, bool);
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	2202      	movs	r2, #2
 800a886:	2101      	movs	r1, #1
 800a888:	4803      	ldr	r0, [pc, #12]	@ (800a898 <STM32FXXXFLASH_cr_mer+0x20>)
 800a88a:	f7f8 fea7 	bl	80035dc <set_reg_block>
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	40023c10 	.word	0x40023c10

0800a89c <STM32FXXXFLASH_cr_ser>:
void STM32FXXXFLASH_cr_ser(uint8_t bool)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->CR, 1, 1, bool);
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	2101      	movs	r1, #1
 800a8ac:	4803      	ldr	r0, [pc, #12]	@ (800a8bc <STM32FXXXFLASH_cr_ser+0x20>)
 800a8ae:	f7f8 fe95 	bl	80035dc <set_reg_block>
}
 800a8b2:	bf00      	nop
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	40023c10 	.word	0x40023c10

0800a8c0 <STM32FXXXFLASH_cr_pg>:
void STM32FXXXFLASH_cr_pg(uint8_t bool)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->CR, 1, 0, bool);
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2101      	movs	r1, #1
 800a8d0:	4803      	ldr	r0, [pc, #12]	@ (800a8e0 <STM32FXXXFLASH_cr_pg+0x20>)
 800a8d2:	f7f8 fe83 	bl	80035dc <set_reg_block>
}
 800a8d6:	bf00      	nop
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	40023c10 	.word	0x40023c10

0800a8e4 <STM32FXXXFLASH_optcr_sprmod>:
// OPTCR
void STM32FXXXFLASH_optcr_sprmod(uint8_t bool)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->OPTCR, 1, 31, bool);
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	221f      	movs	r2, #31
 800a8f2:	2101      	movs	r1, #1
 800a8f4:	4803      	ldr	r0, [pc, #12]	@ (800a904 <STM32FXXXFLASH_optcr_sprmod+0x20>)
 800a8f6:	f7f8 fe71 	bl	80035dc <set_reg_block>
}
 800a8fa:	bf00      	nop
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	40023c14 	.word	0x40023c14

0800a908 <STM32FXXXFLASH_optcr_n_wrp>:
void STM32FXXXFLASH_optcr_n_wrp(uint8_t value)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->OPTCR, 8, 16, value);
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	2210      	movs	r2, #16
 800a916:	2108      	movs	r1, #8
 800a918:	4803      	ldr	r0, [pc, #12]	@ (800a928 <STM32FXXXFLASH_optcr_n_wrp+0x20>)
 800a91a:	f7f8 fe5f 	bl	80035dc <set_reg_block>
}
 800a91e:	bf00      	nop
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	40023c14 	.word	0x40023c14

0800a92c <STM32FXXXFLASH_optcr_get_n_wrp>:
uint8_t STM32FXXXFLASH_optcr_get_n_wrp(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	af00      	add	r7, sp, #0
	return get_reg_block(FLASH->OPTCR, 8, 16);
 800a930:	4b05      	ldr	r3, [pc, #20]	@ (800a948 <STM32FXXXFLASH_optcr_get_n_wrp+0x1c>)
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	2210      	movs	r2, #16
 800a936:	2108      	movs	r1, #8
 800a938:	4618      	mov	r0, r3
 800a93a:	f7f8 fdea 	bl	8003512 <get_reg_block>
 800a93e:	4603      	mov	r3, r0
 800a940:	b2db      	uxtb	r3, r3
}
 800a942:	4618      	mov	r0, r3
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	40023c00 	.word	0x40023c00

0800a94c <STM32FXXXFLASH_optcr_rdp>:
void STM32FXXXFLASH_optcr_rdp(uint8_t value)
{ // Do not permit Blocking Chip !!
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	4603      	mov	r3, r0
 800a954:	71fb      	strb	r3, [r7, #7]
	if(value != 0xCC){ set_reg_block(&FLASH->OPTCR, 8, 8, value);}
 800a956:	79fb      	ldrb	r3, [r7, #7]
 800a958:	2bcc      	cmp	r3, #204	@ 0xcc
 800a95a:	d005      	beq.n	800a968 <STM32FXXXFLASH_optcr_rdp+0x1c>
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	2208      	movs	r2, #8
 800a960:	2108      	movs	r1, #8
 800a962:	4803      	ldr	r0, [pc, #12]	@ (800a970 <STM32FXXXFLASH_optcr_rdp+0x24>)
 800a964:	f7f8 fe3a 	bl	80035dc <set_reg_block>
}
 800a968:	bf00      	nop
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	40023c14 	.word	0x40023c14

0800a974 <STM32FXXXFLASH_optcr_get_rdp>:
uint8_t STM32FXXXFLASH_optcr_get_rdp(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	af00      	add	r7, sp, #0
	return get_reg_block(FLASH->OPTCR, 8, 8);
 800a978:	4b05      	ldr	r3, [pc, #20]	@ (800a990 <STM32FXXXFLASH_optcr_get_rdp+0x1c>)
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	2208      	movs	r2, #8
 800a97e:	2108      	movs	r1, #8
 800a980:	4618      	mov	r0, r3
 800a982:	f7f8 fdc6 	bl	8003512 <get_reg_block>
 800a986:	4603      	mov	r3, r0
 800a988:	b2db      	uxtb	r3, r3
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	40023c00 	.word	0x40023c00

0800a994 <STM32FXXXFLASH_optcr_nrst_stdby>:
void STM32FXXXFLASH_optcr_nrst_stdby(uint8_t bool)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	4603      	mov	r3, r0
 800a99c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->OPTCR, 1, 7, bool);
 800a99e:	79fb      	ldrb	r3, [r7, #7]
 800a9a0:	2207      	movs	r2, #7
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	4803      	ldr	r0, [pc, #12]	@ (800a9b4 <STM32FXXXFLASH_optcr_nrst_stdby+0x20>)
 800a9a6:	f7f8 fe19 	bl	80035dc <set_reg_block>
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	40023c14 	.word	0x40023c14

0800a9b8 <STM32FXXXFLASH_optcr_nrst_stop>:
void STM32FXXXFLASH_optcr_nrst_stop(uint8_t bool)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->OPTCR, 1, 6, bool);
 800a9c2:	79fb      	ldrb	r3, [r7, #7]
 800a9c4:	2206      	movs	r2, #6
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	4803      	ldr	r0, [pc, #12]	@ (800a9d8 <STM32FXXXFLASH_optcr_nrst_stop+0x20>)
 800a9ca:	f7f8 fe07 	bl	80035dc <set_reg_block>
}
 800a9ce:	bf00      	nop
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	40023c14 	.word	0x40023c14

0800a9dc <STM32FXXXFLASH_optcr_wdg_sw>:
void STM32FXXXFLASH_optcr_wdg_sw(uint8_t bool)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->OPTCR, 1, 5, bool);
 800a9e6:	79fb      	ldrb	r3, [r7, #7]
 800a9e8:	2205      	movs	r2, #5
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	4803      	ldr	r0, [pc, #12]	@ (800a9fc <STM32FXXXFLASH_optcr_wdg_sw+0x20>)
 800a9ee:	f7f8 fdf5 	bl	80035dc <set_reg_block>
}
 800a9f2:	bf00      	nop
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	40023c14 	.word	0x40023c14

0800aa00 <STM32FXXXFLASH_optcr_bor_lev>:
void STM32FXXXFLASH_optcr_bor_lev(uint8_t value)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->OPTCR, 2, 2, value);
 800aa0a:	79fb      	ldrb	r3, [r7, #7]
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	2102      	movs	r1, #2
 800aa10:	4803      	ldr	r0, [pc, #12]	@ (800aa20 <STM32FXXXFLASH_optcr_bor_lev+0x20>)
 800aa12:	f7f8 fde3 	bl	80035dc <set_reg_block>
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	40023c14 	.word	0x40023c14

0800aa24 <STM32FXXXFLASH_optcr_optstrt>:
void STM32FXXXFLASH_optcr_optstrt(uint8_t bool)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->OPTCR, 1, 1, bool);
 800aa2e:	79fb      	ldrb	r3, [r7, #7]
 800aa30:	2201      	movs	r2, #1
 800aa32:	2101      	movs	r1, #1
 800aa34:	4803      	ldr	r0, [pc, #12]	@ (800aa44 <STM32FXXXFLASH_optcr_optstrt+0x20>)
 800aa36:	f7f8 fdd1 	bl	80035dc <set_reg_block>
}
 800aa3a:	bf00      	nop
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	40023c14 	.word	0x40023c14

0800aa48 <STM32FXXXFLASH_optcr_optlock>:
void STM32FXXXFLASH_optcr_optlock(uint8_t bool)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&FLASH->OPTCR, 1, 0, bool);
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	2200      	movs	r2, #0
 800aa56:	2101      	movs	r1, #1
 800aa58:	4803      	ldr	r0, [pc, #12]	@ (800aa68 <STM32FXXXFLASH_optcr_optlock+0x20>)
 800aa5a:	f7f8 fdbf 	bl	80035dc <set_reg_block>
}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	40023c14 	.word	0x40023c14

0800aa6c <STM32FXXXFLASH_nvic>:
/*** Other ***/
void STM32FXXXFLASH_nvic(uint8_t bool)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	4603      	mov	r3, r0
 800aa74:	71fb      	strb	r3, [r7, #7]
	if(bool){ set_bit_block(NVIC->ISER, 1, FLASH_IRQn, 1); } else{ set_bit_block(NVIC->ICER, 1, FLASH_IRQn, 1); }
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d006      	beq.n	800aa8a <STM32FXXXFLASH_nvic+0x1e>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	2204      	movs	r2, #4
 800aa80:	2101      	movs	r1, #1
 800aa82:	4807      	ldr	r0, [pc, #28]	@ (800aaa0 <STM32FXXXFLASH_nvic+0x34>)
 800aa84:	f7f8 fe1c 	bl	80036c0 <set_bit_block>
}
 800aa88:	e005      	b.n	800aa96 <STM32FXXXFLASH_nvic+0x2a>
	if(bool){ set_bit_block(NVIC->ISER, 1, FLASH_IRQn, 1); } else{ set_bit_block(NVIC->ICER, 1, FLASH_IRQn, 1); }
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	2204      	movs	r2, #4
 800aa8e:	2101      	movs	r1, #1
 800aa90:	4804      	ldr	r0, [pc, #16]	@ (800aaa4 <STM32FXXXFLASH_nvic+0x38>)
 800aa92:	f7f8 fe15 	bl	80036c0 <set_bit_block>
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	e000e100 	.word	0xe000e100
 800aaa4:	e000e180 	.word	0xe000e180

0800aaa8 <stm32fxxx_flash_acr_inic>:
/*** FLASH Auxiliar ***/
STM32FXXXFLASH_acr* stm32fxxx_flash_acr_inic(void)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0

	// ACR
	stm32fxxx_flash_acr.dcrst = STM32FXXXFLASH_acr_dcrst;
 800aaac:	4b0b      	ldr	r3, [pc, #44]	@ (800aadc <stm32fxxx_flash_acr_inic+0x34>)
 800aaae:	4a0c      	ldr	r2, [pc, #48]	@ (800aae0 <stm32fxxx_flash_acr_inic+0x38>)
 800aab0:	601a      	str	r2, [r3, #0]
	stm32fxxx_flash_acr.icrst = STM32FXXXFLASH_acr_icrst;
 800aab2:	4b0a      	ldr	r3, [pc, #40]	@ (800aadc <stm32fxxx_flash_acr_inic+0x34>)
 800aab4:	4a0b      	ldr	r2, [pc, #44]	@ (800aae4 <stm32fxxx_flash_acr_inic+0x3c>)
 800aab6:	605a      	str	r2, [r3, #4]
	stm32fxxx_flash_acr.dcen = STM32FXXXFLASH_acr_dcen;
 800aab8:	4b08      	ldr	r3, [pc, #32]	@ (800aadc <stm32fxxx_flash_acr_inic+0x34>)
 800aaba:	4a0b      	ldr	r2, [pc, #44]	@ (800aae8 <stm32fxxx_flash_acr_inic+0x40>)
 800aabc:	609a      	str	r2, [r3, #8]
	stm32fxxx_flash_acr.icen = STM32FXXXFLASH_acr_icen;
 800aabe:	4b07      	ldr	r3, [pc, #28]	@ (800aadc <stm32fxxx_flash_acr_inic+0x34>)
 800aac0:	4a0a      	ldr	r2, [pc, #40]	@ (800aaec <stm32fxxx_flash_acr_inic+0x44>)
 800aac2:	60da      	str	r2, [r3, #12]
	stm32fxxx_flash_acr.prften = STM32FXXXFLASH_acr_prften;
 800aac4:	4b05      	ldr	r3, [pc, #20]	@ (800aadc <stm32fxxx_flash_acr_inic+0x34>)
 800aac6:	4a0a      	ldr	r2, [pc, #40]	@ (800aaf0 <stm32fxxx_flash_acr_inic+0x48>)
 800aac8:	611a      	str	r2, [r3, #16]
	stm32fxxx_flash_acr.latency = STM32FXXXFLASH_acr_latency;
 800aaca:	4b04      	ldr	r3, [pc, #16]	@ (800aadc <stm32fxxx_flash_acr_inic+0x34>)
 800aacc:	4a09      	ldr	r2, [pc, #36]	@ (800aaf4 <stm32fxxx_flash_acr_inic+0x4c>)
 800aace:	615a      	str	r2, [r3, #20]
	return &stm32fxxx_flash_acr;
 800aad0:	4b02      	ldr	r3, [pc, #8]	@ (800aadc <stm32fxxx_flash_acr_inic+0x34>)
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	200008dc 	.word	0x200008dc
 800aae0:	0800a4f9 	.word	0x0800a4f9
 800aae4:	0800a51d 	.word	0x0800a51d
 800aae8:	0800a541 	.word	0x0800a541
 800aaec:	0800a565 	.word	0x0800a565
 800aaf0:	0800a589 	.word	0x0800a589
 800aaf4:	0800a5ad 	.word	0x0800a5ad

0800aaf8 <stm32fxxx_flash_sr_inic>:
STM32FXXXFLASH_sr* stm32fxxx_flash_sr_inic(void)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0

	// SR
	stm32fxxx_flash_sr.bsy = STM32FXXXFLASH_sr_bsy;
 800aafc:	4b19      	ldr	r3, [pc, #100]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800aafe:	4a1a      	ldr	r2, [pc, #104]	@ (800ab68 <stm32fxxx_flash_sr_inic+0x70>)
 800ab00:	601a      	str	r2, [r3, #0]
	stm32fxxx_flash_sr.rderr = STM32FXXXFLASH_sr_rderr;
 800ab02:	4b18      	ldr	r3, [pc, #96]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab04:	4a19      	ldr	r2, [pc, #100]	@ (800ab6c <stm32fxxx_flash_sr_inic+0x74>)
 800ab06:	605a      	str	r2, [r3, #4]
	stm32fxxx_flash_sr.clear_rderr = STM32FXXXFLASH_sr_clear_rderr;
 800ab08:	4b16      	ldr	r3, [pc, #88]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab0a:	4a19      	ldr	r2, [pc, #100]	@ (800ab70 <stm32fxxx_flash_sr_inic+0x78>)
 800ab0c:	609a      	str	r2, [r3, #8]
	stm32fxxx_flash_sr.pgserr = STM32FXXXFLASH_sr_pgserr;
 800ab0e:	4b15      	ldr	r3, [pc, #84]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab10:	4a18      	ldr	r2, [pc, #96]	@ (800ab74 <stm32fxxx_flash_sr_inic+0x7c>)
 800ab12:	60da      	str	r2, [r3, #12]
	stm32fxxx_flash_sr.clear_pgserr = STM32FXXXFLASH_sr_clear_pgserr;
 800ab14:	4b13      	ldr	r3, [pc, #76]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab16:	4a18      	ldr	r2, [pc, #96]	@ (800ab78 <stm32fxxx_flash_sr_inic+0x80>)
 800ab18:	611a      	str	r2, [r3, #16]
	stm32fxxx_flash_sr.pgperr = STM32FXXXFLASH_sr_pgperr;
 800ab1a:	4b12      	ldr	r3, [pc, #72]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab1c:	4a17      	ldr	r2, [pc, #92]	@ (800ab7c <stm32fxxx_flash_sr_inic+0x84>)
 800ab1e:	615a      	str	r2, [r3, #20]
	stm32fxxx_flash_sr.clear_pgperr = STM32FXXXFLASH_sr_clear_pgperr;
 800ab20:	4b10      	ldr	r3, [pc, #64]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab22:	4a17      	ldr	r2, [pc, #92]	@ (800ab80 <stm32fxxx_flash_sr_inic+0x88>)
 800ab24:	619a      	str	r2, [r3, #24]
	stm32fxxx_flash_sr.pgaerr = STM32FXXXFLASH_sr_pgaerr;
 800ab26:	4b0f      	ldr	r3, [pc, #60]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab28:	4a16      	ldr	r2, [pc, #88]	@ (800ab84 <stm32fxxx_flash_sr_inic+0x8c>)
 800ab2a:	61da      	str	r2, [r3, #28]
	stm32fxxx_flash_sr.clear_pgaerr = STM32FXXXFLASH_sr_clear_pgaerr;
 800ab2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab2e:	4a16      	ldr	r2, [pc, #88]	@ (800ab88 <stm32fxxx_flash_sr_inic+0x90>)
 800ab30:	621a      	str	r2, [r3, #32]
	stm32fxxx_flash_sr.wrperr = STM32FXXXFLASH_sr_wrperr;
 800ab32:	4b0c      	ldr	r3, [pc, #48]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab34:	4a15      	ldr	r2, [pc, #84]	@ (800ab8c <stm32fxxx_flash_sr_inic+0x94>)
 800ab36:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_flash_sr.clear_wrperr = STM32FXXXFLASH_sr_clear_wrperr;
 800ab38:	4b0a      	ldr	r3, [pc, #40]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab3a:	4a15      	ldr	r2, [pc, #84]	@ (800ab90 <stm32fxxx_flash_sr_inic+0x98>)
 800ab3c:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_flash_sr.operr = STM32FXXXFLASH_sr_operr;
 800ab3e:	4b09      	ldr	r3, [pc, #36]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab40:	4a14      	ldr	r2, [pc, #80]	@ (800ab94 <stm32fxxx_flash_sr_inic+0x9c>)
 800ab42:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_flash_sr.clear_operr = STM32FXXXFLASH_sr_clear_operr;
 800ab44:	4b07      	ldr	r3, [pc, #28]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab46:	4a14      	ldr	r2, [pc, #80]	@ (800ab98 <stm32fxxx_flash_sr_inic+0xa0>)
 800ab48:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_flash_sr.eop = STM32FXXXFLASH_sr_eop;
 800ab4a:	4b06      	ldr	r3, [pc, #24]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab4c:	4a13      	ldr	r2, [pc, #76]	@ (800ab9c <stm32fxxx_flash_sr_inic+0xa4>)
 800ab4e:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_flash_sr.clear_eop = STM32FXXXFLASH_sr_clear_eop;
 800ab50:	4b04      	ldr	r3, [pc, #16]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
 800ab52:	4a13      	ldr	r2, [pc, #76]	@ (800aba0 <stm32fxxx_flash_sr_inic+0xa8>)
 800ab54:	639a      	str	r2, [r3, #56]	@ 0x38
	return &stm32fxxx_flash_sr;
 800ab56:	4b03      	ldr	r3, [pc, #12]	@ (800ab64 <stm32fxxx_flash_sr_inic+0x6c>)
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	200008f4 	.word	0x200008f4
 800ab68:	0800a611 	.word	0x0800a611
 800ab6c:	0800a631 	.word	0x0800a631
 800ab70:	0800a651 	.word	0x0800a651
 800ab74:	0800a669 	.word	0x0800a669
 800ab78:	0800a689 	.word	0x0800a689
 800ab7c:	0800a6a1 	.word	0x0800a6a1
 800ab80:	0800a6c1 	.word	0x0800a6c1
 800ab84:	0800a6d9 	.word	0x0800a6d9
 800ab88:	0800a6f9 	.word	0x0800a6f9
 800ab8c:	0800a711 	.word	0x0800a711
 800ab90:	0800a731 	.word	0x0800a731
 800ab94:	0800a749 	.word	0x0800a749
 800ab98:	0800a769 	.word	0x0800a769
 800ab9c:	0800a781 	.word	0x0800a781
 800aba0:	0800a7a1 	.word	0x0800a7a1

0800aba4 <stm32fxxx_flash_cr_inic>:
STM32FXXXFLASH_cr* stm32fxxx_flash_cr_inic(void)
{
 800aba4:	b480      	push	{r7}
 800aba6:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_flash_cr.lock = STM32FXXXFLASH_cr_lock;
 800aba8:	4b10      	ldr	r3, [pc, #64]	@ (800abec <stm32fxxx_flash_cr_inic+0x48>)
 800abaa:	4a11      	ldr	r2, [pc, #68]	@ (800abf0 <stm32fxxx_flash_cr_inic+0x4c>)
 800abac:	601a      	str	r2, [r3, #0]
	stm32fxxx_flash_cr.errie = STM32FXXXFLASH_cr_errie;
 800abae:	4b0f      	ldr	r3, [pc, #60]	@ (800abec <stm32fxxx_flash_cr_inic+0x48>)
 800abb0:	4a10      	ldr	r2, [pc, #64]	@ (800abf4 <stm32fxxx_flash_cr_inic+0x50>)
 800abb2:	605a      	str	r2, [r3, #4]
	stm32fxxx_flash_cr.eopie = STM32FXXXFLASH_cr_eopie;
 800abb4:	4b0d      	ldr	r3, [pc, #52]	@ (800abec <stm32fxxx_flash_cr_inic+0x48>)
 800abb6:	4a10      	ldr	r2, [pc, #64]	@ (800abf8 <stm32fxxx_flash_cr_inic+0x54>)
 800abb8:	609a      	str	r2, [r3, #8]
	stm32fxxx_flash_cr.strt = STM32FXXXFLASH_cr_strt;
 800abba:	4b0c      	ldr	r3, [pc, #48]	@ (800abec <stm32fxxx_flash_cr_inic+0x48>)
 800abbc:	4a0f      	ldr	r2, [pc, #60]	@ (800abfc <stm32fxxx_flash_cr_inic+0x58>)
 800abbe:	60da      	str	r2, [r3, #12]
	stm32fxxx_flash_cr.psize = STM32FXXXFLASH_cr_psize;
 800abc0:	4b0a      	ldr	r3, [pc, #40]	@ (800abec <stm32fxxx_flash_cr_inic+0x48>)
 800abc2:	4a0f      	ldr	r2, [pc, #60]	@ (800ac00 <stm32fxxx_flash_cr_inic+0x5c>)
 800abc4:	611a      	str	r2, [r3, #16]
	stm32fxxx_flash_cr.snb = STM32FXXXFLASH_cr_snb;
 800abc6:	4b09      	ldr	r3, [pc, #36]	@ (800abec <stm32fxxx_flash_cr_inic+0x48>)
 800abc8:	4a0e      	ldr	r2, [pc, #56]	@ (800ac04 <stm32fxxx_flash_cr_inic+0x60>)
 800abca:	615a      	str	r2, [r3, #20]
	stm32fxxx_flash_cr.mer = STM32FXXXFLASH_cr_mer;
 800abcc:	4b07      	ldr	r3, [pc, #28]	@ (800abec <stm32fxxx_flash_cr_inic+0x48>)
 800abce:	4a0e      	ldr	r2, [pc, #56]	@ (800ac08 <stm32fxxx_flash_cr_inic+0x64>)
 800abd0:	619a      	str	r2, [r3, #24]
	stm32fxxx_flash_cr.ser = STM32FXXXFLASH_cr_ser;
 800abd2:	4b06      	ldr	r3, [pc, #24]	@ (800abec <stm32fxxx_flash_cr_inic+0x48>)
 800abd4:	4a0d      	ldr	r2, [pc, #52]	@ (800ac0c <stm32fxxx_flash_cr_inic+0x68>)
 800abd6:	61da      	str	r2, [r3, #28]
	stm32fxxx_flash_cr.pg = STM32FXXXFLASH_cr_pg;
 800abd8:	4b04      	ldr	r3, [pc, #16]	@ (800abec <stm32fxxx_flash_cr_inic+0x48>)
 800abda:	4a0d      	ldr	r2, [pc, #52]	@ (800ac10 <stm32fxxx_flash_cr_inic+0x6c>)
 800abdc:	621a      	str	r2, [r3, #32]
	return &stm32fxxx_flash_cr;
 800abde:	4b03      	ldr	r3, [pc, #12]	@ (800abec <stm32fxxx_flash_cr_inic+0x48>)
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	20000930 	.word	0x20000930
 800abf0:	0800a7b9 	.word	0x0800a7b9
 800abf4:	0800a7d1 	.word	0x0800a7d1
 800abf8:	0800a7f5 	.word	0x0800a7f5
 800abfc:	0800a819 	.word	0x0800a819
 800ac00:	0800a831 	.word	0x0800a831
 800ac04:	0800a855 	.word	0x0800a855
 800ac08:	0800a879 	.word	0x0800a879
 800ac0c:	0800a89d 	.word	0x0800a89d
 800ac10:	0800a8c1 	.word	0x0800a8c1

0800ac14 <stm32fxxx_flash_optcr_inic>:
STM32FXXXFLASH_optcr* stm32fxxx_flash_optcr_inic(void)
{
 800ac14:	b480      	push	{r7}
 800ac16:	af00      	add	r7, sp, #0

	// OPTCR
	stm32fxxx_flash_optcr.sprmod = STM32FXXXFLASH_optcr_sprmod;
 800ac18:	4b13      	ldr	r3, [pc, #76]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac1a:	4a14      	ldr	r2, [pc, #80]	@ (800ac6c <stm32fxxx_flash_optcr_inic+0x58>)
 800ac1c:	601a      	str	r2, [r3, #0]
	stm32fxxx_flash_optcr.n_wrp = STM32FXXXFLASH_optcr_n_wrp;
 800ac1e:	4b12      	ldr	r3, [pc, #72]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac20:	4a13      	ldr	r2, [pc, #76]	@ (800ac70 <stm32fxxx_flash_optcr_inic+0x5c>)
 800ac22:	605a      	str	r2, [r3, #4]
	stm32fxxx_flash_optcr.get_n_wrp = STM32FXXXFLASH_optcr_get_n_wrp;
 800ac24:	4b10      	ldr	r3, [pc, #64]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac26:	4a13      	ldr	r2, [pc, #76]	@ (800ac74 <stm32fxxx_flash_optcr_inic+0x60>)
 800ac28:	609a      	str	r2, [r3, #8]
	stm32fxxx_flash_optcr.rdp = STM32FXXXFLASH_optcr_rdp;
 800ac2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac2c:	4a12      	ldr	r2, [pc, #72]	@ (800ac78 <stm32fxxx_flash_optcr_inic+0x64>)
 800ac2e:	60da      	str	r2, [r3, #12]
	stm32fxxx_flash_optcr.get_rdp = STM32FXXXFLASH_optcr_get_rdp;
 800ac30:	4b0d      	ldr	r3, [pc, #52]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac32:	4a12      	ldr	r2, [pc, #72]	@ (800ac7c <stm32fxxx_flash_optcr_inic+0x68>)
 800ac34:	611a      	str	r2, [r3, #16]
	stm32fxxx_flash_optcr.nrst_stdby = STM32FXXXFLASH_optcr_nrst_stdby;
 800ac36:	4b0c      	ldr	r3, [pc, #48]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac38:	4a11      	ldr	r2, [pc, #68]	@ (800ac80 <stm32fxxx_flash_optcr_inic+0x6c>)
 800ac3a:	615a      	str	r2, [r3, #20]
	stm32fxxx_flash_optcr.nrst_stop = STM32FXXXFLASH_optcr_nrst_stop;
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac3e:	4a11      	ldr	r2, [pc, #68]	@ (800ac84 <stm32fxxx_flash_optcr_inic+0x70>)
 800ac40:	619a      	str	r2, [r3, #24]
	stm32fxxx_flash_optcr.wdg_sw = STM32FXXXFLASH_optcr_wdg_sw;
 800ac42:	4b09      	ldr	r3, [pc, #36]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac44:	4a10      	ldr	r2, [pc, #64]	@ (800ac88 <stm32fxxx_flash_optcr_inic+0x74>)
 800ac46:	61da      	str	r2, [r3, #28]
	stm32fxxx_flash_optcr.bor_lev = STM32FXXXFLASH_optcr_bor_lev;
 800ac48:	4b07      	ldr	r3, [pc, #28]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac4a:	4a10      	ldr	r2, [pc, #64]	@ (800ac8c <stm32fxxx_flash_optcr_inic+0x78>)
 800ac4c:	621a      	str	r2, [r3, #32]
	stm32fxxx_flash_optcr.optstrt = STM32FXXXFLASH_optcr_optstrt;
 800ac4e:	4b06      	ldr	r3, [pc, #24]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac50:	4a0f      	ldr	r2, [pc, #60]	@ (800ac90 <stm32fxxx_flash_optcr_inic+0x7c>)
 800ac52:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_flash_optcr.optlock = STM32FXXXFLASH_optcr_optlock;
 800ac54:	4b04      	ldr	r3, [pc, #16]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
 800ac56:	4a0f      	ldr	r2, [pc, #60]	@ (800ac94 <stm32fxxx_flash_optcr_inic+0x80>)
 800ac58:	629a      	str	r2, [r3, #40]	@ 0x28
	return &stm32fxxx_flash_optcr;
 800ac5a:	4b03      	ldr	r3, [pc, #12]	@ (800ac68 <stm32fxxx_flash_optcr_inic+0x54>)
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	20000954 	.word	0x20000954
 800ac6c:	0800a8e5 	.word	0x0800a8e5
 800ac70:	0800a909 	.word	0x0800a909
 800ac74:	0800a92d 	.word	0x0800a92d
 800ac78:	0800a94d 	.word	0x0800a94d
 800ac7c:	0800a975 	.word	0x0800a975
 800ac80:	0800a995 	.word	0x0800a995
 800ac84:	0800a9b9 	.word	0x0800a9b9
 800ac88:	0800a9dd 	.word	0x0800a9dd
 800ac8c:	0800aa01 	.word	0x0800aa01
 800ac90:	0800aa25 	.word	0x0800aa25
 800ac94:	0800aa49 	.word	0x0800aa49

0800ac98 <flash_enable>:
/*** INIC Procedure & Function Definition ***/
STM32FXXXFLASHobj* flash_enable(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	af00      	add	r7, sp, #0



	/*** FLASH Bit Mapping Link ***/
	stm32fxxx_flash.acr = stm32fxxx_flash_acr_inic();
 800ac9c:	f7ff ff04 	bl	800aaa8 <stm32fxxx_flash_acr_inic>
 800aca0:	4603      	mov	r3, r0
 800aca2:	4a0e      	ldr	r2, [pc, #56]	@ (800acdc <flash_enable+0x44>)
 800aca4:	6013      	str	r3, [r2, #0]
	stm32fxxx_flash.sr = stm32fxxx_flash_sr_inic();
 800aca6:	f7ff ff27 	bl	800aaf8 <stm32fxxx_flash_sr_inic>
 800acaa:	4603      	mov	r3, r0
 800acac:	4a0b      	ldr	r2, [pc, #44]	@ (800acdc <flash_enable+0x44>)
 800acae:	6053      	str	r3, [r2, #4]
	stm32fxxx_flash.cr = stm32fxxx_flash_cr_inic();
 800acb0:	f7ff ff78 	bl	800aba4 <stm32fxxx_flash_cr_inic>
 800acb4:	4603      	mov	r3, r0
 800acb6:	4a09      	ldr	r2, [pc, #36]	@ (800acdc <flash_enable+0x44>)
 800acb8:	6093      	str	r3, [r2, #8]
	stm32fxxx_flash.optcr = stm32fxxx_flash_optcr_inic();
 800acba:	f7ff ffab 	bl	800ac14 <stm32fxxx_flash_optcr_inic>
 800acbe:	4603      	mov	r3, r0
 800acc0:	4a06      	ldr	r2, [pc, #24]	@ (800acdc <flash_enable+0x44>)
 800acc2:	60d3      	str	r3, [r2, #12]
	stm32fxxx_flash.keyr = STM32FXXXFLASH_keyr_key;
 800acc4:	4b05      	ldr	r3, [pc, #20]	@ (800acdc <flash_enable+0x44>)
 800acc6:	4a06      	ldr	r2, [pc, #24]	@ (800ace0 <flash_enable+0x48>)
 800acc8:	611a      	str	r2, [r3, #16]
	stm32fxxx_flash.optkeyr = STM32FXXXFLASH_optkeyr_optkey;
 800acca:	4b04      	ldr	r3, [pc, #16]	@ (800acdc <flash_enable+0x44>)
 800accc:	4a05      	ldr	r2, [pc, #20]	@ (800ace4 <flash_enable+0x4c>)
 800acce:	615a      	str	r2, [r3, #20]
	stm32fxxx_flash.nvic = STM32FXXXFLASH_nvic;
 800acd0:	4b02      	ldr	r3, [pc, #8]	@ (800acdc <flash_enable+0x44>)
 800acd2:	4a05      	ldr	r2, [pc, #20]	@ (800ace8 <flash_enable+0x50>)
 800acd4:	619a      	str	r2, [r3, #24]

	return &stm32fxxx_flash;
 800acd6:	4b01      	ldr	r3, [pc, #4]	@ (800acdc <flash_enable+0x44>)
}
 800acd8:	4618      	mov	r0, r3
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	20000980 	.word	0x20000980
 800ace0:	0800a5d1 	.word	0x0800a5d1
 800ace4:	0800a5f1 	.word	0x0800a5f1
 800ace8:	0800aa6d 	.word	0x0800aa6d

0800acec <STM32FXXXGpioAclock>:
static STM32FXXX_GPIOH stm32fxxx_gpioh;

/*** GPIO Procedure & Function Definition ***/
/*** GPIOA ***/
void STM32FXXXGpioAclock( uint8_t bool )
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->AHB1ENR |= (1 << 0); } else{ RCC->AHB1ENR &= ~(1 << 0); }
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d006      	beq.n	800ad0a <STM32FXXXGpioAclock+0x1e>
 800acfc:	4b09      	ldr	r3, [pc, #36]	@ (800ad24 <STM32FXXXGpioAclock+0x38>)
 800acfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad00:	4a08      	ldr	r2, [pc, #32]	@ (800ad24 <STM32FXXXGpioAclock+0x38>)
 800ad02:	f043 0301 	orr.w	r3, r3, #1
 800ad06:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ad08:	e005      	b.n	800ad16 <STM32FXXXGpioAclock+0x2a>
	if(bool){ RCC->AHB1ENR |= (1 << 0); } else{ RCC->AHB1ENR &= ~(1 << 0); }
 800ad0a:	4b06      	ldr	r3, [pc, #24]	@ (800ad24 <STM32FXXXGpioAclock+0x38>)
 800ad0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad0e:	4a05      	ldr	r2, [pc, #20]	@ (800ad24 <STM32FXXXGpioAclock+0x38>)
 800ad10:	f023 0301 	bic.w	r3, r3, #1
 800ad14:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ad16:	bf00      	nop
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	40023800 	.word	0x40023800

0800ad28 <STM32FXXXGpioBclock>:
		GPIOA->AFR[index] |= ( data << ((pin * blocksize) - (index * n_bits)) );
	}
}
/*** GPIOB ***/
void STM32FXXXGpioBclock( uint8_t bool )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	4603      	mov	r3, r0
 800ad30:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->AHB1ENR |= (1 << 1); } else{ RCC->AHB1ENR &= ~(1 << 1); }
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d006      	beq.n	800ad46 <STM32FXXXGpioBclock+0x1e>
 800ad38:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <STM32FXXXGpioBclock+0x38>)
 800ad3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad3c:	4a08      	ldr	r2, [pc, #32]	@ (800ad60 <STM32FXXXGpioBclock+0x38>)
 800ad3e:	f043 0302 	orr.w	r3, r3, #2
 800ad42:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ad44:	e005      	b.n	800ad52 <STM32FXXXGpioBclock+0x2a>
	if(bool){ RCC->AHB1ENR |= (1 << 1); } else{ RCC->AHB1ENR &= ~(1 << 1); }
 800ad46:	4b06      	ldr	r3, [pc, #24]	@ (800ad60 <STM32FXXXGpioBclock+0x38>)
 800ad48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad4a:	4a05      	ldr	r2, [pc, #20]	@ (800ad60 <STM32FXXXGpioBclock+0x38>)
 800ad4c:	f023 0302 	bic.w	r3, r3, #2
 800ad50:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ad52:	bf00      	nop
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	40023800 	.word	0x40023800

0800ad64 <STM32FXXXGpioCclock>:
		GPIOB->AFR[index] |= ( data << ((pin * blocksize) - (index * n_bits)) );
	}
}
/*** GPIOC ***/
void STM32FXXXGpioCclock( uint8_t bool )
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->AHB1ENR |= (1 << 2); } else{ RCC->AHB1ENR &= ~(1 << 2); }
 800ad6e:	79fb      	ldrb	r3, [r7, #7]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d006      	beq.n	800ad82 <STM32FXXXGpioCclock+0x1e>
 800ad74:	4b09      	ldr	r3, [pc, #36]	@ (800ad9c <STM32FXXXGpioCclock+0x38>)
 800ad76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad78:	4a08      	ldr	r2, [pc, #32]	@ (800ad9c <STM32FXXXGpioCclock+0x38>)
 800ad7a:	f043 0304 	orr.w	r3, r3, #4
 800ad7e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ad80:	e005      	b.n	800ad8e <STM32FXXXGpioCclock+0x2a>
	if(bool){ RCC->AHB1ENR |= (1 << 2); } else{ RCC->AHB1ENR &= ~(1 << 2); }
 800ad82:	4b06      	ldr	r3, [pc, #24]	@ (800ad9c <STM32FXXXGpioCclock+0x38>)
 800ad84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad86:	4a05      	ldr	r2, [pc, #20]	@ (800ad9c <STM32FXXXGpioCclock+0x38>)
 800ad88:	f023 0304 	bic.w	r3, r3, #4
 800ad8c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ad8e:	bf00      	nop
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	40023800 	.word	0x40023800

0800ada0 <STM32FXXXGpioDclock>:
		GPIOC->AFR[index] |= ( data << ((pin * blocksize) - (index * n_bits)) );
	}
}
/*** GPIOD ***/
void STM32FXXXGpioDclock( uint8_t bool )
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->AHB1ENR |= (1 << 3); } else{ RCC->AHB1ENR &= ~(1 << 3); }
 800adaa:	79fb      	ldrb	r3, [r7, #7]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d006      	beq.n	800adbe <STM32FXXXGpioDclock+0x1e>
 800adb0:	4b09      	ldr	r3, [pc, #36]	@ (800add8 <STM32FXXXGpioDclock+0x38>)
 800adb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adb4:	4a08      	ldr	r2, [pc, #32]	@ (800add8 <STM32FXXXGpioDclock+0x38>)
 800adb6:	f043 0308 	orr.w	r3, r3, #8
 800adba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800adbc:	e005      	b.n	800adca <STM32FXXXGpioDclock+0x2a>
	if(bool){ RCC->AHB1ENR |= (1 << 3); } else{ RCC->AHB1ENR &= ~(1 << 3); }
 800adbe:	4b06      	ldr	r3, [pc, #24]	@ (800add8 <STM32FXXXGpioDclock+0x38>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc2:	4a05      	ldr	r2, [pc, #20]	@ (800add8 <STM32FXXXGpioDclock+0x38>)
 800adc4:	f023 0308 	bic.w	r3, r3, #8
 800adc8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800adca:	bf00      	nop
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	40023800 	.word	0x40023800

0800addc <STM32FXXXGpioEclock>:
		GPIOD->AFR[index] |= ( data << ((pin * blocksize) - (index * n_bits)) );
	}
}
/*** GPIOE ***/
void STM32FXXXGpioEclock( uint8_t bool )
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->AHB1ENR |= (1 << 4); } else{ RCC->AHB1ENR &= ~(1 << 4); }
 800ade6:	79fb      	ldrb	r3, [r7, #7]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d006      	beq.n	800adfa <STM32FXXXGpioEclock+0x1e>
 800adec:	4b09      	ldr	r3, [pc, #36]	@ (800ae14 <STM32FXXXGpioEclock+0x38>)
 800adee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf0:	4a08      	ldr	r2, [pc, #32]	@ (800ae14 <STM32FXXXGpioEclock+0x38>)
 800adf2:	f043 0310 	orr.w	r3, r3, #16
 800adf6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800adf8:	e005      	b.n	800ae06 <STM32FXXXGpioEclock+0x2a>
	if(bool){ RCC->AHB1ENR |= (1 << 4); } else{ RCC->AHB1ENR &= ~(1 << 4); }
 800adfa:	4b06      	ldr	r3, [pc, #24]	@ (800ae14 <STM32FXXXGpioEclock+0x38>)
 800adfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adfe:	4a05      	ldr	r2, [pc, #20]	@ (800ae14 <STM32FXXXGpioEclock+0x38>)
 800ae00:	f023 0310 	bic.w	r3, r3, #16
 800ae04:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ae06:	bf00      	nop
 800ae08:	370c      	adds	r7, #12
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	40023800 	.word	0x40023800

0800ae18 <STM32FXXXGpioHclock>:
	}
}
#endif
/*** GPIOH ***/
void STM32FXXXGpioHclock( uint8_t bool )
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->AHB1ENR |= (1 << 7); } else{ RCC->AHB1ENR &= ~(1 << 7); }
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d006      	beq.n	800ae36 <STM32FXXXGpioHclock+0x1e>
 800ae28:	4b09      	ldr	r3, [pc, #36]	@ (800ae50 <STM32FXXXGpioHclock+0x38>)
 800ae2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae2c:	4a08      	ldr	r2, [pc, #32]	@ (800ae50 <STM32FXXXGpioHclock+0x38>)
 800ae2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae32:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ae34:	e005      	b.n	800ae42 <STM32FXXXGpioHclock+0x2a>
	if(bool){ RCC->AHB1ENR |= (1 << 7); } else{ RCC->AHB1ENR &= ~(1 << 7); }
 800ae36:	4b06      	ldr	r3, [pc, #24]	@ (800ae50 <STM32FXXXGpioHclock+0x38>)
 800ae38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3a:	4a05      	ldr	r2, [pc, #20]	@ (800ae50 <STM32FXXXGpioHclock+0x38>)
 800ae3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae40:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ae42:	bf00      	nop
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	40023800 	.word	0x40023800

0800ae54 <gpioa_enable>:
		GPIOH->AFR[index] |= ( data << ((pin * blocksize) - (index * n_bits)) );
	}
}
/*** INIC Procedure & Function Definition ***/
STM32FXXX_GPIOA* gpioa_enable(void)
{
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0
	/*** GPIOA Bit Mapping Link ***/
	stm32fxxx_gpioa.instance = (STM32FXXXGPIOX_TypeDef*) GPIOA;
 800ae58:	4b05      	ldr	r3, [pc, #20]	@ (800ae70 <gpioa_enable+0x1c>)
 800ae5a:	4a06      	ldr	r2, [pc, #24]	@ (800ae74 <gpioa_enable+0x20>)
 800ae5c:	601a      	str	r2, [r3, #0]
	/*** GPIOA RCC Clock Enable ***/
	stm32fxxx_gpioa.clock = STM32FXXXGpioAclock;
 800ae5e:	4b04      	ldr	r3, [pc, #16]	@ (800ae70 <gpioa_enable+0x1c>)
 800ae60:	4a05      	ldr	r2, [pc, #20]	@ (800ae78 <gpioa_enable+0x24>)
 800ae62:	605a      	str	r2, [r3, #4]
	/*** Other ***/
	return &stm32fxxx_gpioa;
 800ae64:	4b02      	ldr	r3, [pc, #8]	@ (800ae70 <gpioa_enable+0x1c>)
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	2000099c 	.word	0x2000099c
 800ae74:	40020000 	.word	0x40020000
 800ae78:	0800aced 	.word	0x0800aced

0800ae7c <gpioa>:

STM32FXXX_GPIOA* gpioa(void){ return &stm32fxxx_gpioa; }
 800ae7c:	b480      	push	{r7}
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	4b02      	ldr	r3, [pc, #8]	@ (800ae8c <gpioa+0x10>)
 800ae82:	4618      	mov	r0, r3
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	2000099c 	.word	0x2000099c

0800ae90 <gpiob_enable>:

STM32FXXX_GPIOB* gpiob_enable(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	af00      	add	r7, sp, #0
	/*** GPIOB Bit Mapping Link ***/
	stm32fxxx_gpiob.instance = (STM32FXXXGPIOX_TypeDef*) GPIOB;
 800ae94:	4b05      	ldr	r3, [pc, #20]	@ (800aeac <gpiob_enable+0x1c>)
 800ae96:	4a06      	ldr	r2, [pc, #24]	@ (800aeb0 <gpiob_enable+0x20>)
 800ae98:	601a      	str	r2, [r3, #0]
	/*** GPIOB RCC Clock Enable ***/
	stm32fxxx_gpiob.clock = STM32FXXXGpioBclock;
 800ae9a:	4b04      	ldr	r3, [pc, #16]	@ (800aeac <gpiob_enable+0x1c>)
 800ae9c:	4a05      	ldr	r2, [pc, #20]	@ (800aeb4 <gpiob_enable+0x24>)
 800ae9e:	605a      	str	r2, [r3, #4]
	/*** Other ***/
	return &stm32fxxx_gpiob;
 800aea0:	4b02      	ldr	r3, [pc, #8]	@ (800aeac <gpiob_enable+0x1c>)
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	200009a4 	.word	0x200009a4
 800aeb0:	40020400 	.word	0x40020400
 800aeb4:	0800ad29 	.word	0x0800ad29

0800aeb8 <gpiob>:

STM32FXXX_GPIOB* gpiob(void){ return &stm32fxxx_gpiob; }
 800aeb8:	b480      	push	{r7}
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	4b02      	ldr	r3, [pc, #8]	@ (800aec8 <gpiob+0x10>)
 800aebe:	4618      	mov	r0, r3
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr
 800aec8:	200009a4 	.word	0x200009a4

0800aecc <gpioc_enable>:

STM32FXXX_GPIOC* gpioc_enable(void)
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
	/*** GPIOC Bit Mapping Link ***/
	stm32fxxx_gpioc.instance = (STM32FXXXGPIOX_TypeDef*) GPIOC;
 800aed0:	4b05      	ldr	r3, [pc, #20]	@ (800aee8 <gpioc_enable+0x1c>)
 800aed2:	4a06      	ldr	r2, [pc, #24]	@ (800aeec <gpioc_enable+0x20>)
 800aed4:	601a      	str	r2, [r3, #0]
	/*** GPIOC RCC Clock Enable ***/
	stm32fxxx_gpioc.clock = STM32FXXXGpioCclock;
 800aed6:	4b04      	ldr	r3, [pc, #16]	@ (800aee8 <gpioc_enable+0x1c>)
 800aed8:	4a05      	ldr	r2, [pc, #20]	@ (800aef0 <gpioc_enable+0x24>)
 800aeda:	605a      	str	r2, [r3, #4]
	/*** Other ***/
	return &stm32fxxx_gpioc;
 800aedc:	4b02      	ldr	r3, [pc, #8]	@ (800aee8 <gpioc_enable+0x1c>)
}
 800aede:	4618      	mov	r0, r3
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	200009ac 	.word	0x200009ac
 800aeec:	40020800 	.word	0x40020800
 800aef0:	0800ad65 	.word	0x0800ad65

0800aef4 <gpioc>:

STM32FXXX_GPIOC* gpioc(void){ return &stm32fxxx_gpioc; }
 800aef4:	b480      	push	{r7}
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	4b02      	ldr	r3, [pc, #8]	@ (800af04 <gpioc+0x10>)
 800aefa:	4618      	mov	r0, r3
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	200009ac 	.word	0x200009ac

0800af08 <gpiod_enable>:

STM32FXXX_GPIOD* gpiod_enable(void)
{
 800af08:	b480      	push	{r7}
 800af0a:	af00      	add	r7, sp, #0
	/*** GPIOD Bit Mapping Link ***/
	stm32fxxx_gpiod.instance = (STM32FXXXGPIOX_TypeDef*) GPIOD;
 800af0c:	4b05      	ldr	r3, [pc, #20]	@ (800af24 <gpiod_enable+0x1c>)
 800af0e:	4a06      	ldr	r2, [pc, #24]	@ (800af28 <gpiod_enable+0x20>)
 800af10:	601a      	str	r2, [r3, #0]
	/*** GPIOD RCC Clock Enable ***/
	stm32fxxx_gpiod.clock = STM32FXXXGpioDclock;
 800af12:	4b04      	ldr	r3, [pc, #16]	@ (800af24 <gpiod_enable+0x1c>)
 800af14:	4a05      	ldr	r2, [pc, #20]	@ (800af2c <gpiod_enable+0x24>)
 800af16:	605a      	str	r2, [r3, #4]
	/*** Other ***/
	return &stm32fxxx_gpiod;
 800af18:	4b02      	ldr	r3, [pc, #8]	@ (800af24 <gpiod_enable+0x1c>)
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	200009b4 	.word	0x200009b4
 800af28:	40020c00 	.word	0x40020c00
 800af2c:	0800ada1 	.word	0x0800ada1

0800af30 <gpioe_enable>:

STM32FXXX_GPIOD* gpiod(void){ return &stm32fxxx_gpiod; }

STM32FXXX_GPIOE* gpioe_enable(void)
{
 800af30:	b480      	push	{r7}
 800af32:	af00      	add	r7, sp, #0
	/*** GPIOE Bit Mapping Link ***/
	stm32fxxx_gpioe.instance = (STM32FXXXGPIOX_TypeDef*) GPIOE;
 800af34:	4b05      	ldr	r3, [pc, #20]	@ (800af4c <gpioe_enable+0x1c>)
 800af36:	4a06      	ldr	r2, [pc, #24]	@ (800af50 <gpioe_enable+0x20>)
 800af38:	601a      	str	r2, [r3, #0]
	/*** GPIOE RCC Clock Enable ***/
	stm32fxxx_gpioe.clock = STM32FXXXGpioEclock;
 800af3a:	4b04      	ldr	r3, [pc, #16]	@ (800af4c <gpioe_enable+0x1c>)
 800af3c:	4a05      	ldr	r2, [pc, #20]	@ (800af54 <gpioe_enable+0x24>)
 800af3e:	605a      	str	r2, [r3, #4]
	/*** Other ***/
	return &stm32fxxx_gpioe;
 800af40:	4b02      	ldr	r3, [pc, #8]	@ (800af4c <gpioe_enable+0x1c>)
}
 800af42:	4618      	mov	r0, r3
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	200009bc 	.word	0x200009bc
 800af50:	40021000 	.word	0x40021000
 800af54:	0800addd 	.word	0x0800addd

0800af58 <gpioh_enable>:

STM32FXXX_GPIOG* gpiog(void){ return &stm32fxxx_gpiog; }
#endif

STM32FXXX_GPIOH* gpioh_enable(void)
{
 800af58:	b480      	push	{r7}
 800af5a:	af00      	add	r7, sp, #0
	/*** GPIOH Bit Mapping Link ***/
	stm32fxxx_gpioh.instance = (STM32FXXXGPIOX_TypeDef*) GPIOH;
 800af5c:	4b05      	ldr	r3, [pc, #20]	@ (800af74 <gpioh_enable+0x1c>)
 800af5e:	4a06      	ldr	r2, [pc, #24]	@ (800af78 <gpioh_enable+0x20>)
 800af60:	601a      	str	r2, [r3, #0]
	/*** GPIOH RCC Clock Enable ***/
	stm32fxxx_gpioh.clock = STM32FXXXGpioHclock;
 800af62:	4b04      	ldr	r3, [pc, #16]	@ (800af74 <gpioh_enable+0x1c>)
 800af64:	4a05      	ldr	r2, [pc, #20]	@ (800af7c <gpioh_enable+0x24>)
 800af66:	605a      	str	r2, [r3, #4]
	/*** Other ***/
	return &stm32fxxx_gpioh;
 800af68:	4b02      	ldr	r3, [pc, #8]	@ (800af74 <gpioh_enable+0x1c>)
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	200009c4 	.word	0x200009c4
 800af78:	40021c00 	.word	0x40021c00
 800af7c:	0800ae19 	.word	0x0800ae19

0800af80 <adc_common_instance>:

/*** HARDWARE HANDLER ***/
/*** ADC ***/
#ifdef __STM32F411xE_H
//ADC_Common_TypeDef* adc_common_instance(void){return (ADC_Common_TypeDef*) ADC1_COMMON_BASE;}
STM32FXXXADC_COMMON_TypeDef* adc_common_instance(void){return (STM32FXXXADC_COMMON_TypeDef*) ADC1_COMMON_BASE;}
 800af80:	b480      	push	{r7}
 800af82:	af00      	add	r7, sp, #0
 800af84:	4b02      	ldr	r3, [pc, #8]	@ (800af90 <adc_common_instance+0x10>)
 800af86:	4618      	mov	r0, r3
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	40012300 	.word	0x40012300

0800af94 <adc1_instance>:
#endif
#ifdef __STM32F446xx_H
ADC_Common_TypeDef* adc_common_instance(void){return (ADC_Common_TypeDef*) ADC123_COMMON_BASE;}
#endif
//ADC_TypeDef* adc1_instance(void){return (ADC_TypeDef*) ADC1_BASE;}
STM32FXXXADC_TypeDef* adc1_instance(void){return (STM32FXXXADC_TypeDef*) ADC1_BASE;}
 800af94:	b480      	push	{r7}
 800af96:	af00      	add	r7, sp, #0
 800af98:	4b02      	ldr	r3, [pc, #8]	@ (800afa4 <adc1_instance+0x10>)
 800af9a:	4618      	mov	r0, r3
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	40012000 	.word	0x40012000

0800afa8 <flash_instance>:
DMA_Stream_TypeDef* dma2_stream6_instance(void){return (DMA_Stream_TypeDef*) DMA2_Stream6_BASE;}
DMA_Stream_TypeDef* dma2_stream7_instance(void){return (DMA_Stream_TypeDef*) DMA2_Stream7_BASE;}
/*** EXTI ***/
EXTI_TypeDef* exti_instance(void){return (EXTI_TypeDef*) EXTI_BASE;}
/*** FLASH ***/
FLASH_TypeDef* flash_instance(void){return (FLASH_TypeDef*) FLASH_R_BASE;}
 800afa8:	b480      	push	{r7}
 800afaa:	af00      	add	r7, sp, #0
 800afac:	4b02      	ldr	r3, [pc, #8]	@ (800afb8 <flash_instance+0x10>)
 800afae:	4618      	mov	r0, r3
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	40023c00 	.word	0x40023c00

0800afbc <i2c1_instance>:
SYSCFG_TypeDef* syscfg_instance(void){return (SYSCFG_TypeDef*) SYSCFG_BASE;}
/*** I2C ***/
//I2C_TypeDef* i2c1_instance(void){return (I2C_TypeDef*) I2C1_BASE;}
//I2C_TypeDef* i2c2_instance(void){return (I2C_TypeDef*) I2C2_BASE;}
//I2C_TypeDef* i2c3_instance(void){return (I2C_TypeDef*) I2C3_BASE;}
STM32FXXXI2C_TypeDef* i2c1_instance(void){return (STM32FXXXI2C_TypeDef*) I2C1_BASE;}
 800afbc:	b480      	push	{r7}
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	4b02      	ldr	r3, [pc, #8]	@ (800afcc <i2c1_instance+0x10>)
 800afc2:	4618      	mov	r0, r3
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	40005400 	.word	0x40005400

0800afd0 <rcc_instance>:
IWDG_TypeDef* iwdg_instance(void){return (IWDG_TypeDef*) IWDG_BASE;}
/*** PWR ***/
PWR_TypeDef* pwr_instance(void){return (PWR_TypeDef*) PWR_BASE;}
/*** RCC ***/
//RCC_TypeDef* rcc_instance(void){return (RCC_TypeDef*) RCC_BASE;}
STM32FXXXRCC_TypeDef* rcc_instance(void){return (STM32FXXXRCC_TypeDef*) RCC_BASE;}
 800afd0:	b480      	push	{r7}
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	4b02      	ldr	r3, [pc, #8]	@ (800afe0 <rcc_instance+0x10>)
 800afd6:	4618      	mov	r0, r3
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	40023800 	.word	0x40023800

0800afe4 <tim1_instance>:
//TIM_TypeDef* tim1_instance(void){return (TIM_TypeDef*) TIM1_BASE;}
//TIM_TypeDef* tim2_instance(void){return (TIM_TypeDef*) TIM2_BASE;}
//TIM_TypeDef* tim3_instance(void){return (TIM_TypeDef*) TIM3_BASE;}
//TIM_TypeDef* tim4_instance(void){return (TIM_TypeDef*) TIM4_BASE;}
//TIM_TypeDef* tim5_instance(void){return (TIM_TypeDef*) TIM5_BASE;}
STM32FXXXTIMXX_TypeDef* tim1_instance(void){return (STM32FXXXTIMXX_TypeDef*) TIM1_BASE;}
 800afe4:	b480      	push	{r7}
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	4b02      	ldr	r3, [pc, #8]	@ (800aff4 <tim1_instance+0x10>)
 800afea:	4618      	mov	r0, r3
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr
 800aff4:	40010000 	.word	0x40010000

0800aff8 <tim2_instance>:
STM32FXXXTIMXX_TypeDef* tim2_instance(void){return (STM32FXXXTIMXX_TypeDef*) TIM2_BASE;}
 800aff8:	b480      	push	{r7}
 800affa:	af00      	add	r7, sp, #0
 800affc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b000:	4618      	mov	r0, r3
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
	...

0800b00c <tim3_instance>:
STM32FXXXTIMXX_TypeDef* tim3_instance(void){return (STM32FXXXTIMXX_TypeDef*) TIM3_BASE;}
 800b00c:	b480      	push	{r7}
 800b00e:	af00      	add	r7, sp, #0
 800b010:	4b02      	ldr	r3, [pc, #8]	@ (800b01c <tim3_instance+0x10>)
 800b012:	4618      	mov	r0, r3
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	40000400 	.word	0x40000400

0800b020 <tim4_instance>:
STM32FXXXTIMXX_TypeDef* tim4_instance(void){return (STM32FXXXTIMXX_TypeDef*) TIM4_BASE;}
 800b020:	b480      	push	{r7}
 800b022:	af00      	add	r7, sp, #0
 800b024:	4b02      	ldr	r3, [pc, #8]	@ (800b030 <tim4_instance+0x10>)
 800b026:	4618      	mov	r0, r3
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	40000800 	.word	0x40000800

0800b034 <tim5_instance>:
STM32FXXXTIMXX_TypeDef* tim5_instance(void){return (STM32FXXXTIMXX_TypeDef*) TIM5_BASE;}
 800b034:	b480      	push	{r7}
 800b036:	af00      	add	r7, sp, #0
 800b038:	4b02      	ldr	r3, [pc, #8]	@ (800b044 <tim5_instance+0x10>)
 800b03a:	4618      	mov	r0, r3
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	40000c00 	.word	0x40000c00

0800b048 <tim9_instance>:
STM32FXXXTIMXX_TypeDef* tim8_instance(void){return (STM32FXXXTIMXX_TypeDef*) TIM8_BASE;}
#endif
//TIM_TypeDef* tim9_instance(void){return (TIM_TypeDef*) TIM9_BASE;}
//TIM_TypeDef* tim10_instance(void){return (TIM_TypeDef*) TIM10_BASE;}
//TIM_TypeDef* tim11_instance(void){return (TIM_TypeDef*) TIM11_BASE;}
STM32FXXXTIMXX_TypeDef* tim9_instance(void){return (STM32FXXXTIMXX_TypeDef*) TIM9_BASE;}
 800b048:	b480      	push	{r7}
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	4b02      	ldr	r3, [pc, #8]	@ (800b058 <tim9_instance+0x10>)
 800b04e:	4618      	mov	r0, r3
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	40014000 	.word	0x40014000

0800b05c <tim10_instance>:
STM32FXXXTIMXX_TypeDef* tim10_instance(void){return (STM32FXXXTIMXX_TypeDef*) TIM10_BASE;}
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
 800b060:	4b02      	ldr	r3, [pc, #8]	@ (800b06c <tim10_instance+0x10>)
 800b062:	4618      	mov	r0, r3
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	40014400 	.word	0x40014400

0800b070 <tim11_instance>:
STM32FXXXTIMXX_TypeDef* tim11_instance(void){return (STM32FXXXTIMXX_TypeDef*) TIM11_BASE;}
 800b070:	b480      	push	{r7}
 800b072:	af00      	add	r7, sp, #0
 800b074:	4b02      	ldr	r3, [pc, #8]	@ (800b080 <tim11_instance+0x10>)
 800b076:	4618      	mov	r0, r3
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr
 800b080:	40014800 	.word	0x40014800

0800b084 <usart1_instance>:
STM32FXXXTIMXX_TypeDef* tim14_instance(void){return (STM32FXXXTIMXX_TypeDef*) TIM14_BASE;}
#endif
/*** USART ***/
//USART_TypeDef* usart1_instance(void){return (USART_TypeDef*) USART1_BASE;}
//USART_TypeDef* usart2_instance(void){return (USART_TypeDef*) USART2_BASE;}
TM32FXXXUSARTX_TypeDef* usart1_instance(void){return (TM32FXXXUSARTX_TypeDef*) USART1_BASE;}
 800b084:	b480      	push	{r7}
 800b086:	af00      	add	r7, sp, #0
 800b088:	4b02      	ldr	r3, [pc, #8]	@ (800b094 <usart1_instance+0x10>)
 800b08a:	4618      	mov	r0, r3
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr
 800b094:	40011000 	.word	0x40011000

0800b098 <usart2_instance>:
TM32FXXXUSARTX_TypeDef* usart2_instance(void){return (TM32FXXXUSARTX_TypeDef*) USART2_BASE;}
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	4b02      	ldr	r3, [pc, #8]	@ (800b0a8 <usart2_instance+0x10>)
 800b09e:	4618      	mov	r0, r3
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	40004400 	.word	0x40004400

0800b0ac <usart6_instance>:
TM32FXXXUSARTX_TypeDef* usart3_instance(void){return (TM32FXXXUSARTX_TypeDef*) USART3_BASE;}
TM32FXXXUSARTX_TypeDef* uart4_instance(void){return (TM32FXXXUSARTX_TypeDef*) UART4_BASE;}
TM32FXXXUSARTX_TypeDef* uart5_instance(void){return (TM32FXXXUSARTX_TypeDef*) UART5_BASE;}
#endif
//USART_TypeDef* usart6_instance(void){return (USART_TypeDef*) USART6_BASE;}
TM32FXXXUSARTX_TypeDef* usart6_instance(void){return (TM32FXXXUSARTX_TypeDef*) USART6_BASE;}
 800b0ac:	b480      	push	{r7}
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	4b02      	ldr	r3, [pc, #8]	@ (800b0bc <usart6_instance+0x10>)
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	40011400 	.word	0x40011400

0800b0c0 <STM32FXXX_enable>:

/*** File Variables ***/
static STM32FXXX stm32fxxx;

/******* STM32F446RE Procedure & Function Definition *******/
STM32FXXX* STM32FXXX_enable(void){
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af00      	add	r7, sp, #0
	/************* CORE ************/
	// SCB
	stm32fxxx.scb_instance = SCB;
 800b0c6:	4b62      	ldr	r3, [pc, #392]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b0c8:	4a62      	ldr	r2, [pc, #392]	@ (800b254 <STM32FXXX_enable+0x194>)
 800b0ca:	601a      	str	r2, [r3, #0]
	// SysTick
	stm32fxxx.systick_instance = SysTick;
 800b0cc:	4b60      	ldr	r3, [pc, #384]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b0ce:	4a62      	ldr	r2, [pc, #392]	@ (800b258 <STM32FXXX_enable+0x198>)
 800b0d0:	605a      	str	r2, [r3, #4]
	// NVIC
	stm32fxxx.nvic_instance = NVIC;
 800b0d2:	4b5f      	ldr	r3, [pc, #380]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b0d4:	4a61      	ldr	r2, [pc, #388]	@ (800b25c <STM32FXXX_enable+0x19c>)
 800b0d6:	609a      	str	r2, [r3, #8]
	#if defined(_STM32FXXXNVIC_H_)
		stm32fxxx.nvic = nvic_enable();
 800b0d8:	f000 f974 	bl	800b3c4 <nvic_enable>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	4a5c      	ldr	r2, [pc, #368]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b0e0:	60d3      	str	r3, [r2, #12]
	#endif
	/************ MCU ************/
	// ADC
	#if defined(_STM32FXXXADC1_H_)
		stm32fxxx.adc1 = adc1_enable();
 800b0e2:	f7f8 fd07 	bl	8003af4 <adc1_enable>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	4a59      	ldr	r2, [pc, #356]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b0ea:	6113      	str	r3, [r2, #16]
		#ifdef __STM32F446xx_H
			stm32fxxx.adc3 = adc3_enable();
		#endif
	#endif
	// CRC
	stm32fxxx.crc_instance = CRC;
 800b0ec:	4b58      	ldr	r3, [pc, #352]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b0ee:	4a5c      	ldr	r2, [pc, #368]	@ (800b260 <STM32FXXX_enable+0x1a0>)
 800b0f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if defined(_STM32FXXXCRC_H_)
		stm32fxxx.crc = crc_enable();
 800b0f2:	f7f8 fd6d 	bl	8003bd0 <crc_enable>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	4a55      	ldr	r2, [pc, #340]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b0fa:	6313      	str	r3, [r2, #48]	@ 0x30
	#endif
	// DMA
	#if defined(_STM32FXXXDMA_H_)
		stm32fxxx.dma1 = dma1_enable();
 800b0fc:	f7fb feb0 	bl	8006e60 <dma1_enable>
 800b100:	4603      	mov	r3, r0
 800b102:	4a53      	ldr	r2, [pc, #332]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b104:	6353      	str	r3, [r2, #52]	@ 0x34
		stm32fxxx.dma2 = dma2_enable();
 800b106:	f7ff f8c1 	bl	800a28c <dma2_enable>
 800b10a:	4603      	mov	r3, r0
 800b10c:	4a50      	ldr	r2, [pc, #320]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b10e:	6393      	str	r3, [r2, #56]	@ 0x38
	#endif
	// FLASH
	stm32fxxx.flash_instance = flash_instance();
 800b110:	f7ff ff4a 	bl	800afa8 <flash_instance>
 800b114:	4603      	mov	r3, r0
 800b116:	4a4e      	ldr	r2, [pc, #312]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b118:	63d3      	str	r3, [r2, #60]	@ 0x3c
	#if defined(_STM32FXXXFLASH_H_)
		stm32fxxx.flash = flash_enable();
 800b11a:	f7ff fdbd 	bl	800ac98 <flash_enable>
 800b11e:	4603      	mov	r3, r0
 800b120:	4a4b      	ldr	r2, [pc, #300]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b122:	6413      	str	r3, [r2, #64]	@ 0x40
	#endif
	// GPIO
	#if defined(_STM32FXXXGPIO_H_)
		stm32fxxx.gpioa = gpioa_enable();
 800b124:	f7ff fe96 	bl	800ae54 <gpioa_enable>
 800b128:	4603      	mov	r3, r0
 800b12a:	4a49      	ldr	r2, [pc, #292]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b12c:	6453      	str	r3, [r2, #68]	@ 0x44
		stm32fxxx.gpiob = gpiob_enable();
 800b12e:	f7ff feaf 	bl	800ae90 <gpiob_enable>
 800b132:	4603      	mov	r3, r0
 800b134:	4a46      	ldr	r2, [pc, #280]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b136:	6493      	str	r3, [r2, #72]	@ 0x48
		stm32fxxx.gpioc = gpioc_enable();
 800b138:	f7ff fec8 	bl	800aecc <gpioc_enable>
 800b13c:	4603      	mov	r3, r0
 800b13e:	4a44      	ldr	r2, [pc, #272]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b140:	64d3      	str	r3, [r2, #76]	@ 0x4c
		stm32fxxx.gpiod = gpiod_enable();
 800b142:	f7ff fee1 	bl	800af08 <gpiod_enable>
 800b146:	4603      	mov	r3, r0
 800b148:	4a41      	ldr	r2, [pc, #260]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b14a:	6513      	str	r3, [r2, #80]	@ 0x50
		stm32fxxx.gpioe = gpioe_enable();
 800b14c:	f7ff fef0 	bl	800af30 <gpioe_enable>
 800b150:	4603      	mov	r3, r0
 800b152:	4a3f      	ldr	r2, [pc, #252]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b154:	6553      	str	r3, [r2, #84]	@ 0x54
		stm32fxxx.gpioh = gpioh_enable();
 800b156:	f7ff feff 	bl	800af58 <gpioh_enable>
 800b15a:	4603      	mov	r3, r0
 800b15c:	4a3c      	ldr	r2, [pc, #240]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b15e:	6613      	str	r3, [r2, #96]	@ 0x60
	#endif
	// SYSCFG
	stm32fxxx.syscfg_instance = SYSCFG;
 800b160:	4b3b      	ldr	r3, [pc, #236]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b162:	4a40      	ldr	r2, [pc, #256]	@ (800b264 <STM32FXXX_enable+0x1a4>)
 800b164:	665a      	str	r2, [r3, #100]	@ 0x64
	#if defined(_STM32FXXXSYSCFG_H_)
		stm32fxxx.syscfg = syscfg_enable();
 800b166:	f002 f93b 	bl	800d3e0 <syscfg_enable>
 800b16a:	4603      	mov	r3, r0
 800b16c:	4a38      	ldr	r2, [pc, #224]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b16e:	6693      	str	r3, [r2, #104]	@ 0x68
	#endif
	// PWR
	stm32fxxx.pwr_instance = PWR;
 800b170:	4b37      	ldr	r3, [pc, #220]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b172:	4a3d      	ldr	r2, [pc, #244]	@ (800b268 <STM32FXXX_enable+0x1a8>)
 800b174:	66da      	str	r2, [r3, #108]	@ 0x6c
	#if defined(_STM32FXXXPWR_H_)
		stm32fxxx.pwr = pwr_enable();
 800b176:	f000 fc13 	bl	800b9a0 <pwr_enable>
 800b17a:	4603      	mov	r3, r0
 800b17c:	4a34      	ldr	r2, [pc, #208]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b17e:	6713      	str	r3, [r2, #112]	@ 0x70
	#endif
	// RCC
	stm32fxxx.rcc_instance = rcc_instance();
 800b180:	f7ff ff26 	bl	800afd0 <rcc_instance>
 800b184:	4603      	mov	r3, r0
 800b186:	4a32      	ldr	r2, [pc, #200]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b188:	6753      	str	r3, [r2, #116]	@ 0x74
	#if defined(_STM32FXXXRCC_H_)
		stm32fxxx.rcc = rcc_enable();
 800b18a:	f001 f823 	bl	800c1d4 <rcc_enable>
 800b18e:	4603      	mov	r3, r0
 800b190:	4a2f      	ldr	r2, [pc, #188]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b192:	6793      	str	r3, [r2, #120]	@ 0x78
	#endif
	// RTC
	stm32fxxx.rtc_instance = RTC;
 800b194:	4b2e      	ldr	r3, [pc, #184]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b196:	4a35      	ldr	r2, [pc, #212]	@ (800b26c <STM32FXXX_enable+0x1ac>)
 800b198:	67da      	str	r2, [r3, #124]	@ 0x7c
	#if defined(_STM32FXXXRTC_H_)
		stm32fxxx.rtc = rtc_enable();
 800b19a:	f001 f859 	bl	800c250 <rtc_enable>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	4a2b      	ldr	r2, [pc, #172]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b1a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
	#endif
	// SRAM
	#if defined(_STM32FXXXSRAM_H_)
		stm32fxxx.sram = sram_enable();
 800b1a6:	f001 fe77 	bl	800ce98 <sram_enable>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	4a28      	ldr	r2, [pc, #160]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b1ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
	#endif
	// TIM
	#if defined(_STM32FXXXTIM1AND8_H_)
		stm32fxxx.tim1 = tim1_enable();
 800b1b2:	f002 f9d3 	bl	800d55c <tim1_enable>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	4a25      	ldr	r2, [pc, #148]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b1ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
		#ifdef __STM32F446xx_H
			stm32fxxx.tim8 = tim8_enable();
		#endif
	#endif
	#if defined(_STM32FXXXTIM2TO5_H_)
		stm32fxxx.tim2 = tim2_enable();
 800b1be:	f002 fb59 	bl	800d874 <tim2_enable>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	4a22      	ldr	r2, [pc, #136]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b1c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
		stm32fxxx.tim3 = tim3_enable();
 800b1ca:	f002 fb69 	bl	800d8a0 <tim3_enable>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b1d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
		stm32fxxx.tim4 = tim4_enable();
 800b1d6:	f002 fb79 	bl	800d8cc <tim4_enable>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	4a1c      	ldr	r2, [pc, #112]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b1de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
		stm32fxxx.tim5 = tim5_enable();
 800b1e2:	f002 fb89 	bl	800d8f8 <tim5_enable>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	4a19      	ldr	r2, [pc, #100]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b1ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
			stm32fxxx.tim6 = tim6_enable();
			stm32fxxx.tim7 = tim7_enable();
		#endif
	#endif
	#if defined(_STM32FXXXTIM9TO14_H_)
		stm32fxxx.tim9 = tim9_enable();
 800b1ee:	f002 fc4d 	bl	800da8c <tim9_enable>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	4a16      	ldr	r2, [pc, #88]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b1f6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
		stm32fxxx.tim10 = tim10_enable();
 800b1fa:	f002 fc5d 	bl	800dab8 <tim10_enable>
 800b1fe:	4603      	mov	r3, r0
 800b200:	4a13      	ldr	r2, [pc, #76]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b202:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
		stm32fxxx.tim11 = tim11_enable();
 800b206:	f002 fc6d 	bl	800dae4 <tim11_enable>
 800b20a:	4603      	mov	r3, r0
 800b20c:	4a10      	ldr	r2, [pc, #64]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b20e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
			stm32fxxx.tim14 = tim14_enable();
		#endif
	#endif
	// USART
	#if defined(_STM32FXXXUSART_H_)
		stm32fxxx.usart1 = usart1_enable();
 800b212:	f003 f9bd 	bl	800e590 <usart1_enable>
 800b216:	4603      	mov	r3, r0
 800b218:	4a0d      	ldr	r2, [pc, #52]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b21a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
		stm32fxxx.usart2 = usart2_enable();
 800b21e:	f003 f9d3 	bl	800e5c8 <usart2_enable>
 800b222:	4603      	mov	r3, r0
 800b224:	4a0a      	ldr	r2, [pc, #40]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b226:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
		#ifdef __STM32F446xx_H
			stm32fxxx.usart3 = usart3_enable();
			stm32fxxx.uart4 = uart4_enable();
			stm32fxxx.uart5 = uart5_enable();
		#endif
		stm32fxxx.usart6 = usart6_enable();
 800b22a:	f003 f9e9 	bl	800e600 <usart6_enable>
 800b22e:	4603      	mov	r3, r0
 800b230:	4a07      	ldr	r2, [pc, #28]	@ (800b250 <STM32FXXX_enable+0x190>)
 800b232:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
	#endif

	/*** System ***/
	rcc_start();
 800b236:	f000 fbc9 	bl	800b9cc <rcc_start>
	query_enable();
 800b23a:	463b      	mov	r3, r7
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7f8 f90d 	bl	800345c <query_enable>
	systick_start();
 800b242:	f7f8 fb33 	bl	80038ac <systick_start>

	return &stm32fxxx;
 800b246:	4b02      	ldr	r3, [pc, #8]	@ (800b250 <STM32FXXX_enable+0x190>)
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3720      	adds	r7, #32
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	200009cc 	.word	0x200009cc
 800b254:	e000ed00 	.word	0xe000ed00
 800b258:	e000e010 	.word	0xe000e010
 800b25c:	e000e100 	.word	0xe000e100
 800b260:	40023000 	.word	0x40023000
 800b264:	40013800 	.word	0x40013800
 800b268:	40007000 	.word	0x40007000
 800b26c:	40002800 	.word	0x40002800

0800b270 <stm>:

STM32FXXX* stm(void){return (STM32FXXX*) &stm32fxxx;}
 800b270:	b480      	push	{r7}
 800b272:	af00      	add	r7, sp, #0
 800b274:	4b02      	ldr	r3, [pc, #8]	@ (800b280 <stm+0x10>)
 800b276:	4618      	mov	r0, r3
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr
 800b280:	200009cc 	.word	0x200009cc

0800b284 <STM32FXXXNVIC_set_enable>:
/*** File Variable ***/
static STM32FXXXNVICobj stm32fxxx_nvic;

/*** NVIC Procedure & Function Definition ***/
void STM32FXXXNVIC_set_enable( uint8_t IRQn )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	71fb      	strb	r3, [r7, #7]
	set_bit_block(NVIC->ISER, 1, IRQn, 1);
 800b28e:	79fa      	ldrb	r2, [r7, #7]
 800b290:	2301      	movs	r3, #1
 800b292:	2101      	movs	r1, #1
 800b294:	4803      	ldr	r0, [pc, #12]	@ (800b2a4 <STM32FXXXNVIC_set_enable+0x20>)
 800b296:	f7f8 fa13 	bl	80036c0 <set_bit_block>
}
 800b29a:	bf00      	nop
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	e000e100 	.word	0xe000e100

0800b2a8 <STM32FXXXNVIC_clear_enable>:
void STM32FXXXNVIC_clear_enable( uint8_t IRQn )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	71fb      	strb	r3, [r7, #7]
	set_bit_block(NVIC->ICER, 1, IRQn, 1);
 800b2b2:	79fa      	ldrb	r2, [r7, #7]
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	4803      	ldr	r0, [pc, #12]	@ (800b2c8 <STM32FXXXNVIC_clear_enable+0x20>)
 800b2ba:	f7f8 fa01 	bl	80036c0 <set_bit_block>
}
 800b2be:	bf00      	nop
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	e000e180 	.word	0xe000e180

0800b2cc <STM32FXXXNVIC_set_pending>:
void STM32FXXXNVIC_set_pending( uint8_t IRQn )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	71fb      	strb	r3, [r7, #7]
	set_bit_block(NVIC->ISPR, 1, IRQn, 1);
 800b2d6:	79fa      	ldrb	r2, [r7, #7]
 800b2d8:	2301      	movs	r3, #1
 800b2da:	2101      	movs	r1, #1
 800b2dc:	4803      	ldr	r0, [pc, #12]	@ (800b2ec <STM32FXXXNVIC_set_pending+0x20>)
 800b2de:	f7f8 f9ef 	bl	80036c0 <set_bit_block>
}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	e000e200 	.word	0xe000e200

0800b2f0 <STM32FXXXNVIC_clear_pending>:
void STM32FXXXNVIC_clear_pending( uint8_t IRQn )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	71fb      	strb	r3, [r7, #7]
	set_bit_block(NVIC->ICPR, 1, IRQn, 1);
 800b2fa:	79fa      	ldrb	r2, [r7, #7]
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	2101      	movs	r1, #1
 800b300:	4803      	ldr	r0, [pc, #12]	@ (800b310 <STM32FXXXNVIC_clear_pending+0x20>)
 800b302:	f7f8 f9dd 	bl	80036c0 <set_bit_block>
}
 800b306:	bf00      	nop
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	e000e280 	.word	0xe000e280

0800b314 <STM32FXXXNVIC_active>:
uint8_t STM32FXXXNVIC_active( uint8_t IRQn ) // Query
{
 800b314:	b480      	push	{r7}
 800b316:	b087      	sub	sp, #28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	4603      	mov	r3, r0
 800b31c:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t* reg = NVIC->IABR;
 800b31e:	4b15      	ldr	r3, [pc, #84]	@ (800b374 <STM32FXXXNVIC_active+0x60>)
 800b320:	60fb      	str	r3, [r7, #12]
	uint8_t bool; uint32_t n = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	613b      	str	r3, [r7, #16]
	if(IRQn > 31){ n = IRQn/32; IRQn = IRQn - (n * 32); }
 800b326:	79fb      	ldrb	r3, [r7, #7]
 800b328:	2b1f      	cmp	r3, #31
 800b32a:	d90a      	bls.n	800b342 <STM32FXXXNVIC_active+0x2e>
 800b32c:	79fb      	ldrb	r3, [r7, #7]
 800b32e:	095b      	lsrs	r3, r3, #5
 800b330:	b2db      	uxtb	r3, r3
 800b332:	613b      	str	r3, [r7, #16]
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	b2db      	uxtb	r3, r3
 800b338:	015b      	lsls	r3, r3, #5
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	79fa      	ldrb	r2, [r7, #7]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	71fb      	strb	r3, [r7, #7]
	if( *(reg + n ) & (1 << IRQn) ) bool = 1; else bool = 0 ;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	4413      	add	r3, r2
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	79fa      	ldrb	r2, [r7, #7]
 800b34e:	2101      	movs	r1, #1
 800b350:	fa01 f202 	lsl.w	r2, r1, r2
 800b354:	4013      	ands	r3, r2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <STM32FXXXNVIC_active+0x4c>
 800b35a:	2301      	movs	r3, #1
 800b35c:	75fb      	strb	r3, [r7, #23]
 800b35e:	e001      	b.n	800b364 <STM32FXXXNVIC_active+0x50>
 800b360:	2300      	movs	r3, #0
 800b362:	75fb      	strb	r3, [r7, #23]
	//return nvic_getset_bit_block(NVIC->ICPR, 1, IRQn);
	return bool;
 800b364:	7dfb      	ldrb	r3, [r7, #23]
}
 800b366:	4618      	mov	r0, r3
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	e000e300 	.word	0xe000e300

0800b378 <STM32FXXXNVIC_priority>:
void STM32FXXXNVIC_priority(uint32_t IRQn, uint32_t priority)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
	volatile uint8_t* reg = (uint8_t*) NVIC->IP;
 800b382:	4b07      	ldr	r3, [pc, #28]	@ (800b3a0 <STM32FXXXNVIC_priority+0x28>)
 800b384:	60fb      	str	r3, [r7, #12]
	*(reg + IRQn ) = priority;
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4413      	add	r3, r2
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	b2d2      	uxtb	r2, r2
 800b390:	701a      	strb	r2, [r3, #0]
}
 800b392:	bf00      	nop
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	e000e400 	.word	0xe000e400

0800b3a4 <STM32FXXXNVIC_trigger>:
void STM32FXXXNVIC_trigger(uint32_t IRQn)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
	write_reg_block(&NVIC->STIR, 9, 0, IRQn);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2109      	movs	r1, #9
 800b3b2:	4803      	ldr	r0, [pc, #12]	@ (800b3c0 <STM32FXXXNVIC_trigger+0x1c>)
 800b3b4:	f7f8 f8d8 	bl	8003568 <write_reg_block>
}
 800b3b8:	bf00      	nop
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	e000ef00 	.word	0xe000ef00

0800b3c4 <nvic_enable>:
/*** INIC Procedure & Function Definition ***/
STM32FXXXNVICobj* nvic_enable(void)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	af00      	add	r7, sp, #0

	/*** NVIC Bit Mapping Link ***/
	stm32fxxx_nvic.set_enable = STM32FXXXNVIC_set_enable;
 800b3c8:	4b0d      	ldr	r3, [pc, #52]	@ (800b400 <nvic_enable+0x3c>)
 800b3ca:	4a0e      	ldr	r2, [pc, #56]	@ (800b404 <nvic_enable+0x40>)
 800b3cc:	601a      	str	r2, [r3, #0]
	stm32fxxx_nvic.clear_enable = STM32FXXXNVIC_clear_enable;
 800b3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b400 <nvic_enable+0x3c>)
 800b3d0:	4a0d      	ldr	r2, [pc, #52]	@ (800b408 <nvic_enable+0x44>)
 800b3d2:	605a      	str	r2, [r3, #4]
	stm32fxxx_nvic.set_pending = STM32FXXXNVIC_set_pending;
 800b3d4:	4b0a      	ldr	r3, [pc, #40]	@ (800b400 <nvic_enable+0x3c>)
 800b3d6:	4a0d      	ldr	r2, [pc, #52]	@ (800b40c <nvic_enable+0x48>)
 800b3d8:	609a      	str	r2, [r3, #8]
	stm32fxxx_nvic.clear_pending = STM32FXXXNVIC_clear_pending;
 800b3da:	4b09      	ldr	r3, [pc, #36]	@ (800b400 <nvic_enable+0x3c>)
 800b3dc:	4a0c      	ldr	r2, [pc, #48]	@ (800b410 <nvic_enable+0x4c>)
 800b3de:	60da      	str	r2, [r3, #12]
	stm32fxxx_nvic.active = STM32FXXXNVIC_active;
 800b3e0:	4b07      	ldr	r3, [pc, #28]	@ (800b400 <nvic_enable+0x3c>)
 800b3e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b414 <nvic_enable+0x50>)
 800b3e4:	611a      	str	r2, [r3, #16]
	stm32fxxx_nvic.priority = STM32FXXXNVIC_priority;
 800b3e6:	4b06      	ldr	r3, [pc, #24]	@ (800b400 <nvic_enable+0x3c>)
 800b3e8:	4a0b      	ldr	r2, [pc, #44]	@ (800b418 <nvic_enable+0x54>)
 800b3ea:	615a      	str	r2, [r3, #20]
	stm32fxxx_nvic.trigger = STM32FXXXNVIC_trigger;
 800b3ec:	4b04      	ldr	r3, [pc, #16]	@ (800b400 <nvic_enable+0x3c>)
 800b3ee:	4a0b      	ldr	r2, [pc, #44]	@ (800b41c <nvic_enable+0x58>)
 800b3f0:	619a      	str	r2, [r3, #24]

	return &stm32fxxx_nvic;
 800b3f2:	4b03      	ldr	r3, [pc, #12]	@ (800b400 <nvic_enable+0x3c>)
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	20000aa4 	.word	0x20000aa4
 800b404:	0800b285 	.word	0x0800b285
 800b408:	0800b2a9 	.word	0x0800b2a9
 800b40c:	0800b2cd 	.word	0x0800b2cd
 800b410:	0800b2f1 	.word	0x0800b2f1
 800b414:	0800b315 	.word	0x0800b315
 800b418:	0800b379 	.word	0x0800b379
 800b41c:	0800b3a5 	.word	0x0800b3a5

0800b420 <STM32FXXXPWR_cr_fissr>:
STM32FXXXPWR_cr* stm32fxxx_pwr_cr_inic(void);
STM32FXXXPWR_csr* stm32fxxx_pwr_csr_inic(void);
/*** PWR Bit Mapping ***/
// CR
void STM32FXXXPWR_cr_fissr(uint8_t bool)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	4603      	mov	r3, r0
 800b428:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 21, bool);
 800b42a:	79fb      	ldrb	r3, [r7, #7]
 800b42c:	2215      	movs	r2, #21
 800b42e:	2101      	movs	r1, #1
 800b430:	4803      	ldr	r0, [pc, #12]	@ (800b440 <STM32FXXXPWR_cr_fissr+0x20>)
 800b432:	f7f8 f8d3 	bl	80035dc <set_reg_block>
}
 800b436:	bf00      	nop
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	40007000 	.word	0x40007000

0800b444 <STM32FXXXPWR_cr_fmssr>:
void STM32FXXXPWR_cr_fmssr(uint8_t bool)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 20, bool);
 800b44e:	79fb      	ldrb	r3, [r7, #7]
 800b450:	2214      	movs	r2, #20
 800b452:	2101      	movs	r1, #1
 800b454:	4803      	ldr	r0, [pc, #12]	@ (800b464 <STM32FXXXPWR_cr_fmssr+0x20>)
 800b456:	f7f8 f8c1 	bl	80035dc <set_reg_block>
}
 800b45a:	bf00      	nop
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	40007000 	.word	0x40007000

0800b468 <STM32FXXXPWR_cr_uden>:
void STM32FXXXPWR_cr_uden(uint8_t value)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	4603      	mov	r3, r0
 800b470:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 2, 18, value);
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	2212      	movs	r2, #18
 800b476:	2102      	movs	r1, #2
 800b478:	4803      	ldr	r0, [pc, #12]	@ (800b488 <STM32FXXXPWR_cr_uden+0x20>)
 800b47a:	f7f8 f8af 	bl	80035dc <set_reg_block>
}
 800b47e:	bf00      	nop
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	40007000 	.word	0x40007000

0800b48c <STM32FXXXPWR_cr_odswen>:
void STM32FXXXPWR_cr_odswen(uint8_t bool)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	4603      	mov	r3, r0
 800b494:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 17, bool);
 800b496:	79fb      	ldrb	r3, [r7, #7]
 800b498:	2211      	movs	r2, #17
 800b49a:	2101      	movs	r1, #1
 800b49c:	4803      	ldr	r0, [pc, #12]	@ (800b4ac <STM32FXXXPWR_cr_odswen+0x20>)
 800b49e:	f7f8 f89d 	bl	80035dc <set_reg_block>
}
 800b4a2:	bf00      	nop
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	40007000 	.word	0x40007000

0800b4b0 <STM32FXXXPWR_cr_oden>:
void STM32FXXXPWR_cr_oden(uint8_t bool)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 16, bool);
 800b4ba:	79fb      	ldrb	r3, [r7, #7]
 800b4bc:	2210      	movs	r2, #16
 800b4be:	2101      	movs	r1, #1
 800b4c0:	4803      	ldr	r0, [pc, #12]	@ (800b4d0 <STM32FXXXPWR_cr_oden+0x20>)
 800b4c2:	f7f8 f88b 	bl	80035dc <set_reg_block>
}
 800b4c6:	bf00      	nop
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	40007000 	.word	0x40007000

0800b4d4 <STM32FXXXPWR_cr_vos>:
void STM32FXXXPWR_cr_vos(uint8_t value)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 2, 14, value);
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	220e      	movs	r2, #14
 800b4e2:	2102      	movs	r1, #2
 800b4e4:	4803      	ldr	r0, [pc, #12]	@ (800b4f4 <STM32FXXXPWR_cr_vos+0x20>)
 800b4e6:	f7f8 f879 	bl	80035dc <set_reg_block>
}
 800b4ea:	bf00      	nop
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	40007000 	.word	0x40007000

0800b4f8 <STM32FXXXPWR_cr_adcdc1>:
void STM32FXXXPWR_cr_adcdc1(uint8_t bool)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 13, bool);
 800b502:	79fb      	ldrb	r3, [r7, #7]
 800b504:	220d      	movs	r2, #13
 800b506:	2101      	movs	r1, #1
 800b508:	4803      	ldr	r0, [pc, #12]	@ (800b518 <STM32FXXXPWR_cr_adcdc1+0x20>)
 800b50a:	f7f8 f867 	bl	80035dc <set_reg_block>
}
 800b50e:	bf00      	nop
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	40007000 	.word	0x40007000

0800b51c <STM32FXXXPWR_cr_mruds>:
void STM32FXXXPWR_cr_mruds(uint8_t bool)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	4603      	mov	r3, r0
 800b524:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 11, bool);
 800b526:	79fb      	ldrb	r3, [r7, #7]
 800b528:	220b      	movs	r2, #11
 800b52a:	2101      	movs	r1, #1
 800b52c:	4803      	ldr	r0, [pc, #12]	@ (800b53c <STM32FXXXPWR_cr_mruds+0x20>)
 800b52e:	f7f8 f855 	bl	80035dc <set_reg_block>
}
 800b532:	bf00      	nop
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	40007000 	.word	0x40007000

0800b540 <STM32FXXXPWR_cr_lpuds>:
void STM32FXXXPWR_cr_lpuds(uint8_t bool)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	4603      	mov	r3, r0
 800b548:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 10, bool);
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	220a      	movs	r2, #10
 800b54e:	2101      	movs	r1, #1
 800b550:	4803      	ldr	r0, [pc, #12]	@ (800b560 <STM32FXXXPWR_cr_lpuds+0x20>)
 800b552:	f7f8 f843 	bl	80035dc <set_reg_block>
}
 800b556:	bf00      	nop
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	40007000 	.word	0x40007000

0800b564 <STM32FXXXPWR_cr_fpds>:
void STM32FXXXPWR_cr_fpds(uint8_t bool)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	4603      	mov	r3, r0
 800b56c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 9, bool);
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	2209      	movs	r2, #9
 800b572:	2101      	movs	r1, #1
 800b574:	4803      	ldr	r0, [pc, #12]	@ (800b584 <STM32FXXXPWR_cr_fpds+0x20>)
 800b576:	f7f8 f831 	bl	80035dc <set_reg_block>
}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	40007000 	.word	0x40007000

0800b588 <STM32FXXXPWR_cr_dbp>:
void STM32FXXXPWR_cr_dbp(uint8_t bool)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 8, bool);
 800b592:	79fb      	ldrb	r3, [r7, #7]
 800b594:	2208      	movs	r2, #8
 800b596:	2101      	movs	r1, #1
 800b598:	4803      	ldr	r0, [pc, #12]	@ (800b5a8 <STM32FXXXPWR_cr_dbp+0x20>)
 800b59a:	f7f8 f81f 	bl	80035dc <set_reg_block>
}
 800b59e:	bf00      	nop
 800b5a0:	3708      	adds	r7, #8
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	40007000 	.word	0x40007000

0800b5ac <STM32FXXXPWR_cr_pls>:
void STM32FXXXPWR_cr_pls(uint8_t value)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 3, 5, value);
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	2205      	movs	r2, #5
 800b5ba:	2103      	movs	r1, #3
 800b5bc:	4803      	ldr	r0, [pc, #12]	@ (800b5cc <STM32FXXXPWR_cr_pls+0x20>)
 800b5be:	f7f8 f80d 	bl	80035dc <set_reg_block>
}
 800b5c2:	bf00      	nop
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	40007000 	.word	0x40007000

0800b5d0 <STM32FXXXPWR_cr_get_pls>:
uint8_t STM32FXXXPWR_cr_get_pls(void)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	af00      	add	r7, sp, #0
	return get_reg_block(PWR->CR, 3, 5);
 800b5d4:	4b05      	ldr	r3, [pc, #20]	@ (800b5ec <STM32FXXXPWR_cr_get_pls+0x1c>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2205      	movs	r2, #5
 800b5da:	2103      	movs	r1, #3
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7f7 ff98 	bl	8003512 <get_reg_block>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	b2db      	uxtb	r3, r3
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	40007000 	.word	0x40007000

0800b5f0 <STM32FXXXPWR_cr_pvde>:
void STM32FXXXPWR_cr_pvde(uint8_t bool)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 4, bool);
 800b5fa:	79fb      	ldrb	r3, [r7, #7]
 800b5fc:	2204      	movs	r2, #4
 800b5fe:	2101      	movs	r1, #1
 800b600:	4803      	ldr	r0, [pc, #12]	@ (800b610 <STM32FXXXPWR_cr_pvde+0x20>)
 800b602:	f7f7 ffeb 	bl	80035dc <set_reg_block>
}
 800b606:	bf00      	nop
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	40007000 	.word	0x40007000

0800b614 <STM32FXXXPWR_cr_clear_csbf>:
void STM32FXXXPWR_cr_clear_csbf(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0
	set_reg_block(&PWR->CR, 1, 3, 1);
 800b618:	2301      	movs	r3, #1
 800b61a:	2203      	movs	r2, #3
 800b61c:	2101      	movs	r1, #1
 800b61e:	4802      	ldr	r0, [pc, #8]	@ (800b628 <STM32FXXXPWR_cr_clear_csbf+0x14>)
 800b620:	f7f7 ffdc 	bl	80035dc <set_reg_block>
}
 800b624:	bf00      	nop
 800b626:	bd80      	pop	{r7, pc}
 800b628:	40007000 	.word	0x40007000

0800b62c <STM32FXXXPWR_cr_clear_cwuf>:
void STM32FXXXPWR_cr_clear_cwuf(void)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0
	set_reg_block(&PWR->CR, 1, 2, 1);
 800b630:	2301      	movs	r3, #1
 800b632:	2202      	movs	r2, #2
 800b634:	2101      	movs	r1, #1
 800b636:	4802      	ldr	r0, [pc, #8]	@ (800b640 <STM32FXXXPWR_cr_clear_cwuf+0x14>)
 800b638:	f7f7 ffd0 	bl	80035dc <set_reg_block>
}
 800b63c:	bf00      	nop
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	40007000 	.word	0x40007000

0800b644 <STM32FXXXPWR_cr_pdds>:
void STM32FXXXPWR_cr_pdds(uint8_t bool)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	4603      	mov	r3, r0
 800b64c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 1, bool);
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	2201      	movs	r2, #1
 800b652:	2101      	movs	r1, #1
 800b654:	4803      	ldr	r0, [pc, #12]	@ (800b664 <STM32FXXXPWR_cr_pdds+0x20>)
 800b656:	f7f7 ffc1 	bl	80035dc <set_reg_block>
}
 800b65a:	bf00      	nop
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	40007000 	.word	0x40007000

0800b668 <STM32FXXXPWR_cr_lpds>:
void STM32FXXXPWR_cr_lpds(uint8_t bool)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	4603      	mov	r3, r0
 800b670:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CR, 1, 0, bool);
 800b672:	79fb      	ldrb	r3, [r7, #7]
 800b674:	2200      	movs	r2, #0
 800b676:	2101      	movs	r1, #1
 800b678:	4803      	ldr	r0, [pc, #12]	@ (800b688 <STM32FXXXPWR_cr_lpds+0x20>)
 800b67a:	f7f7 ffaf 	bl	80035dc <set_reg_block>
}
 800b67e:	bf00      	nop
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	40007000 	.word	0x40007000

0800b68c <STM32FXXXPWR_udrdy>:
// CSR
uint8_t STM32FXXXPWR_udrdy(void)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	af00      	add	r7, sp, #0
	return get_reg_block(PWR->CSR, 2, 18);
 800b690:	4b05      	ldr	r3, [pc, #20]	@ (800b6a8 <STM32FXXXPWR_udrdy+0x1c>)
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	2212      	movs	r2, #18
 800b696:	2102      	movs	r1, #2
 800b698:	4618      	mov	r0, r3
 800b69a:	f7f7 ff3a 	bl	8003512 <get_reg_block>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	b2db      	uxtb	r3, r3
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	40007000 	.word	0x40007000

0800b6ac <STM32FXXXPWR_csr_clear_udrdy>:
void STM32FXXXPWR_csr_clear_udrdy(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	af00      	add	r7, sp, #0
	set_reg_block(&PWR->CSR, 2, 18, 3);
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	2212      	movs	r2, #18
 800b6b4:	2102      	movs	r1, #2
 800b6b6:	4802      	ldr	r0, [pc, #8]	@ (800b6c0 <STM32FXXXPWR_csr_clear_udrdy+0x14>)
 800b6b8:	f7f7 ff90 	bl	80035dc <set_reg_block>
}
 800b6bc:	bf00      	nop
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	40007004 	.word	0x40007004

0800b6c4 <STM32FXXXPWR_csr_odswrdy>:
uint8_t STM32FXXXPWR_csr_odswrdy(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	af00      	add	r7, sp, #0
	return get_reg_block(PWR->CSR, 1, 17);
 800b6c8:	4b05      	ldr	r3, [pc, #20]	@ (800b6e0 <STM32FXXXPWR_csr_odswrdy+0x1c>)
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	2211      	movs	r2, #17
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7f7 ff1e 	bl	8003512 <get_reg_block>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	b2db      	uxtb	r3, r3
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	40007000 	.word	0x40007000

0800b6e4 <STM32FXXXPWR_csr_odrdy>:
uint8_t STM32FXXXPWR_csr_odrdy(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
	return get_reg_block(PWR->CSR, 1, 16);
 800b6e8:	4b05      	ldr	r3, [pc, #20]	@ (800b700 <STM32FXXXPWR_csr_odrdy+0x1c>)
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	2210      	movs	r2, #16
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7f7 ff0e 	bl	8003512 <get_reg_block>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	b2db      	uxtb	r3, r3
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	40007000 	.word	0x40007000

0800b704 <STM32FXXXPWR_csr_vosrdy>:
uint8_t STM32FXXXPWR_csr_vosrdy(void)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	af00      	add	r7, sp, #0
	return get_reg_block(PWR->CSR, 1, 14);
 800b708:	4b05      	ldr	r3, [pc, #20]	@ (800b720 <STM32FXXXPWR_csr_vosrdy+0x1c>)
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	220e      	movs	r2, #14
 800b70e:	2101      	movs	r1, #1
 800b710:	4618      	mov	r0, r3
 800b712:	f7f7 fefe 	bl	8003512 <get_reg_block>
 800b716:	4603      	mov	r3, r0
 800b718:	b2db      	uxtb	r3, r3
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	40007000 	.word	0x40007000

0800b724 <STM32FXXXPWR_csr_bre>:
void STM32FXXXPWR_csr_bre(uint8_t bool)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	4603      	mov	r3, r0
 800b72c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CSR, 1, 9, bool);
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	2209      	movs	r2, #9
 800b732:	2101      	movs	r1, #1
 800b734:	4803      	ldr	r0, [pc, #12]	@ (800b744 <STM32FXXXPWR_csr_bre+0x20>)
 800b736:	f7f7 ff51 	bl	80035dc <set_reg_block>
}
 800b73a:	bf00      	nop
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	40007004 	.word	0x40007004

0800b748 <STM32FXXXPWR_csr_ewup1>:
void STM32FXXXPWR_csr_ewup1(uint8_t bool)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	4603      	mov	r3, r0
 800b750:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CSR, 1, 8, bool);
 800b752:	79fb      	ldrb	r3, [r7, #7]
 800b754:	2208      	movs	r2, #8
 800b756:	2101      	movs	r1, #1
 800b758:	4803      	ldr	r0, [pc, #12]	@ (800b768 <STM32FXXXPWR_csr_ewup1+0x20>)
 800b75a:	f7f7 ff3f 	bl	80035dc <set_reg_block>
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	40007004 	.word	0x40007004

0800b76c <STM32FXXXPWR_csr_ewup2>:
void STM32FXXXPWR_csr_ewup2(uint8_t bool)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	4603      	mov	r3, r0
 800b774:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&PWR->CSR, 1, 7, bool);
 800b776:	79fb      	ldrb	r3, [r7, #7]
 800b778:	2207      	movs	r2, #7
 800b77a:	2101      	movs	r1, #1
 800b77c:	4803      	ldr	r0, [pc, #12]	@ (800b78c <STM32FXXXPWR_csr_ewup2+0x20>)
 800b77e:	f7f7 ff2d 	bl	80035dc <set_reg_block>
}
 800b782:	bf00      	nop
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	40007004 	.word	0x40007004

0800b790 <STM32FXXXPWR_csr_brr>:
uint8_t STM32FXXXPWR_csr_brr(void)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	af00      	add	r7, sp, #0
	return get_reg_block(PWR->CSR, 1, 3);
 800b794:	4b05      	ldr	r3, [pc, #20]	@ (800b7ac <STM32FXXXPWR_csr_brr+0x1c>)
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	2203      	movs	r2, #3
 800b79a:	2101      	movs	r1, #1
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7f7 feb8 	bl	8003512 <get_reg_block>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	b2db      	uxtb	r3, r3
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	40007000 	.word	0x40007000

0800b7b0 <STM32FXXXPWR_csr_pvdo>:
uint8_t STM32FXXXPWR_csr_pvdo(void)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	af00      	add	r7, sp, #0
	return get_reg_block(PWR->CSR, 1, 2);
 800b7b4:	4b05      	ldr	r3, [pc, #20]	@ (800b7cc <STM32FXXXPWR_csr_pvdo+0x1c>)
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	2101      	movs	r1, #1
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7f7 fea8 	bl	8003512 <get_reg_block>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	b2db      	uxtb	r3, r3
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	40007000 	.word	0x40007000

0800b7d0 <STM32FXXXPWR_csr_sbf>:
uint8_t STM32FXXXPWR_csr_sbf(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
	return get_reg_block(PWR->CSR, 1, 1);
 800b7d4:	4b05      	ldr	r3, [pc, #20]	@ (800b7ec <STM32FXXXPWR_csr_sbf+0x1c>)
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	2101      	movs	r1, #1
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7f7 fe98 	bl	8003512 <get_reg_block>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	b2db      	uxtb	r3, r3
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	40007000 	.word	0x40007000

0800b7f0 <STM32FXXXPWR_csr_wuf>:
uint8_t STM32FXXXPWR_csr_wuf(void)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	af00      	add	r7, sp, #0
	return get_reg_block(PWR->CSR, 1, 0);
 800b7f4:	4b05      	ldr	r3, [pc, #20]	@ (800b80c <STM32FXXXPWR_csr_wuf+0x1c>)
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7f7 fe88 	bl	8003512 <get_reg_block>
 800b802:	4603      	mov	r3, r0
 800b804:	b2db      	uxtb	r3, r3
}
 800b806:	4618      	mov	r0, r3
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	40007000 	.word	0x40007000

0800b810 <STM32FXXXPWR_clock>:
/*** Other ***/
void STM32FXXXPWR_clock(uint8_t bool)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	4603      	mov	r3, r0
 800b818:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->APB1ENR |= (1 << 28); }
 800b81a:	79fb      	ldrb	r3, [r7, #7]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d006      	beq.n	800b82e <STM32FXXXPWR_clock+0x1e>
 800b820:	4b09      	ldr	r3, [pc, #36]	@ (800b848 <STM32FXXXPWR_clock+0x38>)
 800b822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b824:	4a08      	ldr	r2, [pc, #32]	@ (800b848 <STM32FXXXPWR_clock+0x38>)
 800b826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b82a:	6413      	str	r3, [r2, #64]	@ 0x40
	else{ RCC->APB1ENR &= ~(1 << 28); }
}
 800b82c:	e005      	b.n	800b83a <STM32FXXXPWR_clock+0x2a>
	else{ RCC->APB1ENR &= ~(1 << 28); }
 800b82e:	4b06      	ldr	r3, [pc, #24]	@ (800b848 <STM32FXXXPWR_clock+0x38>)
 800b830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b832:	4a05      	ldr	r2, [pc, #20]	@ (800b848 <STM32FXXXPWR_clock+0x38>)
 800b834:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b838:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800b83a:	bf00      	nop
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	40023800 	.word	0x40023800

0800b84c <stm32fxxx_pwr_cr_inic>:
/*** Auxiliar ***/
STM32FXXXPWR_cr* stm32fxxx_pwr_cr_inic(void)
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0

	// CR
	stm32fxxx_pwr_cr.fissr = STM32FXXXPWR_cr_fissr;
 800b850:	4b1d      	ldr	r3, [pc, #116]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b852:	4a1e      	ldr	r2, [pc, #120]	@ (800b8cc <stm32fxxx_pwr_cr_inic+0x80>)
 800b854:	601a      	str	r2, [r3, #0]
	stm32fxxx_pwr_cr.fmssr = STM32FXXXPWR_cr_fmssr;
 800b856:	4b1c      	ldr	r3, [pc, #112]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b858:	4a1d      	ldr	r2, [pc, #116]	@ (800b8d0 <stm32fxxx_pwr_cr_inic+0x84>)
 800b85a:	605a      	str	r2, [r3, #4]
	stm32fxxx_pwr_cr.uden = STM32FXXXPWR_cr_uden;
 800b85c:	4b1a      	ldr	r3, [pc, #104]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b85e:	4a1d      	ldr	r2, [pc, #116]	@ (800b8d4 <stm32fxxx_pwr_cr_inic+0x88>)
 800b860:	609a      	str	r2, [r3, #8]
	stm32fxxx_pwr_cr.odswen = STM32FXXXPWR_cr_odswen;
 800b862:	4b19      	ldr	r3, [pc, #100]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b864:	4a1c      	ldr	r2, [pc, #112]	@ (800b8d8 <stm32fxxx_pwr_cr_inic+0x8c>)
 800b866:	60da      	str	r2, [r3, #12]
	stm32fxxx_pwr_cr.oden = STM32FXXXPWR_cr_oden;
 800b868:	4b17      	ldr	r3, [pc, #92]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b86a:	4a1c      	ldr	r2, [pc, #112]	@ (800b8dc <stm32fxxx_pwr_cr_inic+0x90>)
 800b86c:	611a      	str	r2, [r3, #16]
	stm32fxxx_pwr_cr.vos = STM32FXXXPWR_cr_vos;
 800b86e:	4b16      	ldr	r3, [pc, #88]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b870:	4a1b      	ldr	r2, [pc, #108]	@ (800b8e0 <stm32fxxx_pwr_cr_inic+0x94>)
 800b872:	615a      	str	r2, [r3, #20]
	stm32fxxx_pwr_cr.adcdc1 = STM32FXXXPWR_cr_adcdc1;
 800b874:	4b14      	ldr	r3, [pc, #80]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b876:	4a1b      	ldr	r2, [pc, #108]	@ (800b8e4 <stm32fxxx_pwr_cr_inic+0x98>)
 800b878:	619a      	str	r2, [r3, #24]
	stm32fxxx_pwr_cr.mruds = STM32FXXXPWR_cr_mruds;
 800b87a:	4b13      	ldr	r3, [pc, #76]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b87c:	4a1a      	ldr	r2, [pc, #104]	@ (800b8e8 <stm32fxxx_pwr_cr_inic+0x9c>)
 800b87e:	61da      	str	r2, [r3, #28]
	stm32fxxx_pwr_cr.lpuds = STM32FXXXPWR_cr_lpuds;
 800b880:	4b11      	ldr	r3, [pc, #68]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b882:	4a1a      	ldr	r2, [pc, #104]	@ (800b8ec <stm32fxxx_pwr_cr_inic+0xa0>)
 800b884:	621a      	str	r2, [r3, #32]
	stm32fxxx_pwr_cr.fpds = STM32FXXXPWR_cr_fpds;
 800b886:	4b10      	ldr	r3, [pc, #64]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b888:	4a19      	ldr	r2, [pc, #100]	@ (800b8f0 <stm32fxxx_pwr_cr_inic+0xa4>)
 800b88a:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_pwr_cr.dbp = STM32FXXXPWR_cr_dbp;
 800b88c:	4b0e      	ldr	r3, [pc, #56]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b88e:	4a19      	ldr	r2, [pc, #100]	@ (800b8f4 <stm32fxxx_pwr_cr_inic+0xa8>)
 800b890:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_pwr_cr.pls = STM32FXXXPWR_cr_pls;
 800b892:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b894:	4a18      	ldr	r2, [pc, #96]	@ (800b8f8 <stm32fxxx_pwr_cr_inic+0xac>)
 800b896:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_pwr_cr.get_pls = STM32FXXXPWR_cr_get_pls;
 800b898:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b89a:	4a18      	ldr	r2, [pc, #96]	@ (800b8fc <stm32fxxx_pwr_cr_inic+0xb0>)
 800b89c:	631a      	str	r2, [r3, #48]	@ 0x30
	stm32fxxx_pwr_cr.pvde = STM32FXXXPWR_cr_pvde;
 800b89e:	4b0a      	ldr	r3, [pc, #40]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b8a0:	4a17      	ldr	r2, [pc, #92]	@ (800b900 <stm32fxxx_pwr_cr_inic+0xb4>)
 800b8a2:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_pwr_cr.clear_csbf = STM32FXXXPWR_cr_clear_csbf;
 800b8a4:	4b08      	ldr	r3, [pc, #32]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b8a6:	4a17      	ldr	r2, [pc, #92]	@ (800b904 <stm32fxxx_pwr_cr_inic+0xb8>)
 800b8a8:	639a      	str	r2, [r3, #56]	@ 0x38
	stm32fxxx_pwr_cr.clear_cwuf = STM32FXXXPWR_cr_clear_cwuf;
 800b8aa:	4b07      	ldr	r3, [pc, #28]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b8ac:	4a16      	ldr	r2, [pc, #88]	@ (800b908 <stm32fxxx_pwr_cr_inic+0xbc>)
 800b8ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_pwr_cr.pdds =STM32FXXXPWR_cr_pdds;
 800b8b0:	4b05      	ldr	r3, [pc, #20]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b8b2:	4a16      	ldr	r2, [pc, #88]	@ (800b90c <stm32fxxx_pwr_cr_inic+0xc0>)
 800b8b4:	641a      	str	r2, [r3, #64]	@ 0x40
	stm32fxxx_pwr_cr.lpds = STM32FXXXPWR_cr_lpds;
 800b8b6:	4b04      	ldr	r3, [pc, #16]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
 800b8b8:	4a15      	ldr	r2, [pc, #84]	@ (800b910 <stm32fxxx_pwr_cr_inic+0xc4>)
 800b8ba:	645a      	str	r2, [r3, #68]	@ 0x44
	return &stm32fxxx_pwr_cr;
 800b8bc:	4b02      	ldr	r3, [pc, #8]	@ (800b8c8 <stm32fxxx_pwr_cr_inic+0x7c>)
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	20000ac0 	.word	0x20000ac0
 800b8cc:	0800b421 	.word	0x0800b421
 800b8d0:	0800b445 	.word	0x0800b445
 800b8d4:	0800b469 	.word	0x0800b469
 800b8d8:	0800b48d 	.word	0x0800b48d
 800b8dc:	0800b4b1 	.word	0x0800b4b1
 800b8e0:	0800b4d5 	.word	0x0800b4d5
 800b8e4:	0800b4f9 	.word	0x0800b4f9
 800b8e8:	0800b51d 	.word	0x0800b51d
 800b8ec:	0800b541 	.word	0x0800b541
 800b8f0:	0800b565 	.word	0x0800b565
 800b8f4:	0800b589 	.word	0x0800b589
 800b8f8:	0800b5ad 	.word	0x0800b5ad
 800b8fc:	0800b5d1 	.word	0x0800b5d1
 800b900:	0800b5f1 	.word	0x0800b5f1
 800b904:	0800b615 	.word	0x0800b615
 800b908:	0800b62d 	.word	0x0800b62d
 800b90c:	0800b645 	.word	0x0800b645
 800b910:	0800b669 	.word	0x0800b669

0800b914 <stm32fxxx_pwr_csr_inic>:
STM32FXXXPWR_csr* stm32fxxx_pwr_csr_inic(void)
{
 800b914:	b480      	push	{r7}
 800b916:	af00      	add	r7, sp, #0

	// CSR
	stm32fxxx_pwr_csr.udrdy = STM32FXXXPWR_udrdy;
 800b918:	4b14      	ldr	r3, [pc, #80]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b91a:	4a15      	ldr	r2, [pc, #84]	@ (800b970 <stm32fxxx_pwr_csr_inic+0x5c>)
 800b91c:	601a      	str	r2, [r3, #0]
	stm32fxxx_pwr_csr.clear_udrdy = STM32FXXXPWR_csr_clear_udrdy;
 800b91e:	4b13      	ldr	r3, [pc, #76]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b920:	4a14      	ldr	r2, [pc, #80]	@ (800b974 <stm32fxxx_pwr_csr_inic+0x60>)
 800b922:	605a      	str	r2, [r3, #4]
	stm32fxxx_pwr_csr.odswrdy = STM32FXXXPWR_csr_odswrdy;
 800b924:	4b11      	ldr	r3, [pc, #68]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b926:	4a14      	ldr	r2, [pc, #80]	@ (800b978 <stm32fxxx_pwr_csr_inic+0x64>)
 800b928:	609a      	str	r2, [r3, #8]
	stm32fxxx_pwr_csr.odrdy = STM32FXXXPWR_csr_odrdy;
 800b92a:	4b10      	ldr	r3, [pc, #64]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b92c:	4a13      	ldr	r2, [pc, #76]	@ (800b97c <stm32fxxx_pwr_csr_inic+0x68>)
 800b92e:	60da      	str	r2, [r3, #12]
	stm32fxxx_pwr_csr.vosrdy = STM32FXXXPWR_csr_vosrdy;
 800b930:	4b0e      	ldr	r3, [pc, #56]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b932:	4a13      	ldr	r2, [pc, #76]	@ (800b980 <stm32fxxx_pwr_csr_inic+0x6c>)
 800b934:	611a      	str	r2, [r3, #16]
	stm32fxxx_pwr_csr.bre = STM32FXXXPWR_csr_bre;
 800b936:	4b0d      	ldr	r3, [pc, #52]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b938:	4a12      	ldr	r2, [pc, #72]	@ (800b984 <stm32fxxx_pwr_csr_inic+0x70>)
 800b93a:	615a      	str	r2, [r3, #20]
	stm32fxxx_pwr_csr.ewup1 = STM32FXXXPWR_csr_ewup1;
 800b93c:	4b0b      	ldr	r3, [pc, #44]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b93e:	4a12      	ldr	r2, [pc, #72]	@ (800b988 <stm32fxxx_pwr_csr_inic+0x74>)
 800b940:	619a      	str	r2, [r3, #24]
	stm32fxxx_pwr_csr.ewup2 = STM32FXXXPWR_csr_ewup2;
 800b942:	4b0a      	ldr	r3, [pc, #40]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b944:	4a11      	ldr	r2, [pc, #68]	@ (800b98c <stm32fxxx_pwr_csr_inic+0x78>)
 800b946:	61da      	str	r2, [r3, #28]
	stm32fxxx_pwr_csr.brr = STM32FXXXPWR_csr_brr;
 800b948:	4b08      	ldr	r3, [pc, #32]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b94a:	4a11      	ldr	r2, [pc, #68]	@ (800b990 <stm32fxxx_pwr_csr_inic+0x7c>)
 800b94c:	621a      	str	r2, [r3, #32]
	stm32fxxx_pwr_csr.pvdo = STM32FXXXPWR_csr_pvdo;
 800b94e:	4b07      	ldr	r3, [pc, #28]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b950:	4a10      	ldr	r2, [pc, #64]	@ (800b994 <stm32fxxx_pwr_csr_inic+0x80>)
 800b952:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_pwr_csr.sbf = STM32FXXXPWR_csr_sbf;
 800b954:	4b05      	ldr	r3, [pc, #20]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b956:	4a10      	ldr	r2, [pc, #64]	@ (800b998 <stm32fxxx_pwr_csr_inic+0x84>)
 800b958:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_pwr_csr.wuf = STM32FXXXPWR_csr_wuf;
 800b95a:	4b04      	ldr	r3, [pc, #16]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
 800b95c:	4a0f      	ldr	r2, [pc, #60]	@ (800b99c <stm32fxxx_pwr_csr_inic+0x88>)
 800b95e:	62da      	str	r2, [r3, #44]	@ 0x2c
	return &stm32fxxx_pwr_csr;
 800b960:	4b02      	ldr	r3, [pc, #8]	@ (800b96c <stm32fxxx_pwr_csr_inic+0x58>)
}
 800b962:	4618      	mov	r0, r3
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	20000b08 	.word	0x20000b08
 800b970:	0800b68d 	.word	0x0800b68d
 800b974:	0800b6ad 	.word	0x0800b6ad
 800b978:	0800b6c5 	.word	0x0800b6c5
 800b97c:	0800b6e5 	.word	0x0800b6e5
 800b980:	0800b705 	.word	0x0800b705
 800b984:	0800b725 	.word	0x0800b725
 800b988:	0800b749 	.word	0x0800b749
 800b98c:	0800b76d 	.word	0x0800b76d
 800b990:	0800b791 	.word	0x0800b791
 800b994:	0800b7b1 	.word	0x0800b7b1
 800b998:	0800b7d1 	.word	0x0800b7d1
 800b99c:	0800b7f1 	.word	0x0800b7f1

0800b9a0 <pwr_enable>:
/*** INIC Procedure & Function Definition ***/
STM32FXXX_PWR* pwr_enable(void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0


	stm32fxxx_pwr.clock = STM32FXXXPWR_clock;
 800b9a4:	4b07      	ldr	r3, [pc, #28]	@ (800b9c4 <pwr_enable+0x24>)
 800b9a6:	4a08      	ldr	r2, [pc, #32]	@ (800b9c8 <pwr_enable+0x28>)
 800b9a8:	609a      	str	r2, [r3, #8]
	/*** PWR Bit Mapping Link ***/
	stm32fxxx_pwr.cr = stm32fxxx_pwr_cr_inic();
 800b9aa:	f7ff ff4f 	bl	800b84c <stm32fxxx_pwr_cr_inic>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	4a04      	ldr	r2, [pc, #16]	@ (800b9c4 <pwr_enable+0x24>)
 800b9b2:	6013      	str	r3, [r2, #0]
	stm32fxxx_pwr.csr = stm32fxxx_pwr_csr_inic();
 800b9b4:	f7ff ffae 	bl	800b914 <stm32fxxx_pwr_csr_inic>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	4a02      	ldr	r2, [pc, #8]	@ (800b9c4 <pwr_enable+0x24>)
 800b9bc:	6053      	str	r3, [r2, #4]
	return &stm32fxxx_pwr;
 800b9be:	4b01      	ldr	r3, [pc, #4]	@ (800b9c4 <pwr_enable+0x24>)
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	20000b38 	.word	0x20000b38
 800b9c8:	0800b811 	.word	0x0800b811

0800b9cc <rcc_start>:
#endif
/****************************************/

/*** RCC Procedure & Function Definition ***/
void rcc_start(void)
{	// Configure -> Enable -> Select
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	af00      	add	r7, sp, #0
    // AHB 1,2,4,8,16,64,128,256,512;  APB1 1,2,4,8,16;  APB2 1,2,4,8,16;  RTC 2 to 31
	//STM32FXXXPrescaler(8, 1, 1, 1); // (8, 1, 1, 0)
	STM32FXXXPrescaler(1, 1, 1, 0); // (1, 1, 1, 0)
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	2001      	movs	r0, #1
 800b9d8:	f000 f996 	bl	800bd08 <STM32FXXXPrescaler>
	STM32FXXXRccHEnable(0); // 0 - HSI
 800b9dc:	2000      	movs	r0, #0
 800b9de:	f000 f81b 	bl	800ba18 <STM32FXXXRccHEnable>
	STM32FXXXRccHEnable(1); // 1 - HSE
 800b9e2:	2001      	movs	r0, #1
 800b9e4:	f000 f818 	bl	800ba18 <STM32FXXXRccHEnable>
	STM32FXXXRccPLLSelect(H_Clock_Source); // 0 - HSI, 1 - HSE, H_Clock_Source
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	f000 f8af 	bl	800bb4c <STM32FXXXRccPLLSelect>
	// M 2 to 63;  N 50 to 432;  P 2,4,6,8;  Q 2 to 15;
	STM32FXXXPLLDivision((uint32_t)getpllclk()/1000000, 240, 2, 4);
 800b9ee:	f7f7 fc4b 	bl	8003288 <getpllclk>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	4a07      	ldr	r2, [pc, #28]	@ (800ba14 <rcc_start+0x48>)
 800b9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9fa:	0c9b      	lsrs	r3, r3, #18
 800b9fc:	b2d8      	uxtb	r0, r3
 800b9fe:	2304      	movs	r3, #4
 800ba00:	2202      	movs	r2, #2
 800ba02:	21f0      	movs	r1, #240	@ 0xf0
 800ba04:	f000 faa6 	bl	800bf54 <STM32FXXXPLLDivision>
		STM32FXXXRccPLLCLKEnable();
		// System Clock Switch
		STM32FXXXRccHSelect(2); // 0 - HSI, 1 - HSE, 2 - PLL_P, 3 - PLL_R pg133 (manual 2) SW[1:0]: System clock switch
	}else{
		// System Clock Switch
		STM32FXXXRccHSelect(H_Clock_Source); // 0 - HSI, 1 - HSE, 2 - PLL_P, 3 - PLL_R pg133 (manual 2) SW[1:0]: System clock switch
 800ba08:	2001      	movs	r0, #1
 800ba0a:	f000 f861 	bl	800bad0 <STM32FXXXRccHSelect>
	}
}
 800ba0e:	bf00      	nop
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	431bde83 	.word	0x431bde83

0800ba18 <STM32FXXXRccHEnable>:
// RCC
void STM32FXXXRccHEnable(uint8_t hclock)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	71fb      	strb	r3, [r7, #7]
	uint8_t set;
	uint8_t rdy;
	set_reg_block(&RCC->CR, 1, 19, 1); // CSSON
 800ba22:	2301      	movs	r3, #1
 800ba24:	2213      	movs	r2, #19
 800ba26:	2101      	movs	r1, #1
 800ba28:	4828      	ldr	r0, [pc, #160]	@ (800bacc <STM32FXXXRccHEnable+0xb4>)
 800ba2a:	f7f7 fdd7 	bl	80035dc <set_reg_block>
	for( set = 1, rdy = 1; rdy ; ){
 800ba2e:	2301      	movs	r3, #1
 800ba30:	73fb      	strb	r3, [r7, #15]
 800ba32:	2301      	movs	r3, #1
 800ba34:	73bb      	strb	r3, [r7, #14]
 800ba36:	e040      	b.n	800baba <STM32FXXXRccHEnable+0xa2>
		if(hclock == 0){ // HSION: Internal high-speed clock enable
 800ba38:	79fb      	ldrb	r3, [r7, #7]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d114      	bne.n	800ba68 <STM32FXXXRccHEnable+0x50>
			if( set ){ RCC->CR |= ( 1 << 0); set = 0; }else if( RCC->CR & ( 1 << 1) ) rdy = 0;
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d008      	beq.n	800ba56 <STM32FXXXRccHEnable+0x3e>
 800ba44:	4b21      	ldr	r3, [pc, #132]	@ (800bacc <STM32FXXXRccHEnable+0xb4>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a20      	ldr	r2, [pc, #128]	@ (800bacc <STM32FXXXRccHEnable+0xb4>)
 800ba4a:	f043 0301 	orr.w	r3, r3, #1
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	2300      	movs	r3, #0
 800ba52:	73fb      	strb	r3, [r7, #15]
 800ba54:	e031      	b.n	800baba <STM32FXXXRccHEnable+0xa2>
 800ba56:	4b1d      	ldr	r3, [pc, #116]	@ (800bacc <STM32FXXXRccHEnable+0xb4>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 0302 	and.w	r3, r3, #2
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d02b      	beq.n	800baba <STM32FXXXRccHEnable+0xa2>
 800ba62:	2300      	movs	r3, #0
 800ba64:	73bb      	strb	r3, [r7, #14]
 800ba66:	e028      	b.n	800baba <STM32FXXXRccHEnable+0xa2>
		}
		else if(hclock == 1){ // HSEON: HSE clock enable
 800ba68:	79fb      	ldrb	r3, [r7, #7]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d114      	bne.n	800ba98 <STM32FXXXRccHEnable+0x80>
			if( set ){ RCC->CR |= ( 1 << 16); set = 0; }else if( RCC->CR & ( 1 << 17) ) rdy = 0;
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d008      	beq.n	800ba86 <STM32FXXXRccHEnable+0x6e>
 800ba74:	4b15      	ldr	r3, [pc, #84]	@ (800bacc <STM32FXXXRccHEnable+0xb4>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a14      	ldr	r2, [pc, #80]	@ (800bacc <STM32FXXXRccHEnable+0xb4>)
 800ba7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]
 800ba84:	e019      	b.n	800baba <STM32FXXXRccHEnable+0xa2>
 800ba86:	4b11      	ldr	r3, [pc, #68]	@ (800bacc <STM32FXXXRccHEnable+0xb4>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d013      	beq.n	800baba <STM32FXXXRccHEnable+0xa2>
 800ba92:	2300      	movs	r3, #0
 800ba94:	73bb      	strb	r3, [r7, #14]
 800ba96:	e010      	b.n	800baba <STM32FXXXRccHEnable+0xa2>
		}
		else if(hclock == 2){ // HSEBYP: HSE clock bypass
 800ba98:	79fb      	ldrb	r3, [r7, #7]
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d10b      	bne.n	800bab6 <STM32FXXXRccHEnable+0x9e>
			if( set ){ RCC->CR |= ( 1 << 18 ); }
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d005      	beq.n	800bab0 <STM32FXXXRccHEnable+0x98>
 800baa4:	4b09      	ldr	r3, [pc, #36]	@ (800bacc <STM32FXXXRccHEnable+0xb4>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a08      	ldr	r2, [pc, #32]	@ (800bacc <STM32FXXXRccHEnable+0xb4>)
 800baaa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800baae:	6013      	str	r3, [r2, #0]
			hclock = 1;
 800bab0:	2301      	movs	r3, #1
 800bab2:	71fb      	strb	r3, [r7, #7]
 800bab4:	e001      	b.n	800baba <STM32FXXXRccHEnable+0xa2>
		}
		else hclock = 0; // default
 800bab6:	2300      	movs	r3, #0
 800bab8:	71fb      	strb	r3, [r7, #7]
	for( set = 1, rdy = 1; rdy ; ){
 800baba:	7bbb      	ldrb	r3, [r7, #14]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1bb      	bne.n	800ba38 <STM32FXXXRccHEnable+0x20>
	}
}
 800bac0:	bf00      	nop
 800bac2:	bf00      	nop
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	40023800 	.word	0x40023800

0800bad0 <STM32FXXXRccHSelect>:
void STM32FXXXRccHSelect(uint8_t hclock)
{ // SW[1:0]: System clock switch 00 - HSI, 01 - HSE pg133
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	4603      	mov	r3, r0
 800bad8:	71fb      	strb	r3, [r7, #7]
	switch(hclock){
 800bada:	79fb      	ldrb	r3, [r7, #7]
 800badc:	2b03      	cmp	r3, #3
 800bade:	d827      	bhi.n	800bb30 <STM32FXXXRccHSelect+0x60>
 800bae0:	a201      	add	r2, pc, #4	@ (adr r2, 800bae8 <STM32FXXXRccHSelect+0x18>)
 800bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae6:	bf00      	nop
 800bae8:	0800baf9 	.word	0x0800baf9
 800baec:	0800bb07 	.word	0x0800bb07
 800baf0:	0800bb15 	.word	0x0800bb15
 800baf4:	0800bb23 	.word	0x0800bb23
		case 0:
			set_reg_block(&RCC->CFGR, 2, 0, 0);
 800baf8:	2300      	movs	r3, #0
 800bafa:	2200      	movs	r2, #0
 800bafc:	2102      	movs	r1, #2
 800bafe:	4812      	ldr	r0, [pc, #72]	@ (800bb48 <STM32FXXXRccHSelect+0x78>)
 800bb00:	f7f7 fd6c 	bl	80035dc <set_reg_block>
		break;
 800bb04:	e01b      	b.n	800bb3e <STM32FXXXRccHSelect+0x6e>
		case 1: // HSE oscillator selected as system clock
			set_reg_block(&RCC->CFGR, 2, 0, 1);
 800bb06:	2301      	movs	r3, #1
 800bb08:	2200      	movs	r2, #0
 800bb0a:	2102      	movs	r1, #2
 800bb0c:	480e      	ldr	r0, [pc, #56]	@ (800bb48 <STM32FXXXRccHSelect+0x78>)
 800bb0e:	f7f7 fd65 	bl	80035dc <set_reg_block>
		break;
 800bb12:	e014      	b.n	800bb3e <STM32FXXXRccHSelect+0x6e>
		case 2: // PLL_P selected as system clock
			set_reg_block(&RCC->CFGR, 2, 0, 2);
 800bb14:	2302      	movs	r3, #2
 800bb16:	2200      	movs	r2, #0
 800bb18:	2102      	movs	r1, #2
 800bb1a:	480b      	ldr	r0, [pc, #44]	@ (800bb48 <STM32FXXXRccHSelect+0x78>)
 800bb1c:	f7f7 fd5e 	bl	80035dc <set_reg_block>
		break;
 800bb20:	e00d      	b.n	800bb3e <STM32FXXXRccHSelect+0x6e>
			#ifdef __STM32F446xx_H
				STM32FXXXRccWriteEnable();
				set_reg_block(&RCC->CFGR, 2, 0, 3);
				STM32FXXXRccWriteDisable();
			#else
				set_reg_block(&RCC->CFGR, 2, 0, 0);
 800bb22:	2300      	movs	r3, #0
 800bb24:	2200      	movs	r2, #0
 800bb26:	2102      	movs	r1, #2
 800bb28:	4807      	ldr	r0, [pc, #28]	@ (800bb48 <STM32FXXXRccHSelect+0x78>)
 800bb2a:	f7f7 fd57 	bl	80035dc <set_reg_block>
			#endif
		break;
 800bb2e:	e006      	b.n	800bb3e <STM32FXXXRccHSelect+0x6e>
		default: // 00: HSI oscillator selected as system clock
			set_reg_block(&RCC->CFGR, 2, 0, 0);
 800bb30:	2300      	movs	r3, #0
 800bb32:	2200      	movs	r2, #0
 800bb34:	2102      	movs	r1, #2
 800bb36:	4804      	ldr	r0, [pc, #16]	@ (800bb48 <STM32FXXXRccHSelect+0x78>)
 800bb38:	f7f7 fd50 	bl	80035dc <set_reg_block>
		break;
 800bb3c:	bf00      	nop
	}
}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	40023808 	.word	0x40023808

0800bb4c <STM32FXXXRccPLLSelect>:
uint8_t STM32FXXXRccPLLSelect(uint8_t hclock)
{ // This bit can be written only when PLL and PLLI2S are disabled
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&RCC->CR, 1, 24, 0); set_reg_block(&RCC->CR, 1, 26, 0);
 800bb56:	2300      	movs	r3, #0
 800bb58:	2218      	movs	r2, #24
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	4818      	ldr	r0, [pc, #96]	@ (800bbc0 <STM32FXXXRccPLLSelect+0x74>)
 800bb5e:	f7f7 fd3d 	bl	80035dc <set_reg_block>
 800bb62:	2300      	movs	r3, #0
 800bb64:	221a      	movs	r2, #26
 800bb66:	2101      	movs	r1, #1
 800bb68:	4815      	ldr	r0, [pc, #84]	@ (800bbc0 <STM32FXXXRccPLLSelect+0x74>)
 800bb6a:	f7f7 fd37 	bl	80035dc <set_reg_block>
	switch(hclock){
 800bb6e:	79fb      	ldrb	r3, [r7, #7]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <STM32FXXXRccPLLSelect+0x2e>
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d007      	beq.n	800bb88 <STM32FXXXRccPLLSelect+0x3c>
 800bb78:	e00d      	b.n	800bb96 <STM32FXXXRccPLLSelect+0x4a>
		case 0: // HSI
			set_reg_block(&RCC->PLLCFGR, 1, 22, 0);
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	2216      	movs	r2, #22
 800bb7e:	2101      	movs	r1, #1
 800bb80:	4810      	ldr	r0, [pc, #64]	@ (800bbc4 <STM32FXXXRccPLLSelect+0x78>)
 800bb82:	f7f7 fd2b 	bl	80035dc <set_reg_block>
		break;
 800bb86:	e00d      	b.n	800bba4 <STM32FXXXRccPLLSelect+0x58>
		case 1: // HSE
			set_reg_block(&RCC->PLLCFGR, 1, 22, 1);
 800bb88:	2301      	movs	r3, #1
 800bb8a:	2216      	movs	r2, #22
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	480d      	ldr	r0, [pc, #52]	@ (800bbc4 <STM32FXXXRccPLLSelect+0x78>)
 800bb90:	f7f7 fd24 	bl	80035dc <set_reg_block>
		break;
 800bb94:	e006      	b.n	800bba4 <STM32FXXXRccPLLSelect+0x58>
		default: // HSI
			set_reg_block(&RCC->PLLCFGR, 1, 22, 0);
 800bb96:	2300      	movs	r3, #0
 800bb98:	2216      	movs	r2, #22
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	4809      	ldr	r0, [pc, #36]	@ (800bbc4 <STM32FXXXRccPLLSelect+0x78>)
 800bb9e:	f7f7 fd1d 	bl	80035dc <set_reg_block>
		break;
 800bba2:	bf00      	nop
	}
	return get_reg_block(RCC->PLLCFGR, 1, 22);
 800bba4:	4b06      	ldr	r3, [pc, #24]	@ (800bbc0 <STM32FXXXRccPLLSelect+0x74>)
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	2216      	movs	r2, #22
 800bbaa:	2101      	movs	r1, #1
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7f7 fcb0 	bl	8003512 <get_reg_block>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	b2db      	uxtb	r3, r3
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	40023800 	.word	0x40023800
 800bbc4:	40023804 	.word	0x40023804

0800bbc8 <STM32FXXXRccLEnable>:
void STM32FXXXRccLEnable(uint8_t lclock)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	71fb      	strb	r3, [r7, #7]
	uint8_t set;
	uint8_t rdy;
	for( set = 1, rdy = 1; rdy ; ){
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	73fb      	strb	r3, [r7, #15]
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	73bb      	strb	r3, [r7, #14]
 800bbda:	e048      	b.n	800bc6e <STM32FXXXRccLEnable+0xa6>
		if(lclock == 0){ // LSION: Internal low-speed oscillator enable
 800bbdc:	79fb      	ldrb	r3, [r7, #7]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d114      	bne.n	800bc0c <STM32FXXXRccLEnable+0x44>
			if( set ){ RCC->CSR |= ( 1 << 0); set = 0; }else if( RCC->CSR & ( 1 << 1) ) rdy = 0;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d008      	beq.n	800bbfa <STM32FXXXRccLEnable+0x32>
 800bbe8:	4b25      	ldr	r3, [pc, #148]	@ (800bc80 <STM32FXXXRccLEnable+0xb8>)
 800bbea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbec:	4a24      	ldr	r2, [pc, #144]	@ (800bc80 <STM32FXXXRccLEnable+0xb8>)
 800bbee:	f043 0301 	orr.w	r3, r3, #1
 800bbf2:	6753      	str	r3, [r2, #116]	@ 0x74
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]
 800bbf8:	e039      	b.n	800bc6e <STM32FXXXRccLEnable+0xa6>
 800bbfa:	4b21      	ldr	r3, [pc, #132]	@ (800bc80 <STM32FXXXRccLEnable+0xb8>)
 800bbfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbfe:	f003 0302 	and.w	r3, r3, #2
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d033      	beq.n	800bc6e <STM32FXXXRccLEnable+0xa6>
 800bc06:	2300      	movs	r3, #0
 800bc08:	73bb      	strb	r3, [r7, #14]
 800bc0a:	e030      	b.n	800bc6e <STM32FXXXRccLEnable+0xa6>
		}
		else if(lclock == 1){ // LSEON: External low-speed oscillator enable
 800bc0c:	79fb      	ldrb	r3, [r7, #7]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d118      	bne.n	800bc44 <STM32FXXXRccLEnable+0x7c>
			if( set ){ STM32FXXXRccWriteEnable(); RCC->BDCR |= ( 1 << 0); STM32FXXXRccWriteDisable(); set = 0; }else if( RCC->BDCR & ( 1 << 1) ) rdy = 0;
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00c      	beq.n	800bc32 <STM32FXXXRccLEnable+0x6a>
 800bc18:	f000 fa6a 	bl	800c0f0 <STM32FXXXRccWriteEnable>
 800bc1c:	4b18      	ldr	r3, [pc, #96]	@ (800bc80 <STM32FXXXRccLEnable+0xb8>)
 800bc1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc20:	4a17      	ldr	r2, [pc, #92]	@ (800bc80 <STM32FXXXRccLEnable+0xb8>)
 800bc22:	f043 0301 	orr.w	r3, r3, #1
 800bc26:	6713      	str	r3, [r2, #112]	@ 0x70
 800bc28:	f000 fa72 	bl	800c110 <STM32FXXXRccWriteDisable>
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	73fb      	strb	r3, [r7, #15]
 800bc30:	e01d      	b.n	800bc6e <STM32FXXXRccLEnable+0xa6>
 800bc32:	4b13      	ldr	r3, [pc, #76]	@ (800bc80 <STM32FXXXRccLEnable+0xb8>)
 800bc34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc36:	f003 0302 	and.w	r3, r3, #2
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d017      	beq.n	800bc6e <STM32FXXXRccLEnable+0xa6>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	73bb      	strb	r3, [r7, #14]
 800bc42:	e014      	b.n	800bc6e <STM32FXXXRccLEnable+0xa6>
		}
		else if(lclock == 2){ // LSEBYP: External low-speed oscillator bypass
 800bc44:	79fb      	ldrb	r3, [r7, #7]
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	d10f      	bne.n	800bc6a <STM32FXXXRccLEnable+0xa2>
			if( set ){ STM32FXXXRccWriteEnable(); RCC->BDCR |= ( 1 << 2 ); STM32FXXXRccWriteDisable(); }
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d009      	beq.n	800bc64 <STM32FXXXRccLEnable+0x9c>
 800bc50:	f000 fa4e 	bl	800c0f0 <STM32FXXXRccWriteEnable>
 800bc54:	4b0a      	ldr	r3, [pc, #40]	@ (800bc80 <STM32FXXXRccLEnable+0xb8>)
 800bc56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc58:	4a09      	ldr	r2, [pc, #36]	@ (800bc80 <STM32FXXXRccLEnable+0xb8>)
 800bc5a:	f043 0304 	orr.w	r3, r3, #4
 800bc5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800bc60:	f000 fa56 	bl	800c110 <STM32FXXXRccWriteDisable>
			lclock = 1;
 800bc64:	2301      	movs	r3, #1
 800bc66:	71fb      	strb	r3, [r7, #7]
 800bc68:	e001      	b.n	800bc6e <STM32FXXXRccLEnable+0xa6>
		}
		else lclock = 0; // default
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	71fb      	strb	r3, [r7, #7]
	for( set = 1, rdy = 1; rdy ; ){
 800bc6e:	7bbb      	ldrb	r3, [r7, #14]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1b3      	bne.n	800bbdc <STM32FXXXRccLEnable+0x14>
	}
}
 800bc74:	bf00      	nop
 800bc76:	bf00      	nop
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	40023800 	.word	0x40023800

0800bc84 <STM32FXXXRccLSelect>:
void STM32FXXXRccLSelect(uint8_t lclock)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	71fb      	strb	r3, [r7, #7]
	switch(lclock){
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d01c      	beq.n	800bcce <STM32FXXXRccLSelect+0x4a>
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	dc25      	bgt.n	800bce4 <STM32FXXXRccLSelect+0x60>
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <STM32FXXXRccLSelect+0x1e>
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d00b      	beq.n	800bcb8 <STM32FXXXRccLSelect+0x34>
 800bca0:	e020      	b.n	800bce4 <STM32FXXXRccLSelect+0x60>
		case 0: // LSI oscillator clock used as the RTC clock
			STM32FXXXRccWriteEnable();
 800bca2:	f000 fa25 	bl	800c0f0 <STM32FXXXRccWriteEnable>
			set_reg_block(&RCC->BDCR, 2, 8, 2);
 800bca6:	2302      	movs	r3, #2
 800bca8:	2208      	movs	r2, #8
 800bcaa:	2102      	movs	r1, #2
 800bcac:	4815      	ldr	r0, [pc, #84]	@ (800bd04 <STM32FXXXRccLSelect+0x80>)
 800bcae:	f7f7 fc95 	bl	80035dc <set_reg_block>
			STM32FXXXRccWriteDisable();
 800bcb2:	f000 fa2d 	bl	800c110 <STM32FXXXRccWriteDisable>
		break;
 800bcb6:	e020      	b.n	800bcfa <STM32FXXXRccLSelect+0x76>
		case 1: // LSE oscillator clock used as the RTC clock
			STM32FXXXRccWriteEnable();
 800bcb8:	f000 fa1a 	bl	800c0f0 <STM32FXXXRccWriteEnable>
			set_reg_block(&RCC->BDCR, 2, 8, 1);
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	2208      	movs	r2, #8
 800bcc0:	2102      	movs	r1, #2
 800bcc2:	4810      	ldr	r0, [pc, #64]	@ (800bd04 <STM32FXXXRccLSelect+0x80>)
 800bcc4:	f7f7 fc8a 	bl	80035dc <set_reg_block>
			STM32FXXXRccWriteDisable();
 800bcc8:	f000 fa22 	bl	800c110 <STM32FXXXRccWriteDisable>
		break;
 800bccc:	e015      	b.n	800bcfa <STM32FXXXRccLSelect+0x76>
		case 2: // HSE oscillator clock divided by a programmable prescaler
			STM32FXXXRccWriteEnable();
 800bcce:	f000 fa0f 	bl	800c0f0 <STM32FXXXRccWriteEnable>
			set_reg_block(&RCC->BDCR, 2, 8, 3);
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	2208      	movs	r2, #8
 800bcd6:	2102      	movs	r1, #2
 800bcd8:	480a      	ldr	r0, [pc, #40]	@ (800bd04 <STM32FXXXRccLSelect+0x80>)
 800bcda:	f7f7 fc7f 	bl	80035dc <set_reg_block>
			STM32FXXXRccWriteDisable();
 800bcde:	f000 fa17 	bl	800c110 <STM32FXXXRccWriteDisable>
		break;
 800bce2:	e00a      	b.n	800bcfa <STM32FXXXRccLSelect+0x76>
		default: // LSE oscillator clock used as the RTC clock
			STM32FXXXRccWriteEnable();
 800bce4:	f000 fa04 	bl	800c0f0 <STM32FXXXRccWriteEnable>
			set_reg_block(&RCC->BDCR, 2, 8, 1);
 800bce8:	2301      	movs	r3, #1
 800bcea:	2208      	movs	r2, #8
 800bcec:	2102      	movs	r1, #2
 800bcee:	4805      	ldr	r0, [pc, #20]	@ (800bd04 <STM32FXXXRccLSelect+0x80>)
 800bcf0:	f7f7 fc74 	bl	80035dc <set_reg_block>
			STM32FXXXRccWriteDisable();
 800bcf4:	f000 fa0c 	bl	800c110 <STM32FXXXRccWriteDisable>
		break;
 800bcf8:	bf00      	nop
	}
}
 800bcfa:	bf00      	nop
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	40023870 	.word	0x40023870

0800bd08 <STM32FXXXPrescaler>:
void STM32FXXXPrescaler(uint16_t ahbpre, uint8_t ppre1, uint8_t ppre2, uint8_t rtcpre)
{
 800bd08:	b590      	push	{r4, r7, lr}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4604      	mov	r4, r0
 800bd10:	4608      	mov	r0, r1
 800bd12:	4611      	mov	r1, r2
 800bd14:	461a      	mov	r2, r3
 800bd16:	4623      	mov	r3, r4
 800bd18:	80fb      	strh	r3, [r7, #6]
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	717b      	strb	r3, [r7, #5]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	713b      	strb	r3, [r7, #4]
 800bd22:	4613      	mov	r3, r2
 800bd24:	70fb      	strb	r3, [r7, #3]
	set_reg_block(&RCC->CFGR, 5, 16, rtcpre);
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	2210      	movs	r2, #16
 800bd2a:	2105      	movs	r1, #5
 800bd2c:	4888      	ldr	r0, [pc, #544]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bd2e:	f7f7 fc55 	bl	80035dc <set_reg_block>
	switch(ppre2){ // 13
 800bd32:	793b      	ldrb	r3, [r7, #4]
 800bd34:	3b02      	subs	r3, #2
 800bd36:	2b0e      	cmp	r3, #14
 800bd38:	d83c      	bhi.n	800bdb4 <STM32FXXXPrescaler+0xac>
 800bd3a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd40 <STM32FXXXPrescaler+0x38>)
 800bd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd40:	0800bd7d 	.word	0x0800bd7d
 800bd44:	0800bdb5 	.word	0x0800bdb5
 800bd48:	0800bd8b 	.word	0x0800bd8b
 800bd4c:	0800bdb5 	.word	0x0800bdb5
 800bd50:	0800bdb5 	.word	0x0800bdb5
 800bd54:	0800bdb5 	.word	0x0800bdb5
 800bd58:	0800bd99 	.word	0x0800bd99
 800bd5c:	0800bdb5 	.word	0x0800bdb5
 800bd60:	0800bdb5 	.word	0x0800bdb5
 800bd64:	0800bdb5 	.word	0x0800bdb5
 800bd68:	0800bdb5 	.word	0x0800bdb5
 800bd6c:	0800bdb5 	.word	0x0800bdb5
 800bd70:	0800bdb5 	.word	0x0800bdb5
 800bd74:	0800bdb5 	.word	0x0800bdb5
 800bd78:	0800bda7 	.word	0x0800bda7
		case 2:
			set_reg_block(&RCC->CFGR, 3, 13, 4);
 800bd7c:	2304      	movs	r3, #4
 800bd7e:	220d      	movs	r2, #13
 800bd80:	2103      	movs	r1, #3
 800bd82:	4873      	ldr	r0, [pc, #460]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bd84:	f7f7 fc2a 	bl	80035dc <set_reg_block>
		break;
 800bd88:	e01b      	b.n	800bdc2 <STM32FXXXPrescaler+0xba>
		case 4:
			set_reg_block(&RCC->CFGR, 3, 13, 5);
 800bd8a:	2305      	movs	r3, #5
 800bd8c:	220d      	movs	r2, #13
 800bd8e:	2103      	movs	r1, #3
 800bd90:	486f      	ldr	r0, [pc, #444]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bd92:	f7f7 fc23 	bl	80035dc <set_reg_block>
		break;
 800bd96:	e014      	b.n	800bdc2 <STM32FXXXPrescaler+0xba>
		case 8:
			set_reg_block(&RCC->CFGR, 3, 13, 6);
 800bd98:	2306      	movs	r3, #6
 800bd9a:	220d      	movs	r2, #13
 800bd9c:	2103      	movs	r1, #3
 800bd9e:	486c      	ldr	r0, [pc, #432]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bda0:	f7f7 fc1c 	bl	80035dc <set_reg_block>
		break;
 800bda4:	e00d      	b.n	800bdc2 <STM32FXXXPrescaler+0xba>
		case 16:
			set_reg_block(&RCC->CFGR, 3, 13, 7);
 800bda6:	2307      	movs	r3, #7
 800bda8:	220d      	movs	r2, #13
 800bdaa:	2103      	movs	r1, #3
 800bdac:	4868      	ldr	r0, [pc, #416]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bdae:	f7f7 fc15 	bl	80035dc <set_reg_block>
		break;
 800bdb2:	e006      	b.n	800bdc2 <STM32FXXXPrescaler+0xba>
		default:
			set_reg_block(&RCC->CFGR, 3, 13, 0);
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	220d      	movs	r2, #13
 800bdb8:	2103      	movs	r1, #3
 800bdba:	4865      	ldr	r0, [pc, #404]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bdbc:	f7f7 fc0e 	bl	80035dc <set_reg_block>
		break;
 800bdc0:	bf00      	nop
	}
	switch(ppre1){ // 10
 800bdc2:	797b      	ldrb	r3, [r7, #5]
 800bdc4:	3b02      	subs	r3, #2
 800bdc6:	2b0e      	cmp	r3, #14
 800bdc8:	d83c      	bhi.n	800be44 <STM32FXXXPrescaler+0x13c>
 800bdca:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd0 <STM32FXXXPrescaler+0xc8>)
 800bdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd0:	0800be0d 	.word	0x0800be0d
 800bdd4:	0800be45 	.word	0x0800be45
 800bdd8:	0800be1b 	.word	0x0800be1b
 800bddc:	0800be45 	.word	0x0800be45
 800bde0:	0800be45 	.word	0x0800be45
 800bde4:	0800be45 	.word	0x0800be45
 800bde8:	0800be29 	.word	0x0800be29
 800bdec:	0800be45 	.word	0x0800be45
 800bdf0:	0800be45 	.word	0x0800be45
 800bdf4:	0800be45 	.word	0x0800be45
 800bdf8:	0800be45 	.word	0x0800be45
 800bdfc:	0800be45 	.word	0x0800be45
 800be00:	0800be45 	.word	0x0800be45
 800be04:	0800be45 	.word	0x0800be45
 800be08:	0800be37 	.word	0x0800be37
		case 2:
			set_reg_block(&RCC->CFGR, 3, 10, 4);
 800be0c:	2304      	movs	r3, #4
 800be0e:	220a      	movs	r2, #10
 800be10:	2103      	movs	r1, #3
 800be12:	484f      	ldr	r0, [pc, #316]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800be14:	f7f7 fbe2 	bl	80035dc <set_reg_block>
		break;
 800be18:	e01b      	b.n	800be52 <STM32FXXXPrescaler+0x14a>
		case 4:
			set_reg_block(&RCC->CFGR, 3, 10, 5);
 800be1a:	2305      	movs	r3, #5
 800be1c:	220a      	movs	r2, #10
 800be1e:	2103      	movs	r1, #3
 800be20:	484b      	ldr	r0, [pc, #300]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800be22:	f7f7 fbdb 	bl	80035dc <set_reg_block>
		break;
 800be26:	e014      	b.n	800be52 <STM32FXXXPrescaler+0x14a>
		case 8:
			set_reg_block(&RCC->CFGR, 3, 10, 6);
 800be28:	2306      	movs	r3, #6
 800be2a:	220a      	movs	r2, #10
 800be2c:	2103      	movs	r1, #3
 800be2e:	4848      	ldr	r0, [pc, #288]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800be30:	f7f7 fbd4 	bl	80035dc <set_reg_block>
		break;
 800be34:	e00d      	b.n	800be52 <STM32FXXXPrescaler+0x14a>
		case 16:
			set_reg_block(&RCC->CFGR, 3, 10, 7);
 800be36:	2307      	movs	r3, #7
 800be38:	220a      	movs	r2, #10
 800be3a:	2103      	movs	r1, #3
 800be3c:	4844      	ldr	r0, [pc, #272]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800be3e:	f7f7 fbcd 	bl	80035dc <set_reg_block>
		break;
 800be42:	e006      	b.n	800be52 <STM32FXXXPrescaler+0x14a>
		default:
			set_reg_block(&RCC->CFGR, 3, 10, 0);
 800be44:	2300      	movs	r3, #0
 800be46:	220a      	movs	r2, #10
 800be48:	2103      	movs	r1, #3
 800be4a:	4841      	ldr	r0, [pc, #260]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800be4c:	f7f7 fbc6 	bl	80035dc <set_reg_block>
		break;
 800be50:	bf00      	nop
	}
	switch(ahbpre){ // 4
 800be52:	88fb      	ldrh	r3, [r7, #6]
 800be54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be58:	d068      	beq.n	800bf2c <STM32FXXXPrescaler+0x224>
 800be5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be5e:	dc6c      	bgt.n	800bf3a <STM32FXXXPrescaler+0x232>
 800be60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be64:	d05b      	beq.n	800bf1e <STM32FXXXPrescaler+0x216>
 800be66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be6a:	dc66      	bgt.n	800bf3a <STM32FXXXPrescaler+0x232>
 800be6c:	2b80      	cmp	r3, #128	@ 0x80
 800be6e:	d04f      	beq.n	800bf10 <STM32FXXXPrescaler+0x208>
 800be70:	2b80      	cmp	r3, #128	@ 0x80
 800be72:	dc62      	bgt.n	800bf3a <STM32FXXXPrescaler+0x232>
 800be74:	2b10      	cmp	r3, #16
 800be76:	dc25      	bgt.n	800bec4 <STM32FXXXPrescaler+0x1bc>
 800be78:	2b02      	cmp	r3, #2
 800be7a:	db5e      	blt.n	800bf3a <STM32FXXXPrescaler+0x232>
 800be7c:	3b02      	subs	r3, #2
 800be7e:	2b0e      	cmp	r3, #14
 800be80:	d85b      	bhi.n	800bf3a <STM32FXXXPrescaler+0x232>
 800be82:	a201      	add	r2, pc, #4	@ (adr r2, 800be88 <STM32FXXXPrescaler+0x180>)
 800be84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be88:	0800becb 	.word	0x0800becb
 800be8c:	0800bf3b 	.word	0x0800bf3b
 800be90:	0800bed9 	.word	0x0800bed9
 800be94:	0800bf3b 	.word	0x0800bf3b
 800be98:	0800bf3b 	.word	0x0800bf3b
 800be9c:	0800bf3b 	.word	0x0800bf3b
 800bea0:	0800bee7 	.word	0x0800bee7
 800bea4:	0800bf3b 	.word	0x0800bf3b
 800bea8:	0800bf3b 	.word	0x0800bf3b
 800beac:	0800bf3b 	.word	0x0800bf3b
 800beb0:	0800bf3b 	.word	0x0800bf3b
 800beb4:	0800bf3b 	.word	0x0800bf3b
 800beb8:	0800bf3b 	.word	0x0800bf3b
 800bebc:	0800bf3b 	.word	0x0800bf3b
 800bec0:	0800bef5 	.word	0x0800bef5
 800bec4:	2b40      	cmp	r3, #64	@ 0x40
 800bec6:	d01c      	beq.n	800bf02 <STM32FXXXPrescaler+0x1fa>
 800bec8:	e037      	b.n	800bf3a <STM32FXXXPrescaler+0x232>
		case 2:
			set_reg_block(&RCC->CFGR, 4, 4, 8);
 800beca:	2308      	movs	r3, #8
 800becc:	2204      	movs	r2, #4
 800bece:	2104      	movs	r1, #4
 800bed0:	481f      	ldr	r0, [pc, #124]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bed2:	f7f7 fb83 	bl	80035dc <set_reg_block>
		break;
 800bed6:	e037      	b.n	800bf48 <STM32FXXXPrescaler+0x240>
		case 4:
			set_reg_block(&RCC->CFGR, 4, 4, 9);
 800bed8:	2309      	movs	r3, #9
 800beda:	2204      	movs	r2, #4
 800bedc:	2104      	movs	r1, #4
 800bede:	481c      	ldr	r0, [pc, #112]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bee0:	f7f7 fb7c 	bl	80035dc <set_reg_block>
		break;
 800bee4:	e030      	b.n	800bf48 <STM32FXXXPrescaler+0x240>
		case 8:
			set_reg_block(&RCC->CFGR, 4, 4, 10);
 800bee6:	230a      	movs	r3, #10
 800bee8:	2204      	movs	r2, #4
 800beea:	2104      	movs	r1, #4
 800beec:	4818      	ldr	r0, [pc, #96]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800beee:	f7f7 fb75 	bl	80035dc <set_reg_block>
		break;
 800bef2:	e029      	b.n	800bf48 <STM32FXXXPrescaler+0x240>
		case 16:
			set_reg_block(&RCC->CFGR, 4, 4, 11);
 800bef4:	230b      	movs	r3, #11
 800bef6:	2204      	movs	r2, #4
 800bef8:	2104      	movs	r1, #4
 800befa:	4815      	ldr	r0, [pc, #84]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800befc:	f7f7 fb6e 	bl	80035dc <set_reg_block>
		break;
 800bf00:	e022      	b.n	800bf48 <STM32FXXXPrescaler+0x240>
		case 64:
			set_reg_block(&RCC->CFGR, 4, 4, 12);
 800bf02:	230c      	movs	r3, #12
 800bf04:	2204      	movs	r2, #4
 800bf06:	2104      	movs	r1, #4
 800bf08:	4811      	ldr	r0, [pc, #68]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bf0a:	f7f7 fb67 	bl	80035dc <set_reg_block>
		break;
 800bf0e:	e01b      	b.n	800bf48 <STM32FXXXPrescaler+0x240>
		case 128:
			set_reg_block(&RCC->CFGR, 4, 4, 13);
 800bf10:	230d      	movs	r3, #13
 800bf12:	2204      	movs	r2, #4
 800bf14:	2104      	movs	r1, #4
 800bf16:	480e      	ldr	r0, [pc, #56]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bf18:	f7f7 fb60 	bl	80035dc <set_reg_block>
		break;
 800bf1c:	e014      	b.n	800bf48 <STM32FXXXPrescaler+0x240>
		case 256:
			set_reg_block(&RCC->CFGR, 4, 4, 14);
 800bf1e:	230e      	movs	r3, #14
 800bf20:	2204      	movs	r2, #4
 800bf22:	2104      	movs	r1, #4
 800bf24:	480a      	ldr	r0, [pc, #40]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bf26:	f7f7 fb59 	bl	80035dc <set_reg_block>
			break;
 800bf2a:	e00d      	b.n	800bf48 <STM32FXXXPrescaler+0x240>
		case 512:
			set_reg_block(&RCC->CFGR, 4, 4, 15);
 800bf2c:	230f      	movs	r3, #15
 800bf2e:	2204      	movs	r2, #4
 800bf30:	2104      	movs	r1, #4
 800bf32:	4807      	ldr	r0, [pc, #28]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bf34:	f7f7 fb52 	bl	80035dc <set_reg_block>
			break;
 800bf38:	e006      	b.n	800bf48 <STM32FXXXPrescaler+0x240>
		default:
			set_reg_block(&RCC->CFGR, 4, 4, 0);
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2204      	movs	r2, #4
 800bf3e:	2104      	movs	r1, #4
 800bf40:	4803      	ldr	r0, [pc, #12]	@ (800bf50 <STM32FXXXPrescaler+0x248>)
 800bf42:	f7f7 fb4b 	bl	80035dc <set_reg_block>
		break;
 800bf46:	bf00      	nop
	}
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd90      	pop	{r4, r7, pc}
 800bf50:	40023808 	.word	0x40023808

0800bf54 <STM32FXXXPLLDivision>:
// PLL
void STM32FXXXPLLDivision(uint8_t pllm, uint16_t plln, uint8_t pllp, uint8_t pllq)
{
 800bf54:	b590      	push	{r4, r7, lr}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	4611      	mov	r1, r2
 800bf60:	461a      	mov	r2, r3
 800bf62:	4623      	mov	r3, r4
 800bf64:	71fb      	strb	r3, [r7, #7]
 800bf66:	4603      	mov	r3, r0
 800bf68:	80bb      	strh	r3, [r7, #4]
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	71bb      	strb	r3, [r7, #6]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	70fb      	strb	r3, [r7, #3]
	set_reg_block(&RCC->CR, 1, 24, 0);
 800bf72:	2300      	movs	r3, #0
 800bf74:	2218      	movs	r2, #24
 800bf76:	2101      	movs	r1, #1
 800bf78:	4828      	ldr	r0, [pc, #160]	@ (800c01c <STM32FXXXPLLDivision+0xc8>)
 800bf7a:	f7f7 fb2f 	bl	80035dc <set_reg_block>
	set_reg_block(&RCC->PLLCFGR,4,24,pllq);
 800bf7e:	78fb      	ldrb	r3, [r7, #3]
 800bf80:	2218      	movs	r2, #24
 800bf82:	2104      	movs	r1, #4
 800bf84:	4826      	ldr	r0, [pc, #152]	@ (800c020 <STM32FXXXPLLDivision+0xcc>)
 800bf86:	f7f7 fb29 	bl	80035dc <set_reg_block>
	switch(pllp){
 800bf8a:	79bb      	ldrb	r3, [r7, #6]
 800bf8c:	3b02      	subs	r3, #2
 800bf8e:	2b06      	cmp	r3, #6
 800bf90:	d82c      	bhi.n	800bfec <STM32FXXXPLLDivision+0x98>
 800bf92:	a201      	add	r2, pc, #4	@ (adr r2, 800bf98 <STM32FXXXPLLDivision+0x44>)
 800bf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf98:	0800bfb5 	.word	0x0800bfb5
 800bf9c:	0800bfed 	.word	0x0800bfed
 800bfa0:	0800bfc3 	.word	0x0800bfc3
 800bfa4:	0800bfed 	.word	0x0800bfed
 800bfa8:	0800bfd1 	.word	0x0800bfd1
 800bfac:	0800bfed 	.word	0x0800bfed
 800bfb0:	0800bfdf 	.word	0x0800bfdf
		case 2:
			set_reg_block(&RCC->PLLCFGR,2,16,0);
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	2210      	movs	r2, #16
 800bfb8:	2102      	movs	r1, #2
 800bfba:	4819      	ldr	r0, [pc, #100]	@ (800c020 <STM32FXXXPLLDivision+0xcc>)
 800bfbc:	f7f7 fb0e 	bl	80035dc <set_reg_block>
		break;
 800bfc0:	e01b      	b.n	800bffa <STM32FXXXPLLDivision+0xa6>
		case 4:
			set_reg_block(&RCC->PLLCFGR,2,16,1);
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	2210      	movs	r2, #16
 800bfc6:	2102      	movs	r1, #2
 800bfc8:	4815      	ldr	r0, [pc, #84]	@ (800c020 <STM32FXXXPLLDivision+0xcc>)
 800bfca:	f7f7 fb07 	bl	80035dc <set_reg_block>
		break;
 800bfce:	e014      	b.n	800bffa <STM32FXXXPLLDivision+0xa6>
		case 6:
			set_reg_block(&RCC->PLLCFGR,2,16,2);
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	2210      	movs	r2, #16
 800bfd4:	2102      	movs	r1, #2
 800bfd6:	4812      	ldr	r0, [pc, #72]	@ (800c020 <STM32FXXXPLLDivision+0xcc>)
 800bfd8:	f7f7 fb00 	bl	80035dc <set_reg_block>
		break;
 800bfdc:	e00d      	b.n	800bffa <STM32FXXXPLLDivision+0xa6>
		case 8:
			set_reg_block(&RCC->PLLCFGR,2,16,3);
 800bfde:	2303      	movs	r3, #3
 800bfe0:	2210      	movs	r2, #16
 800bfe2:	2102      	movs	r1, #2
 800bfe4:	480e      	ldr	r0, [pc, #56]	@ (800c020 <STM32FXXXPLLDivision+0xcc>)
 800bfe6:	f7f7 faf9 	bl	80035dc <set_reg_block>
		break;
 800bfea:	e006      	b.n	800bffa <STM32FXXXPLLDivision+0xa6>
		default: // 2
			set_reg_block(&RCC->PLLCFGR,2,16,0);
 800bfec:	2300      	movs	r3, #0
 800bfee:	2210      	movs	r2, #16
 800bff0:	2102      	movs	r1, #2
 800bff2:	480b      	ldr	r0, [pc, #44]	@ (800c020 <STM32FXXXPLLDivision+0xcc>)
 800bff4:	f7f7 faf2 	bl	80035dc <set_reg_block>
		break;
 800bff8:	bf00      	nop
	}
	set_reg_block(&RCC->PLLCFGR,9,6,plln);
 800bffa:	88bb      	ldrh	r3, [r7, #4]
 800bffc:	2206      	movs	r2, #6
 800bffe:	2109      	movs	r1, #9
 800c000:	4807      	ldr	r0, [pc, #28]	@ (800c020 <STM32FXXXPLLDivision+0xcc>)
 800c002:	f7f7 faeb 	bl	80035dc <set_reg_block>
	set_reg_block(&RCC->PLLCFGR,6,0,pllm);
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	2200      	movs	r2, #0
 800c00a:	2106      	movs	r1, #6
 800c00c:	4804      	ldr	r0, [pc, #16]	@ (800c020 <STM32FXXXPLLDivision+0xcc>)
 800c00e:	f7f7 fae5 	bl	80035dc <set_reg_block>
}
 800c012:	bf00      	nop
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	bd90      	pop	{r4, r7, pc}
 800c01a:	bf00      	nop
 800c01c:	40023800 	.word	0x40023800
 800c020:	40023804 	.word	0x40023804

0800c024 <STM32FXXXRccPLLCLKEnable>:
void STM32FXXXRccPLLCLKEnable(void)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
	uint32_t rcc_time_out;
	//if(onoff){
		for( rcc_time_out = 0xFFFFFF, RCC->CR |= (1 << 24) ; !(RCC->CR & (1 << 25)) && rcc_time_out; rcc_time_out-- ); // PLLON: Main PLL (PLL) enable
 800c02a:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800c02e:	607b      	str	r3, [r7, #4]
 800c030:	4b0c      	ldr	r3, [pc, #48]	@ (800c064 <STM32FXXXRccPLLCLKEnable+0x40>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a0b      	ldr	r2, [pc, #44]	@ (800c064 <STM32FXXXRccPLLCLKEnable+0x40>)
 800c036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	e002      	b.n	800c044 <STM32FXXXRccPLLCLKEnable+0x20>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3b01      	subs	r3, #1
 800c042:	607b      	str	r3, [r7, #4]
 800c044:	4b07      	ldr	r3, [pc, #28]	@ (800c064 <STM32FXXXRccPLLCLKEnable+0x40>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d102      	bne.n	800c056 <STM32FXXXRccPLLCLKEnable+0x32>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1f3      	bne.n	800c03e <STM32FXXXRccPLLCLKEnable+0x1a>
	//}else{
		//RCC->CR &= (unsigned int) ~(1 << 24);
	//}
}
 800c056:	bf00      	nop
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	40023800 	.word	0x40023800

0800c068 <STM32FXXXRccPLLI2SEnable>:
void STM32FXXXRccPLLI2SEnable(void)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
	uint32_t rcc_time_out;
	//if(onoff)
		for( rcc_time_out = 0xFFFFFF, RCC->CR |= (1 << 26) ; !(RCC->CR & (1 << 27)) && rcc_time_out; rcc_time_out-- ); // PLLI2SON: PLLI2S enable
 800c06e:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800c072:	607b      	str	r3, [r7, #4]
 800c074:	4b0c      	ldr	r3, [pc, #48]	@ (800c0a8 <STM32FXXXRccPLLI2SEnable+0x40>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a0b      	ldr	r2, [pc, #44]	@ (800c0a8 <STM32FXXXRccPLLI2SEnable+0x40>)
 800c07a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	e002      	b.n	800c088 <STM32FXXXRccPLLI2SEnable+0x20>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	3b01      	subs	r3, #1
 800c086:	607b      	str	r3, [r7, #4]
 800c088:	4b07      	ldr	r3, [pc, #28]	@ (800c0a8 <STM32FXXXRccPLLI2SEnable+0x40>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c090:	2b00      	cmp	r3, #0
 800c092:	d102      	bne.n	800c09a <STM32FXXXRccPLLI2SEnable+0x32>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1f3      	bne.n	800c082 <STM32FXXXRccPLLI2SEnable+0x1a>
	//else
		//RCC->CR &= (unsigned int) ~(1 << 26);
}
 800c09a:	bf00      	nop
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	40023800 	.word	0x40023800

0800c0ac <STM32FXXXRccPLLSAIEnable>:
void STM32FXXXRccPLLSAIEnable(void)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
	uint32_t rcc_time_out;
	//if(onoff)
		for( rcc_time_out = 0xFFFFFF, RCC->CR |= (1 << 28) ; !(RCC->CR & (1 << 29)) && rcc_time_out; rcc_time_out-- ); // PLLSAION: PLLSAI enable
 800c0b2:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800c0b6:	607b      	str	r3, [r7, #4]
 800c0b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c0ec <STM32FXXXRccPLLSAIEnable+0x40>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a0b      	ldr	r2, [pc, #44]	@ (800c0ec <STM32FXXXRccPLLSAIEnable+0x40>)
 800c0be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	e002      	b.n	800c0cc <STM32FXXXRccPLLSAIEnable+0x20>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	607b      	str	r3, [r7, #4]
 800c0cc:	4b07      	ldr	r3, [pc, #28]	@ (800c0ec <STM32FXXXRccPLLSAIEnable+0x40>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d102      	bne.n	800c0de <STM32FXXXRccPLLSAIEnable+0x32>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1f3      	bne.n	800c0c6 <STM32FXXXRccPLLSAIEnable+0x1a>
	//else
		//RCC->CR &= (unsigned int) ~(1 << 28);
}
 800c0de:	bf00      	nop
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	40023800 	.word	0x40023800

0800c0f0 <STM32FXXXRccWriteEnable>:
void STM32FXXXRccPwrClock(uint8_t bool)
{
	set_reg_block(&RCC->APB1ENR, 1, 28, bool); // Power interface clock enable
}
void STM32FXXXRccWriteEnable(void)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	af00      	add	r7, sp, #0
	PWR->CR |= (1 << 8); // Disable protection
 800c0f4:	4b05      	ldr	r3, [pc, #20]	@ (800c10c <STM32FXXXRccWriteEnable+0x1c>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a04      	ldr	r2, [pc, #16]	@ (800c10c <STM32FXXXRccWriteEnable+0x1c>)
 800c0fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0fe:	6013      	str	r3, [r2, #0]
}
 800c100:	bf00      	nop
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	40007000 	.word	0x40007000

0800c110 <STM32FXXXRccWriteDisable>:
void STM32FXXXRccWriteDisable(void)
{
 800c110:	b480      	push	{r7}
 800c112:	af00      	add	r7, sp, #0
	PWR->CR &= (uint32_t) ~(1 << 8); // Enable protection
 800c114:	4b05      	ldr	r3, [pc, #20]	@ (800c12c <STM32FXXXRccWriteDisable+0x1c>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a04      	ldr	r2, [pc, #16]	@ (800c12c <STM32FXXXRccWriteDisable+0x1c>)
 800c11a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c11e:	6013      	str	r3, [r2, #0]
}
 800c120:	bf00      	nop
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	40007000 	.word	0x40007000

0800c130 <STM32FXXXRCC_nvic>:
/*** RCC Bit Mapping Definition ***/
/*** Other ***/
void STM32FXXXRCC_nvic(uint8_t bool)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	71fb      	strb	r3, [r7, #7]
	if(bool){ set_bit_block(NVIC->ISER, 1, RCC_IRQn, 1); } else{ set_bit_block(NVIC->ICER, 1, RCC_IRQn, 1); }
 800c13a:	79fb      	ldrb	r3, [r7, #7]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d006      	beq.n	800c14e <STM32FXXXRCC_nvic+0x1e>
 800c140:	2301      	movs	r3, #1
 800c142:	2205      	movs	r2, #5
 800c144:	2101      	movs	r1, #1
 800c146:	4807      	ldr	r0, [pc, #28]	@ (800c164 <STM32FXXXRCC_nvic+0x34>)
 800c148:	f7f7 faba 	bl	80036c0 <set_bit_block>
}
 800c14c:	e005      	b.n	800c15a <STM32FXXXRCC_nvic+0x2a>
	if(bool){ set_bit_block(NVIC->ISER, 1, RCC_IRQn, 1); } else{ set_bit_block(NVIC->ICER, 1, RCC_IRQn, 1); }
 800c14e:	2301      	movs	r3, #1
 800c150:	2205      	movs	r2, #5
 800c152:	2101      	movs	r1, #1
 800c154:	4804      	ldr	r0, [pc, #16]	@ (800c168 <STM32FXXXRCC_nvic+0x38>)
 800c156:	f7f7 fab3 	bl	80036c0 <set_bit_block>
}
 800c15a:	bf00      	nop
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	e000e100 	.word	0xe000e100
 800c168:	e000e180 	.word	0xe000e180

0800c16c <stm32fxxx_rcc_pll_inic>:
/*** Extended ***/
STM32FXXXRCCPLL* stm32fxxx_rcc_pll_inic(void)
{
 800c16c:	b480      	push	{r7}
 800c16e:	af00      	add	r7, sp, #0

	stm32fxxx_rcc_pll.division = STM32FXXXPLLDivision;
 800c170:	4b05      	ldr	r3, [pc, #20]	@ (800c188 <stm32fxxx_rcc_pll_inic+0x1c>)
 800c172:	4a06      	ldr	r2, [pc, #24]	@ (800c18c <stm32fxxx_rcc_pll_inic+0x20>)
 800c174:	601a      	str	r2, [r3, #0]
	stm32fxxx_rcc_pll.enable = STM32FXXXRccPLLCLKEnable;
 800c176:	4b04      	ldr	r3, [pc, #16]	@ (800c188 <stm32fxxx_rcc_pll_inic+0x1c>)
 800c178:	4a05      	ldr	r2, [pc, #20]	@ (800c190 <stm32fxxx_rcc_pll_inic+0x24>)
 800c17a:	605a      	str	r2, [r3, #4]
	return &stm32fxxx_rcc_pll;
 800c17c:	4b02      	ldr	r3, [pc, #8]	@ (800c188 <stm32fxxx_rcc_pll_inic+0x1c>)
}
 800c17e:	4618      	mov	r0, r3
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	20000b44 	.word	0x20000b44
 800c18c:	0800bf55 	.word	0x0800bf55
 800c190:	0800c025 	.word	0x0800c025

0800c194 <stm32fxxx_rcc_plli2s_inic>:
STM32FXXXRCCPLLI2S* stm32fxxx_rcc_plli2s_inic(void)
{
 800c194:	b480      	push	{r7}
 800c196:	af00      	add	r7, sp, #0

	stm32fxxx_rcc_plli2s.enable = STM32FXXXRccPLLI2SEnable;
 800c198:	4b04      	ldr	r3, [pc, #16]	@ (800c1ac <stm32fxxx_rcc_plli2s_inic+0x18>)
 800c19a:	4a05      	ldr	r2, [pc, #20]	@ (800c1b0 <stm32fxxx_rcc_plli2s_inic+0x1c>)
 800c19c:	601a      	str	r2, [r3, #0]
	return &stm32fxxx_rcc_plli2s;
 800c19e:	4b03      	ldr	r3, [pc, #12]	@ (800c1ac <stm32fxxx_rcc_plli2s_inic+0x18>)
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	20000b4c 	.word	0x20000b4c
 800c1b0:	0800c069 	.word	0x0800c069

0800c1b4 <stm32fxxx_rcc_pllsai_inic>:
STM32FXXXRCCPLLSAI* stm32fxxx_rcc_pllsai_inic(void)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	af00      	add	r7, sp, #0

	stm32fxxx_rcc_pllsai.enable = STM32FXXXRccPLLSAIEnable;
 800c1b8:	4b04      	ldr	r3, [pc, #16]	@ (800c1cc <stm32fxxx_rcc_pllsai_inic+0x18>)
 800c1ba:	4a05      	ldr	r2, [pc, #20]	@ (800c1d0 <stm32fxxx_rcc_pllsai_inic+0x1c>)
 800c1bc:	601a      	str	r2, [r3, #0]
	return &stm32fxxx_rcc_pllsai;
 800c1be:	4b03      	ldr	r3, [pc, #12]	@ (800c1cc <stm32fxxx_rcc_pllsai_inic+0x18>)
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	20000b50 	.word	0x20000b50
 800c1d0:	0800c0ad 	.word	0x0800c0ad

0800c1d4 <rcc_enable>:
/*** INIC Procedure & Function Definition ***/
STM32FXXX_RCC* rcc_enable(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	af00      	add	r7, sp, #0

	/*** RCC Bit Mapping Link ***/
	stm32fxxx_rcc.instance = (STM32FXXXRCC_TypeDef*) RCC;
 800c1d8:	4b14      	ldr	r3, [pc, #80]	@ (800c22c <rcc_enable+0x58>)
 800c1da:	4a15      	ldr	r2, [pc, #84]	@ (800c230 <rcc_enable+0x5c>)
 800c1dc:	601a      	str	r2, [r3, #0]
	stm32fxxx_rcc.prescaler = STM32FXXXPrescaler;
 800c1de:	4b13      	ldr	r3, [pc, #76]	@ (800c22c <rcc_enable+0x58>)
 800c1e0:	4a14      	ldr	r2, [pc, #80]	@ (800c234 <rcc_enable+0x60>)
 800c1e2:	605a      	str	r2, [r3, #4]
	/*** PLL ***/
	stm32fxxx_rcc.pll = stm32fxxx_rcc_pll_inic();
 800c1e4:	f7ff ffc2 	bl	800c16c <stm32fxxx_rcc_pll_inic>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	4a10      	ldr	r2, [pc, #64]	@ (800c22c <rcc_enable+0x58>)
 800c1ec:	6093      	str	r3, [r2, #8]
	stm32fxxx_rcc.plli2s = stm32fxxx_rcc_plli2s_inic();
 800c1ee:	f7ff ffd1 	bl	800c194 <stm32fxxx_rcc_plli2s_inic>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	4a0d      	ldr	r2, [pc, #52]	@ (800c22c <rcc_enable+0x58>)
 800c1f6:	60d3      	str	r3, [r2, #12]
	stm32fxxx_rcc.pllsai = stm32fxxx_rcc_pllsai_inic();
 800c1f8:	f7ff ffdc 	bl	800c1b4 <stm32fxxx_rcc_pllsai_inic>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	4a0b      	ldr	r2, [pc, #44]	@ (800c22c <rcc_enable+0x58>)
 800c200:	6113      	str	r3, [r2, #16]
	/*** Other ***/
	stm32fxxx_rcc.inic = rcc_start;
 800c202:	4b0a      	ldr	r3, [pc, #40]	@ (800c22c <rcc_enable+0x58>)
 800c204:	4a0c      	ldr	r2, [pc, #48]	@ (800c238 <rcc_enable+0x64>)
 800c206:	615a      	str	r2, [r3, #20]
	stm32fxxx_rcc.henable = STM32FXXXRccHEnable;
 800c208:	4b08      	ldr	r3, [pc, #32]	@ (800c22c <rcc_enable+0x58>)
 800c20a:	4a0c      	ldr	r2, [pc, #48]	@ (800c23c <rcc_enable+0x68>)
 800c20c:	619a      	str	r2, [r3, #24]
	stm32fxxx_rcc.hselect = STM32FXXXRccHSelect;
 800c20e:	4b07      	ldr	r3, [pc, #28]	@ (800c22c <rcc_enable+0x58>)
 800c210:	4a0b      	ldr	r2, [pc, #44]	@ (800c240 <rcc_enable+0x6c>)
 800c212:	61da      	str	r2, [r3, #28]
	stm32fxxx_rcc.lenable = STM32FXXXRccLEnable;
 800c214:	4b05      	ldr	r3, [pc, #20]	@ (800c22c <rcc_enable+0x58>)
 800c216:	4a0b      	ldr	r2, [pc, #44]	@ (800c244 <rcc_enable+0x70>)
 800c218:	621a      	str	r2, [r3, #32]
	stm32fxxx_rcc.lselect = STM32FXXXRccLSelect;
 800c21a:	4b04      	ldr	r3, [pc, #16]	@ (800c22c <rcc_enable+0x58>)
 800c21c:	4a0a      	ldr	r2, [pc, #40]	@ (800c248 <rcc_enable+0x74>)
 800c21e:	625a      	str	r2, [r3, #36]	@ 0x24
	/*** Nvic ***/
	stm32fxxx_rcc.nvic = STM32FXXXRCC_nvic;
 800c220:	4b02      	ldr	r3, [pc, #8]	@ (800c22c <rcc_enable+0x58>)
 800c222:	4a0a      	ldr	r2, [pc, #40]	@ (800c24c <rcc_enable+0x78>)
 800c224:	629a      	str	r2, [r3, #40]	@ 0x28
	return &stm32fxxx_rcc;
 800c226:	4b01      	ldr	r3, [pc, #4]	@ (800c22c <rcc_enable+0x58>)
}
 800c228:	4618      	mov	r0, r3
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	20000b54 	.word	0x20000b54
 800c230:	40023800 	.word	0x40023800
 800c234:	0800bd09 	.word	0x0800bd09
 800c238:	0800b9cd 	.word	0x0800b9cd
 800c23c:	0800ba19 	.word	0x0800ba19
 800c240:	0800bad1 	.word	0x0800bad1
 800c244:	0800bbc9 	.word	0x0800bbc9
 800c248:	0800bc85 	.word	0x0800bc85
 800c24c:	0800c131 	.word	0x0800c131

0800c250 <rtc_enable>:
char rtc_dec2bcd(char num);
void rtc_lenable(unsigned int lclock);
void rtc_lselect(uint8_t lclock);
/*** RTC Procedure & Function Definition ***/
STM32FXXX_RTC* rtc_enable(void)
{
 800c250:	b480      	push	{r7}
 800c252:	af00      	add	r7, sp, #0

	/***/
	stm32fxxx_rtc.Day = STM32FXXXRtcDay;
 800c254:	4b1a      	ldr	r3, [pc, #104]	@ (800c2c0 <rtc_enable+0x70>)
 800c256:	4a1b      	ldr	r2, [pc, #108]	@ (800c2c4 <rtc_enable+0x74>)
 800c258:	601a      	str	r2, [r3, #0]
	stm32fxxx_rtc.Month = STM32FXXXRtcMonth;
 800c25a:	4b19      	ldr	r3, [pc, #100]	@ (800c2c0 <rtc_enable+0x70>)
 800c25c:	4a1a      	ldr	r2, [pc, #104]	@ (800c2c8 <rtc_enable+0x78>)
 800c25e:	605a      	str	r2, [r3, #4]
	stm32fxxx_rtc.WeekDay = STM32FXXXRtcWeekDay;
 800c260:	4b17      	ldr	r3, [pc, #92]	@ (800c2c0 <rtc_enable+0x70>)
 800c262:	4a1a      	ldr	r2, [pc, #104]	@ (800c2cc <rtc_enable+0x7c>)
 800c264:	609a      	str	r2, [r3, #8]
	stm32fxxx_rtc.Year = STM32FXXXRtcYear;
 800c266:	4b16      	ldr	r3, [pc, #88]	@ (800c2c0 <rtc_enable+0x70>)
 800c268:	4a19      	ldr	r2, [pc, #100]	@ (800c2d0 <rtc_enable+0x80>)
 800c26a:	60da      	str	r2, [r3, #12]
	stm32fxxx_rtc.Hour = STM32FXXXRtcHour;
 800c26c:	4b14      	ldr	r3, [pc, #80]	@ (800c2c0 <rtc_enable+0x70>)
 800c26e:	4a19      	ldr	r2, [pc, #100]	@ (800c2d4 <rtc_enable+0x84>)
 800c270:	611a      	str	r2, [r3, #16]
	stm32fxxx_rtc.Minute = STM32FXXXRtcMinute;
 800c272:	4b13      	ldr	r3, [pc, #76]	@ (800c2c0 <rtc_enable+0x70>)
 800c274:	4a18      	ldr	r2, [pc, #96]	@ (800c2d8 <rtc_enable+0x88>)
 800c276:	615a      	str	r2, [r3, #20]
	stm32fxxx_rtc.Second = STM32FXXXRtcSecond;
 800c278:	4b11      	ldr	r3, [pc, #68]	@ (800c2c0 <rtc_enable+0x70>)
 800c27a:	4a18      	ldr	r2, [pc, #96]	@ (800c2dc <rtc_enable+0x8c>)
 800c27c:	619a      	str	r2, [r3, #24]
	stm32fxxx_rtc.dr2vec = STM32FXXXRtcdr2vec;
 800c27e:	4b10      	ldr	r3, [pc, #64]	@ (800c2c0 <rtc_enable+0x70>)
 800c280:	4a17      	ldr	r2, [pc, #92]	@ (800c2e0 <rtc_enable+0x90>)
 800c282:	61da      	str	r2, [r3, #28]
	stm32fxxx_rtc.tr2vec = STM32FXXXRtctr2vec;
 800c284:	4b0e      	ldr	r3, [pc, #56]	@ (800c2c0 <rtc_enable+0x70>)
 800c286:	4a17      	ldr	r2, [pc, #92]	@ (800c2e4 <rtc_enable+0x94>)
 800c288:	621a      	str	r2, [r3, #32]
	stm32fxxx_rtc.BckWrite = STM32FXXXRtcBckWrite;
 800c28a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c0 <rtc_enable+0x70>)
 800c28c:	4a16      	ldr	r2, [pc, #88]	@ (800c2e8 <rtc_enable+0x98>)
 800c28e:	625a      	str	r2, [r3, #36]	@ 0x24
	stm32fxxx_rtc.BckRead = STM32FXXXRtcBckRead;
 800c290:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c0 <rtc_enable+0x70>)
 800c292:	4a16      	ldr	r2, [pc, #88]	@ (800c2ec <rtc_enable+0x9c>)
 800c294:	629a      	str	r2, [r3, #40]	@ 0x28
	stm32fxxx_rtc.get_stsu = rtc_get_stsu;
 800c296:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c0 <rtc_enable+0x70>)
 800c298:	4a15      	ldr	r2, [pc, #84]	@ (800c2f0 <rtc_enable+0xa0>)
 800c29a:	62da      	str	r2, [r3, #44]	@ 0x2c
	stm32fxxx_rtc.get_ss = rtc_get_ss;
 800c29c:	4b08      	ldr	r3, [pc, #32]	@ (800c2c0 <rtc_enable+0x70>)
 800c29e:	4a15      	ldr	r2, [pc, #84]	@ (800c2f4 <rtc_enable+0xa4>)
 800c2a0:	631a      	str	r2, [r3, #48]	@ 0x30
	/*** Other ***/
	stm32fxxx_rtc.clock = STM32FXXXRtcClock;
 800c2a2:	4b07      	ldr	r3, [pc, #28]	@ (800c2c0 <rtc_enable+0x70>)
 800c2a4:	4a14      	ldr	r2, [pc, #80]	@ (800c2f8 <rtc_enable+0xa8>)
 800c2a6:	635a      	str	r2, [r3, #52]	@ 0x34
	stm32fxxx_rtc.nvic = STM32FXXXRtcNvic;
 800c2a8:	4b05      	ldr	r3, [pc, #20]	@ (800c2c0 <rtc_enable+0x70>)
 800c2aa:	4a14      	ldr	r2, [pc, #80]	@ (800c2fc <rtc_enable+0xac>)
 800c2ac:	63da      	str	r2, [r3, #60]	@ 0x3c
	stm32fxxx_rtc.inic = STM32FXXXRtcInic;
 800c2ae:	4b04      	ldr	r3, [pc, #16]	@ (800c2c0 <rtc_enable+0x70>)
 800c2b0:	4a13      	ldr	r2, [pc, #76]	@ (800c300 <rtc_enable+0xb0>)
 800c2b2:	639a      	str	r2, [r3, #56]	@ 0x38

	return &stm32fxxx_rtc;
 800c2b4:	4b02      	ldr	r3, [pc, #8]	@ (800c2c0 <rtc_enable+0x70>)
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	20000b80 	.word	0x20000b80
 800c2c4:	0800c781 	.word	0x0800c781
 800c2c8:	0800c699 	.word	0x0800c699
 800c2cc:	0800c71d 	.word	0x0800c71d
 800c2d0:	0800c615 	.word	0x0800c615
 800c2d4:	0800c48d 	.word	0x0800c48d
 800c2d8:	0800c511 	.word	0x0800c511
 800c2dc:	0800c595 	.word	0x0800c595
 800c2e0:	0800c801 	.word	0x0800c801
 800c2e4:	0800c939 	.word	0x0800c939
 800c2e8:	0800c40d 	.word	0x0800c40d
 800c2ec:	0800c455 	.word	0x0800c455
 800c2f0:	0800ca49 	.word	0x0800ca49
 800c2f4:	0800ca71 	.word	0x0800ca71
 800c2f8:	0800c319 	.word	0x0800c319
 800c2fc:	0800c359 	.word	0x0800c359
 800c300:	0800c3d5 	.word	0x0800c3d5

0800c304 <rtc>:

STM32FXXX_RTC* rtc(void){ return (STM32FXXX_RTC*) &stm32fxxx_rtc; }
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0
 800c308:	4b02      	ldr	r3, [pc, #8]	@ (800c314 <rtc+0x10>)
 800c30a:	4618      	mov	r0, r3
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	20000b80 	.word	0x20000b80

0800c318 <STM32FXXXRtcClock>:

/*** Procedure & Function Definition ***/
void STM32FXXXRtcClock(uint8_t bool)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	4603      	mov	r3, r0
 800c320:	71fb      	strb	r3, [r7, #7]
	STM32FXXXRtcWriteEnable();
 800c322:	f000 fbd5 	bl	800cad0 <STM32FXXXRtcWriteEnable>
	if(bool){ RCC->BDCR |= (1 <<  15); }else{ RCC->BDCR &= ~(1 <<  15); }
 800c326:	79fb      	ldrb	r3, [r7, #7]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d006      	beq.n	800c33a <STM32FXXXRtcClock+0x22>
 800c32c:	4b09      	ldr	r3, [pc, #36]	@ (800c354 <STM32FXXXRtcClock+0x3c>)
 800c32e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c330:	4a08      	ldr	r2, [pc, #32]	@ (800c354 <STM32FXXXRtcClock+0x3c>)
 800c332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c336:	6713      	str	r3, [r2, #112]	@ 0x70
 800c338:	e005      	b.n	800c346 <STM32FXXXRtcClock+0x2e>
 800c33a:	4b06      	ldr	r3, [pc, #24]	@ (800c354 <STM32FXXXRtcClock+0x3c>)
 800c33c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c33e:	4a05      	ldr	r2, [pc, #20]	@ (800c354 <STM32FXXXRtcClock+0x3c>)
 800c340:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c344:	6713      	str	r3, [r2, #112]	@ 0x70
	STM32FXXXRtcWriteDisable();
 800c346:	f000 fbd3 	bl	800caf0 <STM32FXXXRtcWriteDisable>

}
 800c34a:	bf00      	nop
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	40023800 	.word	0x40023800

0800c358 <STM32FXXXRtcNvic>:
void STM32FXXXRtcNvic(uint8_t value)
{ // 3, 41
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	4603      	mov	r3, r0
 800c360:	71fb      	strb	r3, [r7, #7]
	switch(value){
 800c362:	79fb      	ldrb	r3, [r7, #7]
 800c364:	3b01      	subs	r3, #1
 800c366:	2b05      	cmp	r3, #5
 800c368:	d82a      	bhi.n	800c3c0 <STM32FXXXRtcNvic+0x68>
 800c36a:	a201      	add	r2, pc, #4	@ (adr r2, 800c370 <STM32FXXXRtcNvic+0x18>)
 800c36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c370:	0800c389 	.word	0x0800c389
 800c374:	0800c397 	.word	0x0800c397
 800c378:	0800c3c1 	.word	0x0800c3c1
 800c37c:	0800c3c1 	.word	0x0800c3c1
 800c380:	0800c3a5 	.word	0x0800c3a5
 800c384:	0800c3b3 	.word	0x0800c3b3
		case 0b01:
			set_bit_block(NVIC->ISER, 1, RTC_WKUP_IRQn, 1);
 800c388:	2301      	movs	r3, #1
 800c38a:	2203      	movs	r2, #3
 800c38c:	2101      	movs	r1, #1
 800c38e:	480f      	ldr	r0, [pc, #60]	@ (800c3cc <STM32FXXXRtcNvic+0x74>)
 800c390:	f7f7 f996 	bl	80036c0 <set_bit_block>
		break;
 800c394:	e015      	b.n	800c3c2 <STM32FXXXRtcNvic+0x6a>
		case 0b10:
			set_bit_block(NVIC->ISER, 1, RTC_Alarm_IRQn, 1);
 800c396:	2301      	movs	r3, #1
 800c398:	2229      	movs	r2, #41	@ 0x29
 800c39a:	2101      	movs	r1, #1
 800c39c:	480b      	ldr	r0, [pc, #44]	@ (800c3cc <STM32FXXXRtcNvic+0x74>)
 800c39e:	f7f7 f98f 	bl	80036c0 <set_bit_block>
		break;
 800c3a2:	e00e      	b.n	800c3c2 <STM32FXXXRtcNvic+0x6a>
		case 0b101:
			set_bit_block(NVIC->ICER, 1, RTC_WKUP_IRQn, 1);
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	4809      	ldr	r0, [pc, #36]	@ (800c3d0 <STM32FXXXRtcNvic+0x78>)
 800c3ac:	f7f7 f988 	bl	80036c0 <set_bit_block>
		break;
 800c3b0:	e007      	b.n	800c3c2 <STM32FXXXRtcNvic+0x6a>
		case 0b110:
			set_bit_block(NVIC->ICER, 1, RTC_Alarm_IRQn, 1);
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	2229      	movs	r2, #41	@ 0x29
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	4805      	ldr	r0, [pc, #20]	@ (800c3d0 <STM32FXXXRtcNvic+0x78>)
 800c3ba:	f7f7 f981 	bl	80036c0 <set_bit_block>
		break;
 800c3be:	e000      	b.n	800c3c2 <STM32FXXXRtcNvic+0x6a>
	default:
	break;
 800c3c0:	bf00      	nop
	}
}
 800c3c2:	bf00      	nop
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	e000e100 	.word	0xe000e100
 800c3d0:	e000e180 	.word	0xe000e180

0800c3d4 <STM32FXXXRtcInic>:
void STM32FXXXRtcInic(uint8_t clock)
{ // RM0390 pg657
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	71fb      	strb	r3, [r7, #7]
	STM32FXXXPwrClock(1);
 800c3de:	2001      	movs	r0, #1
 800c3e0:	f000 fb52 	bl	800ca88 <STM32FXXXPwrClock>
	STM32FXXXBckSramClock(1);
 800c3e4:	2001      	movs	r0, #1
 800c3e6:	f000 fb61 	bl	800caac <STM32FXXXBckSramClock>
	STM32FXXXRtcClock(1);
 800c3ea:	2001      	movs	r0, #1
 800c3ec:	f7ff ff94 	bl	800c318 <STM32FXXXRtcClock>

	rtc_lenable(clock);
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f000 fc66 	bl	800ccc4 <rtc_lenable>
	rtc_lselect(clock);
 800c3f8:	79fb      	ldrb	r3, [r7, #7]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 fcc2 	bl	800cd84 <rtc_lselect>

	STM32FXXXRtcStopRead();
 800c400:	f000 fbce 	bl	800cba0 <STM32FXXXRtcStopRead>
	//STM32FXXXRtcRegUnlock();
	//STM32FXXXRtcRegWrite(&RTC->TR, 0x130000);
	//STM32FXXXRtcRegWrite(&RTC->DR, 0x215124);
	//RTC->CR &= (uint32_t) ~(1 << 5); // BYPSHAD: Disable Bypass the shadow registers
	//STM32FXXXRtcWriteDisable();
}
 800c404:	bf00      	nop
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <STM32FXXXRtcBckWrite>:

void STM32FXXXRtcBckWrite(uint8_t n, uint8_t data)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	4603      	mov	r3, r0
 800c414:	460a      	mov	r2, r1
 800c416:	71fb      	strb	r3, [r7, #7]
 800c418:	4613      	mov	r3, r2
 800c41a:	71bb      	strb	r3, [r7, #6]
	STM32FXXXPwrClock(1);
 800c41c:	2001      	movs	r0, #1
 800c41e:	f000 fb33 	bl	800ca88 <STM32FXXXPwrClock>
	STM32FXXXBckSramClock(1);
 800c422:	2001      	movs	r0, #1
 800c424:	f000 fb42 	bl	800caac <STM32FXXXBckSramClock>
	STM32FXXXRtcWriteEnable();
 800c428:	f000 fb52 	bl	800cad0 <STM32FXXXRtcWriteEnable>
	if(n < 80){ set_bit_block(&RTC->BKP0R, 8, (n * 8), data); }
 800c42c:	79fb      	ldrb	r3, [r7, #7]
 800c42e:	2b4f      	cmp	r3, #79	@ 0x4f
 800c430:	d807      	bhi.n	800c442 <STM32FXXXRtcBckWrite+0x36>
 800c432:	79fb      	ldrb	r3, [r7, #7]
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	b2da      	uxtb	r2, r3
 800c438:	79bb      	ldrb	r3, [r7, #6]
 800c43a:	2108      	movs	r1, #8
 800c43c:	4804      	ldr	r0, [pc, #16]	@ (800c450 <STM32FXXXRtcBckWrite+0x44>)
 800c43e:	f7f7 f93f 	bl	80036c0 <set_bit_block>
	STM32FXXXRtcWriteDisable();
 800c442:	f000 fb55 	bl	800caf0 <STM32FXXXRtcWriteDisable>
}
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	40002850 	.word	0x40002850

0800c454 <STM32FXXXRtcBckRead>:

uint8_t STM32FXXXRtcBckRead(uint8_t n)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	4603      	mov	r3, r0
 800c45c:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	73fb      	strb	r3, [r7, #15]
	if(n < 80){
 800c462:	79fb      	ldrb	r3, [r7, #7]
 800c464:	2b4f      	cmp	r3, #79	@ 0x4f
 800c466:	d809      	bhi.n	800c47c <STM32FXXXRtcBckRead+0x28>
		value = get_bit_block(&RTC->BKP0R, 8, (n * 8));
 800c468:	79fb      	ldrb	r3, [r7, #7]
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	461a      	mov	r2, r3
 800c470:	2108      	movs	r1, #8
 800c472:	4805      	ldr	r0, [pc, #20]	@ (800c488 <STM32FXXXRtcBckRead+0x34>)
 800c474:	f7f7 f8e8 	bl	8003648 <get_bit_block>
 800c478:	4603      	mov	r3, r0
 800c47a:	73fb      	strb	r3, [r7, #15]
	}
	return value;
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	40002850 	.word	0x40002850

0800c48c <STM32FXXXRtcHour>:

void STM32FXXXRtcHour(uint8_t hour)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	4603      	mov	r3, r0
 800c494:	71fb      	strb	r3, [r7, #7]
	uint32_t Time;
	uint8_t t, u;
	const uint32_t mask = 0x003F0000;
 800c496:	f44f 137c 	mov.w	r3, #4128768	@ 0x3f0000
 800c49a:	617b      	str	r3, [r7, #20]
	
	t = rtc_dec2bcd(hour / 10);
 800c49c:	79fb      	ldrb	r3, [r7, #7]
 800c49e:	4a1a      	ldr	r2, [pc, #104]	@ (800c508 <STM32FXXXRtcHour+0x7c>)
 800c4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a4:	08db      	lsrs	r3, r3, #3
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f000 fbe9 	bl	800cc80 <rtc_dec2bcd>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	74fb      	strb	r3, [r7, #19]
	u = rtc_dec2bcd(hour % 10);
 800c4b2:	79fa      	ldrb	r2, [r7, #7]
 800c4b4:	4b14      	ldr	r3, [pc, #80]	@ (800c508 <STM32FXXXRtcHour+0x7c>)
 800c4b6:	fba3 1302 	umull	r1, r3, r3, r2
 800c4ba:	08d9      	lsrs	r1, r3, #3
 800c4bc:	460b      	mov	r3, r1
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	440b      	add	r3, r1
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 fbd9 	bl	800cc80 <rtc_dec2bcd>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	74bb      	strb	r3, [r7, #18]
	STM32FXXXRtcWaitRead();
 800c4d2:	f000 fb75 	bl	800cbc0 <STM32FXXXRtcWaitRead>
	Time = RTC->TR;
 800c4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c50c <STM32FXXXRtcHour+0x80>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	60fb      	str	r3, [r7, #12]
	Time &= (uint32_t) ~mask; // clear ht and hu
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	43db      	mvns	r3, r3
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	60fb      	str	r3, [r7, #12]
	// hu, ht
	Time |= (uint32_t) ((u << 16) | (t << 20));
 800c4e6:	7cbb      	ldrb	r3, [r7, #18]
 800c4e8:	041a      	lsls	r2, r3, #16
 800c4ea:	7cfb      	ldrb	r3, [r7, #19]
 800c4ec:	051b      	lsls	r3, r3, #20
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	60fb      	str	r3, [r7, #12]
	STM32FXXXRtcSetTr(Time);
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f000 fb7f 	bl	800cbfc <STM32FXXXRtcSetTr>
}
 800c4fe:	bf00      	nop
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	cccccccd 	.word	0xcccccccd
 800c50c:	40002800 	.word	0x40002800

0800c510 <STM32FXXXRtcMinute>:

void STM32FXXXRtcMinute(uint8_t minute)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b086      	sub	sp, #24
 800c514:	af00      	add	r7, sp, #0
 800c516:	4603      	mov	r3, r0
 800c518:	71fb      	strb	r3, [r7, #7]
	uint32_t Time;
	uint8_t t, u;
	const uint32_t mask = 0x00007F00;
 800c51a:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 800c51e:	617b      	str	r3, [r7, #20]
	
	t = rtc_dec2bcd(minute / 10);
 800c520:	79fb      	ldrb	r3, [r7, #7]
 800c522:	4a1a      	ldr	r2, [pc, #104]	@ (800c58c <STM32FXXXRtcMinute+0x7c>)
 800c524:	fba2 2303 	umull	r2, r3, r2, r3
 800c528:	08db      	lsrs	r3, r3, #3
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	4618      	mov	r0, r3
 800c52e:	f000 fba7 	bl	800cc80 <rtc_dec2bcd>
 800c532:	4603      	mov	r3, r0
 800c534:	74fb      	strb	r3, [r7, #19]
	u = rtc_dec2bcd(minute % 10);
 800c536:	79fa      	ldrb	r2, [r7, #7]
 800c538:	4b14      	ldr	r3, [pc, #80]	@ (800c58c <STM32FXXXRtcMinute+0x7c>)
 800c53a:	fba3 1302 	umull	r1, r3, r3, r2
 800c53e:	08d9      	lsrs	r1, r3, #3
 800c540:	460b      	mov	r3, r1
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	440b      	add	r3, r1
 800c546:	005b      	lsls	r3, r3, #1
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 fb97 	bl	800cc80 <rtc_dec2bcd>
 800c552:	4603      	mov	r3, r0
 800c554:	74bb      	strb	r3, [r7, #18]
	STM32FXXXRtcWaitRead();
 800c556:	f000 fb33 	bl	800cbc0 <STM32FXXXRtcWaitRead>
	Time = RTC->TR;
 800c55a:	4b0d      	ldr	r3, [pc, #52]	@ (800c590 <STM32FXXXRtcMinute+0x80>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	60fb      	str	r3, [r7, #12]
	Time &= (uint32_t) ~mask; // clear mnt and mnu
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	43db      	mvns	r3, r3
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	4013      	ands	r3, r2
 800c568:	60fb      	str	r3, [r7, #12]
	// mnu, mnt
	Time |= (uint32_t) ((u << 8) | (t << 12));
 800c56a:	7cbb      	ldrb	r3, [r7, #18]
 800c56c:	021a      	lsls	r2, r3, #8
 800c56e:	7cfb      	ldrb	r3, [r7, #19]
 800c570:	031b      	lsls	r3, r3, #12
 800c572:	4313      	orrs	r3, r2
 800c574:	461a      	mov	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	4313      	orrs	r3, r2
 800c57a:	60fb      	str	r3, [r7, #12]
	STM32FXXXRtcSetTr(Time);
 800c57c:	68f8      	ldr	r0, [r7, #12]
 800c57e:	f000 fb3d 	bl	800cbfc <STM32FXXXRtcSetTr>
}
 800c582:	bf00      	nop
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	cccccccd 	.word	0xcccccccd
 800c590:	40002800 	.word	0x40002800

0800c594 <STM32FXXXRtcSecond>:

void STM32FXXXRtcSecond(uint8_t second)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	4603      	mov	r3, r0
 800c59c:	71fb      	strb	r3, [r7, #7]
	uint32_t Time;
	uint8_t t, u;
	const uint32_t mask = 0x0000007F;
 800c59e:	237f      	movs	r3, #127	@ 0x7f
 800c5a0:	617b      	str	r3, [r7, #20]
	
	t = rtc_dec2bcd(second / 10);
 800c5a2:	79fb      	ldrb	r3, [r7, #7]
 800c5a4:	4a19      	ldr	r2, [pc, #100]	@ (800c60c <STM32FXXXRtcSecond+0x78>)
 800c5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5aa:	08db      	lsrs	r3, r3, #3
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fb66 	bl	800cc80 <rtc_dec2bcd>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	74fb      	strb	r3, [r7, #19]
	u = rtc_dec2bcd(second % 10);
 800c5b8:	79fa      	ldrb	r2, [r7, #7]
 800c5ba:	4b14      	ldr	r3, [pc, #80]	@ (800c60c <STM32FXXXRtcSecond+0x78>)
 800c5bc:	fba3 1302 	umull	r1, r3, r3, r2
 800c5c0:	08d9      	lsrs	r1, r3, #3
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	440b      	add	r3, r1
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 fb56 	bl	800cc80 <rtc_dec2bcd>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	74bb      	strb	r3, [r7, #18]
	STM32FXXXRtcWaitRead();
 800c5d8:	f000 faf2 	bl	800cbc0 <STM32FXXXRtcWaitRead>
	Time = RTC->TR;
 800c5dc:	4b0c      	ldr	r3, [pc, #48]	@ (800c610 <STM32FXXXRtcSecond+0x7c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	60fb      	str	r3, [r7, #12]
	Time &= (uint32_t) ~mask; // clear st and su
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	43db      	mvns	r3, r3
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	60fb      	str	r3, [r7, #12]
	// su, st
	Time |= (uint32_t) ((u << 0) | (t << 4));
 800c5ec:	7cba      	ldrb	r2, [r7, #18]
 800c5ee:	7cfb      	ldrb	r3, [r7, #19]
 800c5f0:	011b      	lsls	r3, r3, #4
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	60fb      	str	r3, [r7, #12]
	STM32FXXXRtcSetTr(Time);
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f000 fafd 	bl	800cbfc <STM32FXXXRtcSetTr>
}
 800c602:	bf00      	nop
 800c604:	3718      	adds	r7, #24
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	cccccccd 	.word	0xcccccccd
 800c610:	40002800 	.word	0x40002800

0800c614 <STM32FXXXRtcYear>:

void STM32FXXXRtcYear(uint8_t year)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b086      	sub	sp, #24
 800c618:	af00      	add	r7, sp, #0
 800c61a:	4603      	mov	r3, r0
 800c61c:	71fb      	strb	r3, [r7, #7]
	uint32_t Date;
	uint8_t t, u;
	const uint32_t mask = 0x00FF0000;
 800c61e:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 800c622:	617b      	str	r3, [r7, #20]
	
	t = rtc_dec2bcd(year / 10);
 800c624:	79fb      	ldrb	r3, [r7, #7]
 800c626:	4a1a      	ldr	r2, [pc, #104]	@ (800c690 <STM32FXXXRtcYear+0x7c>)
 800c628:	fba2 2303 	umull	r2, r3, r2, r3
 800c62c:	08db      	lsrs	r3, r3, #3
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	4618      	mov	r0, r3
 800c632:	f000 fb25 	bl	800cc80 <rtc_dec2bcd>
 800c636:	4603      	mov	r3, r0
 800c638:	74fb      	strb	r3, [r7, #19]
	u = rtc_dec2bcd(year % 10);
 800c63a:	79fa      	ldrb	r2, [r7, #7]
 800c63c:	4b14      	ldr	r3, [pc, #80]	@ (800c690 <STM32FXXXRtcYear+0x7c>)
 800c63e:	fba3 1302 	umull	r1, r3, r3, r2
 800c642:	08d9      	lsrs	r1, r3, #3
 800c644:	460b      	mov	r3, r1
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	440b      	add	r3, r1
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	4618      	mov	r0, r3
 800c652:	f000 fb15 	bl	800cc80 <rtc_dec2bcd>
 800c656:	4603      	mov	r3, r0
 800c658:	74bb      	strb	r3, [r7, #18]
	STM32FXXXRtcWaitRead();
 800c65a:	f000 fab1 	bl	800cbc0 <STM32FXXXRtcWaitRead>
	Date = RTC->DR;
 800c65e:	4b0d      	ldr	r3, [pc, #52]	@ (800c694 <STM32FXXXRtcYear+0x80>)
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	60fb      	str	r3, [r7, #12]
	Date &= (uint32_t) ~mask; // clear YT and YU
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	43db      	mvns	r3, r3
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	4013      	ands	r3, r2
 800c66c:	60fb      	str	r3, [r7, #12]
	// YU, YT
	Date |= (uint32_t) ((u << 16) | (t << 20));
 800c66e:	7cbb      	ldrb	r3, [r7, #18]
 800c670:	041a      	lsls	r2, r3, #16
 800c672:	7cfb      	ldrb	r3, [r7, #19]
 800c674:	051b      	lsls	r3, r3, #20
 800c676:	4313      	orrs	r3, r2
 800c678:	461a      	mov	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	60fb      	str	r3, [r7, #12]
	STM32FXXXRtcSetDr(Date);
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 facf 	bl	800cc24 <STM32FXXXRtcSetDr>
}
 800c686:	bf00      	nop
 800c688:	3718      	adds	r7, #24
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	cccccccd 	.word	0xcccccccd
 800c694:	40002800 	.word	0x40002800

0800c698 <STM32FXXXRtcMonth>:

void STM32FXXXRtcMonth(uint8_t month)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	71fb      	strb	r3, [r7, #7]
	uint32_t Date;
	uint8_t t, u;
	const uint32_t mask = 0x00001F00;
 800c6a2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800c6a6:	617b      	str	r3, [r7, #20]
	
	t = rtc_dec2bcd(month / 10);
 800c6a8:	79fb      	ldrb	r3, [r7, #7]
 800c6aa:	4a1a      	ldr	r2, [pc, #104]	@ (800c714 <STM32FXXXRtcMonth+0x7c>)
 800c6ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b0:	08db      	lsrs	r3, r3, #3
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fae3 	bl	800cc80 <rtc_dec2bcd>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	74fb      	strb	r3, [r7, #19]
	u = rtc_dec2bcd(month % 10);
 800c6be:	79fa      	ldrb	r2, [r7, #7]
 800c6c0:	4b14      	ldr	r3, [pc, #80]	@ (800c714 <STM32FXXXRtcMonth+0x7c>)
 800c6c2:	fba3 1302 	umull	r1, r3, r3, r2
 800c6c6:	08d9      	lsrs	r1, r3, #3
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	440b      	add	r3, r1
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 fad3 	bl	800cc80 <rtc_dec2bcd>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	74bb      	strb	r3, [r7, #18]
	STM32FXXXRtcWaitRead();
 800c6de:	f000 fa6f 	bl	800cbc0 <STM32FXXXRtcWaitRead>
	Date = RTC->DR;
 800c6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c718 <STM32FXXXRtcMonth+0x80>)
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	60fb      	str	r3, [r7, #12]
	Date &= (uint32_t) ~mask; // clear MT and MU
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	43db      	mvns	r3, r3
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	4013      	ands	r3, r2
 800c6f0:	60fb      	str	r3, [r7, #12]
	// MU, MT
	Date |= (uint32_t) ((u << 8) | (t << 12));
 800c6f2:	7cbb      	ldrb	r3, [r7, #18]
 800c6f4:	021a      	lsls	r2, r3, #8
 800c6f6:	7cfb      	ldrb	r3, [r7, #19]
 800c6f8:	031b      	lsls	r3, r3, #12
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	4313      	orrs	r3, r2
 800c702:	60fb      	str	r3, [r7, #12]
	STM32FXXXRtcSetDr(Date);
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 fa8d 	bl	800cc24 <STM32FXXXRtcSetDr>
}
 800c70a:	bf00      	nop
 800c70c:	3718      	adds	r7, #24
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	cccccccd 	.word	0xcccccccd
 800c718:	40002800 	.word	0x40002800

0800c71c <STM32FXXXRtcWeekDay>:

void STM32FXXXRtcWeekDay(uint8_t weekday)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	71fb      	strb	r3, [r7, #7]
	uint32_t Date;
	uint8_t u;
	const uint32_t mask = 0x0000E0000;
 800c726:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 800c72a:	617b      	str	r3, [r7, #20]
	
	u = rtc_dec2bcd(weekday % 10);
 800c72c:	79fa      	ldrb	r2, [r7, #7]
 800c72e:	4b12      	ldr	r3, [pc, #72]	@ (800c778 <STM32FXXXRtcWeekDay+0x5c>)
 800c730:	fba3 1302 	umull	r1, r3, r3, r2
 800c734:	08d9      	lsrs	r1, r3, #3
 800c736:	460b      	mov	r3, r1
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	440b      	add	r3, r1
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	b2db      	uxtb	r3, r3
 800c742:	4618      	mov	r0, r3
 800c744:	f000 fa9c 	bl	800cc80 <rtc_dec2bcd>
 800c748:	4603      	mov	r3, r0
 800c74a:	74fb      	strb	r3, [r7, #19]
	STM32FXXXRtcWaitRead();
 800c74c:	f000 fa38 	bl	800cbc0 <STM32FXXXRtcWaitRead>
	Date = RTC->DR;
 800c750:	4b0a      	ldr	r3, [pc, #40]	@ (800c77c <STM32FXXXRtcWeekDay+0x60>)
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	60fb      	str	r3, [r7, #12]
	Date &= (uint32_t) ~mask; // clear WDU
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	43db      	mvns	r3, r3
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	4013      	ands	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
	// WDU
	Date |= (uint32_t) (u << 13);
 800c760:	7cfb      	ldrb	r3, [r7, #19]
 800c762:	035b      	lsls	r3, r3, #13
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	4313      	orrs	r3, r2
 800c768:	60fb      	str	r3, [r7, #12]
	STM32FXXXRtcSetDr(Date);
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f000 fa5a 	bl	800cc24 <STM32FXXXRtcSetDr>
}
 800c770:	bf00      	nop
 800c772:	3718      	adds	r7, #24
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	cccccccd 	.word	0xcccccccd
 800c77c:	40002800 	.word	0x40002800

0800c780 <STM32FXXXRtcDay>:

void STM32FXXXRtcDay(uint8_t day)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	4603      	mov	r3, r0
 800c788:	71fb      	strb	r3, [r7, #7]
	uint32_t Date;
	uint8_t t, u;
	const uint32_t mask = 0x0000003F;
 800c78a:	233f      	movs	r3, #63	@ 0x3f
 800c78c:	617b      	str	r3, [r7, #20]
	
	t = rtc_dec2bcd(day / 10);
 800c78e:	79fb      	ldrb	r3, [r7, #7]
 800c790:	4a19      	ldr	r2, [pc, #100]	@ (800c7f8 <STM32FXXXRtcDay+0x78>)
 800c792:	fba2 2303 	umull	r2, r3, r2, r3
 800c796:	08db      	lsrs	r3, r3, #3
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	4618      	mov	r0, r3
 800c79c:	f000 fa70 	bl	800cc80 <rtc_dec2bcd>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	74fb      	strb	r3, [r7, #19]
	u = rtc_dec2bcd(day % 10);
 800c7a4:	79fa      	ldrb	r2, [r7, #7]
 800c7a6:	4b14      	ldr	r3, [pc, #80]	@ (800c7f8 <STM32FXXXRtcDay+0x78>)
 800c7a8:	fba3 1302 	umull	r1, r3, r3, r2
 800c7ac:	08d9      	lsrs	r1, r3, #3
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	440b      	add	r3, r1
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f000 fa60 	bl	800cc80 <rtc_dec2bcd>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	74bb      	strb	r3, [r7, #18]
	STM32FXXXRtcWaitRead();
 800c7c4:	f000 f9fc 	bl	800cbc0 <STM32FXXXRtcWaitRead>
	Date = RTC->DR;
 800c7c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c7fc <STM32FXXXRtcDay+0x7c>)
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	60fb      	str	r3, [r7, #12]
	Date &= (uint32_t) ~mask; // clear DT and DU
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	43db      	mvns	r3, r3
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	4013      	ands	r3, r2
 800c7d6:	60fb      	str	r3, [r7, #12]
	// DU, DT
	Date |= (uint32_t) ((u << 0) | (t << 4));
 800c7d8:	7cba      	ldrb	r2, [r7, #18]
 800c7da:	7cfb      	ldrb	r3, [r7, #19]
 800c7dc:	011b      	lsls	r3, r3, #4
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]
	STM32FXXXRtcSetDr(Date);
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f000 fa1b 	bl	800cc24 <STM32FXXXRtcSetDr>
}
 800c7ee:	bf00      	nop
 800c7f0:	3718      	adds	r7, #24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	cccccccd 	.word	0xcccccccd
 800c7fc:	40002800 	.word	0x40002800

0800c800 <STM32FXXXRtcdr2vec>:

void STM32FXXXRtcdr2vec(char* rtc_vect)
{
 800c800:	b590      	push	{r4, r7, lr}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
	if(RTC->ISR & (1 << 5)){ // RSF: Registers synchronisation flag
 800c808:	4b4a      	ldr	r3, [pc, #296]	@ (800c934 <STM32FXXXRtcdr2vec+0x134>)
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	f003 0320 	and.w	r3, r3, #32
 800c810:	2b00      	cmp	r3, #0
 800c812:	f000 808b 	beq.w	800c92c <STM32FXXXRtcdr2vec+0x12c>
		uint32_t dr = RTC->DR;
 800c816:	4b47      	ldr	r3, [pc, #284]	@ (800c934 <STM32FXXXRtcdr2vec+0x134>)
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	60fb      	str	r3, [r7, #12]
		// YT
		rtc_vect[0] = (uint8_t) (dr >> 20) & 0x0F;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	0d1b      	lsrs	r3, r3, #20
 800c820:	b2db      	uxtb	r3, r3
 800c822:	f003 030f 	and.w	r3, r3, #15
 800c826:	b2da      	uxtb	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	701a      	strb	r2, [r3, #0]
		rtc_vect[0] = rtc_bcd2dec(rtc_vect[0]);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fa0b 	bl	800cc4c <rtc_bcd2dec>
 800c836:	4603      	mov	r3, r0
 800c838:	461a      	mov	r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	701a      	strb	r2, [r3, #0]
		// YU
		rtc_vect[1] = (uint8_t) (dr >> 16) & 0x0F;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	0c1b      	lsrs	r3, r3, #16
 800c842:	b2da      	uxtb	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	3301      	adds	r3, #1
 800c848:	f002 020f 	and.w	r2, r2, #15
 800c84c:	b2d2      	uxtb	r2, r2
 800c84e:	701a      	strb	r2, [r3, #0]
		rtc_vect[1] = rtc_bcd2dec(rtc_vect[1]);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	3301      	adds	r3, #1
 800c854:	781a      	ldrb	r2, [r3, #0]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	1c5c      	adds	r4, r3, #1
 800c85a:	4610      	mov	r0, r2
 800c85c:	f000 f9f6 	bl	800cc4c <rtc_bcd2dec>
 800c860:	4603      	mov	r3, r0
 800c862:	7023      	strb	r3, [r4, #0]
		// WDU
		rtc_vect[2] = (uint8_t) (dr >> 13) & 0x07;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	0b5b      	lsrs	r3, r3, #13
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	3302      	adds	r3, #2
 800c86e:	f002 0207 	and.w	r2, r2, #7
 800c872:	b2d2      	uxtb	r2, r2
 800c874:	701a      	strb	r2, [r3, #0]
		rtc_vect[2] = rtc_bcd2dec(rtc_vect[2]);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	3302      	adds	r3, #2
 800c87a:	781a      	ldrb	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	1c9c      	adds	r4, r3, #2
 800c880:	4610      	mov	r0, r2
 800c882:	f000 f9e3 	bl	800cc4c <rtc_bcd2dec>
 800c886:	4603      	mov	r3, r0
 800c888:	7023      	strb	r3, [r4, #0]
		// MT
		rtc_vect[3] = (uint8_t) (dr >> 12) & 0x01;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	0b1b      	lsrs	r3, r3, #12
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	3303      	adds	r3, #3
 800c894:	f002 0201 	and.w	r2, r2, #1
 800c898:	b2d2      	uxtb	r2, r2
 800c89a:	701a      	strb	r2, [r3, #0]
		rtc_vect[3] = rtc_bcd2dec(rtc_vect[3]);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3303      	adds	r3, #3
 800c8a0:	781a      	ldrb	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	1cdc      	adds	r4, r3, #3
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	f000 f9d0 	bl	800cc4c <rtc_bcd2dec>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	7023      	strb	r3, [r4, #0]
		// MU
		rtc_vect[4] = (uint8_t) (dr >> 8) & 0x0F;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	0a1b      	lsrs	r3, r3, #8
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	f002 020f 	and.w	r2, r2, #15
 800c8be:	b2d2      	uxtb	r2, r2
 800c8c0:	701a      	strb	r2, [r3, #0]
		rtc_vect[4] = rtc_bcd2dec(rtc_vect[4]);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	781a      	ldrb	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	1d1c      	adds	r4, r3, #4
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	f000 f9bd 	bl	800cc4c <rtc_bcd2dec>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	7023      	strb	r3, [r4, #0]
		// DT
		rtc_vect[5] = (uint8_t) (dr >> 4) & 0x03;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	091b      	lsrs	r3, r3, #4
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	3305      	adds	r3, #5
 800c8e0:	f002 0203 	and.w	r2, r2, #3
 800c8e4:	b2d2      	uxtb	r2, r2
 800c8e6:	701a      	strb	r2, [r3, #0]
		rtc_vect[5] = rtc_bcd2dec(rtc_vect[5]);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3305      	adds	r3, #5
 800c8ec:	781a      	ldrb	r2, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	1d5c      	adds	r4, r3, #5
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	f000 f9aa 	bl	800cc4c <rtc_bcd2dec>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	7023      	strb	r3, [r4, #0]
		// DU
		rtc_vect[6] = (uint8_t) dr & 0x0F;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	3306      	adds	r3, #6
 800c904:	f002 020f 	and.w	r2, r2, #15
 800c908:	b2d2      	uxtb	r2, r2
 800c90a:	701a      	strb	r2, [r3, #0]
		rtc_vect[6] = rtc_bcd2dec(rtc_vect[6]);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	3306      	adds	r3, #6
 800c910:	781a      	ldrb	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	1d9c      	adds	r4, r3, #6
 800c916:	4610      	mov	r0, r2
 800c918:	f000 f998 	bl	800cc4c <rtc_bcd2dec>
 800c91c:	4603      	mov	r3, r0
 800c91e:	7023      	strb	r3, [r4, #0]
		// Store Value
		// Clear Registers synchronisation flag
		RTC->ISR &= (uint32_t) ~(1 << 5);
 800c920:	4b04      	ldr	r3, [pc, #16]	@ (800c934 <STM32FXXXRtcdr2vec+0x134>)
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	4a03      	ldr	r2, [pc, #12]	@ (800c934 <STM32FXXXRtcdr2vec+0x134>)
 800c926:	f023 0320 	bic.w	r3, r3, #32
 800c92a:	60d3      	str	r3, [r2, #12]
	}
}
 800c92c:	bf00      	nop
 800c92e:	3714      	adds	r7, #20
 800c930:	46bd      	mov	sp, r7
 800c932:	bd90      	pop	{r4, r7, pc}
 800c934:	40002800 	.word	0x40002800

0800c938 <STM32FXXXRtctr2vec>:

void STM32FXXXRtctr2vec(char* rtc_vect)
{
 800c938:	b590      	push	{r4, r7, lr}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
	if(RTC->ISR & (1 << 5)){ // RSF: Registers synchronisation flag
 800c940:	4b40      	ldr	r3, [pc, #256]	@ (800ca44 <STM32FXXXRtctr2vec+0x10c>)
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	f003 0320 	and.w	r3, r3, #32
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d077      	beq.n	800ca3c <STM32FXXXRtctr2vec+0x104>
		uint32_t tr = RTC->TR;
 800c94c:	4b3d      	ldr	r3, [pc, #244]	@ (800ca44 <STM32FXXXRtctr2vec+0x10c>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	60fb      	str	r3, [r7, #12]
		// ht
		rtc_vect[0] = (uint8_t) (tr >> 20) & 0x03;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	0d1b      	lsrs	r3, r3, #20
 800c956:	b2db      	uxtb	r3, r3
 800c958:	f003 0303 	and.w	r3, r3, #3
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	701a      	strb	r2, [r3, #0]
		rtc_vect[0] = rtc_bcd2dec(rtc_vect[0]);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	4618      	mov	r0, r3
 800c968:	f000 f970 	bl	800cc4c <rtc_bcd2dec>
 800c96c:	4603      	mov	r3, r0
 800c96e:	461a      	mov	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	701a      	strb	r2, [r3, #0]
		// hu
		rtc_vect[1] = (uint8_t) (tr >> 16) & 0x0F;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	0c1b      	lsrs	r3, r3, #16
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	3301      	adds	r3, #1
 800c97e:	f002 020f 	and.w	r2, r2, #15
 800c982:	b2d2      	uxtb	r2, r2
 800c984:	701a      	strb	r2, [r3, #0]
		rtc_vect[1] = rtc_bcd2dec(rtc_vect[1]);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	3301      	adds	r3, #1
 800c98a:	781a      	ldrb	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	1c5c      	adds	r4, r3, #1
 800c990:	4610      	mov	r0, r2
 800c992:	f000 f95b 	bl	800cc4c <rtc_bcd2dec>
 800c996:	4603      	mov	r3, r0
 800c998:	7023      	strb	r3, [r4, #0]
		// mnt
		rtc_vect[2] = (uint8_t) (tr >> 12) & 0x07;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	0b1b      	lsrs	r3, r3, #12
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	3302      	adds	r3, #2
 800c9a4:	f002 0207 	and.w	r2, r2, #7
 800c9a8:	b2d2      	uxtb	r2, r2
 800c9aa:	701a      	strb	r2, [r3, #0]
		rtc_vect[2] = rtc_bcd2dec(rtc_vect[2]);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	3302      	adds	r3, #2
 800c9b0:	781a      	ldrb	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	1c9c      	adds	r4, r3, #2
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	f000 f948 	bl	800cc4c <rtc_bcd2dec>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	7023      	strb	r3, [r4, #0]
		// mnu
		rtc_vect[3] = (uint8_t) (tr >> 8) & 0x0F;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	0a1b      	lsrs	r3, r3, #8
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	3303      	adds	r3, #3
 800c9ca:	f002 020f 	and.w	r2, r2, #15
 800c9ce:	b2d2      	uxtb	r2, r2
 800c9d0:	701a      	strb	r2, [r3, #0]
		rtc_vect[3] = rtc_bcd2dec(rtc_vect[3]);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	3303      	adds	r3, #3
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	1cdc      	adds	r4, r3, #3
 800c9dc:	4610      	mov	r0, r2
 800c9de:	f000 f935 	bl	800cc4c <rtc_bcd2dec>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	7023      	strb	r3, [r4, #0]
		// st
		rtc_vect[4] = (uint8_t) (tr >> 4) & 0x07;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	091b      	lsrs	r3, r3, #4
 800c9ea:	b2da      	uxtb	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	f002 0207 	and.w	r2, r2, #7
 800c9f4:	b2d2      	uxtb	r2, r2
 800c9f6:	701a      	strb	r2, [r3, #0]
		rtc_vect[4] = rtc_bcd2dec(rtc_vect[4]);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	781a      	ldrb	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	1d1c      	adds	r4, r3, #4
 800ca02:	4610      	mov	r0, r2
 800ca04:	f000 f922 	bl	800cc4c <rtc_bcd2dec>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	7023      	strb	r3, [r4, #0]
		// su
		rtc_vect[5] = (uint8_t) tr & 0x0F;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3305      	adds	r3, #5
 800ca14:	f002 020f 	and.w	r2, r2, #15
 800ca18:	b2d2      	uxtb	r2, r2
 800ca1a:	701a      	strb	r2, [r3, #0]
		rtc_vect[5] = rtc_bcd2dec(rtc_vect[5]);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	3305      	adds	r3, #5
 800ca20:	781a      	ldrb	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	1d5c      	adds	r4, r3, #5
 800ca26:	4610      	mov	r0, r2
 800ca28:	f000 f910 	bl	800cc4c <rtc_bcd2dec>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	7023      	strb	r3, [r4, #0]
		// Store value
		// Clear Registers synchronisation flag
		RTC->ISR &= (uint32_t) ~(1 << 5);
 800ca30:	4b04      	ldr	r3, [pc, #16]	@ (800ca44 <STM32FXXXRtctr2vec+0x10c>)
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	4a03      	ldr	r2, [pc, #12]	@ (800ca44 <STM32FXXXRtctr2vec+0x10c>)
 800ca36:	f023 0320 	bic.w	r3, r3, #32
 800ca3a:	60d3      	str	r3, [r2, #12]
	}
}
 800ca3c:	bf00      	nop
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd90      	pop	{r4, r7, pc}
 800ca44:	40002800 	.word	0x40002800

0800ca48 <rtc_get_stsu>:

uint8_t rtc_get_stsu(void)
{ // BCD
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
	uint32_t tr = RTC->TR;
 800ca4e:	4b07      	ldr	r3, [pc, #28]	@ (800ca6c <rtc_get_stsu+0x24>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	607b      	str	r3, [r7, #4]
	return (uint8_t) (tr & 0x007F);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca5c:	b2db      	uxtb	r3, r3
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	370c      	adds	r7, #12
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	40002800 	.word	0x40002800

0800ca70 <rtc_get_ss>:
{ // BCD
	uint32_t tr = RTC->TR;
	return (uint8_t) tr & 0x0F;
}
uint16_t rtc_get_ss(void)
{
 800ca70:	b480      	push	{r7}
 800ca72:	af00      	add	r7, sp, #0
	return RTC->SSR;
 800ca74:	4b03      	ldr	r3, [pc, #12]	@ (800ca84 <rtc_get_ss+0x14>)
 800ca76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca78:	b29b      	uxth	r3, r3
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	40002800 	.word	0x40002800

0800ca88 <STM32FXXXPwrClock>:

/*** AUX Procedure & Function Definition ***/
void STM32FXXXPwrClock(uint8_t bool)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	4603      	mov	r3, r0
 800ca90:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&RCC->APB1ENR, 1, 28, bool); // Power interface clock enable
 800ca92:	79fb      	ldrb	r3, [r7, #7]
 800ca94:	221c      	movs	r2, #28
 800ca96:	2101      	movs	r1, #1
 800ca98:	4803      	ldr	r0, [pc, #12]	@ (800caa8 <STM32FXXXPwrClock+0x20>)
 800ca9a:	f7f6 fd9f 	bl	80035dc <set_reg_block>
}
 800ca9e:	bf00      	nop
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	40023840 	.word	0x40023840

0800caac <STM32FXXXBckSramClock>:
void STM32FXXXBckSramClock(uint8_t bool)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	4603      	mov	r3, r0
 800cab4:	71fb      	strb	r3, [r7, #7]
	#ifdef STM32F446xx
		set_reg_block(&RCC->AHB1ENR, 1, 18, bool); // Backup SRAM interface clock enable
	#endif
	set_reg_block(&RCC->AHB1LPENR, 1, 16, bool); // Backup SRAM interface clock enable
 800cab6:	79fb      	ldrb	r3, [r7, #7]
 800cab8:	2210      	movs	r2, #16
 800caba:	2101      	movs	r1, #1
 800cabc:	4803      	ldr	r0, [pc, #12]	@ (800cacc <STM32FXXXBckSramClock+0x20>)
 800cabe:	f7f6 fd8d 	bl	80035dc <set_reg_block>
}
 800cac2:	bf00      	nop
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	40023850 	.word	0x40023850

0800cad0 <STM32FXXXRtcWriteEnable>:
void STM32FXXXRtcWriteEnable(void)
{
 800cad0:	b480      	push	{r7}
 800cad2:	af00      	add	r7, sp, #0
	PWR->CR |= (1 << 8); // Disable protection
 800cad4:	4b05      	ldr	r3, [pc, #20]	@ (800caec <STM32FXXXRtcWriteEnable+0x1c>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a04      	ldr	r2, [pc, #16]	@ (800caec <STM32FXXXRtcWriteEnable+0x1c>)
 800cada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cade:	6013      	str	r3, [r2, #0]
}
 800cae0:	bf00      	nop
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	40007000 	.word	0x40007000

0800caf0 <STM32FXXXRtcWriteDisable>:
void STM32FXXXRtcWriteDisable(void)
{
 800caf0:	b480      	push	{r7}
 800caf2:	af00      	add	r7, sp, #0
	PWR->CR &= (uint32_t) ~(1 << 8); // Enable protection
 800caf4:	4b05      	ldr	r3, [pc, #20]	@ (800cb0c <STM32FXXXRtcWriteDisable+0x1c>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a04      	ldr	r2, [pc, #16]	@ (800cb0c <STM32FXXXRtcWriteDisable+0x1c>)
 800cafa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cafe:	6013      	str	r3, [r2, #0]
}
 800cb00:	bf00      	nop
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	40007000 	.word	0x40007000

0800cb10 <STM32FXXXRtcRegUnlock>:
void STM32FXXXRtcRegUnlock(void)
{
 800cb10:	b480      	push	{r7}
 800cb12:	af00      	add	r7, sp, #0
	RTC->WPR |= RTC_KEY1;
 800cb14:	4b08      	ldr	r3, [pc, #32]	@ (800cb38 <STM32FXXXRtcRegUnlock+0x28>)
 800cb16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb18:	4a07      	ldr	r2, [pc, #28]	@ (800cb38 <STM32FXXXRtcRegUnlock+0x28>)
 800cb1a:	f043 03ca 	orr.w	r3, r3, #202	@ 0xca
 800cb1e:	6253      	str	r3, [r2, #36]	@ 0x24
	RTC->WPR |= RTC_KEY2;
 800cb20:	4b05      	ldr	r3, [pc, #20]	@ (800cb38 <STM32FXXXRtcRegUnlock+0x28>)
 800cb22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb24:	4a04      	ldr	r2, [pc, #16]	@ (800cb38 <STM32FXXXRtcRegUnlock+0x28>)
 800cb26:	f043 0353 	orr.w	r3, r3, #83	@ 0x53
 800cb2a:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800cb2c:	bf00      	nop
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	40002800 	.word	0x40002800

0800cb3c <STM32FXXXRtcRegWrite>:
void STM32FXXXRtcRegWrite(volatile uint32_t* rtc_reg, uint32_t value)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
	RTC->ISR |= (1 << 7); // INIT
 800cb46:	4b14      	ldr	r3, [pc, #80]	@ (800cb98 <STM32FXXXRtcRegWrite+0x5c>)
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	4a13      	ldr	r2, [pc, #76]	@ (800cb98 <STM32FXXXRtcRegWrite+0x5c>)
 800cb4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb50:	60d3      	str	r3, [r2, #12]
	for( rtc_time_out = 100; !(RTC->ISR & (1 << 6)) && rtc_time_out; rtc_time_out-- ); // INITF: Initialisation flag
 800cb52:	4b12      	ldr	r3, [pc, #72]	@ (800cb9c <STM32FXXXRtcRegWrite+0x60>)
 800cb54:	2264      	movs	r2, #100	@ 0x64
 800cb56:	601a      	str	r2, [r3, #0]
 800cb58:	e004      	b.n	800cb64 <STM32FXXXRtcRegWrite+0x28>
 800cb5a:	4b10      	ldr	r3, [pc, #64]	@ (800cb9c <STM32FXXXRtcRegWrite+0x60>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	4a0e      	ldr	r2, [pc, #56]	@ (800cb9c <STM32FXXXRtcRegWrite+0x60>)
 800cb62:	6013      	str	r3, [r2, #0]
 800cb64:	4b0c      	ldr	r3, [pc, #48]	@ (800cb98 <STM32FXXXRtcRegWrite+0x5c>)
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d103      	bne.n	800cb78 <STM32FXXXRtcRegWrite+0x3c>
 800cb70:	4b0a      	ldr	r3, [pc, #40]	@ (800cb9c <STM32FXXXRtcRegWrite+0x60>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1f0      	bne.n	800cb5a <STM32FXXXRtcRegWrite+0x1e>
	*rtc_reg = value;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	683a      	ldr	r2, [r7, #0]
 800cb7c:	601a      	str	r2, [r3, #0]
	RTC->ISR &= (uint32_t) ~(1 << 7);
 800cb7e:	4b06      	ldr	r3, [pc, #24]	@ (800cb98 <STM32FXXXRtcRegWrite+0x5c>)
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	4a05      	ldr	r2, [pc, #20]	@ (800cb98 <STM32FXXXRtcRegWrite+0x5c>)
 800cb84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb88:	60d3      	str	r3, [r2, #12]
}
 800cb8a:	bf00      	nop
 800cb8c:	370c      	adds	r7, #12
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	40002800 	.word	0x40002800
 800cb9c:	20000bc0 	.word	0x20000bc0

0800cba0 <STM32FXXXRtcStopRead>:
void STM32FXXXRtcStopRead(void)
{
 800cba0:	b480      	push	{r7}
 800cba2:	af00      	add	r7, sp, #0
	RTC->ISR &= ~(1 << 5);
 800cba4:	4b05      	ldr	r3, [pc, #20]	@ (800cbbc <STM32FXXXRtcStopRead+0x1c>)
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	4a04      	ldr	r2, [pc, #16]	@ (800cbbc <STM32FXXXRtcStopRead+0x1c>)
 800cbaa:	f023 0320 	bic.w	r3, r3, #32
 800cbae:	60d3      	str	r3, [r2, #12]
}
 800cbb0:	bf00      	nop
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	40002800 	.word	0x40002800

0800cbc0 <STM32FXXXRtcWaitRead>:
void STM32FXXXRtcWaitRead(void)
{ // Wait Data Ready
 800cbc0:	b480      	push	{r7}
 800cbc2:	af00      	add	r7, sp, #0
	for(rtc_time_out = 200; !(RTC->ISR & (1 << 5)) && rtc_time_out; rtc_time_out--);
 800cbc4:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf4 <STM32FXXXRtcWaitRead+0x34>)
 800cbc6:	22c8      	movs	r2, #200	@ 0xc8
 800cbc8:	601a      	str	r2, [r3, #0]
 800cbca:	e004      	b.n	800cbd6 <STM32FXXXRtcWaitRead+0x16>
 800cbcc:	4b09      	ldr	r3, [pc, #36]	@ (800cbf4 <STM32FXXXRtcWaitRead+0x34>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	4a08      	ldr	r2, [pc, #32]	@ (800cbf4 <STM32FXXXRtcWaitRead+0x34>)
 800cbd4:	6013      	str	r3, [r2, #0]
 800cbd6:	4b08      	ldr	r3, [pc, #32]	@ (800cbf8 <STM32FXXXRtcWaitRead+0x38>)
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	f003 0320 	and.w	r3, r3, #32
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d103      	bne.n	800cbea <STM32FXXXRtcWaitRead+0x2a>
 800cbe2:	4b04      	ldr	r3, [pc, #16]	@ (800cbf4 <STM32FXXXRtcWaitRead+0x34>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1f0      	bne.n	800cbcc <STM32FXXXRtcWaitRead+0xc>
}
 800cbea:	bf00      	nop
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr
 800cbf4:	20000bc0 	.word	0x20000bc0
 800cbf8:	40002800 	.word	0x40002800

0800cbfc <STM32FXXXRtcSetTr>:
//RTC
void STM32FXXXRtcSetTr(uint32_t value)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
	STM32FXXXRtcWriteEnable();
 800cc04:	f7ff ff64 	bl	800cad0 <STM32FXXXRtcWriteEnable>
	STM32FXXXRtcRegUnlock();
 800cc08:	f7ff ff82 	bl	800cb10 <STM32FXXXRtcRegUnlock>
	STM32FXXXRtcRegWrite(&RTC->TR, value);
 800cc0c:	6879      	ldr	r1, [r7, #4]
 800cc0e:	4804      	ldr	r0, [pc, #16]	@ (800cc20 <STM32FXXXRtcSetTr+0x24>)
 800cc10:	f7ff ff94 	bl	800cb3c <STM32FXXXRtcRegWrite>
	STM32FXXXRtcWriteDisable();
 800cc14:	f7ff ff6c 	bl	800caf0 <STM32FXXXRtcWriteDisable>
}
 800cc18:	bf00      	nop
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	40002800 	.word	0x40002800

0800cc24 <STM32FXXXRtcSetDr>:
void STM32FXXXRtcSetDr(uint32_t value)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
	STM32FXXXRtcWriteEnable();
 800cc2c:	f7ff ff50 	bl	800cad0 <STM32FXXXRtcWriteEnable>
	STM32FXXXRtcRegUnlock();
 800cc30:	f7ff ff6e 	bl	800cb10 <STM32FXXXRtcRegUnlock>
	STM32FXXXRtcRegWrite(&RTC->DR, value);
 800cc34:	6879      	ldr	r1, [r7, #4]
 800cc36:	4804      	ldr	r0, [pc, #16]	@ (800cc48 <STM32FXXXRtcSetDr+0x24>)
 800cc38:	f7ff ff80 	bl	800cb3c <STM32FXXXRtcRegWrite>
	STM32FXXXRtcWriteDisable();
 800cc3c:	f7ff ff58 	bl	800caf0 <STM32FXXXRtcWriteDisable>
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	40002804 	.word	0x40002804

0800cc4c <rtc_bcd2dec>:
/*** COMMON ***/
char rtc_bcd2dec(char num)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	71fb      	strb	r3, [r7, #7]
	return ((num / 16 * 10) + (num % 16));
 800cc56:	79fb      	ldrb	r3, [r7, #7]
 800cc58:	091b      	lsrs	r3, r3, #4
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	0092      	lsls	r2, r2, #2
 800cc60:	4413      	add	r3, r2
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	79fb      	ldrb	r3, [r7, #7]
 800cc68:	f003 030f 	and.w	r3, r3, #15
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	4413      	add	r3, r2
 800cc70:	b2db      	uxtb	r3, r3
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
	...

0800cc80 <rtc_dec2bcd>:
char rtc_dec2bcd(char num)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	71fb      	strb	r3, [r7, #7]
	return ((num / 10 * 16) + (num % 10));
 800cc8a:	79fb      	ldrb	r3, [r7, #7]
 800cc8c:	4a0c      	ldr	r2, [pc, #48]	@ (800ccc0 <rtc_dec2bcd+0x40>)
 800cc8e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc92:	08db      	lsrs	r3, r3, #3
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	011b      	lsls	r3, r3, #4
 800cc98:	b2d8      	uxtb	r0, r3
 800cc9a:	79fa      	ldrb	r2, [r7, #7]
 800cc9c:	4b08      	ldr	r3, [pc, #32]	@ (800ccc0 <rtc_dec2bcd+0x40>)
 800cc9e:	fba3 1302 	umull	r1, r3, r3, r2
 800cca2:	08d9      	lsrs	r1, r3, #3
 800cca4:	460b      	mov	r3, r1
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	440b      	add	r3, r1
 800ccaa:	005b      	lsls	r3, r3, #1
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	4403      	add	r3, r0
 800ccb2:	b2db      	uxtb	r3, r3
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr
 800ccc0:	cccccccd 	.word	0xcccccccd

0800ccc4 <rtc_lenable>:
void rtc_lenable(unsigned int lclock)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
	unsigned int set;
	unsigned int rdy;
	for( set = 1, rdy = 1; rdy ; ){
 800cccc:	2301      	movs	r3, #1
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	60bb      	str	r3, [r7, #8]
 800ccd4:	e04c      	b.n	800cd70 <rtc_lenable+0xac>
		if(lclock == 0){ // LSION: Internal low-speed oscillator enable
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d118      	bne.n	800cd0e <rtc_lenable+0x4a>
			if( set ){ STM32FXXXRtcWriteEnable(); RCC->CSR |= ( 1 << 0); STM32FXXXRtcWriteDisable(); set = 0; }else if( RCC->CSR & ( 1 << 1) ) rdy = 0;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00c      	beq.n	800ccfc <rtc_lenable+0x38>
 800cce2:	f7ff fef5 	bl	800cad0 <STM32FXXXRtcWriteEnable>
 800cce6:	4b26      	ldr	r3, [pc, #152]	@ (800cd80 <rtc_lenable+0xbc>)
 800cce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccea:	4a25      	ldr	r2, [pc, #148]	@ (800cd80 <rtc_lenable+0xbc>)
 800ccec:	f043 0301 	orr.w	r3, r3, #1
 800ccf0:	6753      	str	r3, [r2, #116]	@ 0x74
 800ccf2:	f7ff fefd 	bl	800caf0 <STM32FXXXRtcWriteDisable>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	60fb      	str	r3, [r7, #12]
 800ccfa:	e039      	b.n	800cd70 <rtc_lenable+0xac>
 800ccfc:	4b20      	ldr	r3, [pc, #128]	@ (800cd80 <rtc_lenable+0xbc>)
 800ccfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd00:	f003 0302 	and.w	r3, r3, #2
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d033      	beq.n	800cd70 <rtc_lenable+0xac>
 800cd08:	2300      	movs	r3, #0
 800cd0a:	60bb      	str	r3, [r7, #8]
 800cd0c:	e030      	b.n	800cd70 <rtc_lenable+0xac>
		}
		else if(lclock == 1){ // LSEON: External low-speed oscillator enable
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d118      	bne.n	800cd46 <rtc_lenable+0x82>
			if( set ){ STM32FXXXRtcWriteEnable(); RCC->BDCR |= ( 1 << 0); STM32FXXXRtcWriteDisable(); set = 0; }else if( RCC->BDCR & ( 1 << 1) ) rdy = 0;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00c      	beq.n	800cd34 <rtc_lenable+0x70>
 800cd1a:	f7ff fed9 	bl	800cad0 <STM32FXXXRtcWriteEnable>
 800cd1e:	4b18      	ldr	r3, [pc, #96]	@ (800cd80 <rtc_lenable+0xbc>)
 800cd20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd22:	4a17      	ldr	r2, [pc, #92]	@ (800cd80 <rtc_lenable+0xbc>)
 800cd24:	f043 0301 	orr.w	r3, r3, #1
 800cd28:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd2a:	f7ff fee1 	bl	800caf0 <STM32FXXXRtcWriteDisable>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	e01d      	b.n	800cd70 <rtc_lenable+0xac>
 800cd34:	4b12      	ldr	r3, [pc, #72]	@ (800cd80 <rtc_lenable+0xbc>)
 800cd36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd38:	f003 0302 	and.w	r3, r3, #2
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d017      	beq.n	800cd70 <rtc_lenable+0xac>
 800cd40:	2300      	movs	r3, #0
 800cd42:	60bb      	str	r3, [r7, #8]
 800cd44:	e014      	b.n	800cd70 <rtc_lenable+0xac>
		}
		else if(lclock == 2){ // LSEBYP: External low-speed oscillator bypass
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b02      	cmp	r3, #2
 800cd4a:	d10f      	bne.n	800cd6c <rtc_lenable+0xa8>
			if( set ){ STM32FXXXRtcWriteEnable(); RCC->BDCR |= ( 1 << 2 ); STM32FXXXRtcWriteDisable(); }
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d009      	beq.n	800cd66 <rtc_lenable+0xa2>
 800cd52:	f7ff febd 	bl	800cad0 <STM32FXXXRtcWriteEnable>
 800cd56:	4b0a      	ldr	r3, [pc, #40]	@ (800cd80 <rtc_lenable+0xbc>)
 800cd58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd5a:	4a09      	ldr	r2, [pc, #36]	@ (800cd80 <rtc_lenable+0xbc>)
 800cd5c:	f043 0304 	orr.w	r3, r3, #4
 800cd60:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd62:	f7ff fec5 	bl	800caf0 <STM32FXXXRtcWriteDisable>
			lclock = 1;
 800cd66:	2301      	movs	r3, #1
 800cd68:	607b      	str	r3, [r7, #4]
 800cd6a:	e001      	b.n	800cd70 <rtc_lenable+0xac>
		}
		else lclock = 0; // default
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	607b      	str	r3, [r7, #4]
	for( set = 1, rdy = 1; rdy ; ){
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1af      	bne.n	800ccd6 <rtc_lenable+0x12>
	}
}
 800cd76:	bf00      	nop
 800cd78:	bf00      	nop
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	40023800 	.word	0x40023800

0800cd84 <rtc_lselect>:
void rtc_lselect(uint8_t lclock)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	71fb      	strb	r3, [r7, #7]
	STM32FXXXRtcWriteEnable();
 800cd8e:	f7ff fe9f 	bl	800cad0 <STM32FXXXRtcWriteEnable>
	rcc_instance()->bdcr.par.rtcsel = 0;
 800cd92:	f7fe f91d 	bl	800afd0 <rcc_instance>
 800cd96:	4602      	mov	r2, r0
 800cd98:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800cd9a:	f36f 2309 	bfc	r3, #8, #2
 800cd9e:	6713      	str	r3, [r2, #112]	@ 0x70
	//RCC->BDCR &= (uint32_t) ~((1 << 9) | (1 << 8)); // Clear
	STM32FXXXRtcWriteDisable();
 800cda0:	f7ff fea6 	bl	800caf0 <STM32FXXXRtcWriteDisable>
	switch(lclock){
 800cda4:	79fb      	ldrb	r3, [r7, #7]
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d020      	beq.n	800cdec <rtc_lselect+0x68>
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	dc2a      	bgt.n	800ce04 <rtc_lselect+0x80>
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d002      	beq.n	800cdb8 <rtc_lselect+0x34>
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d00d      	beq.n	800cdd2 <rtc_lselect+0x4e>
 800cdb6:	e025      	b.n	800ce04 <rtc_lselect+0x80>
		case 0:
			STM32FXXXRtcWriteEnable();
 800cdb8:	f7ff fe8a 	bl	800cad0 <STM32FXXXRtcWriteEnable>
			rcc_instance()->bdcr.par.rtcsel = 2;
 800cdbc:	f7fe f908 	bl	800afd0 <rcc_instance>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800cdc4:	2102      	movs	r1, #2
 800cdc6:	f361 2309 	bfi	r3, r1, #8, #2
 800cdca:	6713      	str	r3, [r2, #112]	@ 0x70
			//RCC->BDCR |= (1 << 9); // LSI oscillator clock used as the RTC clock
			STM32FXXXRtcWriteDisable();
 800cdcc:	f7ff fe90 	bl	800caf0 <STM32FXXXRtcWriteDisable>
		break;
 800cdd0:	e025      	b.n	800ce1e <rtc_lselect+0x9a>
		case 1:
			STM32FXXXRtcWriteEnable();
 800cdd2:	f7ff fe7d 	bl	800cad0 <STM32FXXXRtcWriteEnable>
			rcc_instance()->bdcr.par.rtcsel = 1;
 800cdd6:	f7fe f8fb 	bl	800afd0 <rcc_instance>
 800cdda:	4602      	mov	r2, r0
 800cddc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800cdde:	2101      	movs	r1, #1
 800cde0:	f361 2309 	bfi	r3, r1, #8, #2
 800cde4:	6713      	str	r3, [r2, #112]	@ 0x70
			//RCC->BDCR |= (1 << 8); // LSE oscillator clock used as the RTC clock
			STM32FXXXRtcWriteDisable();
 800cde6:	f7ff fe83 	bl	800caf0 <STM32FXXXRtcWriteDisable>
		break;
 800cdea:	e018      	b.n	800ce1e <rtc_lselect+0x9a>
		case 3:
			STM32FXXXRtcWriteEnable();
 800cdec:	f7ff fe70 	bl	800cad0 <STM32FXXXRtcWriteEnable>
			rcc_instance()->bdcr.par.rtcsel = 3;
 800cdf0:	f7fe f8ee 	bl	800afd0 <rcc_instance>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800cdf8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800cdfc:	6713      	str	r3, [r2, #112]	@ 0x70
			//RCC->BDCR |= ((1 << 8) | (1 << 9)); // HSE oscillator clock divided by a programmable pre-scaler
			STM32FXXXRtcWriteDisable();
 800cdfe:	f7ff fe77 	bl	800caf0 <STM32FXXXRtcWriteDisable>
		break;
 800ce02:	e00c      	b.n	800ce1e <rtc_lselect+0x9a>
		default:
			STM32FXXXRtcWriteEnable();
 800ce04:	f7ff fe64 	bl	800cad0 <STM32FXXXRtcWriteEnable>
			rcc_instance()->bdcr.par.rtcsel = 2;
 800ce08:	f7fe f8e2 	bl	800afd0 <rcc_instance>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800ce10:	2102      	movs	r1, #2
 800ce12:	f361 2309 	bfi	r3, r1, #8, #2
 800ce16:	6713      	str	r3, [r2, #112]	@ 0x70
			//RCC->BDCR |= (1 << 9); // LSI oscillator clock used as the RTC clock
			STM32FXXXRtcWriteDisable();
 800ce18:	f7ff fe6a 	bl	800caf0 <STM32FXXXRtcWriteDisable>
		break;
 800ce1c:	bf00      	nop
	}
}
 800ce1e:	bf00      	nop
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
	...

0800ce28 <STM32FXXXSramAccess>:

static uint32_t sram_time_out;

/*** SRAM Procedure & Function Definition ***/
void STM32FXXXSramAccess(void)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	af00      	add	r7, sp, #0
	// RM0390 pg 94
	// SRAM access
	// 0 - Power Up SRAM
	PWR->CSR |= (1 << 9); // BRE: Backup regulator enable
 800ce2c:	4b17      	ldr	r3, [pc, #92]	@ (800ce8c <STM32FXXXSramAccess+0x64>)
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	4a16      	ldr	r2, [pc, #88]	@ (800ce8c <STM32FXXXSramAccess+0x64>)
 800ce32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ce36:	6053      	str	r3, [r2, #4]
	// Check ready flag Bit 3 BRR: Backup regulator ready
	for( sram_time_out = 100; !(PWR->CSR & (1 << 3)) && sram_time_out; sram_time_out-- ); // BRR: Backup regulator ready
 800ce38:	4b15      	ldr	r3, [pc, #84]	@ (800ce90 <STM32FXXXSramAccess+0x68>)
 800ce3a:	2264      	movs	r2, #100	@ 0x64
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	e004      	b.n	800ce4a <STM32FXXXSramAccess+0x22>
 800ce40:	4b13      	ldr	r3, [pc, #76]	@ (800ce90 <STM32FXXXSramAccess+0x68>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3b01      	subs	r3, #1
 800ce46:	4a12      	ldr	r2, [pc, #72]	@ (800ce90 <STM32FXXXSramAccess+0x68>)
 800ce48:	6013      	str	r3, [r2, #0]
 800ce4a:	4b10      	ldr	r3, [pc, #64]	@ (800ce8c <STM32FXXXSramAccess+0x64>)
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	f003 0308 	and.w	r3, r3, #8
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d103      	bne.n	800ce5e <STM32FXXXSramAccess+0x36>
 800ce56:	4b0e      	ldr	r3, [pc, #56]	@ (800ce90 <STM32FXXXSramAccess+0x68>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d1f0      	bne.n	800ce40 <STM32FXXXSramAccess+0x18>

	// 1 - Enable the power interface clock by setting the PWREN bits in the RCC_APB1ENR
	RCC->APB1ENR |= (1 << 28); // Power interface clock enable
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce94 <STM32FXXXSramAccess+0x6c>)
 800ce60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce62:	4a0c      	ldr	r2, [pc, #48]	@ (800ce94 <STM32FXXXSramAccess+0x6c>)
 800ce64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce68:	6413      	str	r3, [r2, #64]	@ 0x40
	//RCC->APB1ENR |= ((1 << 11) | (1 << 28));

	// 2 - Set the DBP bit in the PWR power control register (PWR_CR)
	PWR->CR |= (1 << 8); // Disable backup domain write protection
 800ce6a:	4b08      	ldr	r3, [pc, #32]	@ (800ce8c <STM32FXXXSramAccess+0x64>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a07      	ldr	r2, [pc, #28]	@ (800ce8c <STM32FXXXSramAccess+0x64>)
 800ce70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce74:	6013      	str	r3, [r2, #0]

	// 3 - Enable the backup SRAM clock by setting BKPSRAMEN bit in the RCC_AHB1ENR
	RCC->AHB1ENR |= (1 << 18); // BKPSRAMEN: Backup SRAM interface clock enable
 800ce76:	4b07      	ldr	r3, [pc, #28]	@ (800ce94 <STM32FXXXSramAccess+0x6c>)
 800ce78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce7a:	4a06      	ldr	r2, [pc, #24]	@ (800ce94 <STM32FXXXSramAccess+0x6c>)
 800ce7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ce80:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800ce82:	bf00      	nop
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr
 800ce8c:	40007000 	.word	0x40007000
 800ce90:	20000bc8 	.word	0x20000bc8
 800ce94:	40023800 	.word	0x40023800

0800ce98 <sram_enable>:

/*** SRAM Bit Mapping Definition ***/

/*** INIC Procedure & Function Definition ***/
STM32FXXXSRAMobj* sram_enable(void)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	af00      	add	r7, sp, #0

	stm32fxxx_sram.access = STM32FXXXSramAccess;
 800ce9c:	4b04      	ldr	r3, [pc, #16]	@ (800ceb0 <sram_enable+0x18>)
 800ce9e:	4a05      	ldr	r2, [pc, #20]	@ (800ceb4 <sram_enable+0x1c>)
 800cea0:	601a      	str	r2, [r3, #0]
	return &stm32fxxx_sram;
 800cea2:	4b03      	ldr	r3, [pc, #12]	@ (800ceb0 <sram_enable+0x18>)
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	20000bc4 	.word	0x20000bc4
 800ceb4:	0800ce29 	.word	0x0800ce29

0800ceb8 <SYSCFG_memrmp_swp_fmc>:
/***********************************************/
/******* Procedure & Function Definition *******/
/***********************************************/
// memrmp
void SYSCFG_memrmp_swp_fmc(uint8_t value)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->MEMRMP, 2, 10, value);
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	220a      	movs	r2, #10
 800cec6:	2102      	movs	r1, #2
 800cec8:	4803      	ldr	r0, [pc, #12]	@ (800ced8 <SYSCFG_memrmp_swp_fmc+0x20>)
 800ceca:	f7f6 fb87 	bl	80035dc <set_reg_block>
}
 800cece:	bf00      	nop
 800ced0:	3708      	adds	r7, #8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	40013800 	.word	0x40013800

0800cedc <SYSCFG_memrmp_mem_mode>:
void SYSCFG_memrmp_mem_mode(uint8_t value)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	4603      	mov	r3, r0
 800cee4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->MEMRMP, 3, 0, value);
 800cee6:	79fb      	ldrb	r3, [r7, #7]
 800cee8:	2200      	movs	r2, #0
 800ceea:	2103      	movs	r1, #3
 800ceec:	4803      	ldr	r0, [pc, #12]	@ (800cefc <SYSCFG_memrmp_mem_mode+0x20>)
 800ceee:	f7f6 fb75 	bl	80035dc <set_reg_block>
}
 800cef2:	bf00      	nop
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	40013800 	.word	0x40013800

0800cf00 <SYSCFG_pmc_adcxdc2>:
// pmc
void SYSCFG_pmc_adcxdc2(uint8_t value)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	4603      	mov	r3, r0
 800cf08:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->PMC, 3, 16, value);
 800cf0a:	79fb      	ldrb	r3, [r7, #7]
 800cf0c:	2210      	movs	r2, #16
 800cf0e:	2103      	movs	r1, #3
 800cf10:	4803      	ldr	r0, [pc, #12]	@ (800cf20 <SYSCFG_pmc_adcxdc2+0x20>)
 800cf12:	f7f6 fb63 	bl	80035dc <set_reg_block>
}
 800cf16:	bf00      	nop
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	40013804 	.word	0x40013804

0800cf24 <SYSCFG_pmc_adc1dc2>:
void SYSCFG_pmc_adc1dc2(uint8_t bool)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->PMC, 1, 16, bool);
 800cf2e:	79fb      	ldrb	r3, [r7, #7]
 800cf30:	2210      	movs	r2, #16
 800cf32:	2101      	movs	r1, #1
 800cf34:	4803      	ldr	r0, [pc, #12]	@ (800cf44 <SYSCFG_pmc_adc1dc2+0x20>)
 800cf36:	f7f6 fb51 	bl	80035dc <set_reg_block>
}
 800cf3a:	bf00      	nop
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	40013804 	.word	0x40013804

0800cf48 <SYSCFG_pmc_adc2dc2>:
void SYSCFG_pmc_adc2dc2(uint8_t bool)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	4603      	mov	r3, r0
 800cf50:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->PMC, 1, 17, bool);
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	2211      	movs	r2, #17
 800cf56:	2101      	movs	r1, #1
 800cf58:	4803      	ldr	r0, [pc, #12]	@ (800cf68 <SYSCFG_pmc_adc2dc2+0x20>)
 800cf5a:	f7f6 fb3f 	bl	80035dc <set_reg_block>
}
 800cf5e:	bf00      	nop
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	40013804 	.word	0x40013804

0800cf6c <SYSCFG_pmc_adc3dc2>:
void SYSCFG_pmc_adc3dc2(uint8_t bool)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	4603      	mov	r3, r0
 800cf74:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->PMC, 1, 18, bool);
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	2212      	movs	r2, #18
 800cf7a:	2101      	movs	r1, #1
 800cf7c:	4803      	ldr	r0, [pc, #12]	@ (800cf8c <SYSCFG_pmc_adc3dc2+0x20>)
 800cf7e:	f7f6 fb2d 	bl	80035dc <set_reg_block>
}
 800cf82:	bf00      	nop
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	40013804 	.word	0x40013804

0800cf90 <SYSCFG_exticr1_exti3>:
// exticr1
void SYSCFG_exticr1_exti3(uint8_t value)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	4603      	mov	r3, r0
 800cf98:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[0], 4, 12, value);
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	220c      	movs	r2, #12
 800cf9e:	2104      	movs	r1, #4
 800cfa0:	4803      	ldr	r0, [pc, #12]	@ (800cfb0 <SYSCFG_exticr1_exti3+0x20>)
 800cfa2:	f7f6 fb1b 	bl	80035dc <set_reg_block>
}
 800cfa6:	bf00      	nop
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	40013808 	.word	0x40013808

0800cfb4 <SYSCFG_exticr1_exti2>:
void SYSCFG_exticr1_exti2(uint8_t value)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	4603      	mov	r3, r0
 800cfbc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[0], 4, 8, value);
 800cfbe:	79fb      	ldrb	r3, [r7, #7]
 800cfc0:	2208      	movs	r2, #8
 800cfc2:	2104      	movs	r1, #4
 800cfc4:	4803      	ldr	r0, [pc, #12]	@ (800cfd4 <SYSCFG_exticr1_exti2+0x20>)
 800cfc6:	f7f6 fb09 	bl	80035dc <set_reg_block>
}
 800cfca:	bf00      	nop
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	40013808 	.word	0x40013808

0800cfd8 <SYSCFG_exticr1_exti1>:
void SYSCFG_exticr1_exti1(uint8_t value)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[0], 4, 4, value);
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
 800cfe4:	2204      	movs	r2, #4
 800cfe6:	2104      	movs	r1, #4
 800cfe8:	4803      	ldr	r0, [pc, #12]	@ (800cff8 <SYSCFG_exticr1_exti1+0x20>)
 800cfea:	f7f6 faf7 	bl	80035dc <set_reg_block>
}
 800cfee:	bf00      	nop
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	40013808 	.word	0x40013808

0800cffc <SYSCFG_exticr1_exti0>:
void SYSCFG_exticr1_exti0(uint8_t value)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	4603      	mov	r3, r0
 800d004:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[0], 4, 0, value);
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	2200      	movs	r2, #0
 800d00a:	2104      	movs	r1, #4
 800d00c:	4803      	ldr	r0, [pc, #12]	@ (800d01c <SYSCFG_exticr1_exti0+0x20>)
 800d00e:	f7f6 fae5 	bl	80035dc <set_reg_block>
}
 800d012:	bf00      	nop
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	40013808 	.word	0x40013808

0800d020 <SYSCFG_exticr2_exti7>:
// exticr2
void SYSCFG_exticr2_exti7(uint8_t value)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	4603      	mov	r3, r0
 800d028:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[1], 4, 12, value);
 800d02a:	79fb      	ldrb	r3, [r7, #7]
 800d02c:	220c      	movs	r2, #12
 800d02e:	2104      	movs	r1, #4
 800d030:	4803      	ldr	r0, [pc, #12]	@ (800d040 <SYSCFG_exticr2_exti7+0x20>)
 800d032:	f7f6 fad3 	bl	80035dc <set_reg_block>
}
 800d036:	bf00      	nop
 800d038:	3708      	adds	r7, #8
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	4001380c 	.word	0x4001380c

0800d044 <SYSCFG_exticr2_exti6>:
void SYSCFG_exticr2_exti6(uint8_t value)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	4603      	mov	r3, r0
 800d04c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[1], 4, 8, value);
 800d04e:	79fb      	ldrb	r3, [r7, #7]
 800d050:	2208      	movs	r2, #8
 800d052:	2104      	movs	r1, #4
 800d054:	4803      	ldr	r0, [pc, #12]	@ (800d064 <SYSCFG_exticr2_exti6+0x20>)
 800d056:	f7f6 fac1 	bl	80035dc <set_reg_block>
}
 800d05a:	bf00      	nop
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	4001380c 	.word	0x4001380c

0800d068 <SYSCFG_exticr2_exti5>:
void SYSCFG_exticr2_exti5(uint8_t value)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	4603      	mov	r3, r0
 800d070:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[1], 4, 4, value);
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	2204      	movs	r2, #4
 800d076:	2104      	movs	r1, #4
 800d078:	4803      	ldr	r0, [pc, #12]	@ (800d088 <SYSCFG_exticr2_exti5+0x20>)
 800d07a:	f7f6 faaf 	bl	80035dc <set_reg_block>
}
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	4001380c 	.word	0x4001380c

0800d08c <SYSCFG_exticr2_exti4>:
void SYSCFG_exticr2_exti4(uint8_t value)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[1], 4, 0, value);
 800d096:	79fb      	ldrb	r3, [r7, #7]
 800d098:	2200      	movs	r2, #0
 800d09a:	2104      	movs	r1, #4
 800d09c:	4803      	ldr	r0, [pc, #12]	@ (800d0ac <SYSCFG_exticr2_exti4+0x20>)
 800d09e:	f7f6 fa9d 	bl	80035dc <set_reg_block>
}
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	4001380c 	.word	0x4001380c

0800d0b0 <SYSCFG_exticr3_exti11>:
// exticr3
void SYSCFG_exticr3_exti11(uint8_t value)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[2], 4, 12, value);
 800d0ba:	79fb      	ldrb	r3, [r7, #7]
 800d0bc:	220c      	movs	r2, #12
 800d0be:	2104      	movs	r1, #4
 800d0c0:	4803      	ldr	r0, [pc, #12]	@ (800d0d0 <SYSCFG_exticr3_exti11+0x20>)
 800d0c2:	f7f6 fa8b 	bl	80035dc <set_reg_block>
}
 800d0c6:	bf00      	nop
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	40013810 	.word	0x40013810

0800d0d4 <SYSCFG_exticr3_exti10>:
void SYSCFG_exticr3_exti10(uint8_t value)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	4603      	mov	r3, r0
 800d0dc:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[2], 4, 8, value);
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	2208      	movs	r2, #8
 800d0e2:	2104      	movs	r1, #4
 800d0e4:	4803      	ldr	r0, [pc, #12]	@ (800d0f4 <SYSCFG_exticr3_exti10+0x20>)
 800d0e6:	f7f6 fa79 	bl	80035dc <set_reg_block>
}
 800d0ea:	bf00      	nop
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	40013810 	.word	0x40013810

0800d0f8 <SYSCFG_exticr3_exti9>:
void SYSCFG_exticr3_exti9(uint8_t value)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	4603      	mov	r3, r0
 800d100:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[2], 4, 4, value);
 800d102:	79fb      	ldrb	r3, [r7, #7]
 800d104:	2204      	movs	r2, #4
 800d106:	2104      	movs	r1, #4
 800d108:	4803      	ldr	r0, [pc, #12]	@ (800d118 <SYSCFG_exticr3_exti9+0x20>)
 800d10a:	f7f6 fa67 	bl	80035dc <set_reg_block>
}
 800d10e:	bf00      	nop
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	40013810 	.word	0x40013810

0800d11c <SYSCFG_exticr3_exti8>:
void SYSCFG_exticr3_exti8(uint8_t value)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	4603      	mov	r3, r0
 800d124:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[2], 4, 0, value);
 800d126:	79fb      	ldrb	r3, [r7, #7]
 800d128:	2200      	movs	r2, #0
 800d12a:	2104      	movs	r1, #4
 800d12c:	4803      	ldr	r0, [pc, #12]	@ (800d13c <SYSCFG_exticr3_exti8+0x20>)
 800d12e:	f7f6 fa55 	bl	80035dc <set_reg_block>
}
 800d132:	bf00      	nop
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	40013810 	.word	0x40013810

0800d140 <SYSCFG_exticr4_exti15>:
// exticr4
void SYSCFG_exticr4_exti15(uint8_t value)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	4603      	mov	r3, r0
 800d148:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[3], 4, 12, value);
 800d14a:	79fb      	ldrb	r3, [r7, #7]
 800d14c:	220c      	movs	r2, #12
 800d14e:	2104      	movs	r1, #4
 800d150:	4803      	ldr	r0, [pc, #12]	@ (800d160 <SYSCFG_exticr4_exti15+0x20>)
 800d152:	f7f6 fa43 	bl	80035dc <set_reg_block>
}
 800d156:	bf00      	nop
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	40013814 	.word	0x40013814

0800d164 <SYSCFG_exticr4_exti14>:
void SYSCFG_exticr4_exti14(uint8_t value)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	4603      	mov	r3, r0
 800d16c:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[3], 4, 8, value);
 800d16e:	79fb      	ldrb	r3, [r7, #7]
 800d170:	2208      	movs	r2, #8
 800d172:	2104      	movs	r1, #4
 800d174:	4803      	ldr	r0, [pc, #12]	@ (800d184 <SYSCFG_exticr4_exti14+0x20>)
 800d176:	f7f6 fa31 	bl	80035dc <set_reg_block>
}
 800d17a:	bf00      	nop
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	40013814 	.word	0x40013814

0800d188 <SYSCFG_exticr4_exti13>:
void SYSCFG_exticr4_exti13(uint8_t value)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	4603      	mov	r3, r0
 800d190:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[3], 4, 4, value);
 800d192:	79fb      	ldrb	r3, [r7, #7]
 800d194:	2204      	movs	r2, #4
 800d196:	2104      	movs	r1, #4
 800d198:	4803      	ldr	r0, [pc, #12]	@ (800d1a8 <SYSCFG_exticr4_exti13+0x20>)
 800d19a:	f7f6 fa1f 	bl	80035dc <set_reg_block>
}
 800d19e:	bf00      	nop
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	40013814 	.word	0x40013814

0800d1ac <SYSCFG_exticr4_exti12>:
void SYSCFG_exticr4_exti12(uint8_t value)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->EXTICR[3], 4, 0, value);
 800d1b6:	79fb      	ldrb	r3, [r7, #7]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2104      	movs	r1, #4
 800d1bc:	4803      	ldr	r0, [pc, #12]	@ (800d1cc <SYSCFG_exticr4_exti12+0x20>)
 800d1be:	f7f6 fa0d 	bl	80035dc <set_reg_block>
}
 800d1c2:	bf00      	nop
 800d1c4:	3708      	adds	r7, #8
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	40013814 	.word	0x40013814

0800d1d0 <SYSCFG_cmpcr_ready>:
// cmpcr
uint8_t SYSCFG_cmpcr_ready(void)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	af00      	add	r7, sp, #0
	return get_reg_block(SYSCFG->CMPCR, 1, 8);
 800d1d4:	4b05      	ldr	r3, [pc, #20]	@ (800d1ec <SYSCFG_cmpcr_ready+0x1c>)
 800d1d6:	6a1b      	ldr	r3, [r3, #32]
 800d1d8:	2208      	movs	r2, #8
 800d1da:	2101      	movs	r1, #1
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7f6 f998 	bl	8003512 <get_reg_block>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	b2db      	uxtb	r3, r3
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	40013800 	.word	0x40013800

0800d1f0 <SYSCFG_cmpcr_cmp_pd>:
void SYSCFG_cmpcr_cmp_pd(uint8_t bool)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	71fb      	strb	r3, [r7, #7]
	set_reg_block(&SYSCFG->CMPCR, 1, 0, bool);
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2101      	movs	r1, #1
 800d200:	4803      	ldr	r0, [pc, #12]	@ (800d210 <SYSCFG_cmpcr_cmp_pd+0x20>)
 800d202:	f7f6 f9eb 	bl	80035dc <set_reg_block>
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	40013820 	.word	0x40013820

0800d214 <SYSCFG_Clock>:
	set_reg_block(&SYSCFG->CFGR, 1, 0, bool);
}
#endif
/*** Other ***/
void SYSCFG_Clock(uint8_t bool)
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	4603      	mov	r3, r0
 800d21c:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->AHB2ENR |= (1 << 14); } else{ RCC->AHB2ENR &= ~(1 << 14); }
 800d21e:	79fb      	ldrb	r3, [r7, #7]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d006      	beq.n	800d232 <SYSCFG_Clock+0x1e>
 800d224:	4b09      	ldr	r3, [pc, #36]	@ (800d24c <SYSCFG_Clock+0x38>)
 800d226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d228:	4a08      	ldr	r2, [pc, #32]	@ (800d24c <SYSCFG_Clock+0x38>)
 800d22a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d22e:	6353      	str	r3, [r2, #52]	@ 0x34

}
 800d230:	e005      	b.n	800d23e <SYSCFG_Clock+0x2a>
	if(bool){ RCC->AHB2ENR |= (1 << 14); } else{ RCC->AHB2ENR &= ~(1 << 14); }
 800d232:	4b06      	ldr	r3, [pc, #24]	@ (800d24c <SYSCFG_Clock+0x38>)
 800d234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d236:	4a05      	ldr	r2, [pc, #20]	@ (800d24c <SYSCFG_Clock+0x38>)
 800d238:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d23c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800d23e:	bf00      	nop
 800d240:	370c      	adds	r7, #12
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	40023800 	.word	0x40023800

0800d250 <SYSCFG_memrmp_inic>:
/***********************************************/
/**** LINK Procedure & Function Definition *****/
/***********************************************/
SYSCFG_memrmp* SYSCFG_memrmp_inic(void)
{
 800d250:	b480      	push	{r7}
 800d252:	af00      	add	r7, sp, #0

	memrmp.swp_fmc = SYSCFG_memrmp_swp_fmc;
 800d254:	4b05      	ldr	r3, [pc, #20]	@ (800d26c <SYSCFG_memrmp_inic+0x1c>)
 800d256:	4a06      	ldr	r2, [pc, #24]	@ (800d270 <SYSCFG_memrmp_inic+0x20>)
 800d258:	601a      	str	r2, [r3, #0]
	memrmp.mem_mode = SYSCFG_memrmp_mem_mode;
 800d25a:	4b04      	ldr	r3, [pc, #16]	@ (800d26c <SYSCFG_memrmp_inic+0x1c>)
 800d25c:	4a05      	ldr	r2, [pc, #20]	@ (800d274 <SYSCFG_memrmp_inic+0x24>)
 800d25e:	605a      	str	r2, [r3, #4]
	return &memrmp;
 800d260:	4b02      	ldr	r3, [pc, #8]	@ (800d26c <SYSCFG_memrmp_inic+0x1c>)
}
 800d262:	4618      	mov	r0, r3
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	20000bcc 	.word	0x20000bcc
 800d270:	0800ceb9 	.word	0x0800ceb9
 800d274:	0800cedd 	.word	0x0800cedd

0800d278 <SYSCFG_pmc_inic>:
SYSCFG_pmc* SYSCFG_pmc_inic(void)
{
 800d278:	b480      	push	{r7}
 800d27a:	af00      	add	r7, sp, #0

	pmc.adcxdc2 = SYSCFG_pmc_adcxdc2;
 800d27c:	4b08      	ldr	r3, [pc, #32]	@ (800d2a0 <SYSCFG_pmc_inic+0x28>)
 800d27e:	4a09      	ldr	r2, [pc, #36]	@ (800d2a4 <SYSCFG_pmc_inic+0x2c>)
 800d280:	601a      	str	r2, [r3, #0]
	pmc.adc1dc2 = SYSCFG_pmc_adc1dc2;
 800d282:	4b07      	ldr	r3, [pc, #28]	@ (800d2a0 <SYSCFG_pmc_inic+0x28>)
 800d284:	4a08      	ldr	r2, [pc, #32]	@ (800d2a8 <SYSCFG_pmc_inic+0x30>)
 800d286:	605a      	str	r2, [r3, #4]
	pmc.adc2dc2 = SYSCFG_pmc_adc2dc2;
 800d288:	4b05      	ldr	r3, [pc, #20]	@ (800d2a0 <SYSCFG_pmc_inic+0x28>)
 800d28a:	4a08      	ldr	r2, [pc, #32]	@ (800d2ac <SYSCFG_pmc_inic+0x34>)
 800d28c:	609a      	str	r2, [r3, #8]
	pmc.adc3dc2 = SYSCFG_pmc_adc3dc2;
 800d28e:	4b04      	ldr	r3, [pc, #16]	@ (800d2a0 <SYSCFG_pmc_inic+0x28>)
 800d290:	4a07      	ldr	r2, [pc, #28]	@ (800d2b0 <SYSCFG_pmc_inic+0x38>)
 800d292:	60da      	str	r2, [r3, #12]
	return &pmc;
 800d294:	4b02      	ldr	r3, [pc, #8]	@ (800d2a0 <SYSCFG_pmc_inic+0x28>)
}
 800d296:	4618      	mov	r0, r3
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr
 800d2a0:	20000bd4 	.word	0x20000bd4
 800d2a4:	0800cf01 	.word	0x0800cf01
 800d2a8:	0800cf25 	.word	0x0800cf25
 800d2ac:	0800cf49 	.word	0x0800cf49
 800d2b0:	0800cf6d 	.word	0x0800cf6d

0800d2b4 <SYSCFG_exticr1_inic>:
SYSCFG_exticr1* SYSCFG_exticr1_inic(void)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	af00      	add	r7, sp, #0

	exticr1.exti3 = SYSCFG_exticr1_exti3;
 800d2b8:	4b08      	ldr	r3, [pc, #32]	@ (800d2dc <SYSCFG_exticr1_inic+0x28>)
 800d2ba:	4a09      	ldr	r2, [pc, #36]	@ (800d2e0 <SYSCFG_exticr1_inic+0x2c>)
 800d2bc:	601a      	str	r2, [r3, #0]
	exticr1.exti2 = SYSCFG_exticr1_exti2;
 800d2be:	4b07      	ldr	r3, [pc, #28]	@ (800d2dc <SYSCFG_exticr1_inic+0x28>)
 800d2c0:	4a08      	ldr	r2, [pc, #32]	@ (800d2e4 <SYSCFG_exticr1_inic+0x30>)
 800d2c2:	605a      	str	r2, [r3, #4]
	exticr1.exti1 = SYSCFG_exticr1_exti1;
 800d2c4:	4b05      	ldr	r3, [pc, #20]	@ (800d2dc <SYSCFG_exticr1_inic+0x28>)
 800d2c6:	4a08      	ldr	r2, [pc, #32]	@ (800d2e8 <SYSCFG_exticr1_inic+0x34>)
 800d2c8:	609a      	str	r2, [r3, #8]
	exticr1.exti0 = SYSCFG_exticr1_exti0;
 800d2ca:	4b04      	ldr	r3, [pc, #16]	@ (800d2dc <SYSCFG_exticr1_inic+0x28>)
 800d2cc:	4a07      	ldr	r2, [pc, #28]	@ (800d2ec <SYSCFG_exticr1_inic+0x38>)
 800d2ce:	60da      	str	r2, [r3, #12]
	return &exticr1;
 800d2d0:	4b02      	ldr	r3, [pc, #8]	@ (800d2dc <SYSCFG_exticr1_inic+0x28>)
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	20000be4 	.word	0x20000be4
 800d2e0:	0800cf91 	.word	0x0800cf91
 800d2e4:	0800cfb5 	.word	0x0800cfb5
 800d2e8:	0800cfd9 	.word	0x0800cfd9
 800d2ec:	0800cffd 	.word	0x0800cffd

0800d2f0 <SYSCFG_exticr2_inic>:
SYSCFG_exticr2* SYSCFG_exticr2_inic(void)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	af00      	add	r7, sp, #0

	exticr2.exti7 = SYSCFG_exticr2_exti7;
 800d2f4:	4b08      	ldr	r3, [pc, #32]	@ (800d318 <SYSCFG_exticr2_inic+0x28>)
 800d2f6:	4a09      	ldr	r2, [pc, #36]	@ (800d31c <SYSCFG_exticr2_inic+0x2c>)
 800d2f8:	601a      	str	r2, [r3, #0]
	exticr2.exti7 = SYSCFG_exticr2_exti6;
 800d2fa:	4b07      	ldr	r3, [pc, #28]	@ (800d318 <SYSCFG_exticr2_inic+0x28>)
 800d2fc:	4a08      	ldr	r2, [pc, #32]	@ (800d320 <SYSCFG_exticr2_inic+0x30>)
 800d2fe:	601a      	str	r2, [r3, #0]
	exticr2.exti5 = SYSCFG_exticr2_exti5;
 800d300:	4b05      	ldr	r3, [pc, #20]	@ (800d318 <SYSCFG_exticr2_inic+0x28>)
 800d302:	4a08      	ldr	r2, [pc, #32]	@ (800d324 <SYSCFG_exticr2_inic+0x34>)
 800d304:	609a      	str	r2, [r3, #8]
	exticr2.exti4 = SYSCFG_exticr2_exti4;
 800d306:	4b04      	ldr	r3, [pc, #16]	@ (800d318 <SYSCFG_exticr2_inic+0x28>)
 800d308:	4a07      	ldr	r2, [pc, #28]	@ (800d328 <SYSCFG_exticr2_inic+0x38>)
 800d30a:	60da      	str	r2, [r3, #12]
	return &exticr2;
 800d30c:	4b02      	ldr	r3, [pc, #8]	@ (800d318 <SYSCFG_exticr2_inic+0x28>)
}
 800d30e:	4618      	mov	r0, r3
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr
 800d318:	20000bf4 	.word	0x20000bf4
 800d31c:	0800d021 	.word	0x0800d021
 800d320:	0800d045 	.word	0x0800d045
 800d324:	0800d069 	.word	0x0800d069
 800d328:	0800d08d 	.word	0x0800d08d

0800d32c <SYSCFG_exticr3_inic>:
SYSCFG_exticr3* SYSCFG_exticr3_inic(void)
{
 800d32c:	b480      	push	{r7}
 800d32e:	af00      	add	r7, sp, #0

	exticr3.exti11 = SYSCFG_exticr3_exti11;
 800d330:	4b08      	ldr	r3, [pc, #32]	@ (800d354 <SYSCFG_exticr3_inic+0x28>)
 800d332:	4a09      	ldr	r2, [pc, #36]	@ (800d358 <SYSCFG_exticr3_inic+0x2c>)
 800d334:	601a      	str	r2, [r3, #0]
	exticr3.exti10 = SYSCFG_exticr3_exti10;
 800d336:	4b07      	ldr	r3, [pc, #28]	@ (800d354 <SYSCFG_exticr3_inic+0x28>)
 800d338:	4a08      	ldr	r2, [pc, #32]	@ (800d35c <SYSCFG_exticr3_inic+0x30>)
 800d33a:	605a      	str	r2, [r3, #4]
	exticr3.exti9 = SYSCFG_exticr3_exti9;
 800d33c:	4b05      	ldr	r3, [pc, #20]	@ (800d354 <SYSCFG_exticr3_inic+0x28>)
 800d33e:	4a08      	ldr	r2, [pc, #32]	@ (800d360 <SYSCFG_exticr3_inic+0x34>)
 800d340:	609a      	str	r2, [r3, #8]
	exticr3.exti8 = SYSCFG_exticr3_exti8;
 800d342:	4b04      	ldr	r3, [pc, #16]	@ (800d354 <SYSCFG_exticr3_inic+0x28>)
 800d344:	4a07      	ldr	r2, [pc, #28]	@ (800d364 <SYSCFG_exticr3_inic+0x38>)
 800d346:	60da      	str	r2, [r3, #12]
	return &exticr3;
 800d348:	4b02      	ldr	r3, [pc, #8]	@ (800d354 <SYSCFG_exticr3_inic+0x28>)
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr
 800d354:	20000c04 	.word	0x20000c04
 800d358:	0800d0b1 	.word	0x0800d0b1
 800d35c:	0800d0d5 	.word	0x0800d0d5
 800d360:	0800d0f9 	.word	0x0800d0f9
 800d364:	0800d11d 	.word	0x0800d11d

0800d368 <SYSCFG_exticr4_inic>:
SYSCFG_exticr4* SYSCFG_exticr4_inic(void)
{
 800d368:	b480      	push	{r7}
 800d36a:	af00      	add	r7, sp, #0

	exticr4.exti15 = SYSCFG_exticr4_exti15;
 800d36c:	4b08      	ldr	r3, [pc, #32]	@ (800d390 <SYSCFG_exticr4_inic+0x28>)
 800d36e:	4a09      	ldr	r2, [pc, #36]	@ (800d394 <SYSCFG_exticr4_inic+0x2c>)
 800d370:	601a      	str	r2, [r3, #0]
	exticr4.exti14 = SYSCFG_exticr4_exti14;
 800d372:	4b07      	ldr	r3, [pc, #28]	@ (800d390 <SYSCFG_exticr4_inic+0x28>)
 800d374:	4a08      	ldr	r2, [pc, #32]	@ (800d398 <SYSCFG_exticr4_inic+0x30>)
 800d376:	605a      	str	r2, [r3, #4]
	exticr4.exti13 = SYSCFG_exticr4_exti13;
 800d378:	4b05      	ldr	r3, [pc, #20]	@ (800d390 <SYSCFG_exticr4_inic+0x28>)
 800d37a:	4a08      	ldr	r2, [pc, #32]	@ (800d39c <SYSCFG_exticr4_inic+0x34>)
 800d37c:	609a      	str	r2, [r3, #8]
	exticr4.exti12 = SYSCFG_exticr4_exti12;
 800d37e:	4b04      	ldr	r3, [pc, #16]	@ (800d390 <SYSCFG_exticr4_inic+0x28>)
 800d380:	4a07      	ldr	r2, [pc, #28]	@ (800d3a0 <SYSCFG_exticr4_inic+0x38>)
 800d382:	60da      	str	r2, [r3, #12]
	return &exticr4;
 800d384:	4b02      	ldr	r3, [pc, #8]	@ (800d390 <SYSCFG_exticr4_inic+0x28>)
}
 800d386:	4618      	mov	r0, r3
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr
 800d390:	20000c14 	.word	0x20000c14
 800d394:	0800d141 	.word	0x0800d141
 800d398:	0800d165 	.word	0x0800d165
 800d39c:	0800d189 	.word	0x0800d189
 800d3a0:	0800d1ad 	.word	0x0800d1ad

0800d3a4 <SYSCFG_cmpcr_inic>:
SYSCFG_cmpcr* SYSCFG_cmpcr_inic(void)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	af00      	add	r7, sp, #0

	cmpcr.ready = SYSCFG_cmpcr_ready;
 800d3a8:	4b05      	ldr	r3, [pc, #20]	@ (800d3c0 <SYSCFG_cmpcr_inic+0x1c>)
 800d3aa:	4a06      	ldr	r2, [pc, #24]	@ (800d3c4 <SYSCFG_cmpcr_inic+0x20>)
 800d3ac:	601a      	str	r2, [r3, #0]
	cmpcr.cmp_pd = SYSCFG_cmpcr_cmp_pd;
 800d3ae:	4b04      	ldr	r3, [pc, #16]	@ (800d3c0 <SYSCFG_cmpcr_inic+0x1c>)
 800d3b0:	4a05      	ldr	r2, [pc, #20]	@ (800d3c8 <SYSCFG_cmpcr_inic+0x24>)
 800d3b2:	605a      	str	r2, [r3, #4]
	return &cmpcr;
 800d3b4:	4b02      	ldr	r3, [pc, #8]	@ (800d3c0 <SYSCFG_cmpcr_inic+0x1c>)
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	20000c24 	.word	0x20000c24
 800d3c4:	0800d1d1 	.word	0x0800d1d1
 800d3c8:	0800d1f1 	.word	0x0800d1f1

0800d3cc <SYSCFG_cfgr_inic>:
SYSCFG_cfgr* SYSCFG_cfgr_inic(void)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	af00      	add	r7, sp, #0
	#ifdef STM32F446xx
		cfgr.fmpi2c1_sda = SYSCFG_cfgr_fmpi2c1_sda;
		cfgr.fmpi2c1_scl = SYSCFG_cfgr_fmpi2c1_scl;
	#endif
	return &cfgr;
 800d3d0:	4b02      	ldr	r3, [pc, #8]	@ (800d3dc <SYSCFG_cfgr_inic+0x10>)
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr
 800d3dc:	20000c2c 	.word	0x20000c2c

0800d3e0 <syscfg_enable>:
/************************************************/
/**** SYSCFG Procedure & Function Definition ****/
/************************************************/
STM32FXXXSYSCFGobj* syscfg_enable(void)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	af00      	add	r7, sp, #0


	/*** LINK ***/
	stm32fxxx_syscfg.memrmp = SYSCFG_memrmp_inic();
 800d3e4:	f7ff ff34 	bl	800d250 <SYSCFG_memrmp_inic>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	4a15      	ldr	r2, [pc, #84]	@ (800d440 <syscfg_enable+0x60>)
 800d3ec:	6013      	str	r3, [r2, #0]
	stm32fxxx_syscfg.pmc = SYSCFG_pmc_inic();
 800d3ee:	f7ff ff43 	bl	800d278 <SYSCFG_pmc_inic>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	4a12      	ldr	r2, [pc, #72]	@ (800d440 <syscfg_enable+0x60>)
 800d3f6:	6053      	str	r3, [r2, #4]
	stm32fxxx_syscfg.exticr1 = SYSCFG_exticr1_inic();
 800d3f8:	f7ff ff5c 	bl	800d2b4 <SYSCFG_exticr1_inic>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	4a10      	ldr	r2, [pc, #64]	@ (800d440 <syscfg_enable+0x60>)
 800d400:	6093      	str	r3, [r2, #8]
	stm32fxxx_syscfg.exticr2 = SYSCFG_exticr2_inic();
 800d402:	f7ff ff75 	bl	800d2f0 <SYSCFG_exticr2_inic>
 800d406:	4603      	mov	r3, r0
 800d408:	4a0d      	ldr	r2, [pc, #52]	@ (800d440 <syscfg_enable+0x60>)
 800d40a:	60d3      	str	r3, [r2, #12]
	stm32fxxx_syscfg.exticr3 = SYSCFG_exticr3_inic();
 800d40c:	f7ff ff8e 	bl	800d32c <SYSCFG_exticr3_inic>
 800d410:	4603      	mov	r3, r0
 800d412:	4a0b      	ldr	r2, [pc, #44]	@ (800d440 <syscfg_enable+0x60>)
 800d414:	6113      	str	r3, [r2, #16]
	stm32fxxx_syscfg.exticr4 = SYSCFG_exticr4_inic();
 800d416:	f7ff ffa7 	bl	800d368 <SYSCFG_exticr4_inic>
 800d41a:	4603      	mov	r3, r0
 800d41c:	4a08      	ldr	r2, [pc, #32]	@ (800d440 <syscfg_enable+0x60>)
 800d41e:	6153      	str	r3, [r2, #20]
	stm32fxxx_syscfg.cmpcr = SYSCFG_cmpcr_inic();
 800d420:	f7ff ffc0 	bl	800d3a4 <SYSCFG_cmpcr_inic>
 800d424:	4603      	mov	r3, r0
 800d426:	4a06      	ldr	r2, [pc, #24]	@ (800d440 <syscfg_enable+0x60>)
 800d428:	6193      	str	r3, [r2, #24]
	stm32fxxx_syscfg.cfgr = SYSCFG_cfgr_inic();
 800d42a:	f7ff ffcf 	bl	800d3cc <SYSCFG_cfgr_inic>
 800d42e:	4603      	mov	r3, r0
 800d430:	4a03      	ldr	r2, [pc, #12]	@ (800d440 <syscfg_enable+0x60>)
 800d432:	61d3      	str	r3, [r2, #28]
	/*** Oyher ***/
	stm32fxxx_syscfg.clock = SYSCFG_Clock;
 800d434:	4b02      	ldr	r3, [pc, #8]	@ (800d440 <syscfg_enable+0x60>)
 800d436:	4a03      	ldr	r2, [pc, #12]	@ (800d444 <syscfg_enable+0x64>)
 800d438:	621a      	str	r2, [r3, #32]
	return &stm32fxxx_syscfg;
 800d43a:	4b01      	ldr	r3, [pc, #4]	@ (800d440 <syscfg_enable+0x60>)
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	20000c34 	.word	0x20000c34
 800d444:	0800d215 	.word	0x0800d215

0800d448 <STM32FXXXTim1Clock>:
#endif
/************/
/*** TIM1 ***/
/************/
void STM32FXXXTim1Clock(uint8_t bool)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	4603      	mov	r3, r0
 800d450:	71fb      	strb	r3, [r7, #7]
	//if(bool){RCC->APB2ENR |= (1 << 0);}else{RCC->APB2ENR &= ~(1 << 0);}
	if(bool){
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d007      	beq.n	800d468 <STM32FXXXTim1Clock+0x20>
		//rcc()->instance->apb2enr.par.tim1en = 1;
		rcc_instance()->apb2enr.par.tim1en = 1;
 800d458:	f7fd fdba 	bl	800afd0 <rcc_instance>
 800d45c:	4602      	mov	r2, r0
 800d45e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800d460:	f043 0301 	orr.w	r3, r3, #1
 800d464:	6453      	str	r3, [r2, #68]	@ 0x44
	}else{
		//rcc()->instance->apb2enr.par.tim1en = 0;
		rcc_instance()->apb2enr.par.tim1en = 0;
	}
}
 800d466:	e006      	b.n	800d476 <STM32FXXXTim1Clock+0x2e>
		rcc_instance()->apb2enr.par.tim1en = 0;
 800d468:	f7fd fdb2 	bl	800afd0 <rcc_instance>
 800d46c:	4602      	mov	r2, r0
 800d46e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800d470:	f36f 0300 	bfc	r3, #0, #1
 800d474:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800d476:	bf00      	nop
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
	...

0800d480 <STM32FXXXTim1Nvic>:
void STM32FXXXTim1Nvic(uint8_t value)
{ // 24, 25, 26, 27
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	4603      	mov	r3, r0
 800d488:	71fb      	strb	r3, [r7, #7]
	STM32FXXXNVICobj* nvic = nvic_enable();
 800d48a:	f7fd ff9b 	bl	800b3c4 <nvic_enable>
 800d48e:	60f8      	str	r0, [r7, #12]
	switch(value){
 800d490:	79fb      	ldrb	r3, [r7, #7]
 800d492:	3b01      	subs	r3, #1
 800d494:	2b17      	cmp	r3, #23
 800d496:	d85b      	bhi.n	800d550 <STM32FXXXTim1Nvic+0xd0>
 800d498:	a201      	add	r2, pc, #4	@ (adr r2, 800d4a0 <STM32FXXXTim1Nvic+0x20>)
 800d49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49e:	bf00      	nop
 800d4a0:	0800d51f 	.word	0x0800d51f
 800d4a4:	0800d515 	.word	0x0800d515
 800d4a8:	0800d551 	.word	0x0800d551
 800d4ac:	0800d50b 	.word	0x0800d50b
 800d4b0:	0800d551 	.word	0x0800d551
 800d4b4:	0800d551 	.word	0x0800d551
 800d4b8:	0800d551 	.word	0x0800d551
 800d4bc:	0800d501 	.word	0x0800d501
 800d4c0:	0800d551 	.word	0x0800d551
 800d4c4:	0800d551 	.word	0x0800d551
 800d4c8:	0800d551 	.word	0x0800d551
 800d4cc:	0800d551 	.word	0x0800d551
 800d4d0:	0800d551 	.word	0x0800d551
 800d4d4:	0800d551 	.word	0x0800d551
 800d4d8:	0800d551 	.word	0x0800d551
 800d4dc:	0800d551 	.word	0x0800d551
 800d4e0:	0800d547 	.word	0x0800d547
 800d4e4:	0800d53d 	.word	0x0800d53d
 800d4e8:	0800d551 	.word	0x0800d551
 800d4ec:	0800d533 	.word	0x0800d533
 800d4f0:	0800d551 	.word	0x0800d551
 800d4f4:	0800d551 	.word	0x0800d551
 800d4f8:	0800d551 	.word	0x0800d551
 800d4fc:	0800d529 	.word	0x0800d529
		case 0b1000:
			//set_bit_block(NVIC->ISER, 1, TIM1_BRK_TIM9_IRQn, 1);
			nvic->set_enable(TIM1_BRK_TIM9_IRQn);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2018      	movs	r0, #24
 800d506:	4798      	blx	r3
		break;
 800d508:	e023      	b.n	800d552 <STM32FXXXTim1Nvic+0xd2>
		case 0b0100:
			//set_bit_block(NVIC->ISER, 1, TIM1_UP_TIM10_IRQn, 1);
			nvic->set_enable(TIM1_UP_TIM10_IRQn);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2019      	movs	r0, #25
 800d510:	4798      	blx	r3
		break;
 800d512:	e01e      	b.n	800d552 <STM32FXXXTim1Nvic+0xd2>
		case 0b0010:
			//set_bit_block(NVIC->ISER, 1, TIM1_TRG_COM_TIM11_IRQn, 1);
			nvic->set_enable(TIM1_TRG_COM_TIM11_IRQn);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	201a      	movs	r0, #26
 800d51a:	4798      	blx	r3
		break;
 800d51c:	e019      	b.n	800d552 <STM32FXXXTim1Nvic+0xd2>
		case 0b0001:
			//set_bit_block(NVIC->ISER, 1, TIM1_CC_IRQn, 1);
			nvic->set_enable(TIM1_CC_IRQn);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	201b      	movs	r0, #27
 800d524:	4798      	blx	r3
		break;
 800d526:	e014      	b.n	800d552 <STM32FXXXTim1Nvic+0xd2>
		case 0b11000:
			//set_bit_block(NVIC->ICER, 1, TIM1_BRK_TIM9_IRQn, 1);
			nvic->clear_enable(TIM1_BRK_TIM9_IRQn);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	2018      	movs	r0, #24
 800d52e:	4798      	blx	r3
		break;
 800d530:	e00f      	b.n	800d552 <STM32FXXXTim1Nvic+0xd2>
		case 0b10100:
			//set_bit_block(NVIC->ICER, 1, TIM1_UP_TIM10_IRQn, 1);
			nvic->clear_enable(TIM1_UP_TIM10_IRQn);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	2019      	movs	r0, #25
 800d538:	4798      	blx	r3
		break;
 800d53a:	e00a      	b.n	800d552 <STM32FXXXTim1Nvic+0xd2>
		case 0b10010:
			//set_bit_block(NVIC->ICER, 1, TIM1_TRG_COM_TIM11_IRQn, 1);
			nvic->clear_enable(TIM1_TRG_COM_TIM11_IRQn);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	201a      	movs	r0, #26
 800d542:	4798      	blx	r3
		break;
 800d544:	e005      	b.n	800d552 <STM32FXXXTim1Nvic+0xd2>
		case 0b10001:
			//set_bit_block(NVIC->ICER, 1, TIM1_CC_IRQn, 1);
			nvic->clear_enable(TIM1_CC_IRQn);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	201b      	movs	r0, #27
 800d54c:	4798      	blx	r3
		break;
 800d54e:	e000      	b.n	800d552 <STM32FXXXTim1Nvic+0xd2>
	default:
	break;
 800d550:	bf00      	nop
	}
}
 800d552:	bf00      	nop
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop

0800d55c <tim1_enable>:

#endif

/*** TIM1 INIC Procedure & Function Definition ***/
STM32FXXX_TIM1* tim1_enable(void)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	af00      	add	r7, sp, #0
	/*** TIM1 Bit Field ***/
	stm32fxxx_tim1.instance = tim1_instance();
 800d560:	f7fd fd40 	bl	800afe4 <tim1_instance>
 800d564:	4603      	mov	r3, r0
 800d566:	4a05      	ldr	r2, [pc, #20]	@ (800d57c <tim1_enable+0x20>)
 800d568:	6013      	str	r3, [r2, #0]
	// CLOCK
	stm32fxxx_tim1.clock = STM32FXXXTim1Clock;
 800d56a:	4b04      	ldr	r3, [pc, #16]	@ (800d57c <tim1_enable+0x20>)
 800d56c:	4a04      	ldr	r2, [pc, #16]	@ (800d580 <tim1_enable+0x24>)
 800d56e:	605a      	str	r2, [r3, #4]
	// NVIC
	stm32fxxx_tim1.nvic = STM32FXXXTim1Nvic;
 800d570:	4b02      	ldr	r3, [pc, #8]	@ (800d57c <tim1_enable+0x20>)
 800d572:	4a04      	ldr	r2, [pc, #16]	@ (800d584 <tim1_enable+0x28>)
 800d574:	609a      	str	r2, [r3, #8]

	return &stm32fxxx_tim1;
 800d576:	4b01      	ldr	r3, [pc, #4]	@ (800d57c <tim1_enable+0x20>)
}
 800d578:	4618      	mov	r0, r3
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	20000c58 	.word	0x20000c58
 800d580:	0800d449 	.word	0x0800d449
 800d584:	0800d481 	.word	0x0800d481

0800d588 <tim1>:

STM32FXXX_TIM1* tim1(void){ return (STM32FXXX_TIM1*) &stm32fxxx_tim1;}
 800d588:	b480      	push	{r7}
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	4b02      	ldr	r3, [pc, #8]	@ (800d598 <tim1+0x10>)
 800d58e:	4618      	mov	r0, r3
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr
 800d598:	20000c58 	.word	0x20000c58

0800d59c <TIM1_CC_IRQHandler>:
STM32FXXX_TIM8* tim8(void){ return (STM32FXXX_TIM8*) &stm32fxxx_tim8; }

#endif

/*** TIM1 CC IRQ Request ***/
void TIM1_CC_IRQHandler(void){
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0

	if(tim1()->instance->sr.tim1and8_par.uif){
 800d5a0:	f7ff fff2 	bl	800d588 <tim1>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d009      	beq.n	800d5c8 <TIM1_CC_IRQHandler+0x2c>
		tim1_u_callback();
 800d5b4:	f3af 8000 	nop.w
		tim1()->instance->sr.tim1and8_par.uif = 0;
 800d5b8:	f7ff ffe6 	bl	800d588 <tim1>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	6913      	ldr	r3, [r2, #16]
 800d5c2:	f36f 0300 	bfc	r3, #0, #1
 800d5c6:	6113      	str	r3, [r2, #16]
	}
	if(tim1()->instance->sr.tim1and8_par.cc1if){
 800d5c8:	f7ff ffde 	bl	800d588 <tim1>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d009      	beq.n	800d5f0 <TIM1_CC_IRQHandler+0x54>
		tim1_cc1_callback();
 800d5dc:	f7f3 fac6 	bl	8000b6c <tim1_cc1_callback>
		tim1()->instance->sr.tim1and8_par.cc1if = 0;
 800d5e0:	f7ff ffd2 	bl	800d588 <tim1>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	6913      	ldr	r3, [r2, #16]
 800d5ea:	f36f 0341 	bfc	r3, #1, #1
 800d5ee:	6113      	str	r3, [r2, #16]
	}
	if(tim1()->instance->sr.tim1and8_par.cc2if){
 800d5f0:	f7ff ffca 	bl	800d588 <tim1>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	d009      	beq.n	800d618 <TIM1_CC_IRQHandler+0x7c>
		tim1_cc2_callback();
 800d604:	f7f3 fabe 	bl	8000b84 <tim1_cc2_callback>
		tim1()->instance->sr.tim1and8_par.cc2if = 0;
 800d608:	f7ff ffbe 	bl	800d588 <tim1>
 800d60c:	4603      	mov	r3, r0
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	6913      	ldr	r3, [r2, #16]
 800d612:	f36f 0382 	bfc	r3, #2, #1
 800d616:	6113      	str	r3, [r2, #16]
	}
	if(tim1()->instance->sr.tim1and8_par.tif){
 800d618:	f7ff ffb6 	bl	800d588 <tim1>
 800d61c:	4603      	mov	r3, r0
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d009      	beq.n	800d640 <TIM1_CC_IRQHandler+0xa4>
		tim1_t_callback();
 800d62c:	f3af 8000 	nop.w
		tim1()->instance->sr.tim1and8_par.tif = 0;
 800d630:	f7ff ffaa 	bl	800d588 <tim1>
 800d634:	4603      	mov	r3, r0
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	6913      	ldr	r3, [r2, #16]
 800d63a:	f36f 1386 	bfc	r3, #6, #1
 800d63e:	6113      	str	r3, [r2, #16]
	}
	if(tim1()->instance->sr.tim1and8_par.comif){
 800d640:	f7ff ffa2 	bl	800d588 <tim1>
 800d644:	4603      	mov	r3, r0
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b00      	cmp	r3, #0
 800d652:	d009      	beq.n	800d668 <TIM1_CC_IRQHandler+0xcc>
		tim1_com_callback();
 800d654:	f3af 8000 	nop.w
		tim1()->instance->sr.tim1and8_par.comif = 0;
 800d658:	f7ff ff96 	bl	800d588 <tim1>
 800d65c:	4603      	mov	r3, r0
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	6913      	ldr	r3, [r2, #16]
 800d662:	f36f 1345 	bfc	r3, #5, #1
 800d666:	6113      	str	r3, [r2, #16]
	}
	if(tim1()->instance->sr.tim1and8_par.bif){
 800d668:	f7ff ff8e 	bl	800d588 <tim1>
 800d66c:	4603      	mov	r3, r0
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d676:	b2db      	uxtb	r3, r3
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d009      	beq.n	800d690 <TIM1_CC_IRQHandler+0xf4>
		tim1_b_callback();
 800d67c:	f3af 8000 	nop.w
		tim1()->instance->sr.tim1and8_par.bif = 0;
 800d680:	f7ff ff82 	bl	800d588 <tim1>
 800d684:	4603      	mov	r3, r0
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	6913      	ldr	r3, [r2, #16]
 800d68a:	f36f 13c7 	bfc	r3, #7, #1
 800d68e:	6113      	str	r3, [r2, #16]
	}
}
 800d690:	bf00      	nop
 800d692:	bd80      	pop	{r7, pc}

0800d694 <STM32FXXXTim2Clock>:
/*** TIMER Procedure & Function Definition ***/
/************/
/*** TIM2 ***/
/************/
void STM32FXXXTim2Clock(uint8_t bool)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	71fb      	strb	r3, [r7, #7]
	if(bool){RCC->APB1ENR |= (1 << 0);}else{RCC->APB1ENR &= ~(1 << 0);}
 800d69e:	79fb      	ldrb	r3, [r7, #7]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d006      	beq.n	800d6b2 <STM32FXXXTim2Clock+0x1e>
 800d6a4:	4b09      	ldr	r3, [pc, #36]	@ (800d6cc <STM32FXXXTim2Clock+0x38>)
 800d6a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6a8:	4a08      	ldr	r2, [pc, #32]	@ (800d6cc <STM32FXXXTim2Clock+0x38>)
 800d6aa:	f043 0301 	orr.w	r3, r3, #1
 800d6ae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800d6b0:	e005      	b.n	800d6be <STM32FXXXTim2Clock+0x2a>
	if(bool){RCC->APB1ENR |= (1 << 0);}else{RCC->APB1ENR &= ~(1 << 0);}
 800d6b2:	4b06      	ldr	r3, [pc, #24]	@ (800d6cc <STM32FXXXTim2Clock+0x38>)
 800d6b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6b6:	4a05      	ldr	r2, [pc, #20]	@ (800d6cc <STM32FXXXTim2Clock+0x38>)
 800d6b8:	f023 0301 	bic.w	r3, r3, #1
 800d6bc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800d6be:	bf00      	nop
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	40023800 	.word	0x40023800

0800d6d0 <STM32FXXXTim2Nvic>:
void STM32FXXXTim2Nvic(uint8_t bool)
{ // 28
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	71fb      	strb	r3, [r7, #7]
	if(bool){set_bit_block(NVIC->ISER, 1, TIM2_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM2_IRQn, 1);}
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d006      	beq.n	800d6ee <STM32FXXXTim2Nvic+0x1e>
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	221c      	movs	r2, #28
 800d6e4:	2101      	movs	r1, #1
 800d6e6:	4807      	ldr	r0, [pc, #28]	@ (800d704 <STM32FXXXTim2Nvic+0x34>)
 800d6e8:	f7f5 ffea 	bl	80036c0 <set_bit_block>
}
 800d6ec:	e005      	b.n	800d6fa <STM32FXXXTim2Nvic+0x2a>
	if(bool){set_bit_block(NVIC->ISER, 1, TIM2_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM2_IRQn, 1);}
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	221c      	movs	r2, #28
 800d6f2:	2101      	movs	r1, #1
 800d6f4:	4804      	ldr	r0, [pc, #16]	@ (800d708 <STM32FXXXTim2Nvic+0x38>)
 800d6f6:	f7f5 ffe3 	bl	80036c0 <set_bit_block>
}
 800d6fa:	bf00      	nop
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	e000e100 	.word	0xe000e100
 800d708:	e000e180 	.word	0xe000e180

0800d70c <STM32FXXXTim3Clock>:
/************/
/*** TIM3 ***/
/************/
void STM32FXXXTim3Clock(uint8_t bool)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	4603      	mov	r3, r0
 800d714:	71fb      	strb	r3, [r7, #7]
	if(bool){RCC->APB1ENR |= (1 << 1);}else{RCC->APB1ENR &= ~(1 << 1);}
 800d716:	79fb      	ldrb	r3, [r7, #7]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d006      	beq.n	800d72a <STM32FXXXTim3Clock+0x1e>
 800d71c:	4b09      	ldr	r3, [pc, #36]	@ (800d744 <STM32FXXXTim3Clock+0x38>)
 800d71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d720:	4a08      	ldr	r2, [pc, #32]	@ (800d744 <STM32FXXXTim3Clock+0x38>)
 800d722:	f043 0302 	orr.w	r3, r3, #2
 800d726:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800d728:	e005      	b.n	800d736 <STM32FXXXTim3Clock+0x2a>
	if(bool){RCC->APB1ENR |= (1 << 1);}else{RCC->APB1ENR &= ~(1 << 1);}
 800d72a:	4b06      	ldr	r3, [pc, #24]	@ (800d744 <STM32FXXXTim3Clock+0x38>)
 800d72c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d72e:	4a05      	ldr	r2, [pc, #20]	@ (800d744 <STM32FXXXTim3Clock+0x38>)
 800d730:	f023 0302 	bic.w	r3, r3, #2
 800d734:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800d736:	bf00      	nop
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	40023800 	.word	0x40023800

0800d748 <STM32FXXXTim3Nvic>:
void STM32FXXXTim3Nvic(uint8_t bool)
{ // 29
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	4603      	mov	r3, r0
 800d750:	71fb      	strb	r3, [r7, #7]
	if(bool){set_bit_block(NVIC->ISER, 1, TIM3_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM3_IRQn, 1);}
 800d752:	79fb      	ldrb	r3, [r7, #7]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <STM32FXXXTim3Nvic+0x1e>
 800d758:	2301      	movs	r3, #1
 800d75a:	221d      	movs	r2, #29
 800d75c:	2101      	movs	r1, #1
 800d75e:	4807      	ldr	r0, [pc, #28]	@ (800d77c <STM32FXXXTim3Nvic+0x34>)
 800d760:	f7f5 ffae 	bl	80036c0 <set_bit_block>
}
 800d764:	e005      	b.n	800d772 <STM32FXXXTim3Nvic+0x2a>
	if(bool){set_bit_block(NVIC->ISER, 1, TIM3_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM3_IRQn, 1);}
 800d766:	2301      	movs	r3, #1
 800d768:	221d      	movs	r2, #29
 800d76a:	2101      	movs	r1, #1
 800d76c:	4804      	ldr	r0, [pc, #16]	@ (800d780 <STM32FXXXTim3Nvic+0x38>)
 800d76e:	f7f5 ffa7 	bl	80036c0 <set_bit_block>
}
 800d772:	bf00      	nop
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	e000e100 	.word	0xe000e100
 800d780:	e000e180 	.word	0xe000e180

0800d784 <STM32FXXXTim4Clock>:
/************/
/*** TIM4 ***/
/************/
void STM32FXXXTim4Clock(uint8_t bool)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	4603      	mov	r3, r0
 800d78c:	71fb      	strb	r3, [r7, #7]
	if(bool){RCC->APB1ENR |= (1 << 2);}else{RCC->APB1ENR &= ~(1 << 2);}
 800d78e:	79fb      	ldrb	r3, [r7, #7]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d006      	beq.n	800d7a2 <STM32FXXXTim4Clock+0x1e>
 800d794:	4b09      	ldr	r3, [pc, #36]	@ (800d7bc <STM32FXXXTim4Clock+0x38>)
 800d796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d798:	4a08      	ldr	r2, [pc, #32]	@ (800d7bc <STM32FXXXTim4Clock+0x38>)
 800d79a:	f043 0304 	orr.w	r3, r3, #4
 800d79e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800d7a0:	e005      	b.n	800d7ae <STM32FXXXTim4Clock+0x2a>
	if(bool){RCC->APB1ENR |= (1 << 2);}else{RCC->APB1ENR &= ~(1 << 2);}
 800d7a2:	4b06      	ldr	r3, [pc, #24]	@ (800d7bc <STM32FXXXTim4Clock+0x38>)
 800d7a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7a6:	4a05      	ldr	r2, [pc, #20]	@ (800d7bc <STM32FXXXTim4Clock+0x38>)
 800d7a8:	f023 0304 	bic.w	r3, r3, #4
 800d7ac:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800d7ae:	bf00      	nop
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	40023800 	.word	0x40023800

0800d7c0 <STM32FXXXTim4Nvic>:
void STM32FXXXTim4Nvic(uint8_t bool)
{ // 30
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	71fb      	strb	r3, [r7, #7]
	if(bool){set_bit_block(NVIC->ISER, 1, TIM4_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM4_IRQn, 1);}
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d006      	beq.n	800d7de <STM32FXXXTim4Nvic+0x1e>
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	221e      	movs	r2, #30
 800d7d4:	2101      	movs	r1, #1
 800d7d6:	4807      	ldr	r0, [pc, #28]	@ (800d7f4 <STM32FXXXTim4Nvic+0x34>)
 800d7d8:	f7f5 ff72 	bl	80036c0 <set_bit_block>
}
 800d7dc:	e005      	b.n	800d7ea <STM32FXXXTim4Nvic+0x2a>
	if(bool){set_bit_block(NVIC->ISER, 1, TIM4_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM4_IRQn, 1);}
 800d7de:	2301      	movs	r3, #1
 800d7e0:	221e      	movs	r2, #30
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	4804      	ldr	r0, [pc, #16]	@ (800d7f8 <STM32FXXXTim4Nvic+0x38>)
 800d7e6:	f7f5 ff6b 	bl	80036c0 <set_bit_block>
}
 800d7ea:	bf00      	nop
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	e000e100 	.word	0xe000e100
 800d7f8:	e000e180 	.word	0xe000e180

0800d7fc <STM32FXXXTim5Clock>:
/************/
/*** TIM5 ***/
/************/
void STM32FXXXTim5Clock(uint8_t bool)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	71fb      	strb	r3, [r7, #7]
	if(bool){RCC->APB1ENR |= (1 << 3);}else{RCC->APB1ENR &= ~(1 << 3);}
 800d806:	79fb      	ldrb	r3, [r7, #7]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d006      	beq.n	800d81a <STM32FXXXTim5Clock+0x1e>
 800d80c:	4b09      	ldr	r3, [pc, #36]	@ (800d834 <STM32FXXXTim5Clock+0x38>)
 800d80e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d810:	4a08      	ldr	r2, [pc, #32]	@ (800d834 <STM32FXXXTim5Clock+0x38>)
 800d812:	f043 0308 	orr.w	r3, r3, #8
 800d816:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800d818:	e005      	b.n	800d826 <STM32FXXXTim5Clock+0x2a>
	if(bool){RCC->APB1ENR |= (1 << 3);}else{RCC->APB1ENR &= ~(1 << 3);}
 800d81a:	4b06      	ldr	r3, [pc, #24]	@ (800d834 <STM32FXXXTim5Clock+0x38>)
 800d81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d81e:	4a05      	ldr	r2, [pc, #20]	@ (800d834 <STM32FXXXTim5Clock+0x38>)
 800d820:	f023 0308 	bic.w	r3, r3, #8
 800d824:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800d826:	bf00      	nop
 800d828:	370c      	adds	r7, #12
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	40023800 	.word	0x40023800

0800d838 <STM32FXXXTim5Nvic>:
void STM32FXXXTim5Nvic(uint8_t bool)
{ // 50
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	4603      	mov	r3, r0
 800d840:	71fb      	strb	r3, [r7, #7]
	if(bool){set_bit_block(NVIC->ISER, 1, TIM5_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM5_IRQn, 1);}
 800d842:	79fb      	ldrb	r3, [r7, #7]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d006      	beq.n	800d856 <STM32FXXXTim5Nvic+0x1e>
 800d848:	2301      	movs	r3, #1
 800d84a:	2232      	movs	r2, #50	@ 0x32
 800d84c:	2101      	movs	r1, #1
 800d84e:	4807      	ldr	r0, [pc, #28]	@ (800d86c <STM32FXXXTim5Nvic+0x34>)
 800d850:	f7f5 ff36 	bl	80036c0 <set_bit_block>
}
 800d854:	e005      	b.n	800d862 <STM32FXXXTim5Nvic+0x2a>
	if(bool){set_bit_block(NVIC->ISER, 1, TIM5_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM5_IRQn, 1);}
 800d856:	2301      	movs	r3, #1
 800d858:	2232      	movs	r2, #50	@ 0x32
 800d85a:	2101      	movs	r1, #1
 800d85c:	4804      	ldr	r0, [pc, #16]	@ (800d870 <STM32FXXXTim5Nvic+0x38>)
 800d85e:	f7f5 ff2f 	bl	80036c0 <set_bit_block>
}
 800d862:	bf00      	nop
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	e000e100 	.word	0xe000e100
 800d870:	e000e180 	.word	0xe000e180

0800d874 <tim2_enable>:
/*** TIM2 INIC Procedure & Function Definition ***/
STM32FXXX_TIM2* tim2_enable(void)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	af00      	add	r7, sp, #0
	/*** TIM2 Bit Mapping Link ***/
	stm32fxxx_tim2.instance = tim2_instance();
 800d878:	f7fd fbbe 	bl	800aff8 <tim2_instance>
 800d87c:	4603      	mov	r3, r0
 800d87e:	4a05      	ldr	r2, [pc, #20]	@ (800d894 <tim2_enable+0x20>)
 800d880:	6013      	str	r3, [r2, #0]
	// CLOCK
	stm32fxxx_tim2.clock = STM32FXXXTim2Clock;
 800d882:	4b04      	ldr	r3, [pc, #16]	@ (800d894 <tim2_enable+0x20>)
 800d884:	4a04      	ldr	r2, [pc, #16]	@ (800d898 <tim2_enable+0x24>)
 800d886:	605a      	str	r2, [r3, #4]
	// NVIC
	stm32fxxx_tim2.nvic = STM32FXXXTim2Nvic;
 800d888:	4b02      	ldr	r3, [pc, #8]	@ (800d894 <tim2_enable+0x20>)
 800d88a:	4a04      	ldr	r2, [pc, #16]	@ (800d89c <tim2_enable+0x28>)
 800d88c:	609a      	str	r2, [r3, #8]

	return &stm32fxxx_tim2;
 800d88e:	4b01      	ldr	r3, [pc, #4]	@ (800d894 <tim2_enable+0x20>)
}
 800d890:	4618      	mov	r0, r3
 800d892:	bd80      	pop	{r7, pc}
 800d894:	20000c64 	.word	0x20000c64
 800d898:	0800d695 	.word	0x0800d695
 800d89c:	0800d6d1 	.word	0x0800d6d1

0800d8a0 <tim3_enable>:

STM32FXXX_TIM2* tim2(void){ return (STM32FXXX_TIM2*) &stm32fxxx_tim2; }

/*** TIM3 INIC Procedure & Function Definition ***/
STM32FXXX_TIM3* tim3_enable(void)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	af00      	add	r7, sp, #0
	/*** TIM3 Bit Mapping Link ***/
	stm32fxxx_tim3.instance = tim3_instance();
 800d8a4:	f7fd fbb2 	bl	800b00c <tim3_instance>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	4a05      	ldr	r2, [pc, #20]	@ (800d8c0 <tim3_enable+0x20>)
 800d8ac:	6013      	str	r3, [r2, #0]
	// CLOCK
	stm32fxxx_tim3.clock = STM32FXXXTim3Clock;
 800d8ae:	4b04      	ldr	r3, [pc, #16]	@ (800d8c0 <tim3_enable+0x20>)
 800d8b0:	4a04      	ldr	r2, [pc, #16]	@ (800d8c4 <tim3_enable+0x24>)
 800d8b2:	605a      	str	r2, [r3, #4]
	// NVIC
	stm32fxxx_tim3.nvic = STM32FXXXTim3Nvic;
 800d8b4:	4b02      	ldr	r3, [pc, #8]	@ (800d8c0 <tim3_enable+0x20>)
 800d8b6:	4a04      	ldr	r2, [pc, #16]	@ (800d8c8 <tim3_enable+0x28>)
 800d8b8:	609a      	str	r2, [r3, #8]

	return &stm32fxxx_tim3;
 800d8ba:	4b01      	ldr	r3, [pc, #4]	@ (800d8c0 <tim3_enable+0x20>)
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	20000c70 	.word	0x20000c70
 800d8c4:	0800d70d 	.word	0x0800d70d
 800d8c8:	0800d749 	.word	0x0800d749

0800d8cc <tim4_enable>:

STM32FXXX_TIM3* tim3(void){ return (STM32FXXX_TIM3*) &stm32fxxx_tim3; }

/*** TIM4 INIC Procedure & Function Definition ***/
STM32FXXX_TIM4* tim4_enable(void)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
	/*** TIM4 Bit Mapping Link ***/
	stm32fxxx_tim4.instance = tim4_instance();
 800d8d0:	f7fd fba6 	bl	800b020 <tim4_instance>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	4a05      	ldr	r2, [pc, #20]	@ (800d8ec <tim4_enable+0x20>)
 800d8d8:	6013      	str	r3, [r2, #0]
	// CLOCK
	stm32fxxx_tim4.clock = STM32FXXXTim4Clock;
 800d8da:	4b04      	ldr	r3, [pc, #16]	@ (800d8ec <tim4_enable+0x20>)
 800d8dc:	4a04      	ldr	r2, [pc, #16]	@ (800d8f0 <tim4_enable+0x24>)
 800d8de:	605a      	str	r2, [r3, #4]
	// NVIC
	stm32fxxx_tim4.nvic = STM32FXXXTim4Nvic;
 800d8e0:	4b02      	ldr	r3, [pc, #8]	@ (800d8ec <tim4_enable+0x20>)
 800d8e2:	4a04      	ldr	r2, [pc, #16]	@ (800d8f4 <tim4_enable+0x28>)
 800d8e4:	609a      	str	r2, [r3, #8]

	return &stm32fxxx_tim4;
 800d8e6:	4b01      	ldr	r3, [pc, #4]	@ (800d8ec <tim4_enable+0x20>)
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	20000c7c 	.word	0x20000c7c
 800d8f0:	0800d785 	.word	0x0800d785
 800d8f4:	0800d7c1 	.word	0x0800d7c1

0800d8f8 <tim5_enable>:

STM32FXXX_TIM4* tim4(void){ return (STM32FXXX_TIM4*) &stm32fxxx_tim4; }

/*** TIM5 INIC Procedure & Function Definition ***/
STM32FXXX_TIM5* tim5_enable(void)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	af00      	add	r7, sp, #0
	/*** TIM5 Bit Mapping Link ***/
	stm32fxxx_tim5.instance = tim5_instance();
 800d8fc:	f7fd fb9a 	bl	800b034 <tim5_instance>
 800d900:	4603      	mov	r3, r0
 800d902:	4a05      	ldr	r2, [pc, #20]	@ (800d918 <tim5_enable+0x20>)
 800d904:	6013      	str	r3, [r2, #0]
	// CLOCK
	stm32fxxx_tim5.clock = STM32FXXXTim5Clock;
 800d906:	4b04      	ldr	r3, [pc, #16]	@ (800d918 <tim5_enable+0x20>)
 800d908:	4a04      	ldr	r2, [pc, #16]	@ (800d91c <tim5_enable+0x24>)
 800d90a:	605a      	str	r2, [r3, #4]
	// NVIC
	stm32fxxx_tim5.nvic = STM32FXXXTim5Nvic;
 800d90c:	4b02      	ldr	r3, [pc, #8]	@ (800d918 <tim5_enable+0x20>)
 800d90e:	4a04      	ldr	r2, [pc, #16]	@ (800d920 <tim5_enable+0x28>)
 800d910:	609a      	str	r2, [r3, #8]

	return &stm32fxxx_tim5;
 800d912:	4b01      	ldr	r3, [pc, #4]	@ (800d918 <tim5_enable+0x20>)
}
 800d914:	4618      	mov	r0, r3
 800d916:	bd80      	pop	{r7, pc}
 800d918:	20000c88 	.word	0x20000c88
 800d91c:	0800d7fd 	.word	0x0800d7fd
 800d920:	0800d839 	.word	0x0800d839

0800d924 <STM32FXXXTim9Clock>:
/*** TIMER 9 to 14 Procedure & Function Definition ***/
/************/
/*** TIM9 ***/
/************/
void STM32FXXXTim9Clock(uint8_t bool)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	71fb      	strb	r3, [r7, #7]
	if(bool){RCC->APB2ENR |= (1 << 16);}else{RCC->APB2ENR &= ~(1 << 16);}
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d006      	beq.n	800d942 <STM32FXXXTim9Clock+0x1e>
 800d934:	4b09      	ldr	r3, [pc, #36]	@ (800d95c <STM32FXXXTim9Clock+0x38>)
 800d936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d938:	4a08      	ldr	r2, [pc, #32]	@ (800d95c <STM32FXXXTim9Clock+0x38>)
 800d93a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d93e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800d940:	e005      	b.n	800d94e <STM32FXXXTim9Clock+0x2a>
	if(bool){RCC->APB2ENR |= (1 << 16);}else{RCC->APB2ENR &= ~(1 << 16);}
 800d942:	4b06      	ldr	r3, [pc, #24]	@ (800d95c <STM32FXXXTim9Clock+0x38>)
 800d944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d946:	4a05      	ldr	r2, [pc, #20]	@ (800d95c <STM32FXXXTim9Clock+0x38>)
 800d948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d94c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800d94e:	bf00      	nop
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	40023800 	.word	0x40023800

0800d960 <STM32FXXXTim9Nvic>:
void STM32FXXXTim9Nvic(uint8_t bool)
{ // 24
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	4603      	mov	r3, r0
 800d968:	71fb      	strb	r3, [r7, #7]
	if(bool){set_bit_block(NVIC->ISER, 1, TIM1_BRK_TIM9_IRQn, 1);}else{set_bit_block(NVIC->ICER, 1, TIM1_BRK_TIM9_IRQn, 1);}
 800d96a:	79fb      	ldrb	r3, [r7, #7]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d006      	beq.n	800d97e <STM32FXXXTim9Nvic+0x1e>
 800d970:	2301      	movs	r3, #1
 800d972:	2218      	movs	r2, #24
 800d974:	2101      	movs	r1, #1
 800d976:	4807      	ldr	r0, [pc, #28]	@ (800d994 <STM32FXXXTim9Nvic+0x34>)
 800d978:	f7f5 fea2 	bl	80036c0 <set_bit_block>
}
 800d97c:	e005      	b.n	800d98a <STM32FXXXTim9Nvic+0x2a>
	if(bool){set_bit_block(NVIC->ISER, 1, TIM1_BRK_TIM9_IRQn, 1);}else{set_bit_block(NVIC->ICER, 1, TIM1_BRK_TIM9_IRQn, 1);}
 800d97e:	2301      	movs	r3, #1
 800d980:	2218      	movs	r2, #24
 800d982:	2101      	movs	r1, #1
 800d984:	4804      	ldr	r0, [pc, #16]	@ (800d998 <STM32FXXXTim9Nvic+0x38>)
 800d986:	f7f5 fe9b 	bl	80036c0 <set_bit_block>
}
 800d98a:	bf00      	nop
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	e000e100 	.word	0xe000e100
 800d998:	e000e180 	.word	0xe000e180

0800d99c <STM32FXXXTim10Clock>:
/*************/
/*** TIM10 ***/
/*************/
void STM32FXXXTim10Clock(uint8_t bool)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	71fb      	strb	r3, [r7, #7]
	if(bool){RCC->APB2ENR |= (1 << 17);}else{RCC->APB2ENR &= ~(1 << 17);}
 800d9a6:	79fb      	ldrb	r3, [r7, #7]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d006      	beq.n	800d9ba <STM32FXXXTim10Clock+0x1e>
 800d9ac:	4b09      	ldr	r3, [pc, #36]	@ (800d9d4 <STM32FXXXTim10Clock+0x38>)
 800d9ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9b0:	4a08      	ldr	r2, [pc, #32]	@ (800d9d4 <STM32FXXXTim10Clock+0x38>)
 800d9b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9b6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800d9b8:	e005      	b.n	800d9c6 <STM32FXXXTim10Clock+0x2a>
	if(bool){RCC->APB2ENR |= (1 << 17);}else{RCC->APB2ENR &= ~(1 << 17);}
 800d9ba:	4b06      	ldr	r3, [pc, #24]	@ (800d9d4 <STM32FXXXTim10Clock+0x38>)
 800d9bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9be:	4a05      	ldr	r2, [pc, #20]	@ (800d9d4 <STM32FXXXTim10Clock+0x38>)
 800d9c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d9c4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800d9c6:	bf00      	nop
 800d9c8:	370c      	adds	r7, #12
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	40023800 	.word	0x40023800

0800d9d8 <STM32FXXXTim10Nvic>:
void STM32FXXXTim10Nvic(uint8_t bool)
{ // 25
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	71fb      	strb	r3, [r7, #7]
	if(bool){set_bit_block(NVIC->ISER, 1, TIM1_UP_TIM10_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM1_UP_TIM10_IRQn, 1);}
 800d9e2:	79fb      	ldrb	r3, [r7, #7]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d006      	beq.n	800d9f6 <STM32FXXXTim10Nvic+0x1e>
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	2219      	movs	r2, #25
 800d9ec:	2101      	movs	r1, #1
 800d9ee:	4807      	ldr	r0, [pc, #28]	@ (800da0c <STM32FXXXTim10Nvic+0x34>)
 800d9f0:	f7f5 fe66 	bl	80036c0 <set_bit_block>
}
 800d9f4:	e005      	b.n	800da02 <STM32FXXXTim10Nvic+0x2a>
	if(bool){set_bit_block(NVIC->ISER, 1, TIM1_UP_TIM10_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM1_UP_TIM10_IRQn, 1);}
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	2219      	movs	r2, #25
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	4804      	ldr	r0, [pc, #16]	@ (800da10 <STM32FXXXTim10Nvic+0x38>)
 800d9fe:	f7f5 fe5f 	bl	80036c0 <set_bit_block>
}
 800da02:	bf00      	nop
 800da04:	3708      	adds	r7, #8
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	e000e100 	.word	0xe000e100
 800da10:	e000e180 	.word	0xe000e180

0800da14 <STM32FXXXTim11Clock>:
/*************/
/*** TIM11 ***/
/*************/
void STM32FXXXTim11Clock(uint8_t bool)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	4603      	mov	r3, r0
 800da1c:	71fb      	strb	r3, [r7, #7]
	if(bool){RCC->APB2ENR |= (1 << 18);}else{RCC->APB2ENR &= ~(1 << 18);}
 800da1e:	79fb      	ldrb	r3, [r7, #7]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d006      	beq.n	800da32 <STM32FXXXTim11Clock+0x1e>
 800da24:	4b09      	ldr	r3, [pc, #36]	@ (800da4c <STM32FXXXTim11Clock+0x38>)
 800da26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da28:	4a08      	ldr	r2, [pc, #32]	@ (800da4c <STM32FXXXTim11Clock+0x38>)
 800da2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800da2e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800da30:	e005      	b.n	800da3e <STM32FXXXTim11Clock+0x2a>
	if(bool){RCC->APB2ENR |= (1 << 18);}else{RCC->APB2ENR &= ~(1 << 18);}
 800da32:	4b06      	ldr	r3, [pc, #24]	@ (800da4c <STM32FXXXTim11Clock+0x38>)
 800da34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da36:	4a05      	ldr	r2, [pc, #20]	@ (800da4c <STM32FXXXTim11Clock+0x38>)
 800da38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800da3c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800da3e:	bf00      	nop
 800da40:	370c      	adds	r7, #12
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop
 800da4c:	40023800 	.word	0x40023800

0800da50 <STM32FXXXTim11Nvic>:
void STM32FXXXTim11Nvic(uint8_t bool)
{ // 26
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	71fb      	strb	r3, [r7, #7]
	if(bool){set_bit_block(NVIC->ISER, 1, TIM1_TRG_COM_TIM11_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM1_TRG_COM_TIM11_IRQn, 1);}
 800da5a:	79fb      	ldrb	r3, [r7, #7]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d006      	beq.n	800da6e <STM32FXXXTim11Nvic+0x1e>
 800da60:	2301      	movs	r3, #1
 800da62:	221a      	movs	r2, #26
 800da64:	2101      	movs	r1, #1
 800da66:	4807      	ldr	r0, [pc, #28]	@ (800da84 <STM32FXXXTim11Nvic+0x34>)
 800da68:	f7f5 fe2a 	bl	80036c0 <set_bit_block>
}
 800da6c:	e005      	b.n	800da7a <STM32FXXXTim11Nvic+0x2a>
	if(bool){set_bit_block(NVIC->ISER, 1, TIM1_TRG_COM_TIM11_IRQn, 1);} else{set_bit_block(NVIC->ICER, 1, TIM1_TRG_COM_TIM11_IRQn, 1);}
 800da6e:	2301      	movs	r3, #1
 800da70:	221a      	movs	r2, #26
 800da72:	2101      	movs	r1, #1
 800da74:	4804      	ldr	r0, [pc, #16]	@ (800da88 <STM32FXXXTim11Nvic+0x38>)
 800da76:	f7f5 fe23 	bl	80036c0 <set_bit_block>
}
 800da7a:	bf00      	nop
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	e000e100 	.word	0xe000e100
 800da88:	e000e180 	.word	0xe000e180

0800da8c <tim9_enable>:
	if(bool){set_bit_block(NVIC->ISER, 1, TIM8_TRG_COM_TIM14_IRQn, 1);}else{set_bit_block(NVIC->ICER, 1, TIM8_TRG_COM_TIM14_IRQn, 1);}
}
#endif
/*** TIM9 Procedure & Function Definition ***/
STM32FXXX_TIM9* tim9_enable(void)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	af00      	add	r7, sp, #0

	/*** TIM9 Bit Mapping Link ***/
	stm32fxxx_tim9.instance = tim9_instance();
 800da90:	f7fd fada 	bl	800b048 <tim9_instance>
 800da94:	4603      	mov	r3, r0
 800da96:	4a05      	ldr	r2, [pc, #20]	@ (800daac <tim9_enable+0x20>)
 800da98:	6013      	str	r3, [r2, #0]
	// CLOCK
	stm32fxxx_tim9.clock = STM32FXXXTim9Clock;
 800da9a:	4b04      	ldr	r3, [pc, #16]	@ (800daac <tim9_enable+0x20>)
 800da9c:	4a04      	ldr	r2, [pc, #16]	@ (800dab0 <tim9_enable+0x24>)
 800da9e:	605a      	str	r2, [r3, #4]
	// NVIC
	stm32fxxx_tim9.nvic = STM32FXXXTim9Nvic;
 800daa0:	4b02      	ldr	r3, [pc, #8]	@ (800daac <tim9_enable+0x20>)
 800daa2:	4a04      	ldr	r2, [pc, #16]	@ (800dab4 <tim9_enable+0x28>)
 800daa4:	609a      	str	r2, [r3, #8]

	return &stm32fxxx_tim9;
 800daa6:	4b01      	ldr	r3, [pc, #4]	@ (800daac <tim9_enable+0x20>)
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	20000c94 	.word	0x20000c94
 800dab0:	0800d925 	.word	0x0800d925
 800dab4:	0800d961 	.word	0x0800d961

0800dab8 <tim10_enable>:

STM32FXXX_TIM9* tim9(void){ return (STM32FXXX_TIM9*) &stm32fxxx_tim9; }

/*** TIM10 Procedure & Function Definition***/
STM32FXXX_TIM10* tim10_enable(void)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	af00      	add	r7, sp, #0

	/*** TIM10 Bit Mapping Link ***/
	stm32fxxx_tim10.instance = tim10_instance();
 800dabc:	f7fd face 	bl	800b05c <tim10_instance>
 800dac0:	4603      	mov	r3, r0
 800dac2:	4a05      	ldr	r2, [pc, #20]	@ (800dad8 <tim10_enable+0x20>)
 800dac4:	6013      	str	r3, [r2, #0]
	// CLOCK
	stm32fxxx_tim10.clock = STM32FXXXTim10Clock;
 800dac6:	4b04      	ldr	r3, [pc, #16]	@ (800dad8 <tim10_enable+0x20>)
 800dac8:	4a04      	ldr	r2, [pc, #16]	@ (800dadc <tim10_enable+0x24>)
 800daca:	605a      	str	r2, [r3, #4]
	// NVIC
	stm32fxxx_tim10.nvic = STM32FXXXTim10Nvic;
 800dacc:	4b02      	ldr	r3, [pc, #8]	@ (800dad8 <tim10_enable+0x20>)
 800dace:	4a04      	ldr	r2, [pc, #16]	@ (800dae0 <tim10_enable+0x28>)
 800dad0:	609a      	str	r2, [r3, #8]

	return &stm32fxxx_tim10;
 800dad2:	4b01      	ldr	r3, [pc, #4]	@ (800dad8 <tim10_enable+0x20>)
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	20000ca0 	.word	0x20000ca0
 800dadc:	0800d99d 	.word	0x0800d99d
 800dae0:	0800d9d9 	.word	0x0800d9d9

0800dae4 <tim11_enable>:

STM32FXXX_TIM10* tim10(void){ return (STM32FXXX_TIM10*) &stm32fxxx_tim10; }

/*** TIM11 Procedure & Function Definition***/
STM32FXXX_TIM11* tim11_enable(void)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	af00      	add	r7, sp, #0

	/*** TIM11 Bit Mapping Link ***/
	stm32fxxx_tim11.instance = tim11_instance();
 800dae8:	f7fd fac2 	bl	800b070 <tim11_instance>
 800daec:	4603      	mov	r3, r0
 800daee:	4a05      	ldr	r2, [pc, #20]	@ (800db04 <tim11_enable+0x20>)
 800daf0:	6013      	str	r3, [r2, #0]
	// CLOCK
	stm32fxxx_tim11.clock = STM32FXXXTim11Clock;
 800daf2:	4b04      	ldr	r3, [pc, #16]	@ (800db04 <tim11_enable+0x20>)
 800daf4:	4a04      	ldr	r2, [pc, #16]	@ (800db08 <tim11_enable+0x24>)
 800daf6:	605a      	str	r2, [r3, #4]
	// NVIC
	stm32fxxx_tim11.nvic = STM32FXXXTim11Nvic;
 800daf8:	4b02      	ldr	r3, [pc, #8]	@ (800db04 <tim11_enable+0x20>)
 800dafa:	4a04      	ldr	r2, [pc, #16]	@ (800db0c <tim11_enable+0x28>)
 800dafc:	609a      	str	r2, [r3, #8]

	return &stm32fxxx_tim11;
 800dafe:	4b01      	ldr	r3, [pc, #4]	@ (800db04 <tim11_enable+0x20>)
}
 800db00:	4618      	mov	r0, r3
 800db02:	bd80      	pop	{r7, pc}
 800db04:	20000cac 	.word	0x20000cac
 800db08:	0800da15 	.word	0x0800da15
 800db0c:	0800da51 	.word	0x0800da51

0800db10 <STM32FXXXUsart1Clock>:
#endif
static STM32FXXX_USART6 stm32fxxx_usart6;
/*** USART Procedure & Function Definition ***/
/*** USART1 ***/
void STM32FXXXUsart1Clock( uint8_t bool )
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	4603      	mov	r3, r0
 800db18:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->APB2ENR |= (1 << 4); }else{ RCC->APB2ENR &= ~(1 << 4); }
 800db1a:	79fb      	ldrb	r3, [r7, #7]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d006      	beq.n	800db2e <STM32FXXXUsart1Clock+0x1e>
 800db20:	4b09      	ldr	r3, [pc, #36]	@ (800db48 <STM32FXXXUsart1Clock+0x38>)
 800db22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db24:	4a08      	ldr	r2, [pc, #32]	@ (800db48 <STM32FXXXUsart1Clock+0x38>)
 800db26:	f043 0310 	orr.w	r3, r3, #16
 800db2a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800db2c:	e005      	b.n	800db3a <STM32FXXXUsart1Clock+0x2a>
	if(bool){ RCC->APB2ENR |= (1 << 4); }else{ RCC->APB2ENR &= ~(1 << 4); }
 800db2e:	4b06      	ldr	r3, [pc, #24]	@ (800db48 <STM32FXXXUsart1Clock+0x38>)
 800db30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db32:	4a05      	ldr	r2, [pc, #20]	@ (800db48 <STM32FXXXUsart1Clock+0x38>)
 800db34:	f023 0310 	bic.w	r3, r3, #16
 800db38:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800db3a:	bf00      	nop
 800db3c:	370c      	adds	r7, #12
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	40023800 	.word	0x40023800

0800db4c <STM32FXXXUsart1Nvic>:
void STM32FXXXUsart1Nvic( uint8_t bool )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	4603      	mov	r3, r0
 800db54:	71fb      	strb	r3, [r7, #7]
	if(bool){ set_bit_block(NVIC->ISER, 1, USART1_IRQn, 1); }else{ set_bit_block(NVIC->ICER, 1, USART1_IRQn, 1); }
 800db56:	79fb      	ldrb	r3, [r7, #7]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d006      	beq.n	800db6a <STM32FXXXUsart1Nvic+0x1e>
 800db5c:	2301      	movs	r3, #1
 800db5e:	2225      	movs	r2, #37	@ 0x25
 800db60:	2101      	movs	r1, #1
 800db62:	4807      	ldr	r0, [pc, #28]	@ (800db80 <STM32FXXXUsart1Nvic+0x34>)
 800db64:	f7f5 fdac 	bl	80036c0 <set_bit_block>
}
 800db68:	e005      	b.n	800db76 <STM32FXXXUsart1Nvic+0x2a>
	if(bool){ set_bit_block(NVIC->ISER, 1, USART1_IRQn, 1); }else{ set_bit_block(NVIC->ICER, 1, USART1_IRQn, 1); }
 800db6a:	2301      	movs	r3, #1
 800db6c:	2225      	movs	r2, #37	@ 0x25
 800db6e:	2101      	movs	r1, #1
 800db70:	4804      	ldr	r0, [pc, #16]	@ (800db84 <STM32FXXXUsart1Nvic+0x38>)
 800db72:	f7f5 fda5 	bl	80036c0 <set_bit_block>
}
 800db76:	bf00      	nop
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	e000e100 	.word	0xe000e100
 800db84:	e000e180 	.word	0xe000e180

0800db88 <STM32FXXXUsart1Parameter>:
void STM32FXXXUsart1Parameter( uint8_t wordlength, uint8_t samplingmode, double stopbits, uint32_t baudrate )
// Sets the usart parameters, using real values.
{
 800db88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db8c:	b08e      	sub	sp, #56	@ 0x38
 800db8e:	af00      	add	r7, sp, #0
 800db90:	4603      	mov	r3, r0
 800db92:	ed87 0b02 	vstr	d0, [r7, #8]
 800db96:	613a      	str	r2, [r7, #16]
 800db98:	75fb      	strb	r3, [r7, #23]
 800db9a:	460b      	mov	r3, r1
 800db9c:	75bb      	strb	r3, [r7, #22]
	uint8_t sampling;
	double value, fracpart, intpart;
	if(wordlength == 9)
 800db9e:	7dfb      	ldrb	r3, [r7, #23]
 800dba0:	2b09      	cmp	r3, #9
 800dba2:	d106      	bne.n	800dbb2 <STM32FXXXUsart1Parameter+0x2a>
		USART1->CR1 |= (1 << 12); // M: Word length, 1 - 9bit.
 800dba4:	4bb4      	ldr	r3, [pc, #720]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	4ab3      	ldr	r2, [pc, #716]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dbaa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dbae:	60d3      	str	r3, [r2, #12]
 800dbb0:	e00f      	b.n	800dbd2 <STM32FXXXUsart1Parameter+0x4a>
	else if(wordlength == 8)
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	2b08      	cmp	r3, #8
 800dbb6:	d106      	bne.n	800dbc6 <STM32FXXXUsart1Parameter+0x3e>
		USART1->CR1 &= (uint32_t) ~(1 << 12); // M: Word length, 0 - 8bit.
 800dbb8:	4baf      	ldr	r3, [pc, #700]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	4aae      	ldr	r2, [pc, #696]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dbbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbc2:	60d3      	str	r3, [r2, #12]
 800dbc4:	e005      	b.n	800dbd2 <STM32FXXXUsart1Parameter+0x4a>
	else
		USART1->CR1 &= (uint32_t) ~(1 << 12); // M: Word length, 0 - 8bit, default.
 800dbc6:	4bac      	ldr	r3, [pc, #688]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	4aab      	ldr	r2, [pc, #684]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dbcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbd0:	60d3      	str	r3, [r2, #12]

	if(samplingmode == 8){
 800dbd2:	7dbb      	ldrb	r3, [r7, #22]
 800dbd4:	2b08      	cmp	r3, #8
 800dbd6:	d109      	bne.n	800dbec <STM32FXXXUsart1Parameter+0x64>
		sampling = 8;
 800dbd8:	2308      	movs	r3, #8
 800dbda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		USART1->CR1 |= (1 << 15); // OVER8: Oversampling mode, 1 - 8.
 800dbde:	4ba6      	ldr	r3, [pc, #664]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	4aa5      	ldr	r2, [pc, #660]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dbe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbe8:	60d3      	str	r3, [r2, #12]
 800dbea:	e015      	b.n	800dc18 <STM32FXXXUsart1Parameter+0x90>
	}else if(samplingmode == 16){
 800dbec:	7dbb      	ldrb	r3, [r7, #22]
 800dbee:	2b10      	cmp	r3, #16
 800dbf0:	d109      	bne.n	800dc06 <STM32FXXXUsart1Parameter+0x7e>
		sampling = 16;
 800dbf2:	2310      	movs	r3, #16
 800dbf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		USART1->CR1 &= (uint32_t) ~(1 << 15); // OVER8: Oversampling mode, 0 - 16.
 800dbf8:	4b9f      	ldr	r3, [pc, #636]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	4a9e      	ldr	r2, [pc, #632]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dbfe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dc02:	60d3      	str	r3, [r2, #12]
 800dc04:	e008      	b.n	800dc18 <STM32FXXXUsart1Parameter+0x90>
	}else{
		sampling = 16;
 800dc06:	2310      	movs	r3, #16
 800dc08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		USART1->CR1 &= (uint32_t) ~(1 << 15); // OVER8: Oversampling mode, 0 - 16, default.
 800dc0c:	4b9a      	ldr	r3, [pc, #616]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	4a99      	ldr	r2, [pc, #612]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dc12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dc16:	60d3      	str	r3, [r2, #12]
	}

	USART1->CR2 &= (uint32_t) ~((1 << 13) | (1 << 12)); // STOP: STOP bits 00 - 1stopbit, default.
 800dc18:	4b97      	ldr	r3, [pc, #604]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dc1a:	691b      	ldr	r3, [r3, #16]
 800dc1c:	4a96      	ldr	r2, [pc, #600]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dc1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800dc22:	6113      	str	r3, [r2, #16]
	if(fabs(stopbits - 0.5) < 0.00001) // STOP: STOP bits, 01: 0.5 Stop bit
 800dc24:	f04f 0200 	mov.w	r2, #0
 800dc28:	4b94      	ldr	r3, [pc, #592]	@ (800de7c <STM32FXXXUsart1Parameter+0x2f4>)
 800dc2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc2e:	f7f2 fb2b 	bl	8000288 <__aeabi_dsub>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	603a      	str	r2, [r7, #0]
 800dc38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc3c:	607b      	str	r3, [r7, #4]
 800dc3e:	a38c      	add	r3, pc, #560	@ (adr r3, 800de70 <STM32FXXXUsart1Parameter+0x2e8>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dc48:	f7f2 ff48 	bl	8000adc <__aeabi_dcmplt>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d006      	beq.n	800dc60 <STM32FXXXUsart1Parameter+0xd8>
		USART1->CR2 |= (1 << 12);
 800dc52:	4b89      	ldr	r3, [pc, #548]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dc54:	691b      	ldr	r3, [r3, #16]
 800dc56:	4a88      	ldr	r2, [pc, #544]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dc58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dc5c:	6113      	str	r3, [r2, #16]
 800dc5e:	e056      	b.n	800dd0e <STM32FXXXUsart1Parameter+0x186>
	else if(fabs(stopbits - 1) < 0.00001) // STOP: STOP bits, 00: 1 Stop bit.
 800dc60:	f04f 0200 	mov.w	r2, #0
 800dc64:	4b86      	ldr	r3, [pc, #536]	@ (800de80 <STM32FXXXUsart1Parameter+0x2f8>)
 800dc66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc6a:	f7f2 fb0d 	bl	8000288 <__aeabi_dsub>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	460b      	mov	r3, r1
 800dc72:	4692      	mov	sl, r2
 800dc74:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800dc78:	a37d      	add	r3, pc, #500	@ (adr r3, 800de70 <STM32FXXXUsart1Parameter+0x2e8>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	4650      	mov	r0, sl
 800dc80:	4659      	mov	r1, fp
 800dc82:	f7f2 ff2b 	bl	8000adc <__aeabi_dcmplt>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d006      	beq.n	800dc9a <STM32FXXXUsart1Parameter+0x112>
		USART1->CR2 &= (uint32_t) ~((1 << 13) | (1 << 12));
 800dc8c:	4b7a      	ldr	r3, [pc, #488]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	4a79      	ldr	r2, [pc, #484]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dc92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800dc96:	6113      	str	r3, [r2, #16]
 800dc98:	e039      	b.n	800dd0e <STM32FXXXUsart1Parameter+0x186>
	else if(fabs(stopbits - 1.5) < 0.00001) // STOP: STOP bits, 11: 1.5 Stop bit
 800dc9a:	f04f 0200 	mov.w	r2, #0
 800dc9e:	4b79      	ldr	r3, [pc, #484]	@ (800de84 <STM32FXXXUsart1Parameter+0x2fc>)
 800dca0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dca4:	f7f2 faf0 	bl	8000288 <__aeabi_dsub>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	4690      	mov	r8, r2
 800dcae:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800dcb2:	a36f      	add	r3, pc, #444	@ (adr r3, 800de70 <STM32FXXXUsart1Parameter+0x2e8>)
 800dcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb8:	4640      	mov	r0, r8
 800dcba:	4649      	mov	r1, r9
 800dcbc:	f7f2 ff0e 	bl	8000adc <__aeabi_dcmplt>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d006      	beq.n	800dcd4 <STM32FXXXUsart1Parameter+0x14c>
		USART1->CR2 |= ((1 << 13) | (1 << 12));
 800dcc6:	4b6c      	ldr	r3, [pc, #432]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dcc8:	691b      	ldr	r3, [r3, #16]
 800dcca:	4a6b      	ldr	r2, [pc, #428]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dccc:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800dcd0:	6113      	str	r3, [r2, #16]
 800dcd2:	e01c      	b.n	800dd0e <STM32FXXXUsart1Parameter+0x186>
	else if(fabs(stopbits - 2) < 0.00001) // STOP: STOP bits, 10: 2 Stop bits
 800dcd4:	f04f 0200 	mov.w	r2, #0
 800dcd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dcdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dce0:	f7f2 fad2 	bl	8000288 <__aeabi_dsub>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	4614      	mov	r4, r2
 800dcea:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800dcee:	a360      	add	r3, pc, #384	@ (adr r3, 800de70 <STM32FXXXUsart1Parameter+0x2e8>)
 800dcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	f7f2 fef0 	bl	8000adc <__aeabi_dcmplt>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d005      	beq.n	800dd0e <STM32FXXXUsart1Parameter+0x186>
		USART1->CR2 |= (1 << 13);
 800dd02:	4b5d      	ldr	r3, [pc, #372]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dd04:	691b      	ldr	r3, [r3, #16]
 800dd06:	4a5c      	ldr	r2, [pc, #368]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dd08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800dd0c:	6113      	str	r3, [r2, #16]

	value = (double) getsysclk() / ( gethpre() * sampling * baudrate );
 800dd0e:	f7f5 fad9 	bl	80032c4 <getsysclk>
 800dd12:	4603      	mov	r3, r0
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7f2 fbf5 	bl	8000504 <__aeabi_ui2d>
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	460d      	mov	r5, r1
 800dd1e:	f7f5 f923 	bl	8002f68 <gethpre>
 800dd22:	4603      	mov	r3, r0
 800dd24:	461a      	mov	r2, r3
 800dd26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd2a:	fb02 f303 	mul.w	r3, r2, r3
 800dd2e:	461a      	mov	r2, r3
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	fb02 f303 	mul.w	r3, r2, r3
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7f2 fbe4 	bl	8000504 <__aeabi_ui2d>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	4620      	mov	r0, r4
 800dd42:	4629      	mov	r1, r5
 800dd44:	f7f2 fd82 	bl	800084c <__aeabi_ddiv>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	fracpart = modf(value, &intpart);
 800dd50:	f107 0318 	add.w	r3, r7, #24
 800dd54:	4618      	mov	r0, r3
 800dd56:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800dd5a:	f000 fce1 	bl	800e720 <modf>
 800dd5e:	ed87 0b08 	vstr	d0, [r7, #32]
	USART1->BRR = 0; // clean slate, reset.
 800dd62:	4b45      	ldr	r3, [pc, #276]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	609a      	str	r2, [r3, #8]
	if(samplingmode == 16){
 800dd68:	7dbb      	ldrb	r3, [r7, #22]
 800dd6a:	2b10      	cmp	r3, #16
 800dd6c:	d127      	bne.n	800ddbe <STM32FXXXUsart1Parameter+0x236>
		USART1->BRR = (uint32_t) (round(fracpart * 16)); // DIV_Fraction
 800dd6e:	f04f 0200 	mov.w	r2, #0
 800dd72:	4b45      	ldr	r3, [pc, #276]	@ (800de88 <STM32FXXXUsart1Parameter+0x300>)
 800dd74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dd78:	f7f2 fc3e 	bl	80005f8 <__aeabi_dmul>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	460b      	mov	r3, r1
 800dd80:	ec43 2b17 	vmov	d7, r2, r3
 800dd84:	eeb0 0a47 	vmov.f32	s0, s14
 800dd88:	eef0 0a67 	vmov.f32	s1, s15
 800dd8c:	f001 f982 	bl	800f094 <round>
 800dd90:	ec53 2b10 	vmov	r2, r3, d0
 800dd94:	4c38      	ldr	r4, [pc, #224]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dd96:	4610      	mov	r0, r2
 800dd98:	4619      	mov	r1, r3
 800dd9a:	f7f2 fec7 	bl	8000b2c <__aeabi_d2uiz>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	60a3      	str	r3, [r4, #8]
		USART1->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0]
 800dda2:	4b35      	ldr	r3, [pc, #212]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800dda4:	689c      	ldr	r4, [r3, #8]
 800dda6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ddaa:	4610      	mov	r0, r2
 800ddac:	4619      	mov	r1, r3
 800ddae:	f7f2 febd 	bl	8000b2c <__aeabi_d2uiz>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	011b      	lsls	r3, r3, #4
 800ddb6:	4a30      	ldr	r2, [pc, #192]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800ddb8:	4323      	orrs	r3, r4
 800ddba:	6093      	str	r3, [r2, #8]
		USART1->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0]
	}else{
		USART1->BRR = (uint32_t) (round(fracpart * 16)); // DIV_Fraction
		USART1->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0], default.
	}
}
 800ddbc:	e051      	b.n	800de62 <STM32FXXXUsart1Parameter+0x2da>
	}else if(samplingmode == 8){
 800ddbe:	7dbb      	ldrb	r3, [r7, #22]
 800ddc0:	2b08      	cmp	r3, #8
 800ddc2:	d127      	bne.n	800de14 <STM32FXXXUsart1Parameter+0x28c>
		USART1->BRR = (uint32_t) (round(fracpart * 8)); // DIV_Fraction
 800ddc4:	f04f 0200 	mov.w	r2, #0
 800ddc8:	4b30      	ldr	r3, [pc, #192]	@ (800de8c <STM32FXXXUsart1Parameter+0x304>)
 800ddca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ddce:	f7f2 fc13 	bl	80005f8 <__aeabi_dmul>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	ec43 2b17 	vmov	d7, r2, r3
 800ddda:	eeb0 0a47 	vmov.f32	s0, s14
 800ddde:	eef0 0a67 	vmov.f32	s1, s15
 800dde2:	f001 f957 	bl	800f094 <round>
 800dde6:	ec53 2b10 	vmov	r2, r3, d0
 800ddea:	4c23      	ldr	r4, [pc, #140]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800ddec:	4610      	mov	r0, r2
 800ddee:	4619      	mov	r1, r3
 800ddf0:	f7f2 fe9c 	bl	8000b2c <__aeabi_d2uiz>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	60a3      	str	r3, [r4, #8]
		USART1->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0]
 800ddf8:	4b1f      	ldr	r3, [pc, #124]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800ddfa:	689c      	ldr	r4, [r3, #8]
 800ddfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800de00:	4610      	mov	r0, r2
 800de02:	4619      	mov	r1, r3
 800de04:	f7f2 fe92 	bl	8000b2c <__aeabi_d2uiz>
 800de08:	4603      	mov	r3, r0
 800de0a:	011b      	lsls	r3, r3, #4
 800de0c:	4a1a      	ldr	r2, [pc, #104]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800de0e:	4323      	orrs	r3, r4
 800de10:	6093      	str	r3, [r2, #8]
}
 800de12:	e026      	b.n	800de62 <STM32FXXXUsart1Parameter+0x2da>
		USART1->BRR = (uint32_t) (round(fracpart * 16)); // DIV_Fraction
 800de14:	f04f 0200 	mov.w	r2, #0
 800de18:	4b1b      	ldr	r3, [pc, #108]	@ (800de88 <STM32FXXXUsart1Parameter+0x300>)
 800de1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800de1e:	f7f2 fbeb 	bl	80005f8 <__aeabi_dmul>
 800de22:	4602      	mov	r2, r0
 800de24:	460b      	mov	r3, r1
 800de26:	ec43 2b17 	vmov	d7, r2, r3
 800de2a:	eeb0 0a47 	vmov.f32	s0, s14
 800de2e:	eef0 0a67 	vmov.f32	s1, s15
 800de32:	f001 f92f 	bl	800f094 <round>
 800de36:	ec53 2b10 	vmov	r2, r3, d0
 800de3a:	4c0f      	ldr	r4, [pc, #60]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800de3c:	4610      	mov	r0, r2
 800de3e:	4619      	mov	r1, r3
 800de40:	f7f2 fe74 	bl	8000b2c <__aeabi_d2uiz>
 800de44:	4603      	mov	r3, r0
 800de46:	60a3      	str	r3, [r4, #8]
		USART1->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0], default.
 800de48:	4b0b      	ldr	r3, [pc, #44]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800de4a:	689c      	ldr	r4, [r3, #8]
 800de4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800de50:	4610      	mov	r0, r2
 800de52:	4619      	mov	r1, r3
 800de54:	f7f2 fe6a 	bl	8000b2c <__aeabi_d2uiz>
 800de58:	4603      	mov	r3, r0
 800de5a:	011b      	lsls	r3, r3, #4
 800de5c:	4a06      	ldr	r2, [pc, #24]	@ (800de78 <STM32FXXXUsart1Parameter+0x2f0>)
 800de5e:	4323      	orrs	r3, r4
 800de60:	6093      	str	r3, [r2, #8]
}
 800de62:	bf00      	nop
 800de64:	3738      	adds	r7, #56	@ 0x38
 800de66:	46bd      	mov	sp, r7
 800de68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800de6c:	f3af 8000 	nop.w
 800de70:	88e368f1 	.word	0x88e368f1
 800de74:	3ee4f8b5 	.word	0x3ee4f8b5
 800de78:	40011000 	.word	0x40011000
 800de7c:	3fe00000 	.word	0x3fe00000
 800de80:	3ff00000 	.word	0x3ff00000
 800de84:	3ff80000 	.word	0x3ff80000
 800de88:	40300000 	.word	0x40300000
 800de8c:	40200000 	.word	0x40200000

0800de90 <STM32FXXXUsart2Clock>:
/*** USART2 ***/
void STM32FXXXUsart2Clock( uint8_t bool )
{
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	4603      	mov	r3, r0
 800de98:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->APB1ENR |= (1 << 17); }else{ RCC->APB1ENR &= ~(1 << 17); }
 800de9a:	79fb      	ldrb	r3, [r7, #7]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d006      	beq.n	800deae <STM32FXXXUsart2Clock+0x1e>
 800dea0:	4b09      	ldr	r3, [pc, #36]	@ (800dec8 <STM32FXXXUsart2Clock+0x38>)
 800dea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dea4:	4a08      	ldr	r2, [pc, #32]	@ (800dec8 <STM32FXXXUsart2Clock+0x38>)
 800dea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800deaa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800deac:	e005      	b.n	800deba <STM32FXXXUsart2Clock+0x2a>
	if(bool){ RCC->APB1ENR |= (1 << 17); }else{ RCC->APB1ENR &= ~(1 << 17); }
 800deae:	4b06      	ldr	r3, [pc, #24]	@ (800dec8 <STM32FXXXUsart2Clock+0x38>)
 800deb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800deb2:	4a05      	ldr	r2, [pc, #20]	@ (800dec8 <STM32FXXXUsart2Clock+0x38>)
 800deb4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800deb8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800deba:	bf00      	nop
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	40023800 	.word	0x40023800

0800decc <STM32FXXXUsart2Nvic>:
void STM32FXXXUsart2Nvic( uint8_t bool )
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	71fb      	strb	r3, [r7, #7]
	if(bool){ set_bit_block(NVIC->ISER, 1, USART2_IRQn, 1); }else{ set_bit_block(NVIC->ICER, 1, USART2_IRQn, 1); }
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d006      	beq.n	800deea <STM32FXXXUsart2Nvic+0x1e>
 800dedc:	2301      	movs	r3, #1
 800dede:	2226      	movs	r2, #38	@ 0x26
 800dee0:	2101      	movs	r1, #1
 800dee2:	4807      	ldr	r0, [pc, #28]	@ (800df00 <STM32FXXXUsart2Nvic+0x34>)
 800dee4:	f7f5 fbec 	bl	80036c0 <set_bit_block>
}
 800dee8:	e005      	b.n	800def6 <STM32FXXXUsart2Nvic+0x2a>
	if(bool){ set_bit_block(NVIC->ISER, 1, USART2_IRQn, 1); }else{ set_bit_block(NVIC->ICER, 1, USART2_IRQn, 1); }
 800deea:	2301      	movs	r3, #1
 800deec:	2226      	movs	r2, #38	@ 0x26
 800deee:	2101      	movs	r1, #1
 800def0:	4804      	ldr	r0, [pc, #16]	@ (800df04 <STM32FXXXUsart2Nvic+0x38>)
 800def2:	f7f5 fbe5 	bl	80036c0 <set_bit_block>
}
 800def6:	bf00      	nop
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	e000e100 	.word	0xe000e100
 800df04:	e000e180 	.word	0xe000e180

0800df08 <STM32FXXXUsart2Parameter>:
void STM32FXXXUsart2Parameter( uint8_t wordlength, uint8_t samplingmode, double stopbits, uint32_t baudrate )
// Sets the usart parameters, using real values.
{
 800df08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df0c:	b08e      	sub	sp, #56	@ 0x38
 800df0e:	af00      	add	r7, sp, #0
 800df10:	4603      	mov	r3, r0
 800df12:	ed87 0b02 	vstr	d0, [r7, #8]
 800df16:	613a      	str	r2, [r7, #16]
 800df18:	75fb      	strb	r3, [r7, #23]
 800df1a:	460b      	mov	r3, r1
 800df1c:	75bb      	strb	r3, [r7, #22]
	uint8_t sampling;
	double value, fracpart, intpart;
	if(wordlength == 9)
 800df1e:	7dfb      	ldrb	r3, [r7, #23]
 800df20:	2b09      	cmp	r3, #9
 800df22:	d106      	bne.n	800df32 <STM32FXXXUsart2Parameter+0x2a>
		USART2->CR1 |= (1 << 12); // M: Word length, 1 - 9bit.
 800df24:	4bb4      	ldr	r3, [pc, #720]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	4ab3      	ldr	r2, [pc, #716]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800df2e:	60d3      	str	r3, [r2, #12]
 800df30:	e00f      	b.n	800df52 <STM32FXXXUsart2Parameter+0x4a>
	else if(wordlength == 8)
 800df32:	7dfb      	ldrb	r3, [r7, #23]
 800df34:	2b08      	cmp	r3, #8
 800df36:	d106      	bne.n	800df46 <STM32FXXXUsart2Parameter+0x3e>
		USART2->CR1 &= (uint32_t) ~(1 << 12); // M: Word length, 0 - 8bit.
 800df38:	4baf      	ldr	r3, [pc, #700]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	4aae      	ldr	r2, [pc, #696]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df42:	60d3      	str	r3, [r2, #12]
 800df44:	e005      	b.n	800df52 <STM32FXXXUsart2Parameter+0x4a>
	else
		USART2->CR1 &= (uint32_t) ~(1 << 12); // M: Word length, 0 - 8bit, default.
 800df46:	4bac      	ldr	r3, [pc, #688]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	4aab      	ldr	r2, [pc, #684]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df50:	60d3      	str	r3, [r2, #12]
	if(samplingmode == 8){
 800df52:	7dbb      	ldrb	r3, [r7, #22]
 800df54:	2b08      	cmp	r3, #8
 800df56:	d109      	bne.n	800df6c <STM32FXXXUsart2Parameter+0x64>
		sampling = 8;
 800df58:	2308      	movs	r3, #8
 800df5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		USART2->CR1 |= (1 << 15); // OVER8: Oversampling mode, 1 - 8.
 800df5e:	4ba6      	ldr	r3, [pc, #664]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	4aa5      	ldr	r2, [pc, #660]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df68:	60d3      	str	r3, [r2, #12]
 800df6a:	e015      	b.n	800df98 <STM32FXXXUsart2Parameter+0x90>
	}else if(samplingmode == 16){
 800df6c:	7dbb      	ldrb	r3, [r7, #22]
 800df6e:	2b10      	cmp	r3, #16
 800df70:	d109      	bne.n	800df86 <STM32FXXXUsart2Parameter+0x7e>
		sampling = 16;
 800df72:	2310      	movs	r3, #16
 800df74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		USART2->CR1 &= (uint32_t) ~(1 << 15); // OVER8: Oversampling mode, 0 - 16.
 800df78:	4b9f      	ldr	r3, [pc, #636]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	4a9e      	ldr	r2, [pc, #632]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800df82:	60d3      	str	r3, [r2, #12]
 800df84:	e008      	b.n	800df98 <STM32FXXXUsart2Parameter+0x90>
	}else{
		sampling = 16;
 800df86:	2310      	movs	r3, #16
 800df88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		USART2->CR1 &= (uint32_t) ~(1 << 15); // OVER8: Oversampling mode, 0 - 16, default.
 800df8c:	4b9a      	ldr	r3, [pc, #616]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	4a99      	ldr	r2, [pc, #612]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800df96:	60d3      	str	r3, [r2, #12]
	}
	USART2->CR2 &= (uint32_t) ~((1 << 13) | (1 << 12)); // STOP: STOP bits 00 - 1stopbit, default.
 800df98:	4b97      	ldr	r3, [pc, #604]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	4a96      	ldr	r2, [pc, #600]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800df9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800dfa2:	6113      	str	r3, [r2, #16]
	if(fabs(stopbits - 0.5) < 0.00001) // STOP: STOP bits, 01: 0.5 Stop bit
 800dfa4:	f04f 0200 	mov.w	r2, #0
 800dfa8:	4b94      	ldr	r3, [pc, #592]	@ (800e1fc <STM32FXXXUsart2Parameter+0x2f4>)
 800dfaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dfae:	f7f2 f96b 	bl	8000288 <__aeabi_dsub>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	603a      	str	r2, [r7, #0]
 800dfb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dfbc:	607b      	str	r3, [r7, #4]
 800dfbe:	a38c      	add	r3, pc, #560	@ (adr r3, 800e1f0 <STM32FXXXUsart2Parameter+0x2e8>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dfc8:	f7f2 fd88 	bl	8000adc <__aeabi_dcmplt>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d006      	beq.n	800dfe0 <STM32FXXXUsart2Parameter+0xd8>
		USART2->CR2 |= (1 << 12);
 800dfd2:	4b89      	ldr	r3, [pc, #548]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	4a88      	ldr	r2, [pc, #544]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800dfd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dfdc:	6113      	str	r3, [r2, #16]
 800dfde:	e056      	b.n	800e08e <STM32FXXXUsart2Parameter+0x186>
	else if(fabs(stopbits - 1) < 0.00001) // STOP: STOP bits, 00: 1 Stop bit.
 800dfe0:	f04f 0200 	mov.w	r2, #0
 800dfe4:	4b86      	ldr	r3, [pc, #536]	@ (800e200 <STM32FXXXUsart2Parameter+0x2f8>)
 800dfe6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dfea:	f7f2 f94d 	bl	8000288 <__aeabi_dsub>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	4692      	mov	sl, r2
 800dff4:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800dff8:	a37d      	add	r3, pc, #500	@ (adr r3, 800e1f0 <STM32FXXXUsart2Parameter+0x2e8>)
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	4650      	mov	r0, sl
 800e000:	4659      	mov	r1, fp
 800e002:	f7f2 fd6b 	bl	8000adc <__aeabi_dcmplt>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d006      	beq.n	800e01a <STM32FXXXUsart2Parameter+0x112>
		USART2->CR2 &= (uint32_t) ~((1 << 13) | (1 << 12));
 800e00c:	4b7a      	ldr	r3, [pc, #488]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	4a79      	ldr	r2, [pc, #484]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e012:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800e016:	6113      	str	r3, [r2, #16]
 800e018:	e039      	b.n	800e08e <STM32FXXXUsart2Parameter+0x186>
	else if(fabs(stopbits - 1.5) < 0.00001) // STOP: STOP bits, 11: 1.5 Stop bit
 800e01a:	f04f 0200 	mov.w	r2, #0
 800e01e:	4b79      	ldr	r3, [pc, #484]	@ (800e204 <STM32FXXXUsart2Parameter+0x2fc>)
 800e020:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e024:	f7f2 f930 	bl	8000288 <__aeabi_dsub>
 800e028:	4602      	mov	r2, r0
 800e02a:	460b      	mov	r3, r1
 800e02c:	4690      	mov	r8, r2
 800e02e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800e032:	a36f      	add	r3, pc, #444	@ (adr r3, 800e1f0 <STM32FXXXUsart2Parameter+0x2e8>)
 800e034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e038:	4640      	mov	r0, r8
 800e03a:	4649      	mov	r1, r9
 800e03c:	f7f2 fd4e 	bl	8000adc <__aeabi_dcmplt>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d006      	beq.n	800e054 <STM32FXXXUsart2Parameter+0x14c>
		USART2->CR2 |= ((1 << 13) | (1 << 12));
 800e046:	4b6c      	ldr	r3, [pc, #432]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	4a6b      	ldr	r2, [pc, #428]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e04c:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800e050:	6113      	str	r3, [r2, #16]
 800e052:	e01c      	b.n	800e08e <STM32FXXXUsart2Parameter+0x186>
	else if(fabs(stopbits - 2) < 0.00001) // STOP: STOP bits, 10: 2 Stop bits
 800e054:	f04f 0200 	mov.w	r2, #0
 800e058:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e05c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e060:	f7f2 f912 	bl	8000288 <__aeabi_dsub>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	4614      	mov	r4, r2
 800e06a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800e06e:	a360      	add	r3, pc, #384	@ (adr r3, 800e1f0 <STM32FXXXUsart2Parameter+0x2e8>)
 800e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e074:	4620      	mov	r0, r4
 800e076:	4629      	mov	r1, r5
 800e078:	f7f2 fd30 	bl	8000adc <__aeabi_dcmplt>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d005      	beq.n	800e08e <STM32FXXXUsart2Parameter+0x186>
		USART2->CR2 |= (1 << 13);
 800e082:	4b5d      	ldr	r3, [pc, #372]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	4a5c      	ldr	r2, [pc, #368]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e088:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e08c:	6113      	str	r3, [r2, #16]
	value = (double) getsysclk() / ( gethpre() * sampling * baudrate );
 800e08e:	f7f5 f919 	bl	80032c4 <getsysclk>
 800e092:	4603      	mov	r3, r0
 800e094:	4618      	mov	r0, r3
 800e096:	f7f2 fa35 	bl	8000504 <__aeabi_ui2d>
 800e09a:	4604      	mov	r4, r0
 800e09c:	460d      	mov	r5, r1
 800e09e:	f7f4 ff63 	bl	8002f68 <gethpre>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e0aa:	fb02 f303 	mul.w	r3, r2, r3
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	fb02 f303 	mul.w	r3, r2, r3
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7f2 fa24 	bl	8000504 <__aeabi_ui2d>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	f7f2 fbc2 	bl	800084c <__aeabi_ddiv>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	fracpart = modf(value, &intpart);
 800e0d0:	f107 0318 	add.w	r3, r7, #24
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800e0da:	f000 fb21 	bl	800e720 <modf>
 800e0de:	ed87 0b08 	vstr	d0, [r7, #32]
	USART2->BRR = 0; // clean slate, reset.
 800e0e2:	4b45      	ldr	r3, [pc, #276]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	609a      	str	r2, [r3, #8]
	if(samplingmode == 16){
 800e0e8:	7dbb      	ldrb	r3, [r7, #22]
 800e0ea:	2b10      	cmp	r3, #16
 800e0ec:	d127      	bne.n	800e13e <STM32FXXXUsart2Parameter+0x236>
		USART2->BRR = (uint32_t) (round(fracpart * 16)); // DIV_Fraction
 800e0ee:	f04f 0200 	mov.w	r2, #0
 800e0f2:	4b45      	ldr	r3, [pc, #276]	@ (800e208 <STM32FXXXUsart2Parameter+0x300>)
 800e0f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e0f8:	f7f2 fa7e 	bl	80005f8 <__aeabi_dmul>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	460b      	mov	r3, r1
 800e100:	ec43 2b17 	vmov	d7, r2, r3
 800e104:	eeb0 0a47 	vmov.f32	s0, s14
 800e108:	eef0 0a67 	vmov.f32	s1, s15
 800e10c:	f000 ffc2 	bl	800f094 <round>
 800e110:	ec53 2b10 	vmov	r2, r3, d0
 800e114:	4c38      	ldr	r4, [pc, #224]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e116:	4610      	mov	r0, r2
 800e118:	4619      	mov	r1, r3
 800e11a:	f7f2 fd07 	bl	8000b2c <__aeabi_d2uiz>
 800e11e:	4603      	mov	r3, r0
 800e120:	60a3      	str	r3, [r4, #8]
		USART2->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0]
 800e122:	4b35      	ldr	r3, [pc, #212]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e124:	689c      	ldr	r4, [r3, #8]
 800e126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e12a:	4610      	mov	r0, r2
 800e12c:	4619      	mov	r1, r3
 800e12e:	f7f2 fcfd 	bl	8000b2c <__aeabi_d2uiz>
 800e132:	4603      	mov	r3, r0
 800e134:	011b      	lsls	r3, r3, #4
 800e136:	4a30      	ldr	r2, [pc, #192]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e138:	4323      	orrs	r3, r4
 800e13a:	6093      	str	r3, [r2, #8]
		USART2->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0]
	}else{
		USART2->BRR = (uint32_t) (round(fracpart * 16)); // DIV_Fraction
		USART2->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0], default.
	}
}
 800e13c:	e051      	b.n	800e1e2 <STM32FXXXUsart2Parameter+0x2da>
	}else if(samplingmode == 8){
 800e13e:	7dbb      	ldrb	r3, [r7, #22]
 800e140:	2b08      	cmp	r3, #8
 800e142:	d127      	bne.n	800e194 <STM32FXXXUsart2Parameter+0x28c>
		USART2->BRR = (uint32_t) (round(fracpart * 8)); // DIV_Fraction
 800e144:	f04f 0200 	mov.w	r2, #0
 800e148:	4b30      	ldr	r3, [pc, #192]	@ (800e20c <STM32FXXXUsart2Parameter+0x304>)
 800e14a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e14e:	f7f2 fa53 	bl	80005f8 <__aeabi_dmul>
 800e152:	4602      	mov	r2, r0
 800e154:	460b      	mov	r3, r1
 800e156:	ec43 2b17 	vmov	d7, r2, r3
 800e15a:	eeb0 0a47 	vmov.f32	s0, s14
 800e15e:	eef0 0a67 	vmov.f32	s1, s15
 800e162:	f000 ff97 	bl	800f094 <round>
 800e166:	ec53 2b10 	vmov	r2, r3, d0
 800e16a:	4c23      	ldr	r4, [pc, #140]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e16c:	4610      	mov	r0, r2
 800e16e:	4619      	mov	r1, r3
 800e170:	f7f2 fcdc 	bl	8000b2c <__aeabi_d2uiz>
 800e174:	4603      	mov	r3, r0
 800e176:	60a3      	str	r3, [r4, #8]
		USART2->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0]
 800e178:	4b1f      	ldr	r3, [pc, #124]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e17a:	689c      	ldr	r4, [r3, #8]
 800e17c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e180:	4610      	mov	r0, r2
 800e182:	4619      	mov	r1, r3
 800e184:	f7f2 fcd2 	bl	8000b2c <__aeabi_d2uiz>
 800e188:	4603      	mov	r3, r0
 800e18a:	011b      	lsls	r3, r3, #4
 800e18c:	4a1a      	ldr	r2, [pc, #104]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e18e:	4323      	orrs	r3, r4
 800e190:	6093      	str	r3, [r2, #8]
}
 800e192:	e026      	b.n	800e1e2 <STM32FXXXUsart2Parameter+0x2da>
		USART2->BRR = (uint32_t) (round(fracpart * 16)); // DIV_Fraction
 800e194:	f04f 0200 	mov.w	r2, #0
 800e198:	4b1b      	ldr	r3, [pc, #108]	@ (800e208 <STM32FXXXUsart2Parameter+0x300>)
 800e19a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e19e:	f7f2 fa2b 	bl	80005f8 <__aeabi_dmul>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	ec43 2b17 	vmov	d7, r2, r3
 800e1aa:	eeb0 0a47 	vmov.f32	s0, s14
 800e1ae:	eef0 0a67 	vmov.f32	s1, s15
 800e1b2:	f000 ff6f 	bl	800f094 <round>
 800e1b6:	ec53 2b10 	vmov	r2, r3, d0
 800e1ba:	4c0f      	ldr	r4, [pc, #60]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e1bc:	4610      	mov	r0, r2
 800e1be:	4619      	mov	r1, r3
 800e1c0:	f7f2 fcb4 	bl	8000b2c <__aeabi_d2uiz>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	60a3      	str	r3, [r4, #8]
		USART2->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0], default.
 800e1c8:	4b0b      	ldr	r3, [pc, #44]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e1ca:	689c      	ldr	r4, [r3, #8]
 800e1cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	f7f2 fcaa 	bl	8000b2c <__aeabi_d2uiz>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	011b      	lsls	r3, r3, #4
 800e1dc:	4a06      	ldr	r2, [pc, #24]	@ (800e1f8 <STM32FXXXUsart2Parameter+0x2f0>)
 800e1de:	4323      	orrs	r3, r4
 800e1e0:	6093      	str	r3, [r2, #8]
}
 800e1e2:	bf00      	nop
 800e1e4:	3738      	adds	r7, #56	@ 0x38
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1ec:	f3af 8000 	nop.w
 800e1f0:	88e368f1 	.word	0x88e368f1
 800e1f4:	3ee4f8b5 	.word	0x3ee4f8b5
 800e1f8:	40004400 	.word	0x40004400
 800e1fc:	3fe00000 	.word	0x3fe00000
 800e200:	3ff00000 	.word	0x3ff00000
 800e204:	3ff80000 	.word	0x3ff80000
 800e208:	40300000 	.word	0x40300000
 800e20c:	40200000 	.word	0x40200000

0800e210 <STM32FXXXUsart6Clock>:
}

#endif
/*** USART6 ***/
void STM32FXXXUsart6Clock( uint8_t bool )
{
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	4603      	mov	r3, r0
 800e218:	71fb      	strb	r3, [r7, #7]
	if(bool){ RCC->APB2ENR |= (1 << 5); }else{ RCC->APB2ENR &= ~(1 << 5); }
 800e21a:	79fb      	ldrb	r3, [r7, #7]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d006      	beq.n	800e22e <STM32FXXXUsart6Clock+0x1e>
 800e220:	4b09      	ldr	r3, [pc, #36]	@ (800e248 <STM32FXXXUsart6Clock+0x38>)
 800e222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e224:	4a08      	ldr	r2, [pc, #32]	@ (800e248 <STM32FXXXUsart6Clock+0x38>)
 800e226:	f043 0320 	orr.w	r3, r3, #32
 800e22a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800e22c:	e005      	b.n	800e23a <STM32FXXXUsart6Clock+0x2a>
	if(bool){ RCC->APB2ENR |= (1 << 5); }else{ RCC->APB2ENR &= ~(1 << 5); }
 800e22e:	4b06      	ldr	r3, [pc, #24]	@ (800e248 <STM32FXXXUsart6Clock+0x38>)
 800e230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e232:	4a05      	ldr	r2, [pc, #20]	@ (800e248 <STM32FXXXUsart6Clock+0x38>)
 800e234:	f023 0320 	bic.w	r3, r3, #32
 800e238:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800e23a:	bf00      	nop
 800e23c:	370c      	adds	r7, #12
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop
 800e248:	40023800 	.word	0x40023800

0800e24c <STM32FXXXUsart6Nvic>:
void STM32FXXXUsart6Nvic( uint8_t bool )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	4603      	mov	r3, r0
 800e254:	71fb      	strb	r3, [r7, #7]
	if(bool){ set_bit_block(NVIC->ISER, 1, USART6_IRQn, 1); }else{ set_bit_block(NVIC->ICER, 1, USART6_IRQn, 1); }
 800e256:	79fb      	ldrb	r3, [r7, #7]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d006      	beq.n	800e26a <STM32FXXXUsart6Nvic+0x1e>
 800e25c:	2301      	movs	r3, #1
 800e25e:	2247      	movs	r2, #71	@ 0x47
 800e260:	2101      	movs	r1, #1
 800e262:	4807      	ldr	r0, [pc, #28]	@ (800e280 <STM32FXXXUsart6Nvic+0x34>)
 800e264:	f7f5 fa2c 	bl	80036c0 <set_bit_block>
}
 800e268:	e005      	b.n	800e276 <STM32FXXXUsart6Nvic+0x2a>
	if(bool){ set_bit_block(NVIC->ISER, 1, USART6_IRQn, 1); }else{ set_bit_block(NVIC->ICER, 1, USART6_IRQn, 1); }
 800e26a:	2301      	movs	r3, #1
 800e26c:	2247      	movs	r2, #71	@ 0x47
 800e26e:	2101      	movs	r1, #1
 800e270:	4804      	ldr	r0, [pc, #16]	@ (800e284 <STM32FXXXUsart6Nvic+0x38>)
 800e272:	f7f5 fa25 	bl	80036c0 <set_bit_block>
}
 800e276:	bf00      	nop
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	e000e100 	.word	0xe000e100
 800e284:	e000e180 	.word	0xe000e180

0800e288 <STM32FXXXUsart6Parameter>:
void STM32FXXXUsart6Parameter( uint8_t wordlength, uint8_t samplingmode, double stopbits, uint32_t baudrate )
// Sets the usart parameters, using real values.
{
 800e288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e28c:	b08e      	sub	sp, #56	@ 0x38
 800e28e:	af00      	add	r7, sp, #0
 800e290:	4603      	mov	r3, r0
 800e292:	ed87 0b02 	vstr	d0, [r7, #8]
 800e296:	613a      	str	r2, [r7, #16]
 800e298:	75fb      	strb	r3, [r7, #23]
 800e29a:	460b      	mov	r3, r1
 800e29c:	75bb      	strb	r3, [r7, #22]
	uint8_t sampling;
	double value, fracpart, intpart;
	if(wordlength == 9)
 800e29e:	7dfb      	ldrb	r3, [r7, #23]
 800e2a0:	2b09      	cmp	r3, #9
 800e2a2:	d106      	bne.n	800e2b2 <STM32FXXXUsart6Parameter+0x2a>
		USART6->CR1 |= (1 << 12); // M: Word length, 1 - 9bit.
 800e2a4:	4bb4      	ldr	r3, [pc, #720]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	4ab3      	ldr	r2, [pc, #716]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e2aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e2ae:	60d3      	str	r3, [r2, #12]
 800e2b0:	e00f      	b.n	800e2d2 <STM32FXXXUsart6Parameter+0x4a>
	else if(wordlength == 8)
 800e2b2:	7dfb      	ldrb	r3, [r7, #23]
 800e2b4:	2b08      	cmp	r3, #8
 800e2b6:	d106      	bne.n	800e2c6 <STM32FXXXUsart6Parameter+0x3e>
		USART6->CR1 &= (uint32_t) ~(1 << 12); // M: Word length, 0 - 8bit.
 800e2b8:	4baf      	ldr	r3, [pc, #700]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	4aae      	ldr	r2, [pc, #696]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e2be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2c2:	60d3      	str	r3, [r2, #12]
 800e2c4:	e005      	b.n	800e2d2 <STM32FXXXUsart6Parameter+0x4a>
	else
		USART6->CR1 &= (uint32_t) ~(1 << 12); // M: Word length, 0 - 8bit, default.
 800e2c6:	4bac      	ldr	r3, [pc, #688]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	4aab      	ldr	r2, [pc, #684]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e2cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2d0:	60d3      	str	r3, [r2, #12]
	if(samplingmode == 8){
 800e2d2:	7dbb      	ldrb	r3, [r7, #22]
 800e2d4:	2b08      	cmp	r3, #8
 800e2d6:	d109      	bne.n	800e2ec <STM32FXXXUsart6Parameter+0x64>
		sampling = 8;
 800e2d8:	2308      	movs	r3, #8
 800e2da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		USART6->CR1 |= (1 << 15); // OVER8: Oversampling mode, 1 - 8.
 800e2de:	4ba6      	ldr	r3, [pc, #664]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	4aa5      	ldr	r2, [pc, #660]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e2e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2e8:	60d3      	str	r3, [r2, #12]
 800e2ea:	e015      	b.n	800e318 <STM32FXXXUsart6Parameter+0x90>
	}else if(samplingmode == 16){
 800e2ec:	7dbb      	ldrb	r3, [r7, #22]
 800e2ee:	2b10      	cmp	r3, #16
 800e2f0:	d109      	bne.n	800e306 <STM32FXXXUsart6Parameter+0x7e>
		sampling = 16;
 800e2f2:	2310      	movs	r3, #16
 800e2f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		USART6->CR1 &= (uint32_t) ~(1 << 15); // OVER8: Oversampling mode, 0 - 16.
 800e2f8:	4b9f      	ldr	r3, [pc, #636]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	4a9e      	ldr	r2, [pc, #632]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e2fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e302:	60d3      	str	r3, [r2, #12]
 800e304:	e008      	b.n	800e318 <STM32FXXXUsart6Parameter+0x90>
	}else{
		sampling = 16;
 800e306:	2310      	movs	r3, #16
 800e308:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		USART6->CR1 &= (uint32_t) ~(1 << 15); // OVER8: Oversampling mode, 0 - 16, default.
 800e30c:	4b9a      	ldr	r3, [pc, #616]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	4a99      	ldr	r2, [pc, #612]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e312:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e316:	60d3      	str	r3, [r2, #12]
	}
	USART6->CR2 &= (uint32_t) ~((1 << 13) | (1 << 12)); // STOP: STOP bits 00 - 1stopbit, default.
 800e318:	4b97      	ldr	r3, [pc, #604]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e31a:	691b      	ldr	r3, [r3, #16]
 800e31c:	4a96      	ldr	r2, [pc, #600]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e31e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800e322:	6113      	str	r3, [r2, #16]
	if(fabs(stopbits - 0.5) < 0.00001) // STOP: STOP bits, 01: 0.5 Stop bit
 800e324:	f04f 0200 	mov.w	r2, #0
 800e328:	4b94      	ldr	r3, [pc, #592]	@ (800e57c <STM32FXXXUsart6Parameter+0x2f4>)
 800e32a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e32e:	f7f1 ffab 	bl	8000288 <__aeabi_dsub>
 800e332:	4602      	mov	r2, r0
 800e334:	460b      	mov	r3, r1
 800e336:	603a      	str	r2, [r7, #0]
 800e338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e33c:	607b      	str	r3, [r7, #4]
 800e33e:	a38c      	add	r3, pc, #560	@ (adr r3, 800e570 <STM32FXXXUsart6Parameter+0x2e8>)
 800e340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e344:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e348:	f7f2 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d006      	beq.n	800e360 <STM32FXXXUsart6Parameter+0xd8>
		USART6->CR2 |= (1 << 12);
 800e352:	4b89      	ldr	r3, [pc, #548]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e354:	691b      	ldr	r3, [r3, #16]
 800e356:	4a88      	ldr	r2, [pc, #544]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e358:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e35c:	6113      	str	r3, [r2, #16]
 800e35e:	e056      	b.n	800e40e <STM32FXXXUsart6Parameter+0x186>
	else if(fabs(stopbits - 1) < 0.00001) // STOP: STOP bits, 00: 1 Stop bit.
 800e360:	f04f 0200 	mov.w	r2, #0
 800e364:	4b86      	ldr	r3, [pc, #536]	@ (800e580 <STM32FXXXUsart6Parameter+0x2f8>)
 800e366:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e36a:	f7f1 ff8d 	bl	8000288 <__aeabi_dsub>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	4692      	mov	sl, r2
 800e374:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800e378:	a37d      	add	r3, pc, #500	@ (adr r3, 800e570 <STM32FXXXUsart6Parameter+0x2e8>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	4650      	mov	r0, sl
 800e380:	4659      	mov	r1, fp
 800e382:	f7f2 fbab 	bl	8000adc <__aeabi_dcmplt>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d006      	beq.n	800e39a <STM32FXXXUsart6Parameter+0x112>
		USART6->CR2 &= (uint32_t) ~((1 << 13) | (1 << 12));
 800e38c:	4b7a      	ldr	r3, [pc, #488]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	4a79      	ldr	r2, [pc, #484]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e392:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800e396:	6113      	str	r3, [r2, #16]
 800e398:	e039      	b.n	800e40e <STM32FXXXUsart6Parameter+0x186>
	else if(fabs(stopbits - 1.5) < 0.00001) // STOP: STOP bits, 11: 1.5 Stop bit
 800e39a:	f04f 0200 	mov.w	r2, #0
 800e39e:	4b79      	ldr	r3, [pc, #484]	@ (800e584 <STM32FXXXUsart6Parameter+0x2fc>)
 800e3a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e3a4:	f7f1 ff70 	bl	8000288 <__aeabi_dsub>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	4690      	mov	r8, r2
 800e3ae:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800e3b2:	a36f      	add	r3, pc, #444	@ (adr r3, 800e570 <STM32FXXXUsart6Parameter+0x2e8>)
 800e3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b8:	4640      	mov	r0, r8
 800e3ba:	4649      	mov	r1, r9
 800e3bc:	f7f2 fb8e 	bl	8000adc <__aeabi_dcmplt>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d006      	beq.n	800e3d4 <STM32FXXXUsart6Parameter+0x14c>
		USART6->CR2 |= ((1 << 13) | (1 << 12));
 800e3c6:	4b6c      	ldr	r3, [pc, #432]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e3c8:	691b      	ldr	r3, [r3, #16]
 800e3ca:	4a6b      	ldr	r2, [pc, #428]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e3cc:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800e3d0:	6113      	str	r3, [r2, #16]
 800e3d2:	e01c      	b.n	800e40e <STM32FXXXUsart6Parameter+0x186>
	else if(fabs(stopbits - 2) < 0.00001) // STOP: STOP bits, 10: 2 Stop bits
 800e3d4:	f04f 0200 	mov.w	r2, #0
 800e3d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e3dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e3e0:	f7f1 ff52 	bl	8000288 <__aeabi_dsub>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	4614      	mov	r4, r2
 800e3ea:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800e3ee:	a360      	add	r3, pc, #384	@ (adr r3, 800e570 <STM32FXXXUsart6Parameter+0x2e8>)
 800e3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	f7f2 fb70 	bl	8000adc <__aeabi_dcmplt>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d005      	beq.n	800e40e <STM32FXXXUsart6Parameter+0x186>
		USART6->CR2 |= (1 << 13);
 800e402:	4b5d      	ldr	r3, [pc, #372]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e404:	691b      	ldr	r3, [r3, #16]
 800e406:	4a5c      	ldr	r2, [pc, #368]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e408:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e40c:	6113      	str	r3, [r2, #16]
	value = (double) getsysclk() / ( gethpre() * sampling * baudrate );
 800e40e:	f7f4 ff59 	bl	80032c4 <getsysclk>
 800e412:	4603      	mov	r3, r0
 800e414:	4618      	mov	r0, r3
 800e416:	f7f2 f875 	bl	8000504 <__aeabi_ui2d>
 800e41a:	4604      	mov	r4, r0
 800e41c:	460d      	mov	r5, r1
 800e41e:	f7f4 fda3 	bl	8002f68 <gethpre>
 800e422:	4603      	mov	r3, r0
 800e424:	461a      	mov	r2, r3
 800e426:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e42a:	fb02 f303 	mul.w	r3, r2, r3
 800e42e:	461a      	mov	r2, r3
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	fb02 f303 	mul.w	r3, r2, r3
 800e436:	4618      	mov	r0, r3
 800e438:	f7f2 f864 	bl	8000504 <__aeabi_ui2d>
 800e43c:	4602      	mov	r2, r0
 800e43e:	460b      	mov	r3, r1
 800e440:	4620      	mov	r0, r4
 800e442:	4629      	mov	r1, r5
 800e444:	f7f2 fa02 	bl	800084c <__aeabi_ddiv>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	fracpart = modf(value, &intpart);
 800e450:	f107 0318 	add.w	r3, r7, #24
 800e454:	4618      	mov	r0, r3
 800e456:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800e45a:	f000 f961 	bl	800e720 <modf>
 800e45e:	ed87 0b08 	vstr	d0, [r7, #32]
	USART6->BRR = 0; // clean slate, reset.
 800e462:	4b45      	ldr	r3, [pc, #276]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e464:	2200      	movs	r2, #0
 800e466:	609a      	str	r2, [r3, #8]
	if(samplingmode == 16){
 800e468:	7dbb      	ldrb	r3, [r7, #22]
 800e46a:	2b10      	cmp	r3, #16
 800e46c:	d127      	bne.n	800e4be <STM32FXXXUsart6Parameter+0x236>
		USART6->BRR = (uint32_t) (round(fracpart * 16)); // DIV_Fraction
 800e46e:	f04f 0200 	mov.w	r2, #0
 800e472:	4b45      	ldr	r3, [pc, #276]	@ (800e588 <STM32FXXXUsart6Parameter+0x300>)
 800e474:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e478:	f7f2 f8be 	bl	80005f8 <__aeabi_dmul>
 800e47c:	4602      	mov	r2, r0
 800e47e:	460b      	mov	r3, r1
 800e480:	ec43 2b17 	vmov	d7, r2, r3
 800e484:	eeb0 0a47 	vmov.f32	s0, s14
 800e488:	eef0 0a67 	vmov.f32	s1, s15
 800e48c:	f000 fe02 	bl	800f094 <round>
 800e490:	ec53 2b10 	vmov	r2, r3, d0
 800e494:	4c38      	ldr	r4, [pc, #224]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e496:	4610      	mov	r0, r2
 800e498:	4619      	mov	r1, r3
 800e49a:	f7f2 fb47 	bl	8000b2c <__aeabi_d2uiz>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	60a3      	str	r3, [r4, #8]
		USART6->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0]
 800e4a2:	4b35      	ldr	r3, [pc, #212]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e4a4:	689c      	ldr	r4, [r3, #8]
 800e4a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e4aa:	4610      	mov	r0, r2
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	f7f2 fb3d 	bl	8000b2c <__aeabi_d2uiz>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	011b      	lsls	r3, r3, #4
 800e4b6:	4a30      	ldr	r2, [pc, #192]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e4b8:	4323      	orrs	r3, r4
 800e4ba:	6093      	str	r3, [r2, #8]
		USART6->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0]
	}else{
		USART6->BRR = (uint32_t) (round(fracpart * 16)); // DIV_Fraction
		USART6->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0], default.
	}
}
 800e4bc:	e051      	b.n	800e562 <STM32FXXXUsart6Parameter+0x2da>
	}else if(samplingmode == 8){
 800e4be:	7dbb      	ldrb	r3, [r7, #22]
 800e4c0:	2b08      	cmp	r3, #8
 800e4c2:	d127      	bne.n	800e514 <STM32FXXXUsart6Parameter+0x28c>
		USART6->BRR = (uint32_t) (round(fracpart * 8)); // DIV_Fraction
 800e4c4:	f04f 0200 	mov.w	r2, #0
 800e4c8:	4b30      	ldr	r3, [pc, #192]	@ (800e58c <STM32FXXXUsart6Parameter+0x304>)
 800e4ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e4ce:	f7f2 f893 	bl	80005f8 <__aeabi_dmul>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	ec43 2b17 	vmov	d7, r2, r3
 800e4da:	eeb0 0a47 	vmov.f32	s0, s14
 800e4de:	eef0 0a67 	vmov.f32	s1, s15
 800e4e2:	f000 fdd7 	bl	800f094 <round>
 800e4e6:	ec53 2b10 	vmov	r2, r3, d0
 800e4ea:	4c23      	ldr	r4, [pc, #140]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	f7f2 fb1c 	bl	8000b2c <__aeabi_d2uiz>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	60a3      	str	r3, [r4, #8]
		USART6->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0]
 800e4f8:	4b1f      	ldr	r3, [pc, #124]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e4fa:	689c      	ldr	r4, [r3, #8]
 800e4fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e500:	4610      	mov	r0, r2
 800e502:	4619      	mov	r1, r3
 800e504:	f7f2 fb12 	bl	8000b2c <__aeabi_d2uiz>
 800e508:	4603      	mov	r3, r0
 800e50a:	011b      	lsls	r3, r3, #4
 800e50c:	4a1a      	ldr	r2, [pc, #104]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e50e:	4323      	orrs	r3, r4
 800e510:	6093      	str	r3, [r2, #8]
}
 800e512:	e026      	b.n	800e562 <STM32FXXXUsart6Parameter+0x2da>
		USART6->BRR = (uint32_t) (round(fracpart * 16)); // DIV_Fraction
 800e514:	f04f 0200 	mov.w	r2, #0
 800e518:	4b1b      	ldr	r3, [pc, #108]	@ (800e588 <STM32FXXXUsart6Parameter+0x300>)
 800e51a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e51e:	f7f2 f86b 	bl	80005f8 <__aeabi_dmul>
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	ec43 2b17 	vmov	d7, r2, r3
 800e52a:	eeb0 0a47 	vmov.f32	s0, s14
 800e52e:	eef0 0a67 	vmov.f32	s1, s15
 800e532:	f000 fdaf 	bl	800f094 <round>
 800e536:	ec53 2b10 	vmov	r2, r3, d0
 800e53a:	4c0f      	ldr	r4, [pc, #60]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e53c:	4610      	mov	r0, r2
 800e53e:	4619      	mov	r1, r3
 800e540:	f7f2 faf4 	bl	8000b2c <__aeabi_d2uiz>
 800e544:	4603      	mov	r3, r0
 800e546:	60a3      	str	r3, [r4, #8]
		USART6->BRR |= ((uint32_t) intpart << 4); // DIV_Mantissa[11:0], default.
 800e548:	4b0b      	ldr	r3, [pc, #44]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e54a:	689c      	ldr	r4, [r3, #8]
 800e54c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e550:	4610      	mov	r0, r2
 800e552:	4619      	mov	r1, r3
 800e554:	f7f2 faea 	bl	8000b2c <__aeabi_d2uiz>
 800e558:	4603      	mov	r3, r0
 800e55a:	011b      	lsls	r3, r3, #4
 800e55c:	4a06      	ldr	r2, [pc, #24]	@ (800e578 <STM32FXXXUsart6Parameter+0x2f0>)
 800e55e:	4323      	orrs	r3, r4
 800e560:	6093      	str	r3, [r2, #8]
}
 800e562:	bf00      	nop
 800e564:	3738      	adds	r7, #56	@ 0x38
 800e566:	46bd      	mov	sp, r7
 800e568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e56c:	f3af 8000 	nop.w
 800e570:	88e368f1 	.word	0x88e368f1
 800e574:	3ee4f8b5 	.word	0x3ee4f8b5
 800e578:	40011400 	.word	0x40011400
 800e57c:	3fe00000 	.word	0x3fe00000
 800e580:	3ff00000 	.word	0x3ff00000
 800e584:	3ff80000 	.word	0x3ff80000
 800e588:	40300000 	.word	0x40300000
 800e58c:	40200000 	.word	0x40200000

0800e590 <usart1_enable>:
/*** USART1 INIC Procedure & Function Definition ***/
STM32FXXX_USART1* usart1_enable(void)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	af00      	add	r7, sp, #0

	/*** USART1 Bit Mapping Link ***/
	stm32fxxx_usart1.instance = usart1_instance();
 800e594:	f7fc fd76 	bl	800b084 <usart1_instance>
 800e598:	4603      	mov	r3, r0
 800e59a:	4a07      	ldr	r2, [pc, #28]	@ (800e5b8 <usart1_enable+0x28>)
 800e59c:	6013      	str	r3, [r2, #0]
	// Other
	stm32fxxx_usart1.clock = STM32FXXXUsart1Clock;
 800e59e:	4b06      	ldr	r3, [pc, #24]	@ (800e5b8 <usart1_enable+0x28>)
 800e5a0:	4a06      	ldr	r2, [pc, #24]	@ (800e5bc <usart1_enable+0x2c>)
 800e5a2:	605a      	str	r2, [r3, #4]
	stm32fxxx_usart1.nvic = STM32FXXXUsart1Nvic;
 800e5a4:	4b04      	ldr	r3, [pc, #16]	@ (800e5b8 <usart1_enable+0x28>)
 800e5a6:	4a06      	ldr	r2, [pc, #24]	@ (800e5c0 <usart1_enable+0x30>)
 800e5a8:	609a      	str	r2, [r3, #8]
	stm32fxxx_usart1.parameter = STM32FXXXUsart1Parameter;
 800e5aa:	4b03      	ldr	r3, [pc, #12]	@ (800e5b8 <usart1_enable+0x28>)
 800e5ac:	4a05      	ldr	r2, [pc, #20]	@ (800e5c4 <usart1_enable+0x34>)
 800e5ae:	60da      	str	r2, [r3, #12]

	return &stm32fxxx_usart1;
 800e5b0:	4b01      	ldr	r3, [pc, #4]	@ (800e5b8 <usart1_enable+0x28>)
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	20000cb8 	.word	0x20000cb8
 800e5bc:	0800db11 	.word	0x0800db11
 800e5c0:	0800db4d 	.word	0x0800db4d
 800e5c4:	0800db89 	.word	0x0800db89

0800e5c8 <usart2_enable>:

STM32FXXX_USART1*  usart1(void){ return (STM32FXXX_USART1*) &stm32fxxx_usart1; }

/*** USART2 INIC Procedure & Function Definition ***/
STM32FXXX_USART2* usart2_enable(void)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	af00      	add	r7, sp, #0

	/*** USART2 Bit Mapping Link ***/
	stm32fxxx_usart2.instance = usart2_instance();
 800e5cc:	f7fc fd64 	bl	800b098 <usart2_instance>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	4a07      	ldr	r2, [pc, #28]	@ (800e5f0 <usart2_enable+0x28>)
 800e5d4:	6013      	str	r3, [r2, #0]
	// Other
	stm32fxxx_usart2.clock = STM32FXXXUsart2Clock;
 800e5d6:	4b06      	ldr	r3, [pc, #24]	@ (800e5f0 <usart2_enable+0x28>)
 800e5d8:	4a06      	ldr	r2, [pc, #24]	@ (800e5f4 <usart2_enable+0x2c>)
 800e5da:	605a      	str	r2, [r3, #4]
	stm32fxxx_usart2.nvic = STM32FXXXUsart2Nvic;
 800e5dc:	4b04      	ldr	r3, [pc, #16]	@ (800e5f0 <usart2_enable+0x28>)
 800e5de:	4a06      	ldr	r2, [pc, #24]	@ (800e5f8 <usart2_enable+0x30>)
 800e5e0:	609a      	str	r2, [r3, #8]
	stm32fxxx_usart2.parameter = STM32FXXXUsart2Parameter;
 800e5e2:	4b03      	ldr	r3, [pc, #12]	@ (800e5f0 <usart2_enable+0x28>)
 800e5e4:	4a05      	ldr	r2, [pc, #20]	@ (800e5fc <usart2_enable+0x34>)
 800e5e6:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_usart2;
 800e5e8:	4b01      	ldr	r3, [pc, #4]	@ (800e5f0 <usart2_enable+0x28>)
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	20000cc8 	.word	0x20000cc8
 800e5f4:	0800de91 	.word	0x0800de91
 800e5f8:	0800decd 	.word	0x0800decd
 800e5fc:	0800df09 	.word	0x0800df09

0800e600 <usart6_enable>:
STM32FXXX_UART5*  uart5(void){ return (STM32FXXX_UART5*) &stm32fxxx_uart5; }

#endif
/*** USART6 INIC Procedure & Function Definition ***/
STM32FXXX_USART6* usart6_enable(void)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	af00      	add	r7, sp, #0

	/*** USART6 Bit Mapping Link ***/
	stm32fxxx_usart6.instance = usart6_instance();
 800e604:	f7fc fd52 	bl	800b0ac <usart6_instance>
 800e608:	4603      	mov	r3, r0
 800e60a:	4a07      	ldr	r2, [pc, #28]	@ (800e628 <usart6_enable+0x28>)
 800e60c:	6013      	str	r3, [r2, #0]
	// Other
	stm32fxxx_usart6.clock = STM32FXXXUsart6Clock;
 800e60e:	4b06      	ldr	r3, [pc, #24]	@ (800e628 <usart6_enable+0x28>)
 800e610:	4a06      	ldr	r2, [pc, #24]	@ (800e62c <usart6_enable+0x2c>)
 800e612:	605a      	str	r2, [r3, #4]
	stm32fxxx_usart6.nvic = STM32FXXXUsart6Nvic;
 800e614:	4b04      	ldr	r3, [pc, #16]	@ (800e628 <usart6_enable+0x28>)
 800e616:	4a06      	ldr	r2, [pc, #24]	@ (800e630 <usart6_enable+0x30>)
 800e618:	609a      	str	r2, [r3, #8]
	stm32fxxx_usart6.parameter = STM32FXXXUsart6Parameter;
 800e61a:	4b03      	ldr	r3, [pc, #12]	@ (800e628 <usart6_enable+0x28>)
 800e61c:	4a05      	ldr	r2, [pc, #20]	@ (800e634 <usart6_enable+0x34>)
 800e61e:	60da      	str	r2, [r3, #12]
	return &stm32fxxx_usart6;
 800e620:	4b01      	ldr	r3, [pc, #4]	@ (800e628 <usart6_enable+0x28>)
}
 800e622:	4618      	mov	r0, r3
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	20000cd8 	.word	0x20000cd8
 800e62c:	0800e211 	.word	0x0800e211
 800e630:	0800e24d 	.word	0x0800e24d
 800e634:	0800e289 	.word	0x0800e289

0800e638 <_vsniprintf_r>:
 800e638:	b530      	push	{r4, r5, lr}
 800e63a:	4614      	mov	r4, r2
 800e63c:	2c00      	cmp	r4, #0
 800e63e:	b09b      	sub	sp, #108	@ 0x6c
 800e640:	4605      	mov	r5, r0
 800e642:	461a      	mov	r2, r3
 800e644:	da05      	bge.n	800e652 <_vsniprintf_r+0x1a>
 800e646:	238b      	movs	r3, #139	@ 0x8b
 800e648:	6003      	str	r3, [r0, #0]
 800e64a:	f04f 30ff 	mov.w	r0, #4294967295
 800e64e:	b01b      	add	sp, #108	@ 0x6c
 800e650:	bd30      	pop	{r4, r5, pc}
 800e652:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e656:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e65a:	bf14      	ite	ne
 800e65c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e660:	4623      	moveq	r3, r4
 800e662:	9302      	str	r3, [sp, #8]
 800e664:	9305      	str	r3, [sp, #20]
 800e666:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e66a:	9100      	str	r1, [sp, #0]
 800e66c:	9104      	str	r1, [sp, #16]
 800e66e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e672:	4669      	mov	r1, sp
 800e674:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e676:	f000 f9f9 	bl	800ea6c <_svfiprintf_r>
 800e67a:	1c43      	adds	r3, r0, #1
 800e67c:	bfbc      	itt	lt
 800e67e:	238b      	movlt	r3, #139	@ 0x8b
 800e680:	602b      	strlt	r3, [r5, #0]
 800e682:	2c00      	cmp	r4, #0
 800e684:	d0e3      	beq.n	800e64e <_vsniprintf_r+0x16>
 800e686:	9b00      	ldr	r3, [sp, #0]
 800e688:	2200      	movs	r2, #0
 800e68a:	701a      	strb	r2, [r3, #0]
 800e68c:	e7df      	b.n	800e64e <_vsniprintf_r+0x16>
	...

0800e690 <vsniprintf>:
 800e690:	b507      	push	{r0, r1, r2, lr}
 800e692:	9300      	str	r3, [sp, #0]
 800e694:	4613      	mov	r3, r2
 800e696:	460a      	mov	r2, r1
 800e698:	4601      	mov	r1, r0
 800e69a:	4803      	ldr	r0, [pc, #12]	@ (800e6a8 <vsniprintf+0x18>)
 800e69c:	6800      	ldr	r0, [r0, #0]
 800e69e:	f7ff ffcb 	bl	800e638 <_vsniprintf_r>
 800e6a2:	b003      	add	sp, #12
 800e6a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e6a8:	20000004 	.word	0x20000004

0800e6ac <__errno>:
 800e6ac:	4b01      	ldr	r3, [pc, #4]	@ (800e6b4 <__errno+0x8>)
 800e6ae:	6818      	ldr	r0, [r3, #0]
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	20000004 	.word	0x20000004

0800e6b8 <__libc_init_array>:
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	4d0d      	ldr	r5, [pc, #52]	@ (800e6f0 <__libc_init_array+0x38>)
 800e6bc:	4c0d      	ldr	r4, [pc, #52]	@ (800e6f4 <__libc_init_array+0x3c>)
 800e6be:	1b64      	subs	r4, r4, r5
 800e6c0:	10a4      	asrs	r4, r4, #2
 800e6c2:	2600      	movs	r6, #0
 800e6c4:	42a6      	cmp	r6, r4
 800e6c6:	d109      	bne.n	800e6dc <__libc_init_array+0x24>
 800e6c8:	4d0b      	ldr	r5, [pc, #44]	@ (800e6f8 <__libc_init_array+0x40>)
 800e6ca:	4c0c      	ldr	r4, [pc, #48]	@ (800e6fc <__libc_init_array+0x44>)
 800e6cc:	f000 fd28 	bl	800f120 <_init>
 800e6d0:	1b64      	subs	r4, r4, r5
 800e6d2:	10a4      	asrs	r4, r4, #2
 800e6d4:	2600      	movs	r6, #0
 800e6d6:	42a6      	cmp	r6, r4
 800e6d8:	d105      	bne.n	800e6e6 <__libc_init_array+0x2e>
 800e6da:	bd70      	pop	{r4, r5, r6, pc}
 800e6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6e0:	4798      	blx	r3
 800e6e2:	3601      	adds	r6, #1
 800e6e4:	e7ee      	b.n	800e6c4 <__libc_init_array+0xc>
 800e6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6ea:	4798      	blx	r3
 800e6ec:	3601      	adds	r6, #1
 800e6ee:	e7f2      	b.n	800e6d6 <__libc_init_array+0x1e>
 800e6f0:	0800f1d4 	.word	0x0800f1d4
 800e6f4:	0800f1d4 	.word	0x0800f1d4
 800e6f8:	0800f1d4 	.word	0x0800f1d4
 800e6fc:	0800f1d8 	.word	0x0800f1d8

0800e700 <__retarget_lock_acquire_recursive>:
 800e700:	4770      	bx	lr

0800e702 <__retarget_lock_release_recursive>:
 800e702:	4770      	bx	lr

0800e704 <memcpy>:
 800e704:	440a      	add	r2, r1
 800e706:	4291      	cmp	r1, r2
 800e708:	f100 33ff 	add.w	r3, r0, #4294967295
 800e70c:	d100      	bne.n	800e710 <memcpy+0xc>
 800e70e:	4770      	bx	lr
 800e710:	b510      	push	{r4, lr}
 800e712:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e71a:	4291      	cmp	r1, r2
 800e71c:	d1f9      	bne.n	800e712 <memcpy+0xe>
 800e71e:	bd10      	pop	{r4, pc}

0800e720 <modf>:
 800e720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e722:	ec55 4b10 	vmov	r4, r5, d0
 800e726:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e72a:	f2a3 32ff 	subw	r2, r3, #1023	@ 0x3ff
 800e72e:	2a13      	cmp	r2, #19
 800e730:	4606      	mov	r6, r0
 800e732:	462f      	mov	r7, r5
 800e734:	dc21      	bgt.n	800e77a <modf+0x5a>
 800e736:	2a00      	cmp	r2, #0
 800e738:	da07      	bge.n	800e74a <modf+0x2a>
 800e73a:	2200      	movs	r2, #0
 800e73c:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 800e740:	e9c0 2300 	strd	r2, r3, [r0]
 800e744:	ec45 4b10 	vmov	d0, r4, r5
 800e748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e74a:	481d      	ldr	r0, [pc, #116]	@ (800e7c0 <modf+0xa0>)
 800e74c:	4110      	asrs	r0, r2
 800e74e:	ea05 0300 	and.w	r3, r5, r0
 800e752:	4323      	orrs	r3, r4
 800e754:	d105      	bne.n	800e762 <modf+0x42>
 800e756:	e9c6 4500 	strd	r4, r5, [r6]
 800e75a:	f007 4500 	and.w	r5, r7, #2147483648	@ 0x80000000
 800e75e:	461c      	mov	r4, r3
 800e760:	e7f0      	b.n	800e744 <modf+0x24>
 800e762:	2200      	movs	r2, #0
 800e764:	ea25 0300 	bic.w	r3, r5, r0
 800e768:	4620      	mov	r0, r4
 800e76a:	4629      	mov	r1, r5
 800e76c:	e9c6 2300 	strd	r2, r3, [r6]
 800e770:	f7f1 fd8a 	bl	8000288 <__aeabi_dsub>
 800e774:	4604      	mov	r4, r0
 800e776:	460d      	mov	r5, r1
 800e778:	e7e4      	b.n	800e744 <modf+0x24>
 800e77a:	2a33      	cmp	r2, #51	@ 0x33
 800e77c:	dd13      	ble.n	800e7a6 <modf+0x86>
 800e77e:	ed86 0b00 	vstr	d0, [r6]
 800e782:	f000 fc27 	bl	800efd4 <__fpclassifyd>
 800e786:	b950      	cbnz	r0, 800e79e <modf+0x7e>
 800e788:	4622      	mov	r2, r4
 800e78a:	462b      	mov	r3, r5
 800e78c:	4620      	mov	r0, r4
 800e78e:	4629      	mov	r1, r5
 800e790:	f7f1 fd7c 	bl	800028c <__adddf3>
 800e794:	4604      	mov	r4, r0
 800e796:	460d      	mov	r5, r1
 800e798:	e9c6 4500 	strd	r4, r5, [r6]
 800e79c:	e7d2      	b.n	800e744 <modf+0x24>
 800e79e:	2400      	movs	r4, #0
 800e7a0:	f005 4500 	and.w	r5, r5, #2147483648	@ 0x80000000
 800e7a4:	e7ce      	b.n	800e744 <modf+0x24>
 800e7a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ae:	40d8      	lsrs	r0, r3
 800e7b0:	ea14 0300 	ands.w	r3, r4, r0
 800e7b4:	d0cf      	beq.n	800e756 <modf+0x36>
 800e7b6:	462b      	mov	r3, r5
 800e7b8:	ea24 0200 	bic.w	r2, r4, r0
 800e7bc:	e7d4      	b.n	800e768 <modf+0x48>
 800e7be:	bf00      	nop
 800e7c0:	000fffff 	.word	0x000fffff

0800e7c4 <_free_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	4605      	mov	r5, r0
 800e7c8:	2900      	cmp	r1, #0
 800e7ca:	d041      	beq.n	800e850 <_free_r+0x8c>
 800e7cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7d0:	1f0c      	subs	r4, r1, #4
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	bfb8      	it	lt
 800e7d6:	18e4      	addlt	r4, r4, r3
 800e7d8:	f000 f8e0 	bl	800e99c <__malloc_lock>
 800e7dc:	4a1d      	ldr	r2, [pc, #116]	@ (800e854 <_free_r+0x90>)
 800e7de:	6813      	ldr	r3, [r2, #0]
 800e7e0:	b933      	cbnz	r3, 800e7f0 <_free_r+0x2c>
 800e7e2:	6063      	str	r3, [r4, #4]
 800e7e4:	6014      	str	r4, [r2, #0]
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7ec:	f000 b8dc 	b.w	800e9a8 <__malloc_unlock>
 800e7f0:	42a3      	cmp	r3, r4
 800e7f2:	d908      	bls.n	800e806 <_free_r+0x42>
 800e7f4:	6820      	ldr	r0, [r4, #0]
 800e7f6:	1821      	adds	r1, r4, r0
 800e7f8:	428b      	cmp	r3, r1
 800e7fa:	bf01      	itttt	eq
 800e7fc:	6819      	ldreq	r1, [r3, #0]
 800e7fe:	685b      	ldreq	r3, [r3, #4]
 800e800:	1809      	addeq	r1, r1, r0
 800e802:	6021      	streq	r1, [r4, #0]
 800e804:	e7ed      	b.n	800e7e2 <_free_r+0x1e>
 800e806:	461a      	mov	r2, r3
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	b10b      	cbz	r3, 800e810 <_free_r+0x4c>
 800e80c:	42a3      	cmp	r3, r4
 800e80e:	d9fa      	bls.n	800e806 <_free_r+0x42>
 800e810:	6811      	ldr	r1, [r2, #0]
 800e812:	1850      	adds	r0, r2, r1
 800e814:	42a0      	cmp	r0, r4
 800e816:	d10b      	bne.n	800e830 <_free_r+0x6c>
 800e818:	6820      	ldr	r0, [r4, #0]
 800e81a:	4401      	add	r1, r0
 800e81c:	1850      	adds	r0, r2, r1
 800e81e:	4283      	cmp	r3, r0
 800e820:	6011      	str	r1, [r2, #0]
 800e822:	d1e0      	bne.n	800e7e6 <_free_r+0x22>
 800e824:	6818      	ldr	r0, [r3, #0]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	6053      	str	r3, [r2, #4]
 800e82a:	4408      	add	r0, r1
 800e82c:	6010      	str	r0, [r2, #0]
 800e82e:	e7da      	b.n	800e7e6 <_free_r+0x22>
 800e830:	d902      	bls.n	800e838 <_free_r+0x74>
 800e832:	230c      	movs	r3, #12
 800e834:	602b      	str	r3, [r5, #0]
 800e836:	e7d6      	b.n	800e7e6 <_free_r+0x22>
 800e838:	6820      	ldr	r0, [r4, #0]
 800e83a:	1821      	adds	r1, r4, r0
 800e83c:	428b      	cmp	r3, r1
 800e83e:	bf04      	itt	eq
 800e840:	6819      	ldreq	r1, [r3, #0]
 800e842:	685b      	ldreq	r3, [r3, #4]
 800e844:	6063      	str	r3, [r4, #4]
 800e846:	bf04      	itt	eq
 800e848:	1809      	addeq	r1, r1, r0
 800e84a:	6021      	streq	r1, [r4, #0]
 800e84c:	6054      	str	r4, [r2, #4]
 800e84e:	e7ca      	b.n	800e7e6 <_free_r+0x22>
 800e850:	bd38      	pop	{r3, r4, r5, pc}
 800e852:	bf00      	nop
 800e854:	20000e2c 	.word	0x20000e2c

0800e858 <sbrk_aligned>:
 800e858:	b570      	push	{r4, r5, r6, lr}
 800e85a:	4e0f      	ldr	r6, [pc, #60]	@ (800e898 <sbrk_aligned+0x40>)
 800e85c:	460c      	mov	r4, r1
 800e85e:	6831      	ldr	r1, [r6, #0]
 800e860:	4605      	mov	r5, r0
 800e862:	b911      	cbnz	r1, 800e86a <sbrk_aligned+0x12>
 800e864:	f000 fba6 	bl	800efb4 <_sbrk_r>
 800e868:	6030      	str	r0, [r6, #0]
 800e86a:	4621      	mov	r1, r4
 800e86c:	4628      	mov	r0, r5
 800e86e:	f000 fba1 	bl	800efb4 <_sbrk_r>
 800e872:	1c43      	adds	r3, r0, #1
 800e874:	d103      	bne.n	800e87e <sbrk_aligned+0x26>
 800e876:	f04f 34ff 	mov.w	r4, #4294967295
 800e87a:	4620      	mov	r0, r4
 800e87c:	bd70      	pop	{r4, r5, r6, pc}
 800e87e:	1cc4      	adds	r4, r0, #3
 800e880:	f024 0403 	bic.w	r4, r4, #3
 800e884:	42a0      	cmp	r0, r4
 800e886:	d0f8      	beq.n	800e87a <sbrk_aligned+0x22>
 800e888:	1a21      	subs	r1, r4, r0
 800e88a:	4628      	mov	r0, r5
 800e88c:	f000 fb92 	bl	800efb4 <_sbrk_r>
 800e890:	3001      	adds	r0, #1
 800e892:	d1f2      	bne.n	800e87a <sbrk_aligned+0x22>
 800e894:	e7ef      	b.n	800e876 <sbrk_aligned+0x1e>
 800e896:	bf00      	nop
 800e898:	20000e28 	.word	0x20000e28

0800e89c <_malloc_r>:
 800e89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8a0:	1ccd      	adds	r5, r1, #3
 800e8a2:	f025 0503 	bic.w	r5, r5, #3
 800e8a6:	3508      	adds	r5, #8
 800e8a8:	2d0c      	cmp	r5, #12
 800e8aa:	bf38      	it	cc
 800e8ac:	250c      	movcc	r5, #12
 800e8ae:	2d00      	cmp	r5, #0
 800e8b0:	4606      	mov	r6, r0
 800e8b2:	db01      	blt.n	800e8b8 <_malloc_r+0x1c>
 800e8b4:	42a9      	cmp	r1, r5
 800e8b6:	d904      	bls.n	800e8c2 <_malloc_r+0x26>
 800e8b8:	230c      	movs	r3, #12
 800e8ba:	6033      	str	r3, [r6, #0]
 800e8bc:	2000      	movs	r0, #0
 800e8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e998 <_malloc_r+0xfc>
 800e8c6:	f000 f869 	bl	800e99c <__malloc_lock>
 800e8ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e8ce:	461c      	mov	r4, r3
 800e8d0:	bb44      	cbnz	r4, 800e924 <_malloc_r+0x88>
 800e8d2:	4629      	mov	r1, r5
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	f7ff ffbf 	bl	800e858 <sbrk_aligned>
 800e8da:	1c43      	adds	r3, r0, #1
 800e8dc:	4604      	mov	r4, r0
 800e8de:	d158      	bne.n	800e992 <_malloc_r+0xf6>
 800e8e0:	f8d8 4000 	ldr.w	r4, [r8]
 800e8e4:	4627      	mov	r7, r4
 800e8e6:	2f00      	cmp	r7, #0
 800e8e8:	d143      	bne.n	800e972 <_malloc_r+0xd6>
 800e8ea:	2c00      	cmp	r4, #0
 800e8ec:	d04b      	beq.n	800e986 <_malloc_r+0xea>
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	eb04 0903 	add.w	r9, r4, r3
 800e8f8:	f000 fb5c 	bl	800efb4 <_sbrk_r>
 800e8fc:	4581      	cmp	r9, r0
 800e8fe:	d142      	bne.n	800e986 <_malloc_r+0xea>
 800e900:	6821      	ldr	r1, [r4, #0]
 800e902:	1a6d      	subs	r5, r5, r1
 800e904:	4629      	mov	r1, r5
 800e906:	4630      	mov	r0, r6
 800e908:	f7ff ffa6 	bl	800e858 <sbrk_aligned>
 800e90c:	3001      	adds	r0, #1
 800e90e:	d03a      	beq.n	800e986 <_malloc_r+0xea>
 800e910:	6823      	ldr	r3, [r4, #0]
 800e912:	442b      	add	r3, r5
 800e914:	6023      	str	r3, [r4, #0]
 800e916:	f8d8 3000 	ldr.w	r3, [r8]
 800e91a:	685a      	ldr	r2, [r3, #4]
 800e91c:	bb62      	cbnz	r2, 800e978 <_malloc_r+0xdc>
 800e91e:	f8c8 7000 	str.w	r7, [r8]
 800e922:	e00f      	b.n	800e944 <_malloc_r+0xa8>
 800e924:	6822      	ldr	r2, [r4, #0]
 800e926:	1b52      	subs	r2, r2, r5
 800e928:	d420      	bmi.n	800e96c <_malloc_r+0xd0>
 800e92a:	2a0b      	cmp	r2, #11
 800e92c:	d917      	bls.n	800e95e <_malloc_r+0xc2>
 800e92e:	1961      	adds	r1, r4, r5
 800e930:	42a3      	cmp	r3, r4
 800e932:	6025      	str	r5, [r4, #0]
 800e934:	bf18      	it	ne
 800e936:	6059      	strne	r1, [r3, #4]
 800e938:	6863      	ldr	r3, [r4, #4]
 800e93a:	bf08      	it	eq
 800e93c:	f8c8 1000 	streq.w	r1, [r8]
 800e940:	5162      	str	r2, [r4, r5]
 800e942:	604b      	str	r3, [r1, #4]
 800e944:	4630      	mov	r0, r6
 800e946:	f000 f82f 	bl	800e9a8 <__malloc_unlock>
 800e94a:	f104 000b 	add.w	r0, r4, #11
 800e94e:	1d23      	adds	r3, r4, #4
 800e950:	f020 0007 	bic.w	r0, r0, #7
 800e954:	1ac2      	subs	r2, r0, r3
 800e956:	bf1c      	itt	ne
 800e958:	1a1b      	subne	r3, r3, r0
 800e95a:	50a3      	strne	r3, [r4, r2]
 800e95c:	e7af      	b.n	800e8be <_malloc_r+0x22>
 800e95e:	6862      	ldr	r2, [r4, #4]
 800e960:	42a3      	cmp	r3, r4
 800e962:	bf0c      	ite	eq
 800e964:	f8c8 2000 	streq.w	r2, [r8]
 800e968:	605a      	strne	r2, [r3, #4]
 800e96a:	e7eb      	b.n	800e944 <_malloc_r+0xa8>
 800e96c:	4623      	mov	r3, r4
 800e96e:	6864      	ldr	r4, [r4, #4]
 800e970:	e7ae      	b.n	800e8d0 <_malloc_r+0x34>
 800e972:	463c      	mov	r4, r7
 800e974:	687f      	ldr	r7, [r7, #4]
 800e976:	e7b6      	b.n	800e8e6 <_malloc_r+0x4a>
 800e978:	461a      	mov	r2, r3
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	42a3      	cmp	r3, r4
 800e97e:	d1fb      	bne.n	800e978 <_malloc_r+0xdc>
 800e980:	2300      	movs	r3, #0
 800e982:	6053      	str	r3, [r2, #4]
 800e984:	e7de      	b.n	800e944 <_malloc_r+0xa8>
 800e986:	230c      	movs	r3, #12
 800e988:	6033      	str	r3, [r6, #0]
 800e98a:	4630      	mov	r0, r6
 800e98c:	f000 f80c 	bl	800e9a8 <__malloc_unlock>
 800e990:	e794      	b.n	800e8bc <_malloc_r+0x20>
 800e992:	6005      	str	r5, [r0, #0]
 800e994:	e7d6      	b.n	800e944 <_malloc_r+0xa8>
 800e996:	bf00      	nop
 800e998:	20000e2c 	.word	0x20000e2c

0800e99c <__malloc_lock>:
 800e99c:	4801      	ldr	r0, [pc, #4]	@ (800e9a4 <__malloc_lock+0x8>)
 800e99e:	f7ff beaf 	b.w	800e700 <__retarget_lock_acquire_recursive>
 800e9a2:	bf00      	nop
 800e9a4:	20000e24 	.word	0x20000e24

0800e9a8 <__malloc_unlock>:
 800e9a8:	4801      	ldr	r0, [pc, #4]	@ (800e9b0 <__malloc_unlock+0x8>)
 800e9aa:	f7ff beaa 	b.w	800e702 <__retarget_lock_release_recursive>
 800e9ae:	bf00      	nop
 800e9b0:	20000e24 	.word	0x20000e24

0800e9b4 <__ssputs_r>:
 800e9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b8:	688e      	ldr	r6, [r1, #8]
 800e9ba:	461f      	mov	r7, r3
 800e9bc:	42be      	cmp	r6, r7
 800e9be:	680b      	ldr	r3, [r1, #0]
 800e9c0:	4682      	mov	sl, r0
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	4690      	mov	r8, r2
 800e9c6:	d82d      	bhi.n	800ea24 <__ssputs_r+0x70>
 800e9c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e9d0:	d026      	beq.n	800ea20 <__ssputs_r+0x6c>
 800e9d2:	6965      	ldr	r5, [r4, #20]
 800e9d4:	6909      	ldr	r1, [r1, #16]
 800e9d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9da:	eba3 0901 	sub.w	r9, r3, r1
 800e9de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9e2:	1c7b      	adds	r3, r7, #1
 800e9e4:	444b      	add	r3, r9
 800e9e6:	106d      	asrs	r5, r5, #1
 800e9e8:	429d      	cmp	r5, r3
 800e9ea:	bf38      	it	cc
 800e9ec:	461d      	movcc	r5, r3
 800e9ee:	0553      	lsls	r3, r2, #21
 800e9f0:	d527      	bpl.n	800ea42 <__ssputs_r+0x8e>
 800e9f2:	4629      	mov	r1, r5
 800e9f4:	f7ff ff52 	bl	800e89c <_malloc_r>
 800e9f8:	4606      	mov	r6, r0
 800e9fa:	b360      	cbz	r0, 800ea56 <__ssputs_r+0xa2>
 800e9fc:	6921      	ldr	r1, [r4, #16]
 800e9fe:	464a      	mov	r2, r9
 800ea00:	f7ff fe80 	bl	800e704 <memcpy>
 800ea04:	89a3      	ldrh	r3, [r4, #12]
 800ea06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ea0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea0e:	81a3      	strh	r3, [r4, #12]
 800ea10:	6126      	str	r6, [r4, #16]
 800ea12:	6165      	str	r5, [r4, #20]
 800ea14:	444e      	add	r6, r9
 800ea16:	eba5 0509 	sub.w	r5, r5, r9
 800ea1a:	6026      	str	r6, [r4, #0]
 800ea1c:	60a5      	str	r5, [r4, #8]
 800ea1e:	463e      	mov	r6, r7
 800ea20:	42be      	cmp	r6, r7
 800ea22:	d900      	bls.n	800ea26 <__ssputs_r+0x72>
 800ea24:	463e      	mov	r6, r7
 800ea26:	6820      	ldr	r0, [r4, #0]
 800ea28:	4632      	mov	r2, r6
 800ea2a:	4641      	mov	r1, r8
 800ea2c:	f000 faa8 	bl	800ef80 <memmove>
 800ea30:	68a3      	ldr	r3, [r4, #8]
 800ea32:	1b9b      	subs	r3, r3, r6
 800ea34:	60a3      	str	r3, [r4, #8]
 800ea36:	6823      	ldr	r3, [r4, #0]
 800ea38:	4433      	add	r3, r6
 800ea3a:	6023      	str	r3, [r4, #0]
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea42:	462a      	mov	r2, r5
 800ea44:	f000 faf0 	bl	800f028 <_realloc_r>
 800ea48:	4606      	mov	r6, r0
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d1e0      	bne.n	800ea10 <__ssputs_r+0x5c>
 800ea4e:	6921      	ldr	r1, [r4, #16]
 800ea50:	4650      	mov	r0, sl
 800ea52:	f7ff feb7 	bl	800e7c4 <_free_r>
 800ea56:	230c      	movs	r3, #12
 800ea58:	f8ca 3000 	str.w	r3, [sl]
 800ea5c:	89a3      	ldrh	r3, [r4, #12]
 800ea5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea62:	81a3      	strh	r3, [r4, #12]
 800ea64:	f04f 30ff 	mov.w	r0, #4294967295
 800ea68:	e7e9      	b.n	800ea3e <__ssputs_r+0x8a>
	...

0800ea6c <_svfiprintf_r>:
 800ea6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea70:	4698      	mov	r8, r3
 800ea72:	898b      	ldrh	r3, [r1, #12]
 800ea74:	061b      	lsls	r3, r3, #24
 800ea76:	b09d      	sub	sp, #116	@ 0x74
 800ea78:	4607      	mov	r7, r0
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	4614      	mov	r4, r2
 800ea7e:	d510      	bpl.n	800eaa2 <_svfiprintf_r+0x36>
 800ea80:	690b      	ldr	r3, [r1, #16]
 800ea82:	b973      	cbnz	r3, 800eaa2 <_svfiprintf_r+0x36>
 800ea84:	2140      	movs	r1, #64	@ 0x40
 800ea86:	f7ff ff09 	bl	800e89c <_malloc_r>
 800ea8a:	6028      	str	r0, [r5, #0]
 800ea8c:	6128      	str	r0, [r5, #16]
 800ea8e:	b930      	cbnz	r0, 800ea9e <_svfiprintf_r+0x32>
 800ea90:	230c      	movs	r3, #12
 800ea92:	603b      	str	r3, [r7, #0]
 800ea94:	f04f 30ff 	mov.w	r0, #4294967295
 800ea98:	b01d      	add	sp, #116	@ 0x74
 800ea9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea9e:	2340      	movs	r3, #64	@ 0x40
 800eaa0:	616b      	str	r3, [r5, #20]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaa6:	2320      	movs	r3, #32
 800eaa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eaac:	f8cd 800c 	str.w	r8, [sp, #12]
 800eab0:	2330      	movs	r3, #48	@ 0x30
 800eab2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ec50 <_svfiprintf_r+0x1e4>
 800eab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eaba:	f04f 0901 	mov.w	r9, #1
 800eabe:	4623      	mov	r3, r4
 800eac0:	469a      	mov	sl, r3
 800eac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eac6:	b10a      	cbz	r2, 800eacc <_svfiprintf_r+0x60>
 800eac8:	2a25      	cmp	r2, #37	@ 0x25
 800eaca:	d1f9      	bne.n	800eac0 <_svfiprintf_r+0x54>
 800eacc:	ebba 0b04 	subs.w	fp, sl, r4
 800ead0:	d00b      	beq.n	800eaea <_svfiprintf_r+0x7e>
 800ead2:	465b      	mov	r3, fp
 800ead4:	4622      	mov	r2, r4
 800ead6:	4629      	mov	r1, r5
 800ead8:	4638      	mov	r0, r7
 800eada:	f7ff ff6b 	bl	800e9b4 <__ssputs_r>
 800eade:	3001      	adds	r0, #1
 800eae0:	f000 80a7 	beq.w	800ec32 <_svfiprintf_r+0x1c6>
 800eae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eae6:	445a      	add	r2, fp
 800eae8:	9209      	str	r2, [sp, #36]	@ 0x24
 800eaea:	f89a 3000 	ldrb.w	r3, [sl]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	f000 809f 	beq.w	800ec32 <_svfiprintf_r+0x1c6>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	f04f 32ff 	mov.w	r2, #4294967295
 800eafa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eafe:	f10a 0a01 	add.w	sl, sl, #1
 800eb02:	9304      	str	r3, [sp, #16]
 800eb04:	9307      	str	r3, [sp, #28]
 800eb06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb0c:	4654      	mov	r4, sl
 800eb0e:	2205      	movs	r2, #5
 800eb10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb14:	484e      	ldr	r0, [pc, #312]	@ (800ec50 <_svfiprintf_r+0x1e4>)
 800eb16:	f7f1 fb63 	bl	80001e0 <memchr>
 800eb1a:	9a04      	ldr	r2, [sp, #16]
 800eb1c:	b9d8      	cbnz	r0, 800eb56 <_svfiprintf_r+0xea>
 800eb1e:	06d0      	lsls	r0, r2, #27
 800eb20:	bf44      	itt	mi
 800eb22:	2320      	movmi	r3, #32
 800eb24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb28:	0711      	lsls	r1, r2, #28
 800eb2a:	bf44      	itt	mi
 800eb2c:	232b      	movmi	r3, #43	@ 0x2b
 800eb2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb32:	f89a 3000 	ldrb.w	r3, [sl]
 800eb36:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb38:	d015      	beq.n	800eb66 <_svfiprintf_r+0xfa>
 800eb3a:	9a07      	ldr	r2, [sp, #28]
 800eb3c:	4654      	mov	r4, sl
 800eb3e:	2000      	movs	r0, #0
 800eb40:	f04f 0c0a 	mov.w	ip, #10
 800eb44:	4621      	mov	r1, r4
 800eb46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb4a:	3b30      	subs	r3, #48	@ 0x30
 800eb4c:	2b09      	cmp	r3, #9
 800eb4e:	d94b      	bls.n	800ebe8 <_svfiprintf_r+0x17c>
 800eb50:	b1b0      	cbz	r0, 800eb80 <_svfiprintf_r+0x114>
 800eb52:	9207      	str	r2, [sp, #28]
 800eb54:	e014      	b.n	800eb80 <_svfiprintf_r+0x114>
 800eb56:	eba0 0308 	sub.w	r3, r0, r8
 800eb5a:	fa09 f303 	lsl.w	r3, r9, r3
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	9304      	str	r3, [sp, #16]
 800eb62:	46a2      	mov	sl, r4
 800eb64:	e7d2      	b.n	800eb0c <_svfiprintf_r+0xa0>
 800eb66:	9b03      	ldr	r3, [sp, #12]
 800eb68:	1d19      	adds	r1, r3, #4
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	9103      	str	r1, [sp, #12]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	bfbb      	ittet	lt
 800eb72:	425b      	neglt	r3, r3
 800eb74:	f042 0202 	orrlt.w	r2, r2, #2
 800eb78:	9307      	strge	r3, [sp, #28]
 800eb7a:	9307      	strlt	r3, [sp, #28]
 800eb7c:	bfb8      	it	lt
 800eb7e:	9204      	strlt	r2, [sp, #16]
 800eb80:	7823      	ldrb	r3, [r4, #0]
 800eb82:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb84:	d10a      	bne.n	800eb9c <_svfiprintf_r+0x130>
 800eb86:	7863      	ldrb	r3, [r4, #1]
 800eb88:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb8a:	d132      	bne.n	800ebf2 <_svfiprintf_r+0x186>
 800eb8c:	9b03      	ldr	r3, [sp, #12]
 800eb8e:	1d1a      	adds	r2, r3, #4
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	9203      	str	r2, [sp, #12]
 800eb94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb98:	3402      	adds	r4, #2
 800eb9a:	9305      	str	r3, [sp, #20]
 800eb9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ec60 <_svfiprintf_r+0x1f4>
 800eba0:	7821      	ldrb	r1, [r4, #0]
 800eba2:	2203      	movs	r2, #3
 800eba4:	4650      	mov	r0, sl
 800eba6:	f7f1 fb1b 	bl	80001e0 <memchr>
 800ebaa:	b138      	cbz	r0, 800ebbc <_svfiprintf_r+0x150>
 800ebac:	9b04      	ldr	r3, [sp, #16]
 800ebae:	eba0 000a 	sub.w	r0, r0, sl
 800ebb2:	2240      	movs	r2, #64	@ 0x40
 800ebb4:	4082      	lsls	r2, r0
 800ebb6:	4313      	orrs	r3, r2
 800ebb8:	3401      	adds	r4, #1
 800ebba:	9304      	str	r3, [sp, #16]
 800ebbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebc0:	4824      	ldr	r0, [pc, #144]	@ (800ec54 <_svfiprintf_r+0x1e8>)
 800ebc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebc6:	2206      	movs	r2, #6
 800ebc8:	f7f1 fb0a 	bl	80001e0 <memchr>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	d036      	beq.n	800ec3e <_svfiprintf_r+0x1d2>
 800ebd0:	4b21      	ldr	r3, [pc, #132]	@ (800ec58 <_svfiprintf_r+0x1ec>)
 800ebd2:	bb1b      	cbnz	r3, 800ec1c <_svfiprintf_r+0x1b0>
 800ebd4:	9b03      	ldr	r3, [sp, #12]
 800ebd6:	3307      	adds	r3, #7
 800ebd8:	f023 0307 	bic.w	r3, r3, #7
 800ebdc:	3308      	adds	r3, #8
 800ebde:	9303      	str	r3, [sp, #12]
 800ebe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebe2:	4433      	add	r3, r6
 800ebe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebe6:	e76a      	b.n	800eabe <_svfiprintf_r+0x52>
 800ebe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebec:	460c      	mov	r4, r1
 800ebee:	2001      	movs	r0, #1
 800ebf0:	e7a8      	b.n	800eb44 <_svfiprintf_r+0xd8>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	3401      	adds	r4, #1
 800ebf6:	9305      	str	r3, [sp, #20]
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	f04f 0c0a 	mov.w	ip, #10
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec04:	3a30      	subs	r2, #48	@ 0x30
 800ec06:	2a09      	cmp	r2, #9
 800ec08:	d903      	bls.n	800ec12 <_svfiprintf_r+0x1a6>
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d0c6      	beq.n	800eb9c <_svfiprintf_r+0x130>
 800ec0e:	9105      	str	r1, [sp, #20]
 800ec10:	e7c4      	b.n	800eb9c <_svfiprintf_r+0x130>
 800ec12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec16:	4604      	mov	r4, r0
 800ec18:	2301      	movs	r3, #1
 800ec1a:	e7f0      	b.n	800ebfe <_svfiprintf_r+0x192>
 800ec1c:	ab03      	add	r3, sp, #12
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	462a      	mov	r2, r5
 800ec22:	4b0e      	ldr	r3, [pc, #56]	@ (800ec5c <_svfiprintf_r+0x1f0>)
 800ec24:	a904      	add	r1, sp, #16
 800ec26:	4638      	mov	r0, r7
 800ec28:	f3af 8000 	nop.w
 800ec2c:	1c42      	adds	r2, r0, #1
 800ec2e:	4606      	mov	r6, r0
 800ec30:	d1d6      	bne.n	800ebe0 <_svfiprintf_r+0x174>
 800ec32:	89ab      	ldrh	r3, [r5, #12]
 800ec34:	065b      	lsls	r3, r3, #25
 800ec36:	f53f af2d 	bmi.w	800ea94 <_svfiprintf_r+0x28>
 800ec3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec3c:	e72c      	b.n	800ea98 <_svfiprintf_r+0x2c>
 800ec3e:	ab03      	add	r3, sp, #12
 800ec40:	9300      	str	r3, [sp, #0]
 800ec42:	462a      	mov	r2, r5
 800ec44:	4b05      	ldr	r3, [pc, #20]	@ (800ec5c <_svfiprintf_r+0x1f0>)
 800ec46:	a904      	add	r1, sp, #16
 800ec48:	4638      	mov	r0, r7
 800ec4a:	f000 f879 	bl	800ed40 <_printf_i>
 800ec4e:	e7ed      	b.n	800ec2c <_svfiprintf_r+0x1c0>
 800ec50:	0800f198 	.word	0x0800f198
 800ec54:	0800f1a2 	.word	0x0800f1a2
 800ec58:	00000000 	.word	0x00000000
 800ec5c:	0800e9b5 	.word	0x0800e9b5
 800ec60:	0800f19e 	.word	0x0800f19e

0800ec64 <_printf_common>:
 800ec64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec68:	4616      	mov	r6, r2
 800ec6a:	4698      	mov	r8, r3
 800ec6c:	688a      	ldr	r2, [r1, #8]
 800ec6e:	690b      	ldr	r3, [r1, #16]
 800ec70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec74:	4293      	cmp	r3, r2
 800ec76:	bfb8      	it	lt
 800ec78:	4613      	movlt	r3, r2
 800ec7a:	6033      	str	r3, [r6, #0]
 800ec7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec80:	4607      	mov	r7, r0
 800ec82:	460c      	mov	r4, r1
 800ec84:	b10a      	cbz	r2, 800ec8a <_printf_common+0x26>
 800ec86:	3301      	adds	r3, #1
 800ec88:	6033      	str	r3, [r6, #0]
 800ec8a:	6823      	ldr	r3, [r4, #0]
 800ec8c:	0699      	lsls	r1, r3, #26
 800ec8e:	bf42      	ittt	mi
 800ec90:	6833      	ldrmi	r3, [r6, #0]
 800ec92:	3302      	addmi	r3, #2
 800ec94:	6033      	strmi	r3, [r6, #0]
 800ec96:	6825      	ldr	r5, [r4, #0]
 800ec98:	f015 0506 	ands.w	r5, r5, #6
 800ec9c:	d106      	bne.n	800ecac <_printf_common+0x48>
 800ec9e:	f104 0a19 	add.w	sl, r4, #25
 800eca2:	68e3      	ldr	r3, [r4, #12]
 800eca4:	6832      	ldr	r2, [r6, #0]
 800eca6:	1a9b      	subs	r3, r3, r2
 800eca8:	42ab      	cmp	r3, r5
 800ecaa:	dc26      	bgt.n	800ecfa <_printf_common+0x96>
 800ecac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ecb0:	6822      	ldr	r2, [r4, #0]
 800ecb2:	3b00      	subs	r3, #0
 800ecb4:	bf18      	it	ne
 800ecb6:	2301      	movne	r3, #1
 800ecb8:	0692      	lsls	r2, r2, #26
 800ecba:	d42b      	bmi.n	800ed14 <_printf_common+0xb0>
 800ecbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ecc0:	4641      	mov	r1, r8
 800ecc2:	4638      	mov	r0, r7
 800ecc4:	47c8      	blx	r9
 800ecc6:	3001      	adds	r0, #1
 800ecc8:	d01e      	beq.n	800ed08 <_printf_common+0xa4>
 800ecca:	6823      	ldr	r3, [r4, #0]
 800eccc:	6922      	ldr	r2, [r4, #16]
 800ecce:	f003 0306 	and.w	r3, r3, #6
 800ecd2:	2b04      	cmp	r3, #4
 800ecd4:	bf02      	ittt	eq
 800ecd6:	68e5      	ldreq	r5, [r4, #12]
 800ecd8:	6833      	ldreq	r3, [r6, #0]
 800ecda:	1aed      	subeq	r5, r5, r3
 800ecdc:	68a3      	ldr	r3, [r4, #8]
 800ecde:	bf0c      	ite	eq
 800ece0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ece4:	2500      	movne	r5, #0
 800ece6:	4293      	cmp	r3, r2
 800ece8:	bfc4      	itt	gt
 800ecea:	1a9b      	subgt	r3, r3, r2
 800ecec:	18ed      	addgt	r5, r5, r3
 800ecee:	2600      	movs	r6, #0
 800ecf0:	341a      	adds	r4, #26
 800ecf2:	42b5      	cmp	r5, r6
 800ecf4:	d11a      	bne.n	800ed2c <_printf_common+0xc8>
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	e008      	b.n	800ed0c <_printf_common+0xa8>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	4652      	mov	r2, sl
 800ecfe:	4641      	mov	r1, r8
 800ed00:	4638      	mov	r0, r7
 800ed02:	47c8      	blx	r9
 800ed04:	3001      	adds	r0, #1
 800ed06:	d103      	bne.n	800ed10 <_printf_common+0xac>
 800ed08:	f04f 30ff 	mov.w	r0, #4294967295
 800ed0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed10:	3501      	adds	r5, #1
 800ed12:	e7c6      	b.n	800eca2 <_printf_common+0x3e>
 800ed14:	18e1      	adds	r1, r4, r3
 800ed16:	1c5a      	adds	r2, r3, #1
 800ed18:	2030      	movs	r0, #48	@ 0x30
 800ed1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed1e:	4422      	add	r2, r4
 800ed20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed28:	3302      	adds	r3, #2
 800ed2a:	e7c7      	b.n	800ecbc <_printf_common+0x58>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	4622      	mov	r2, r4
 800ed30:	4641      	mov	r1, r8
 800ed32:	4638      	mov	r0, r7
 800ed34:	47c8      	blx	r9
 800ed36:	3001      	adds	r0, #1
 800ed38:	d0e6      	beq.n	800ed08 <_printf_common+0xa4>
 800ed3a:	3601      	adds	r6, #1
 800ed3c:	e7d9      	b.n	800ecf2 <_printf_common+0x8e>
	...

0800ed40 <_printf_i>:
 800ed40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed44:	7e0f      	ldrb	r7, [r1, #24]
 800ed46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed48:	2f78      	cmp	r7, #120	@ 0x78
 800ed4a:	4691      	mov	r9, r2
 800ed4c:	4680      	mov	r8, r0
 800ed4e:	460c      	mov	r4, r1
 800ed50:	469a      	mov	sl, r3
 800ed52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed56:	d807      	bhi.n	800ed68 <_printf_i+0x28>
 800ed58:	2f62      	cmp	r7, #98	@ 0x62
 800ed5a:	d80a      	bhi.n	800ed72 <_printf_i+0x32>
 800ed5c:	2f00      	cmp	r7, #0
 800ed5e:	f000 80d2 	beq.w	800ef06 <_printf_i+0x1c6>
 800ed62:	2f58      	cmp	r7, #88	@ 0x58
 800ed64:	f000 80b9 	beq.w	800eeda <_printf_i+0x19a>
 800ed68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed70:	e03a      	b.n	800ede8 <_printf_i+0xa8>
 800ed72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed76:	2b15      	cmp	r3, #21
 800ed78:	d8f6      	bhi.n	800ed68 <_printf_i+0x28>
 800ed7a:	a101      	add	r1, pc, #4	@ (adr r1, 800ed80 <_printf_i+0x40>)
 800ed7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed80:	0800edd9 	.word	0x0800edd9
 800ed84:	0800eded 	.word	0x0800eded
 800ed88:	0800ed69 	.word	0x0800ed69
 800ed8c:	0800ed69 	.word	0x0800ed69
 800ed90:	0800ed69 	.word	0x0800ed69
 800ed94:	0800ed69 	.word	0x0800ed69
 800ed98:	0800eded 	.word	0x0800eded
 800ed9c:	0800ed69 	.word	0x0800ed69
 800eda0:	0800ed69 	.word	0x0800ed69
 800eda4:	0800ed69 	.word	0x0800ed69
 800eda8:	0800ed69 	.word	0x0800ed69
 800edac:	0800eeed 	.word	0x0800eeed
 800edb0:	0800ee17 	.word	0x0800ee17
 800edb4:	0800eea7 	.word	0x0800eea7
 800edb8:	0800ed69 	.word	0x0800ed69
 800edbc:	0800ed69 	.word	0x0800ed69
 800edc0:	0800ef0f 	.word	0x0800ef0f
 800edc4:	0800ed69 	.word	0x0800ed69
 800edc8:	0800ee17 	.word	0x0800ee17
 800edcc:	0800ed69 	.word	0x0800ed69
 800edd0:	0800ed69 	.word	0x0800ed69
 800edd4:	0800eeaf 	.word	0x0800eeaf
 800edd8:	6833      	ldr	r3, [r6, #0]
 800edda:	1d1a      	adds	r2, r3, #4
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	6032      	str	r2, [r6, #0]
 800ede0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ede4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ede8:	2301      	movs	r3, #1
 800edea:	e09d      	b.n	800ef28 <_printf_i+0x1e8>
 800edec:	6833      	ldr	r3, [r6, #0]
 800edee:	6820      	ldr	r0, [r4, #0]
 800edf0:	1d19      	adds	r1, r3, #4
 800edf2:	6031      	str	r1, [r6, #0]
 800edf4:	0606      	lsls	r6, r0, #24
 800edf6:	d501      	bpl.n	800edfc <_printf_i+0xbc>
 800edf8:	681d      	ldr	r5, [r3, #0]
 800edfa:	e003      	b.n	800ee04 <_printf_i+0xc4>
 800edfc:	0645      	lsls	r5, r0, #25
 800edfe:	d5fb      	bpl.n	800edf8 <_printf_i+0xb8>
 800ee00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee04:	2d00      	cmp	r5, #0
 800ee06:	da03      	bge.n	800ee10 <_printf_i+0xd0>
 800ee08:	232d      	movs	r3, #45	@ 0x2d
 800ee0a:	426d      	negs	r5, r5
 800ee0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee10:	4859      	ldr	r0, [pc, #356]	@ (800ef78 <_printf_i+0x238>)
 800ee12:	230a      	movs	r3, #10
 800ee14:	e011      	b.n	800ee3a <_printf_i+0xfa>
 800ee16:	6821      	ldr	r1, [r4, #0]
 800ee18:	6833      	ldr	r3, [r6, #0]
 800ee1a:	0608      	lsls	r0, r1, #24
 800ee1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee20:	d402      	bmi.n	800ee28 <_printf_i+0xe8>
 800ee22:	0649      	lsls	r1, r1, #25
 800ee24:	bf48      	it	mi
 800ee26:	b2ad      	uxthmi	r5, r5
 800ee28:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee2a:	4853      	ldr	r0, [pc, #332]	@ (800ef78 <_printf_i+0x238>)
 800ee2c:	6033      	str	r3, [r6, #0]
 800ee2e:	bf14      	ite	ne
 800ee30:	230a      	movne	r3, #10
 800ee32:	2308      	moveq	r3, #8
 800ee34:	2100      	movs	r1, #0
 800ee36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee3a:	6866      	ldr	r6, [r4, #4]
 800ee3c:	60a6      	str	r6, [r4, #8]
 800ee3e:	2e00      	cmp	r6, #0
 800ee40:	bfa2      	ittt	ge
 800ee42:	6821      	ldrge	r1, [r4, #0]
 800ee44:	f021 0104 	bicge.w	r1, r1, #4
 800ee48:	6021      	strge	r1, [r4, #0]
 800ee4a:	b90d      	cbnz	r5, 800ee50 <_printf_i+0x110>
 800ee4c:	2e00      	cmp	r6, #0
 800ee4e:	d04b      	beq.n	800eee8 <_printf_i+0x1a8>
 800ee50:	4616      	mov	r6, r2
 800ee52:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee56:	fb03 5711 	mls	r7, r3, r1, r5
 800ee5a:	5dc7      	ldrb	r7, [r0, r7]
 800ee5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee60:	462f      	mov	r7, r5
 800ee62:	42bb      	cmp	r3, r7
 800ee64:	460d      	mov	r5, r1
 800ee66:	d9f4      	bls.n	800ee52 <_printf_i+0x112>
 800ee68:	2b08      	cmp	r3, #8
 800ee6a:	d10b      	bne.n	800ee84 <_printf_i+0x144>
 800ee6c:	6823      	ldr	r3, [r4, #0]
 800ee6e:	07df      	lsls	r7, r3, #31
 800ee70:	d508      	bpl.n	800ee84 <_printf_i+0x144>
 800ee72:	6923      	ldr	r3, [r4, #16]
 800ee74:	6861      	ldr	r1, [r4, #4]
 800ee76:	4299      	cmp	r1, r3
 800ee78:	bfde      	ittt	le
 800ee7a:	2330      	movle	r3, #48	@ 0x30
 800ee7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee80:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee84:	1b92      	subs	r2, r2, r6
 800ee86:	6122      	str	r2, [r4, #16]
 800ee88:	f8cd a000 	str.w	sl, [sp]
 800ee8c:	464b      	mov	r3, r9
 800ee8e:	aa03      	add	r2, sp, #12
 800ee90:	4621      	mov	r1, r4
 800ee92:	4640      	mov	r0, r8
 800ee94:	f7ff fee6 	bl	800ec64 <_printf_common>
 800ee98:	3001      	adds	r0, #1
 800ee9a:	d14a      	bne.n	800ef32 <_printf_i+0x1f2>
 800ee9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eea0:	b004      	add	sp, #16
 800eea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eea6:	6823      	ldr	r3, [r4, #0]
 800eea8:	f043 0320 	orr.w	r3, r3, #32
 800eeac:	6023      	str	r3, [r4, #0]
 800eeae:	4833      	ldr	r0, [pc, #204]	@ (800ef7c <_printf_i+0x23c>)
 800eeb0:	2778      	movs	r7, #120	@ 0x78
 800eeb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eeb6:	6823      	ldr	r3, [r4, #0]
 800eeb8:	6831      	ldr	r1, [r6, #0]
 800eeba:	061f      	lsls	r7, r3, #24
 800eebc:	f851 5b04 	ldr.w	r5, [r1], #4
 800eec0:	d402      	bmi.n	800eec8 <_printf_i+0x188>
 800eec2:	065f      	lsls	r7, r3, #25
 800eec4:	bf48      	it	mi
 800eec6:	b2ad      	uxthmi	r5, r5
 800eec8:	6031      	str	r1, [r6, #0]
 800eeca:	07d9      	lsls	r1, r3, #31
 800eecc:	bf44      	itt	mi
 800eece:	f043 0320 	orrmi.w	r3, r3, #32
 800eed2:	6023      	strmi	r3, [r4, #0]
 800eed4:	b11d      	cbz	r5, 800eede <_printf_i+0x19e>
 800eed6:	2310      	movs	r3, #16
 800eed8:	e7ac      	b.n	800ee34 <_printf_i+0xf4>
 800eeda:	4827      	ldr	r0, [pc, #156]	@ (800ef78 <_printf_i+0x238>)
 800eedc:	e7e9      	b.n	800eeb2 <_printf_i+0x172>
 800eede:	6823      	ldr	r3, [r4, #0]
 800eee0:	f023 0320 	bic.w	r3, r3, #32
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	e7f6      	b.n	800eed6 <_printf_i+0x196>
 800eee8:	4616      	mov	r6, r2
 800eeea:	e7bd      	b.n	800ee68 <_printf_i+0x128>
 800eeec:	6833      	ldr	r3, [r6, #0]
 800eeee:	6825      	ldr	r5, [r4, #0]
 800eef0:	6961      	ldr	r1, [r4, #20]
 800eef2:	1d18      	adds	r0, r3, #4
 800eef4:	6030      	str	r0, [r6, #0]
 800eef6:	062e      	lsls	r6, r5, #24
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	d501      	bpl.n	800ef00 <_printf_i+0x1c0>
 800eefc:	6019      	str	r1, [r3, #0]
 800eefe:	e002      	b.n	800ef06 <_printf_i+0x1c6>
 800ef00:	0668      	lsls	r0, r5, #25
 800ef02:	d5fb      	bpl.n	800eefc <_printf_i+0x1bc>
 800ef04:	8019      	strh	r1, [r3, #0]
 800ef06:	2300      	movs	r3, #0
 800ef08:	6123      	str	r3, [r4, #16]
 800ef0a:	4616      	mov	r6, r2
 800ef0c:	e7bc      	b.n	800ee88 <_printf_i+0x148>
 800ef0e:	6833      	ldr	r3, [r6, #0]
 800ef10:	1d1a      	adds	r2, r3, #4
 800ef12:	6032      	str	r2, [r6, #0]
 800ef14:	681e      	ldr	r6, [r3, #0]
 800ef16:	6862      	ldr	r2, [r4, #4]
 800ef18:	2100      	movs	r1, #0
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	f7f1 f960 	bl	80001e0 <memchr>
 800ef20:	b108      	cbz	r0, 800ef26 <_printf_i+0x1e6>
 800ef22:	1b80      	subs	r0, r0, r6
 800ef24:	6060      	str	r0, [r4, #4]
 800ef26:	6863      	ldr	r3, [r4, #4]
 800ef28:	6123      	str	r3, [r4, #16]
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef30:	e7aa      	b.n	800ee88 <_printf_i+0x148>
 800ef32:	6923      	ldr	r3, [r4, #16]
 800ef34:	4632      	mov	r2, r6
 800ef36:	4649      	mov	r1, r9
 800ef38:	4640      	mov	r0, r8
 800ef3a:	47d0      	blx	sl
 800ef3c:	3001      	adds	r0, #1
 800ef3e:	d0ad      	beq.n	800ee9c <_printf_i+0x15c>
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	079b      	lsls	r3, r3, #30
 800ef44:	d413      	bmi.n	800ef6e <_printf_i+0x22e>
 800ef46:	68e0      	ldr	r0, [r4, #12]
 800ef48:	9b03      	ldr	r3, [sp, #12]
 800ef4a:	4298      	cmp	r0, r3
 800ef4c:	bfb8      	it	lt
 800ef4e:	4618      	movlt	r0, r3
 800ef50:	e7a6      	b.n	800eea0 <_printf_i+0x160>
 800ef52:	2301      	movs	r3, #1
 800ef54:	4632      	mov	r2, r6
 800ef56:	4649      	mov	r1, r9
 800ef58:	4640      	mov	r0, r8
 800ef5a:	47d0      	blx	sl
 800ef5c:	3001      	adds	r0, #1
 800ef5e:	d09d      	beq.n	800ee9c <_printf_i+0x15c>
 800ef60:	3501      	adds	r5, #1
 800ef62:	68e3      	ldr	r3, [r4, #12]
 800ef64:	9903      	ldr	r1, [sp, #12]
 800ef66:	1a5b      	subs	r3, r3, r1
 800ef68:	42ab      	cmp	r3, r5
 800ef6a:	dcf2      	bgt.n	800ef52 <_printf_i+0x212>
 800ef6c:	e7eb      	b.n	800ef46 <_printf_i+0x206>
 800ef6e:	2500      	movs	r5, #0
 800ef70:	f104 0619 	add.w	r6, r4, #25
 800ef74:	e7f5      	b.n	800ef62 <_printf_i+0x222>
 800ef76:	bf00      	nop
 800ef78:	0800f1a9 	.word	0x0800f1a9
 800ef7c:	0800f1ba 	.word	0x0800f1ba

0800ef80 <memmove>:
 800ef80:	4288      	cmp	r0, r1
 800ef82:	b510      	push	{r4, lr}
 800ef84:	eb01 0402 	add.w	r4, r1, r2
 800ef88:	d902      	bls.n	800ef90 <memmove+0x10>
 800ef8a:	4284      	cmp	r4, r0
 800ef8c:	4623      	mov	r3, r4
 800ef8e:	d807      	bhi.n	800efa0 <memmove+0x20>
 800ef90:	1e43      	subs	r3, r0, #1
 800ef92:	42a1      	cmp	r1, r4
 800ef94:	d008      	beq.n	800efa8 <memmove+0x28>
 800ef96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef9e:	e7f8      	b.n	800ef92 <memmove+0x12>
 800efa0:	4402      	add	r2, r0
 800efa2:	4601      	mov	r1, r0
 800efa4:	428a      	cmp	r2, r1
 800efa6:	d100      	bne.n	800efaa <memmove+0x2a>
 800efa8:	bd10      	pop	{r4, pc}
 800efaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efb2:	e7f7      	b.n	800efa4 <memmove+0x24>

0800efb4 <_sbrk_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4d06      	ldr	r5, [pc, #24]	@ (800efd0 <_sbrk_r+0x1c>)
 800efb8:	2300      	movs	r3, #0
 800efba:	4604      	mov	r4, r0
 800efbc:	4608      	mov	r0, r1
 800efbe:	602b      	str	r3, [r5, #0]
 800efc0:	f7f2 f822 	bl	8001008 <_sbrk>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	d102      	bne.n	800efce <_sbrk_r+0x1a>
 800efc8:	682b      	ldr	r3, [r5, #0]
 800efca:	b103      	cbz	r3, 800efce <_sbrk_r+0x1a>
 800efcc:	6023      	str	r3, [r4, #0]
 800efce:	bd38      	pop	{r3, r4, r5, pc}
 800efd0:	20000e20 	.word	0x20000e20

0800efd4 <__fpclassifyd>:
 800efd4:	ec51 0b10 	vmov	r0, r1, d0
 800efd8:	b510      	push	{r4, lr}
 800efda:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800efde:	460b      	mov	r3, r1
 800efe0:	d019      	beq.n	800f016 <__fpclassifyd+0x42>
 800efe2:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800efe6:	490e      	ldr	r1, [pc, #56]	@ (800f020 <__fpclassifyd+0x4c>)
 800efe8:	428a      	cmp	r2, r1
 800efea:	d90e      	bls.n	800f00a <__fpclassifyd+0x36>
 800efec:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800eff0:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800eff4:	428a      	cmp	r2, r1
 800eff6:	d908      	bls.n	800f00a <__fpclassifyd+0x36>
 800eff8:	4a0a      	ldr	r2, [pc, #40]	@ (800f024 <__fpclassifyd+0x50>)
 800effa:	4213      	tst	r3, r2
 800effc:	d007      	beq.n	800f00e <__fpclassifyd+0x3a>
 800effe:	4294      	cmp	r4, r2
 800f000:	d107      	bne.n	800f012 <__fpclassifyd+0x3e>
 800f002:	fab0 f080 	clz	r0, r0
 800f006:	0940      	lsrs	r0, r0, #5
 800f008:	bd10      	pop	{r4, pc}
 800f00a:	2004      	movs	r0, #4
 800f00c:	e7fc      	b.n	800f008 <__fpclassifyd+0x34>
 800f00e:	2003      	movs	r0, #3
 800f010:	e7fa      	b.n	800f008 <__fpclassifyd+0x34>
 800f012:	2000      	movs	r0, #0
 800f014:	e7f8      	b.n	800f008 <__fpclassifyd+0x34>
 800f016:	2800      	cmp	r0, #0
 800f018:	d1ee      	bne.n	800eff8 <__fpclassifyd+0x24>
 800f01a:	2002      	movs	r0, #2
 800f01c:	e7f4      	b.n	800f008 <__fpclassifyd+0x34>
 800f01e:	bf00      	nop
 800f020:	7fdfffff 	.word	0x7fdfffff
 800f024:	7ff00000 	.word	0x7ff00000

0800f028 <_realloc_r>:
 800f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02c:	4680      	mov	r8, r0
 800f02e:	4615      	mov	r5, r2
 800f030:	460c      	mov	r4, r1
 800f032:	b921      	cbnz	r1, 800f03e <_realloc_r+0x16>
 800f034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f038:	4611      	mov	r1, r2
 800f03a:	f7ff bc2f 	b.w	800e89c <_malloc_r>
 800f03e:	b92a      	cbnz	r2, 800f04c <_realloc_r+0x24>
 800f040:	f7ff fbc0 	bl	800e7c4 <_free_r>
 800f044:	2400      	movs	r4, #0
 800f046:	4620      	mov	r0, r4
 800f048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f04c:	f000 f81a 	bl	800f084 <_malloc_usable_size_r>
 800f050:	4285      	cmp	r5, r0
 800f052:	4606      	mov	r6, r0
 800f054:	d802      	bhi.n	800f05c <_realloc_r+0x34>
 800f056:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f05a:	d8f4      	bhi.n	800f046 <_realloc_r+0x1e>
 800f05c:	4629      	mov	r1, r5
 800f05e:	4640      	mov	r0, r8
 800f060:	f7ff fc1c 	bl	800e89c <_malloc_r>
 800f064:	4607      	mov	r7, r0
 800f066:	2800      	cmp	r0, #0
 800f068:	d0ec      	beq.n	800f044 <_realloc_r+0x1c>
 800f06a:	42b5      	cmp	r5, r6
 800f06c:	462a      	mov	r2, r5
 800f06e:	4621      	mov	r1, r4
 800f070:	bf28      	it	cs
 800f072:	4632      	movcs	r2, r6
 800f074:	f7ff fb46 	bl	800e704 <memcpy>
 800f078:	4621      	mov	r1, r4
 800f07a:	4640      	mov	r0, r8
 800f07c:	f7ff fba2 	bl	800e7c4 <_free_r>
 800f080:	463c      	mov	r4, r7
 800f082:	e7e0      	b.n	800f046 <_realloc_r+0x1e>

0800f084 <_malloc_usable_size_r>:
 800f084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f088:	1f18      	subs	r0, r3, #4
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	bfbc      	itt	lt
 800f08e:	580b      	ldrlt	r3, [r1, r0]
 800f090:	18c0      	addlt	r0, r0, r3
 800f092:	4770      	bx	lr

0800f094 <round>:
 800f094:	ec51 0b10 	vmov	r0, r1, d0
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f09e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800f0a2:	2a13      	cmp	r2, #19
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	4605      	mov	r5, r0
 800f0a8:	dc1b      	bgt.n	800f0e2 <round+0x4e>
 800f0aa:	2a00      	cmp	r2, #0
 800f0ac:	da0b      	bge.n	800f0c6 <round+0x32>
 800f0ae:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800f0b2:	3201      	adds	r2, #1
 800f0b4:	bf04      	itt	eq
 800f0b6:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800f0ba:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800f0be:	2200      	movs	r2, #0
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	e015      	b.n	800f0f2 <round+0x5e>
 800f0c6:	4c15      	ldr	r4, [pc, #84]	@ (800f11c <round+0x88>)
 800f0c8:	4114      	asrs	r4, r2
 800f0ca:	ea04 0601 	and.w	r6, r4, r1
 800f0ce:	4306      	orrs	r6, r0
 800f0d0:	d00f      	beq.n	800f0f2 <round+0x5e>
 800f0d2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800f0d6:	fa41 f202 	asr.w	r2, r1, r2
 800f0da:	4413      	add	r3, r2
 800f0dc:	ea23 0304 	bic.w	r3, r3, r4
 800f0e0:	e7ed      	b.n	800f0be <round+0x2a>
 800f0e2:	2a33      	cmp	r2, #51	@ 0x33
 800f0e4:	dd08      	ble.n	800f0f8 <round+0x64>
 800f0e6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800f0ea:	d102      	bne.n	800f0f2 <round+0x5e>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	f7f1 f8cd 	bl	800028c <__adddf3>
 800f0f2:	ec41 0b10 	vmov	d0, r0, r1
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
 800f0f8:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800f0fc:	f04f 34ff 	mov.w	r4, #4294967295
 800f100:	40f4      	lsrs	r4, r6
 800f102:	4204      	tst	r4, r0
 800f104:	d0f5      	beq.n	800f0f2 <round+0x5e>
 800f106:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800f10a:	2201      	movs	r2, #1
 800f10c:	408a      	lsls	r2, r1
 800f10e:	1952      	adds	r2, r2, r5
 800f110:	bf28      	it	cs
 800f112:	3301      	addcs	r3, #1
 800f114:	ea22 0204 	bic.w	r2, r2, r4
 800f118:	e7d2      	b.n	800f0c0 <round+0x2c>
 800f11a:	bf00      	nop
 800f11c:	000fffff 	.word	0x000fffff

0800f120 <_init>:
 800f120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f122:	bf00      	nop
 800f124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f126:	bc08      	pop	{r3}
 800f128:	469e      	mov	lr, r3
 800f12a:	4770      	bx	lr

0800f12c <_fini>:
 800f12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f12e:	bf00      	nop
 800f130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f132:	bc08      	pop	{r3}
 800f134:	469e      	mov	lr, r3
 800f136:	4770      	bx	lr
