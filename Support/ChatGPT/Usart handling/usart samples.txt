#define BUFFER_SIZE 1024

char buffer[BUFFER_SIZE];
volatile uint16_t head = 0; // Next write position
volatile uint16_t tail = 0; // Next read position

void USART_IRQHandler(void) {
    if (USART1->SR & USART_SR_RXNE) {
        char received_char = USART1->DR;
        
        // Store data in buffer if there's space
        uint16_t next_head = (head + 1) % BUFFER_SIZE;
        if (next_head != tail) { // Check for overflow
            buffer[head] = received_char;
            head = next_head; // Update head
        }
    }
}

void process_data(void) {
    while (tail != head) { // While there's data to process
        char data = buffer[tail];
        tail = (tail + 1) % BUFFER_SIZE; // Update tail
        // Process the data...
    }
}

// Main loop
int main(void) {
    // Initialize USART and other peripherals

    while (1) {
        process_data(); // Handle data processing
        // Other tasks...
    }
}
/******************************************************************************/
#include "stm32f4xx.h"  // Adjust according to your STM32 version

#define BUFFER_SIZE 1024

typedef struct {
    char buffer[BUFFER_SIZE];
    volatile uint16_t head; // Next write position
    volatile uint16_t tail; // Next read position
} CircularBuffer;

CircularBuffer rxBuffer = {{0}, 0, 0};

void USART1_IRQHandler(void) {
    if (USART1->SR & USART_SR_RXNE) { // Check if data is received
        char received_char = USART1->DR; // Read data

        // Check for buffer overflow
        uint16_t next_head = (rxBuffer.head + 1) % BUFFER_SIZE;
        if (next_head != rxBuffer.tail) { // Buffer not full
            rxBuffer.buffer[rxBuffer.head] = received_char;
            rxBuffer.head = next_head; // Update head
        } else {
            // Handle overflow (optional: log or set an error flag)
        }
    }

    // Handle errors
    if (USART1->SR & (USART_SR_ORE | USART_SR_FE)) {
        // Overrun or Framing Error occurred
        USART1->SR &= ~(USART_SR_ORE | USART_SR_FE); // Clear error flags
        // Optionally log or handle the error
    }
}

void process_data(void) {
    while (rxBuffer.tail != rxBuffer.head) { // While there's data to process
        char data = rxBuffer.buffer[rxBuffer.tail];
        rxBuffer.tail = (rxBuffer.tail + 1) % BUFFER_SIZE; // Update tail
        
        // Process the data (e.g., store, display, parse commands)
    }
}

int main(void) {
    // Initialize USART, configure GPIO, enable clocks, etc.

    // Enable USART RX interrupt
    USART1->CR1 |= USART_CR1_RXNEIE; // Enable RXNE interrupt
    NVIC_EnableIRQ(USART1_IRQn); // Enable USART1 IRQ in NVIC

    while (1) {
        process_data(); // Handle data processing
        // Other tasks...
    }
}

// USART initialization function
void USART_Init(void) {
    // Configure USART parameters: baud rate, word length, stop bits, etc.
}
/**********************************************************************************/
#include "stm32f4xx.h"  // Adjust according to your STM32 version

#define BUFFER_SIZE 1024
#define PROCESSING_BUFFER_SIZE 256

typedef struct {
    char buffer[BUFFER_SIZE];
    volatile uint16_t head; // Next write position
    volatile uint16_t tail; // Next read position
} CircularBuffer;

CircularBuffer rxBuffer = {{0}, 0, 0};
char processingBuffer[PROCESSING_BUFFER_SIZE]; // Buffer for processed data

void USART1_IRQHandler(void) {
    if (USART1->SR & USART_SR_RXNE) { // Check if data is received
        char received_char = USART1->DR; // Read data

        // Check for buffer overflow
        uint16_t next_head = (rxBuffer.head + 1) % BUFFER_SIZE;
        if (next_head != rxBuffer.tail) { // Buffer not full
            rxBuffer.buffer[rxBuffer.head] = received_char;
            rxBuffer.head = next_head; // Update head
        }
    }

    // Handle errors
    if (USART1->SR & (USART_SR_ORE | USART_SR_FE)) {
        USART1->SR &= ~(USART_SR_ORE | USART_SR_FE); // Clear error flags
    }
}

void flush_buffer(CircularBuffer* par) {
    par->head = par->tail; // Reset head and tail to the same position
    for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
        par->buffer[i] = 0; // Clear the buffer
    }
}

int detect_terminating_string(CircularBuffer* par, const char* term_str) {
    uint16_t term_len = strlen(term_str);
    if (term_len == 0 || term_len > BUFFER_SIZE) return 0; // Invalid term string

    // Check if the terminating string is present
    uint16_t check_pos = (par->tail + term_len - 1) % BUFFER_SIZE;
    for (int i = 0; i < term_len; i++) {
        if (par->buffer[(check_pos + i) % BUFFER_SIZE] != term_str[i]) {
            return 0; // Not found
        }
    }
    return 1; // Found
}

void process_received_data(void) {
    while (rxBuffer.tail != rxBuffer.head) { // While there's data to process
        if (detect_terminating_string(&rxBuffer, "\n")) { // Change "\n" to your desired terminating string
            // Copy data to processing buffer
            uint16_t length = (rxBuffer.head >= rxBuffer.tail) ? 
                (rxBuffer.head - rxBuffer.tail) : 
                (BUFFER_SIZE - rxBuffer.tail + rxBuffer.head);
                
            if (length > PROCESSING_BUFFER_SIZE - 1) {
                length = PROCESSING_BUFFER_SIZE - 1; // Prevent overflow
            }

            for (uint16_t i = 0; i < length; i++) {
                processingBuffer[i] = rxBuffer.buffer[(rxBuffer.tail + i) % BUFFER_SIZE];
            }
            processingBuffer[length] = '\0'; // Null-terminate for string processing
            
            // Reset the buffer after processing
            flush_buffer(&rxBuffer);
            
            // Process the data in processingBuffer
            // e.g., print, parse commands, etc.
        }
        rxBuffer.tail = (rxBuffer.tail + 1) % BUFFER_SIZE; // Move tail
    }
}

int main(void) {
    // Initialize USART, configure GPIO, enable clocks, etc.

    // Enable USART RX interrupt
    USART1->CR1 |= USART_CR1_RXNEIE; // Enable RXNE interrupt
    NVIC_EnableIRQ(USART1_IRQn); // Enable USART1 IRQ in NVIC

    while (1) {
        process_received_data(); // Handle data processing
        // Other tasks...
    }
}

// USART initialization function
void USART_Init(void) {
    // Configure USART parameters: baud rate, word length, stop bits, etc.
}
/**************************************************************************************/
