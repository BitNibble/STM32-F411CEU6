
void Timer_Init(TIM_TypeDef *TIMx, uint16_t prescaler, uint32_t auto_reload, bool enable_interrupt)
{
    // Set prescaler and auto-reload value
    TIMx->PSC = prescaler;
    TIMx->ARR = auto_reload;

    // Enable interrupt if required
    if (enable_interrupt)
    {
        TIMx->DIER |= TIM_DIER_UIE; // Update interrupt enable
        NVIC_EnableIRQ(TIMx_IRQn);  // Enable the IRQ for this timer
    }

    // Enable the timer
    TIMx->CR1 |= TIM_CR1_CEN;
}

void Timer_Enable(TIM_TypeDef *TIMx)
{
    TIMx->CR1 |= TIM_CR1_CEN; // Enable the timer
}

void Timer_Disable(TIM_TypeDef *TIMx)
{
    TIMx->CR1 &= ~TIM_CR1_CEN; // Disable the timer
}

void Timer_ConfigInterrupt(TIM_TypeDef *TIMx, uint32_t interrupt_type)
{
    TIMx->DIER |= interrupt_type;  // Enable specific interrupts (e.g., TIM_DIER_UIE for update interrupt)
    NVIC_EnableIRQ(TIMx_IRQn);     // Enable the IRQ for this timer
}

void Timer_SetCounter(TIM_TypeDef *TIMx, uint32_t counter_value)
{
    TIMx->CNT = counter_value; // Set the counter value
}

uint32_t Timer_GetCounter(TIM_TypeDef *TIMx)
{
    return TIMx->CNT; // Return the current counter value
}

void Timer_SetPWMMode(TIM_TypeDef *TIMx, uint32_t channel, uint32_t duty_cycle)
{
    // Configure the channel in PWM mode
    TIMx->CCMR1 |= TIM_CCMR1_OC1M_PWM1;  // PWM mode 1
    TIMx->CCER |= TIM_CCER_CC1E;         // Enable output on channel 1

    // Set duty cycle
    TIMx->CCR1 = duty_cycle;
}

Timer_Init(TIM2, 8000, 10000, true);  // Initialize TIM2 with prescaler and auto-reload, and enable interrupts
Timer_Enable(TIM2);                   // Start the timer
