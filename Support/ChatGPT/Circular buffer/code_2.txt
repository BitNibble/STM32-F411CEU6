#include <stdio.h>
#include <stdbool.h>
#include <string.h>

// Buffer structure definition
typedef struct {
    char *data;     // Externally provided data array
    int size;       // Current size (number of elements in the buffer)
    int capacity;   // Maximum capacity of the buffer (size of the provided vector)
    int head;       // Circular buffer head (start of data)
    int tail;       // Circular buffer tail (end of data)
} Buffer;

// Function prototypes
void buffer_init(Buffer *buf, char *vector, int capacity);
void buffer_push(Buffer *buf, char c);
char buffer_pop(Buffer *buf);
void buffer_flush(Buffer *buf);
void buffer_purge(Buffer *buf);
void buffer_paste(Buffer *buf, const char *str);
char* buffer_gets(Buffer *buf);
void buffer_puts(Buffer *buf, const char *str);

// Function to initialize the buffer with an externally provided vector
void buffer_init(Buffer *buf, char *vector, int capacity) {
    if (capacity <= 0 || vector == NULL) {
        // Invalid capacity or vector, do nothing
        return;
    }
    buf->data = vector;
    buf->size = 0;
    buf->capacity = capacity;
    buf->head = 0;
    buf->tail = 0;
    buf->data[0] = '\0';  // Ensure the buffer is NULL-terminated
}

// Function to push a character into the buffer
void buffer_push(Buffer *buf, char c) {
    if (buf == NULL || buf->size >= buf->capacity - 1) {
        // Buffer is full or invalid, do nothing
        return;
    }
    buf->data[buf->tail] = c;
    buf->tail = (buf->tail + 1) % buf->capacity;
    buf->size++;
    buf->data[buf->tail] = '\0';  // Always NULL-terminate
}

// Function to pop a character from the buffer (circular buffer behavior)
char buffer_pop(Buffer *buf) {
    if (buf == NULL || buf->size == 0) {
        // Buffer is empty or invalid, return a NULL character
        return '\0';
    }
    char c = buf->data[buf->head];
    buf->head = (buf->head + 1) % buf->capacity;
    buf->size--;
    return c;
}

// Function to flush the buffer (clear content but keep capacity)
void buffer_flush(Buffer *buf) {
    if (buf == NULL) {
        return;
    }
    buf->size = 0;
    buf->head = 0;
    buf->tail = 0;
    buf->data[0] = '\0';  // Ensure it's NULL-terminated
}

// Function to purge the buffer (reset content)
void buffer_purge(Buffer *buf) {
    if (buf == NULL) {
        return;
    }
    buffer_flush(buf);
}

// Function to paste a string into the buffer
void buffer_paste(Buffer *buf, const char *str) {
    if (buf == NULL || str == NULL) {
        return;
    }
    int len = strlen(str);
    if (len >= buf->capacity) {
        // Truncate string if it's larger than the buffer capacity
        len = buf->capacity - 1;
    }
    buffer_flush(buf);  // Clear the buffer before pasting
    for (int i = 0; i < len; i++) {
        buffer_push(buf, str[i]);
    }
}

// Function to retrieve the contents of the buffer as a string
char* buffer_gets(Buffer *buf) {
    if (buf == NULL) {
        return NULL;
    }
    return buf->data;
}

// Function to copy a string into the buffer
void buffer_puts(Buffer *buf, const char *str) {
    buffer_paste(buf, str);
}

// Example usage with static array
int main() {
    char static_buffer[20];  // Externally allocated array
    Buffer buf;

    // Initialize buffer with external array
    buffer_init(&buf, static_buffer, sizeof(static_buffer));

    // Push characters into the buffer
    buffer_push(&buf, 'H');
    buffer_push(&buf, 'e');
    buffer_push(&buf, 'l');
    buffer_push(&buf, 'l');
    buffer_push(&buf, 'o');

    // Print buffer content
    printf("Buffer content: %s\n", buffer_gets(&buf));

    // Pop one character
    printf("Popped: %c\n", buffer_pop(&buf));

    // Print buffer content after pop
    printf("Buffer content after pop: %s\n", buffer_gets(&buf));

    // Paste a string into the buffer
    buffer_puts(&buf, "World");

    // Print buffer content
    printf("Buffer content after paste: %s\n", buffer_gets(&buf));

    return 0;
}
