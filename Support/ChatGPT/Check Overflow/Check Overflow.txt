#include <stdint.h>
#include <stdbool.h>
#include <limits.h>

bool willMultiplicationOverflow(uint32_t a, uint32_t b) {
    if (a == 0 || b == 0) return false; // No overflow if either operand is 0
    return (a > UINT32_MAX / b);
}

bool willAdditionOverflow(uint32_t a, uint32_t b) {
    return (b > UINT32_MAX - a);
}

bool CalculateTimerParameters(uint32_t desiredTime_ms, uint32_t timerClock_Hz, uint32_t *prescaler, uint32_t *autoReloadValue) {
    // Calculate the timer period in seconds
    float desiredTime_s = desiredTime_ms / 1000.0f;

    // Check for potential overflow
    if (willMultiplicationOverflow(timerClock_Hz, (uint32_t)(desiredTime_ms))) {
        // Handle overflow, e.g., return an error or use a maximum ARR
        return false; // Overflow condition detected
    }

    // Calculate the base auto-reload value (ARR)
    *autoReloadValue = (timerClock_Hz * desiredTime_s) - 1;

    // Assuming a 16-bit timer
    const uint32_t maxARR = 0xFFFF;

    // Check if the calculated ARR exceeds maximum
    if (*autoReloadValue > maxARR) {
        // Handle ARR overflow (e.g., adjust prescaler)
        *prescaler = (*autoReloadValue / maxARR); 
        *autoReloadValue = *autoReloadValue / (*prescaler + 1) - 1;
    } else {
        *prescaler = 0; // No prescaler needed
    }

    return true; // Success
}

int main(void) {
    uint32_t prescaler;
    uint32_t autoReloadValue;

    if (!CalculateTimerParameters(5000, 84000000, &prescaler, &autoReloadValue)) {
        // Handle overflow error
    }
    
    // Timer configuration code...
}
