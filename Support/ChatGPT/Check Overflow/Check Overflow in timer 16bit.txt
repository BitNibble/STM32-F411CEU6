#include "stm32f4xx.h" // Include your STM32F4 header file
#include <stdint.h>
#include <stdbool.h>

typedef struct {
    uint32_t prescaler;
    uint32_t autoReloadValue;
} TimerConfig;

bool CalculateTimerParameters(uint32_t desiredTime_ms, uint32_t baseTimerClock_Hz, TimerConfig *config) {
    config->prescaler = 0; // Start with no prescaler
    uint32_t currentTimerClock_Hz = baseTimerClock_Hz;

    while (true) {
        // Calculate the timer period in seconds
        float desiredTime_s = desiredTime_ms / 1000.0f;

        // Calculate the auto-reload value (ARR)
        config->autoReloadValue = (uint32_t)(currentTimerClock_Hz * desiredTime_s) - 1;

        // Check for overflow (assuming a 16-bit timer)
        const uint32_t maxARR = 0xFFFF;

        if (config->autoReloadValue <= maxARR) {
            // No overflow, exit loop
            break;
        }

        // Adjust prescaler (divide timer clock frequency by 2)
        config->prescaler = (config->autoReloadValue % maxARR) + 1;
        currentTimerClock_Hz = baseTimerClock_Hz / config->prescaler;
    }

    return true; // Successful calculation
}

int main(void) {
    TimerConfig timerConfig;

    // Base timer clock of 84 MHz, desired time of 5000 ms
    if (CalculateTimerParameters(5000, 84000000, &timerConfig)) {
        // Configure your timer with the obtained parameters
        TIM_HandleTypeDef htim;
        htim.Instance = TIMx; // Replace with your timer instance
        htim.Init.Prescaler = timerConfig.prescaler;
        htim.Init.Period = timerConfig.autoReloadValue;
        // ... additional timer initialization code

        HAL_TIM_Base_Init(&htim);
        
        // Start your timer, etc.
    } else {
        // Handle failure to find suitable parameters
    }
}
/********************************************************************************************************************/
#include "stm32f4xx.h" // Include your STM32F4 header file
#include <stdint.h>
#include <stdbool.h>

typedef struct {
    uint32_t prescaler;
    uint32_t autoReloadValue;
} TimerConfig;

bool CalculateTimerParameters(uint32_t desiredTime_ms, uint32_t baseTimerClock_Hz, TimerConfig *config) {
    // Ensure the base timer clock is valid
    if (baseTimerClock_Hz == 0) {
        return false; // Invalid base timer clock frequency
    }

    // Convert desired time to seconds
    float desiredTime_s = desiredTime_ms / 1000.0f;

    // Calculate the target auto-reload value based on the desired time
    uint32_t targetARR = (uint32_t)(baseTimerClock_Hz * desiredTime_s) - 1;

    // Check for overflow (assuming a 16-bit timer)
    const uint32_t maxARR = 0xFFFF;

    // If the target ARR is within limits, set the prescaler to 0
    if (targetARR <= maxARR) {
        config->prescaler = 0; // No prescaler needed
        config->autoReloadValue = targetARR;
        return true; // Successful calculation
    }

    // Check if the calculation can yield a valid auto-reload value
    if ((baseTimerClock_Hz * desiredTime_s) % maxARR != 0) {
        return false; // Cannot achieve the desired timing configuration
    }

    // Calculate the required prescaler
    uint32_t requiredPrescaler = (baseTimerClock_Hz * desiredTime_s) / (maxARR + 1);

    // Check if the required prescaler exceeds the limit
    if (requiredPrescaler > 65535) {
        return false; // Indicate failure if the prescaler is too high
    }

    // Set the prescaler
    config->prescaler = requiredPrescaler;

    // Recalculate the timer clock frequency and auto-reload value
    uint32_t currentTimerClock_Hz = baseTimerClock_Hz / (config->prescaler + 1);
    config->autoReloadValue = (uint32_t)(currentTimerClock_Hz * desiredTime_s) - 1;

    // Final check for overflow
    if (config->autoReloadValue > maxARR) {
        return false; // Indicate failure if still exceeding
    }

    return true; // Successful calculation
}
/********************************************************************************************/
#include "stm32f4xx.h" // Include your STM32F4 header file
#include <stdint.h>
#include <stdbool.h>

typedef struct {
    uint32_t prescaler;
    uint32_t autoReloadValue;
} TimerConfig;

bool CalculateTimerParameters(uint32_t desiredFrequency_Hz, uint32_t baseTimerClock_Hz, TimerConfig *config) {
    // Ensure the base timer clock is valid
    if (baseTimerClock_Hz == 0 || desiredFrequency_Hz == 0) {
        return false; // Invalid base timer clock frequency or desired frequency
    }

    // Calculate the desired period in seconds
    float desiredPeriod_s = 1.0f / desiredFrequency_Hz;

    // Calculate the target auto-reload value based on the desired frequency
    uint32_t targetARR = (uint32_t)(baseTimerClock_Hz * desiredPeriod_s) - 1;

    // Check for overflow (assuming a 16-bit timer)
    const uint32_t maxARR = 0xFFFF;

    // If the target ARR is within limits, set the prescaler to 0
    if (targetARR <= maxARR) {
        config->prescaler = 0; // No prescaler needed
        config->autoReloadValue = targetARR;
        return true; // Successful calculation
    }

    // Calculate the required prescaler
    uint32_t requiredPrescaler = (baseTimerClock_Hz * desiredPeriod_s) / (maxARR + 1);

    // Check if the required prescaler exceeds the limit
    if (requiredPrescaler > 65535) {
        return false; // Indicate failure if the prescaler is too high
    }

    // Set the prescaler
    config->prescaler = requiredPrescaler;

    // Recalculate the timer clock frequency and auto-reload value
    uint32_t currentTimerClock_Hz = baseTimerClock_Hz / (config->prescaler + 1);
    config->autoReloadValue = (uint32_t)(currentTimerClock_Hz * desiredPeriod_s) - 1;

    // Final check for overflow
    if (config->autoReloadValue > maxARR) {
        return false; // Indicate failure if still exceeding
    }

    return true; // Successful calculation
}
/**************************************************************************************/
#include "stm32f4xx.h" // Include your STM32F4 header file
#include <stdint.h>
#include <stdbool.h>

typedef struct {
    uint32_t prescaler;       // Zero-based prescaler
    uint32_t autoReloadValue; // Auto-reload value
} TimerConfig;

bool CalculateTimerParameters(uint32_t desiredFrequency_Hz, uint32_t baseTimerClock_Hz, TimerConfig *config) {
    // Ensure the base timer clock and desired frequency are valid
    if (baseTimerClock_Hz == 0 || desiredFrequency_Hz == 0) {
        return false; // Invalid base timer clock frequency or desired frequency
    }

    // Calculate the desired period in seconds
    float desiredPeriod_s = 1.0f / desiredFrequency_Hz;

    // Calculate the target auto-reload value based on the desired frequency
    uint32_t targetARR = (uint32_t)(baseTimerClock_Hz * desiredPeriod_s) - 1;

    // Define max ARR for a 16-bit timer
    const uint32_t maxARR = 0xFFFF;

    // Calculate the required prescaler
    // Using integer division and ensuring we don't exceed the maxARR
    uint32_t prescaler = (targetARR / maxARR) + ((targetARR % maxARR) ? 1 : 0); // Increment if there's a remainder
    prescaler = (prescaler == 0) ? 0 : (prescaler - 1); // Adjust to zero-based

    // Calculate the auto-reload value based on the final prescaler
    uint32_t currentTimerClock_Hz = baseTimerClock_Hz / (prescaler + 1);
    uint32_t autoReloadValue = (uint32_t)(currentTimerClock_Hz * desiredPeriod_s) - 1;

    // Validate the auto-reload value
    bool isValid = (autoReloadValue <= maxARR);

    // Assign values to config
    config->prescaler = prescaler;
    config->autoReloadValue = isValid ? autoReloadValue : maxARR; // Ensure it's not exceeding maxARR

    return isValid; // Return true if the configuration is valid
}
/***********************************************************************************************************/
